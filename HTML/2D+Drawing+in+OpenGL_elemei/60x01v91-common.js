!function(global, factory) {
    if ("object" === typeof module && "object" === typeof module.exports) module.exports = global.document ? factory(global, true) : function(w) {
        if (!w.document) throw new Error("jQuery requires a window with a document");
        return factory(w);
    }; else factory(global);
}("undefined" !== typeof window ? window : this, function(window, noGlobal) {
    var deletedIds = [];
    var slice = deletedIds.slice;
    var concat = deletedIds.concat;
    var push = deletedIds.push;
    var indexOf = deletedIds.indexOf;
    var class2type = {};
    var toString = class2type.toString;
    var hasOwn = class2type.hasOwnProperty;
    var trim = "".trim;
    var support = {};
    var version = "1.11.0", jQuery = function(selector, context) {
        return new jQuery.fn.init(selector, context);
    }, rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, rmsPrefix = /^-ms-/, rdashAlpha = /-([\da-z])/gi, fcamelCase = function(all, letter) {
        return letter.toUpperCase();
    };
    jQuery.fn = jQuery.prototype = {
        "jquery": version,
        "constructor": jQuery,
        "selector": "",
        "length": 0,
        "toArray": function() {
            return slice.call(this);
        },
        "get": function(num) {
            return null != num ? num < 0 ? this[num + this.length] : this[num] : slice.call(this);
        },
        "pushStack": function(elems) {
            var ret = jQuery.merge(this.constructor(), elems);
            ret.prevObject = this;
            ret.context = this.context;
            return ret;
        },
        "each": function(callback, args) {
            return jQuery.each(this, callback, args);
        },
        "map": function(callback) {
            return this.pushStack(jQuery.map(this, function(elem, i) {
                return callback.call(elem, i, elem);
            }));
        },
        "slice": function() {
            return this.pushStack(slice.apply(this, arguments));
        },
        "first": function() {
            return this.eq(0);
        },
        "last": function() {
            return this.eq(-1);
        },
        "eq": function(i) {
            var len = this.length, j = +i + (i < 0 ? len : 0);
            return this.pushStack(j >= 0 && j < len ? [ this[j] ] : []);
        },
        "end": function() {
            return this.prevObject || this.constructor(null);
        },
        "push": push,
        "sort": deletedIds.sort,
        "splice": deletedIds.splice
    };
    jQuery.extend = jQuery.fn.extend = function() {
        var src, copyIsArray, copy, name, options, clone, target = arguments[0] || {}, i = 1, length = arguments.length, deep = false;
        if ("boolean" === typeof target) {
            deep = target;
            target = arguments[i] || {};
            i++;
        }
        if ("object" !== typeof target && !jQuery.isFunction(target)) target = {};
        if (i === length) {
            target = this;
            i--;
        }
        for (;i < length; i++) if (null != (options = arguments[i])) for (name in options) {
            src = target[name];
            copy = options[name];
            if (target === copy) continue;
            if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {
                if (copyIsArray) {
                    copyIsArray = false;
                    clone = src && jQuery.isArray(src) ? src : [];
                } else clone = src && jQuery.isPlainObject(src) ? src : {};
                target[name] = jQuery.extend(deep, clone, copy);
            } else if (void 0 !== copy) target[name] = copy;
        }
        return target;
    };
    jQuery.extend({
        "expando": "jQuery" + (version + Math.random()).replace(/\D/g, ""),
        "isReady": true,
        "error": function(msg) {
            throw new Error(msg);
        },
        "noop": function() {},
        "isFunction": function(obj) {
            return "function" === jQuery.type(obj);
        },
        "isArray": Array.isArray || function(obj) {
            return "array" === jQuery.type(obj);
        },
        "isWindow": function(obj) {
            return null != obj && obj == obj.window;
        },
        "isNumeric": function(obj) {
            return obj - parseFloat(obj) >= 0;
        },
        "isEmptyObject": function(obj) {
            var name;
            for (name in obj) return false;
            return true;
        },
        "isPlainObject": function(obj) {
            var key;
            if (!obj || "object" !== jQuery.type(obj) || obj.nodeType || jQuery.isWindow(obj)) return false;
            try {
                if (obj.constructor && !hasOwn.call(obj, "constructor") && !hasOwn.call(obj.constructor.prototype, "isPrototypeOf")) return false;
            } catch (e) {
                return false;
            }
            if (support.ownLast) for (key in obj) return hasOwn.call(obj, key);
            for (key in obj) ;
            return void 0 === key || hasOwn.call(obj, key);
        },
        "type": function(obj) {
            if (null == obj) return obj + "";
            return "object" === typeof obj || "function" === typeof obj ? class2type[toString.call(obj)] || "object" : typeof obj;
        },
        "globalEval": function(data) {
            if (data && jQuery.trim(data)) (window.execScript || function(data) {
                window["eval"].call(window, data);
            })(data);
        },
        "camelCase": function(string) {
            return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
        },
        "nodeName": function(elem, name) {
            return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
        },
        "each": function(obj, callback, args) {
            var value, i = 0, length = obj.length, isArray = isArraylike(obj);
            if (args) if (isArray) for (;i < length; i++) {
                value = callback.apply(obj[i], args);
                if (false === value) break;
            } else for (i in obj) {
                value = callback.apply(obj[i], args);
                if (false === value) break;
            } else if (isArray) for (;i < length; i++) {
                value = callback.call(obj[i], i, obj[i]);
                if (false === value) break;
            } else for (i in obj) {
                value = callback.call(obj[i], i, obj[i]);
                if (false === value) break;
            }
            return obj;
        },
        "trim": trim && !trim.call("\ufeff\xa0") ? function(text) {
            return null == text ? "" : trim.call(text);
        } : function(text) {
            return null == text ? "" : (text + "").replace(rtrim, "");
        },
        "makeArray": function(arr, results) {
            var ret = results || [];
            if (null != arr) if (isArraylike(Object(arr))) jQuery.merge(ret, "string" === typeof arr ? [ arr ] : arr); else push.call(ret, arr);
            return ret;
        },
        "inArray": function(elem, arr, i) {
            var len;
            if (arr) {
                if (indexOf) return indexOf.call(arr, elem, i);
                len = arr.length;
                i = i ? i < 0 ? Math.max(0, len + i) : i : 0;
                for (;i < len; i++) if (i in arr && arr[i] === elem) return i;
            }
            return -1;
        },
        "merge": function(first, second) {
            var len = +second.length, j = 0, i = first.length;
            while (j < len) first[i++] = second[j++];
            if (len !== len) while (void 0 !== second[j]) first[i++] = second[j++];
            first.length = i;
            return first;
        },
        "grep": function(elems, callback, invert) {
            var callbackInverse, matches = [], i = 0, length = elems.length, callbackExpect = !invert;
            for (;i < length; i++) {
                callbackInverse = !callback(elems[i], i);
                if (callbackInverse !== callbackExpect) matches.push(elems[i]);
            }
            return matches;
        },
        "map": function(elems, callback, arg) {
            var value, i = 0, length = elems.length, isArray = isArraylike(elems), ret = [];
            if (isArray) for (;i < length; i++) {
                value = callback(elems[i], i, arg);
                if (null != value) ret.push(value);
            } else for (i in elems) {
                value = callback(elems[i], i, arg);
                if (null != value) ret.push(value);
            }
            return concat.apply([], ret);
        },
        "guid": 1,
        "proxy": function(fn, context) {
            var args, proxy, tmp;
            if ("string" === typeof context) {
                tmp = fn[context];
                context = fn;
                fn = tmp;
            }
            if (!jQuery.isFunction(fn)) return void 0;
            args = slice.call(arguments, 2);
            proxy = function() {
                return fn.apply(context || this, args.concat(slice.call(arguments)));
            };
            proxy.guid = fn.guid = fn.guid || jQuery.guid++;
            return proxy;
        },
        "now": function() {
            return +new Date();
        },
        "support": support
    });
    jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
        class2type["[object " + name + "]"] = name.toLowerCase();
    });
    function isArraylike(obj) {
        var length = obj.length, type = jQuery.type(obj);
        if ("function" === type || jQuery.isWindow(obj)) return false;
        if (1 === obj.nodeType && length) return true;
        return "array" === type || 0 === length || "number" === typeof length && length > 0 && length - 1 in obj;
    }
    var Sizzle = function(window) {
        var i, support, Expr, getText, isXML, compile, outermostContext, sortInput, hasDuplicate, setDocument, document, docElem, documentIsHTML, rbuggyQSA, rbuggyMatches, matches, contains, expando = "sizzle" + -new Date(), preferredDoc = window.document, dirruns = 0, done = 0, classCache = createCache(), tokenCache = createCache(), compilerCache = createCache(), sortOrder = function(a, b) {
            if (a === b) hasDuplicate = true;
            return 0;
        }, strundefined = typeof void 0, MAX_NEGATIVE = 1 << 31, hasOwn = {}.hasOwnProperty, arr = [], pop = arr.pop, push_native = arr.push, push = arr.push, slice = arr.slice, indexOf = arr.indexOf || function(elem) {
            var i = 0, len = this.length;
            for (;i < len; i++) if (this[i] === elem) return i;
            return -1;
        }, booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped", whitespace = "[\\x20\\t\\r\\n\\f]", characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+", identifier = characterEncoding.replace("w", "w#"), attributes = "\\[" + whitespace + "*(" + characterEncoding + ")" + whitespace + "*(?:([*^$|!~]?=)" + whitespace + "*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|(" + identifier + ")|)|)" + whitespace + "*\\]", pseudos = ":(" + characterEncoding + ")(?:\\(((['\"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|" + attributes.replace(3, 8) + ")*)|.*)\\)|)", rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"), rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"), rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"), rattributeQuotes = new RegExp("=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g"), rpseudo = new RegExp(pseudos), ridentifier = new RegExp("^" + identifier + "$"), matchExpr = {
            "ID": new RegExp("^#(" + characterEncoding + ")"),
            "CLASS": new RegExp("^\\.(" + characterEncoding + ")"),
            "TAG": new RegExp("^(" + characterEncoding.replace("w", "w*") + ")"),
            "ATTR": new RegExp("^" + attributes),
            "PSEUDO": new RegExp("^" + pseudos),
            "CHILD": new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
            "bool": new RegExp("^(?:" + booleans + ")$", "i"),
            "needsContext": new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
        }, rinputs = /^(?:input|select|textarea|button)$/i, rheader = /^h\d$/i, rnative = /^[^{]+\{\s*\[native \w/, rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/, rsibling = /[+~]/, rescape = /'|\\/g, runescape = new RegExp("\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig"), funescape = function(_, escaped, escapedWhitespace) {
            var high = "0x" + escaped - 65536;
            return high !== high || escapedWhitespace ? escaped : high < 0 ? String.fromCharCode(high + 65536) : String.fromCharCode(high >> 10 | 55296, 1023 & high | 56320);
        };
        try {
            push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes);
            arr[preferredDoc.childNodes.length].nodeType;
        } catch (e) {
            push = {
                "apply": arr.length ? function(target, els) {
                    push_native.apply(target, slice.call(els));
                } : function(target, els) {
                    var j = target.length, i = 0;
                    while (target[j++] = els[i++]) ;
                    target.length = j - 1;
                }
            };
        }
        function Sizzle(selector, context, results, seed) {
            var match, elem, m, nodeType, i, groups, old, nid, newContext, newSelector;
            if ((context ? context.ownerDocument || context : preferredDoc) !== document) setDocument(context);
            context = context || document;
            results = results || [];
            if (!selector || "string" !== typeof selector) return results;
            if (1 !== (nodeType = context.nodeType) && 9 !== nodeType) return [];
            if (documentIsHTML && !seed) {
                if (match = rquickExpr.exec(selector)) if (m = match[1]) {
                    if (9 === nodeType) {
                        elem = context.getElementById(m);
                        if (elem && elem.parentNode) {
                            if (elem.id === m) {
                                results.push(elem);
                                return results;
                            }
                        } else return results;
                    } else if (context.ownerDocument && (elem = context.ownerDocument.getElementById(m)) && contains(context, elem) && elem.id === m) {
                        results.push(elem);
                        return results;
                    }
                } else if (match[2]) {
                    push.apply(results, context.getElementsByTagName(selector));
                    return results;
                } else if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {
                    push.apply(results, context.getElementsByClassName(m));
                    return results;
                }
                if (support.qsa && (!rbuggyQSA || !rbuggyQSA.test(selector))) {
                    nid = old = expando;
                    newContext = context;
                    newSelector = 9 === nodeType && selector;
                    if (1 === nodeType && "object" !== context.nodeName.toLowerCase()) {
                        groups = tokenize(selector);
                        if (old = context.getAttribute("id")) nid = old.replace(rescape, "\\$&"); else context.setAttribute("id", nid);
                        nid = "[id='" + nid + "'] ";
                        i = groups.length;
                        while (i--) groups[i] = nid + toSelector(groups[i]);
                        newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
                        newSelector = groups.join(",");
                    }
                    if (newSelector) try {
                        push.apply(results, newContext.querySelectorAll(newSelector));
                        return results;
                    } catch (qsaError) {} finally {
                        if (!old) context.removeAttribute("id");
                    }
                }
            }
            return select(selector.replace(rtrim, "$1"), context, results, seed);
        }
        function createCache() {
            var keys = [];
            function cache(key, value) {
                if (keys.push(key + " ") > Expr.cacheLength) delete cache[keys.shift()];
                return cache[key + " "] = value;
            }
            return cache;
        }
        function markFunction(fn) {
            fn[expando] = true;
            return fn;
        }
        function assert(fn) {
            var div = document.createElement("div");
            try {
                return !!fn(div);
            } catch (e) {
                return false;
            } finally {
                if (div.parentNode) div.parentNode.removeChild(div);
                div = null;
            }
        }
        function addHandle(attrs, handler) {
            var arr = attrs.split("|"), i = attrs.length;
            while (i--) Expr.attrHandle[arr[i]] = handler;
        }
        function siblingCheck(a, b) {
            var cur = b && a, diff = cur && 1 === a.nodeType && 1 === b.nodeType && (~b.sourceIndex || MAX_NEGATIVE) - (~a.sourceIndex || MAX_NEGATIVE);
            if (diff) return diff;
            if (cur) while (cur = cur.nextSibling) if (cur === b) return -1;
            return a ? 1 : -1;
        }
        function createInputPseudo(type) {
            return function(elem) {
                var name = elem.nodeName.toLowerCase();
                return "input" === name && elem.type === type;
            };
        }
        function createButtonPseudo(type) {
            return function(elem) {
                var name = elem.nodeName.toLowerCase();
                return ("input" === name || "button" === name) && elem.type === type;
            };
        }
        function createPositionalPseudo(fn) {
            return markFunction(function(argument) {
                argument = +argument;
                return markFunction(function(seed, matches) {
                    var j, matchIndexes = fn([], seed.length, argument), i = matchIndexes.length;
                    while (i--) if (seed[j = matchIndexes[i]]) seed[j] = !(matches[j] = seed[j]);
                });
            });
        }
        function testContext(context) {
            return context && typeof context.getElementsByTagName !== strundefined && context;
        }
        support = Sizzle.support = {};
        isXML = Sizzle.isXML = function(elem) {
            var documentElement = elem && (elem.ownerDocument || elem).documentElement;
            return documentElement ? "HTML" !== documentElement.nodeName : false;
        };
        setDocument = Sizzle.setDocument = function(node) {
            var hasCompare, doc = node ? node.ownerDocument || node : preferredDoc, parent = doc.defaultView;
            if (doc === document || 9 !== doc.nodeType || !doc.documentElement) return document;
            document = doc;
            docElem = doc.documentElement;
            documentIsHTML = !isXML(doc);
            if (parent && parent !== parent.top) if (parent.addEventListener) parent.addEventListener("unload", function() {
                setDocument();
            }, false); else if (parent.attachEvent) parent.attachEvent("onunload", function() {
                setDocument();
            });
            support.attributes = assert(function(div) {
                div.className = "i";
                return !div.getAttribute("className");
            });
            support.getElementsByTagName = assert(function(div) {
                div.appendChild(doc.createComment(""));
                return !div.getElementsByTagName("*").length;
            });
            support.getElementsByClassName = rnative.test(doc.getElementsByClassName) && assert(function(div) {
                div.innerHTML = "<div class='a'></div><div class='a i'></div>";
                div.firstChild.className = "i";
                return 2 === div.getElementsByClassName("i").length;
            });
            support.getById = assert(function(div) {
                docElem.appendChild(div).id = expando;
                return !doc.getElementsByName || !doc.getElementsByName(expando).length;
            });
            if (support.getById) {
                Expr.find["ID"] = function(id, context) {
                    if (typeof context.getElementById !== strundefined && documentIsHTML) {
                        var m = context.getElementById(id);
                        return m && m.parentNode ? [ m ] : [];
                    }
                };
                Expr.filter["ID"] = function(id) {
                    var attrId = id.replace(runescape, funescape);
                    return function(elem) {
                        return elem.getAttribute("id") === attrId;
                    };
                };
            } else {
                delete Expr.find["ID"];
                Expr.filter["ID"] = function(id) {
                    var attrId = id.replace(runescape, funescape);
                    return function(elem) {
                        var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode("id");
                        return node && node.value === attrId;
                    };
                };
            }
            Expr.find["TAG"] = support.getElementsByTagName ? function(tag, context) {
                if (typeof context.getElementsByTagName !== strundefined) return context.getElementsByTagName(tag);
            } : function(tag, context) {
                var elem, tmp = [], i = 0, results = context.getElementsByTagName(tag);
                if ("*" === tag) {
                    while (elem = results[i++]) if (1 === elem.nodeType) tmp.push(elem);
                    return tmp;
                }
                return results;
            };
            Expr.find["CLASS"] = support.getElementsByClassName && function(className, context) {
                if (typeof context.getElementsByClassName !== strundefined && documentIsHTML) return context.getElementsByClassName(className);
            };
            rbuggyMatches = [];
            rbuggyQSA = [];
            if (support.qsa = rnative.test(doc.querySelectorAll)) {
                assert(function(div) {
                    div.innerHTML = "<select t=''><option selected=''></option></select>";
                    if (div.querySelectorAll("[t^='']").length) rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")");
                    if (!div.querySelectorAll("[selected]").length) rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
                    if (!div.querySelectorAll(":checked").length) rbuggyQSA.push(":checked");
                });
                assert(function(div) {
                    var input = doc.createElement("input");
                    input.setAttribute("type", "hidden");
                    div.appendChild(input).setAttribute("name", "D");
                    if (div.querySelectorAll("[name=d]").length) rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");
                    if (!div.querySelectorAll(":enabled").length) rbuggyQSA.push(":enabled", ":disabled");
                    div.querySelectorAll("*,:x");
                    rbuggyQSA.push(",.*:");
                });
            }
            if (support.matchesSelector = rnative.test(matches = docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) assert(function(div) {
                support.disconnectedMatch = matches.call(div, "div");
                matches.call(div, "[s!='']:x");
                rbuggyMatches.push("!=", pseudos);
            });
            rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
            rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));
            hasCompare = rnative.test(docElem.compareDocumentPosition);
            contains = hasCompare || rnative.test(docElem.contains) ? function(a, b) {
                var adown = 9 === a.nodeType ? a.documentElement : a, bup = b && b.parentNode;
                return a === bup || !!(bup && 1 === bup.nodeType && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && 16 & a.compareDocumentPosition(bup)));
            } : function(a, b) {
                if (b) while (b = b.parentNode) if (b === a) return true;
                return false;
            };
            sortOrder = hasCompare ? function(a, b) {
                if (a === b) {
                    hasDuplicate = true;
                    return 0;
                }
                var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
                if (compare) return compare;
                compare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : 1;
                if (1 & compare || !support.sortDetached && b.compareDocumentPosition(a) === compare) {
                    if (a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) return -1;
                    if (b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) return 1;
                    return sortInput ? indexOf.call(sortInput, a) - indexOf.call(sortInput, b) : 0;
                }
                return 4 & compare ? -1 : 1;
            } : function(a, b) {
                if (a === b) {
                    hasDuplicate = true;
                    return 0;
                }
                var cur, i = 0, aup = a.parentNode, bup = b.parentNode, ap = [ a ], bp = [ b ];
                if (!aup || !bup) return a === doc ? -1 : b === doc ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf.call(sortInput, a) - indexOf.call(sortInput, b) : 0; else if (aup === bup) return siblingCheck(a, b);
                cur = a;
                while (cur = cur.parentNode) ap.unshift(cur);
                cur = b;
                while (cur = cur.parentNode) bp.unshift(cur);
                while (ap[i] === bp[i]) i++;
                return i ? siblingCheck(ap[i], bp[i]) : ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;
            };
            return doc;
        };
        Sizzle.matches = function(expr, elements) {
            return Sizzle(expr, null, null, elements);
        };
        Sizzle.matchesSelector = function(elem, expr) {
            if ((elem.ownerDocument || elem) !== document) setDocument(elem);
            expr = expr.replace(rattributeQuotes, "='$1']");
            if (support.matchesSelector && documentIsHTML && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) try {
                var ret = matches.call(elem, expr);
                if (ret || support.disconnectedMatch || elem.document && 11 !== elem.document.nodeType) return ret;
            } catch (e) {}
            return Sizzle(expr, document, null, [ elem ]).length > 0;
        };
        Sizzle.contains = function(context, elem) {
            if ((context.ownerDocument || context) !== document) setDocument(context);
            return contains(context, elem);
        };
        Sizzle.attr = function(elem, name) {
            if ((elem.ownerDocument || elem) !== document) setDocument(elem);
            var fn = Expr.attrHandle[name.toLowerCase()], val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : void 0;
            return void 0 !== val ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
        };
        Sizzle.error = function(msg) {
            throw new Error("Syntax error, unrecognized expression: " + msg);
        };
        Sizzle.uniqueSort = function(results) {
            var elem, duplicates = [], j = 0, i = 0;
            hasDuplicate = !support.detectDuplicates;
            sortInput = !support.sortStable && results.slice(0);
            results.sort(sortOrder);
            if (hasDuplicate) {
                while (elem = results[i++]) if (elem === results[i]) j = duplicates.push(i);
                while (j--) results.splice(duplicates[j], 1);
            }
            sortInput = null;
            return results;
        };
        getText = Sizzle.getText = function(elem) {
            var node, ret = "", i = 0, nodeType = elem.nodeType;
            if (!nodeType) while (node = elem[i++]) ret += getText(node); else if (1 === nodeType || 9 === nodeType || 11 === nodeType) if ("string" === typeof elem.textContent) return elem.textContent; else for (elem = elem.firstChild; elem; elem = elem.nextSibling) ret += getText(elem); else if (3 === nodeType || 4 === nodeType) return elem.nodeValue;
            return ret;
        };
        Expr = Sizzle.selectors = {
            "cacheLength": 50,
            "createPseudo": markFunction,
            "match": matchExpr,
            "attrHandle": {},
            "find": {},
            "relative": {
                ">": {
                    "dir": "parentNode",
                    "first": true
                },
                " ": {
                    "dir": "parentNode"
                },
                "+": {
                    "dir": "previousSibling",
                    "first": true
                },
                "~": {
                    "dir": "previousSibling"
                }
            },
            "preFilter": {
                "ATTR": function(match) {
                    match[1] = match[1].replace(runescape, funescape);
                    match[3] = (match[4] || match[5] || "").replace(runescape, funescape);
                    if ("~=" === match[2]) match[3] = " " + match[3] + " ";
                    return match.slice(0, 4);
                },
                "CHILD": function(match) {
                    match[1] = match[1].toLowerCase();
                    if ("nth" === match[1].slice(0, 3)) {
                        if (!match[3]) Sizzle.error(match[0]);
                        match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * ("even" === match[3] || "odd" === match[3]));
                        match[5] = +(match[7] + match[8] || "odd" === match[3]);
                    } else if (match[3]) Sizzle.error(match[0]);
                    return match;
                },
                "PSEUDO": function(match) {
                    var excess, unquoted = !match[5] && match[2];
                    if (matchExpr["CHILD"].test(match[0])) return null;
                    if (match[3] && void 0 !== match[4]) match[2] = match[4]; else if (unquoted && rpseudo.test(unquoted) && (excess = tokenize(unquoted, true)) && (excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {
                        match[0] = match[0].slice(0, excess);
                        match[2] = unquoted.slice(0, excess);
                    }
                    return match.slice(0, 3);
                }
            },
            "filter": {
                "TAG": function(nodeNameSelector) {
                    var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
                    return "*" === nodeNameSelector ? function() {
                        return true;
                    } : function(elem) {
                        return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
                    };
                },
                "CLASS": function(className) {
                    var pattern = classCache[className + " "];
                    return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function(elem) {
                        return pattern.test("string" === typeof elem.className && elem.className || typeof elem.getAttribute !== strundefined && elem.getAttribute("class") || "");
                    });
                },
                "ATTR": function(name, operator, check) {
                    return function(elem) {
                        var result = Sizzle.attr(elem, name);
                        if (null == result) return "!=" === operator;
                        if (!operator) return true;
                        result += "";
                        return "=" === operator ? result === check : "!=" === operator ? result !== check : "^=" === operator ? check && 0 === result.indexOf(check) : "*=" === operator ? check && result.indexOf(check) > -1 : "$=" === operator ? check && result.slice(-check.length) === check : "~=" === operator ? (" " + result + " ").indexOf(check) > -1 : "|=" === operator ? result === check || result.slice(0, check.length + 1) === check + "-" : false;
                    };
                },
                "CHILD": function(type, what, argument, first, last) {
                    var simple = "nth" !== type.slice(0, 3), forward = "last" !== type.slice(-4), ofType = "of-type" === what;
                    return 1 === first && 0 === last ? function(elem) {
                        return !!elem.parentNode;
                    } : function(elem, context, xml) {
                        var cache, outerCache, node, diff, nodeIndex, start, dir = simple !== forward ? "nextSibling" : "previousSibling", parent = elem.parentNode, name = ofType && elem.nodeName.toLowerCase(), useCache = !xml && !ofType;
                        if (parent) {
                            if (simple) {
                                while (dir) {
                                    node = elem;
                                    while (node = node[dir]) if (ofType ? node.nodeName.toLowerCase() === name : 1 === node.nodeType) return false;
                                    start = dir = "only" === type && !start && "nextSibling";
                                }
                                return true;
                            }
                            start = [ forward ? parent.firstChild : parent.lastChild ];
                            if (forward && useCache) {
                                outerCache = parent[expando] || (parent[expando] = {});
                                cache = outerCache[type] || [];
                                nodeIndex = cache[0] === dirruns && cache[1];
                                diff = cache[0] === dirruns && cache[2];
                                node = nodeIndex && parent.childNodes[nodeIndex];
                                while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) if (1 === node.nodeType && ++diff && node === elem) {
                                    outerCache[type] = [ dirruns, nodeIndex, diff ];
                                    break;
                                }
                            } else if (useCache && (cache = (elem[expando] || (elem[expando] = {}))[type]) && cache[0] === dirruns) diff = cache[1]; else while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) if ((ofType ? node.nodeName.toLowerCase() === name : 1 === node.nodeType) && ++diff) {
                                if (useCache) (node[expando] || (node[expando] = {}))[type] = [ dirruns, diff ];
                                if (node === elem) break;
                            }
                            diff -= last;
                            return diff === first || diff % first === 0 && diff / first >= 0;
                        }
                    };
                },
                "PSEUDO": function(pseudo, argument) {
                    var args, fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo);
                    if (fn[expando]) return fn(argument);
                    if (fn.length > 1) {
                        args = [ pseudo, pseudo, "", argument ];
                        return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function(seed, matches) {
                            var idx, matched = fn(seed, argument), i = matched.length;
                            while (i--) {
                                idx = indexOf.call(seed, matched[i]);
                                seed[idx] = !(matches[idx] = matched[i]);
                            }
                        }) : function(elem) {
                            return fn(elem, 0, args);
                        };
                    }
                    return fn;
                }
            },
            "pseudos": {
                "not": markFunction(function(selector) {
                    var input = [], results = [], matcher = compile(selector.replace(rtrim, "$1"));
                    return matcher[expando] ? markFunction(function(seed, matches, context, xml) {
                        var elem, unmatched = matcher(seed, null, xml, []), i = seed.length;
                        while (i--) if (elem = unmatched[i]) seed[i] = !(matches[i] = elem);
                    }) : function(elem, context, xml) {
                        input[0] = elem;
                        matcher(input, null, xml, results);
                        return !results.pop();
                    };
                }),
                "has": markFunction(function(selector) {
                    return function(elem) {
                        return Sizzle(selector, elem).length > 0;
                    };
                }),
                "contains": markFunction(function(text) {
                    return function(elem) {
                        return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;
                    };
                }),
                "lang": markFunction(function(lang) {
                    if (!ridentifier.test(lang || "")) Sizzle.error("unsupported lang: " + lang);
                    lang = lang.replace(runescape, funescape).toLowerCase();
                    return function(elem) {
                        var elemLang;
                        do if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {
                            elemLang = elemLang.toLowerCase();
                            return elemLang === lang || 0 === elemLang.indexOf(lang + "-");
                        } while ((elem = elem.parentNode) && 1 === elem.nodeType);
                        return false;
                    };
                }),
                "target": function(elem) {
                    var hash = window.location && window.location.hash;
                    return hash && hash.slice(1) === elem.id;
                },
                "root": function(elem) {
                    return elem === docElem;
                },
                "focus": function(elem) {
                    return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
                },
                "enabled": function(elem) {
                    return false === elem.disabled;
                },
                "disabled": function(elem) {
                    return true === elem.disabled;
                },
                "checked": function(elem) {
                    var nodeName = elem.nodeName.toLowerCase();
                    return "input" === nodeName && !!elem.checked || "option" === nodeName && !!elem.selected;
                },
                "selected": function(elem) {
                    if (elem.parentNode) elem.parentNode.selectedIndex;
                    return true === elem.selected;
                },
                "empty": function(elem) {
                    for (elem = elem.firstChild; elem; elem = elem.nextSibling) if (elem.nodeType < 6) return false;
                    return true;
                },
                "parent": function(elem) {
                    return !Expr.pseudos["empty"](elem);
                },
                "header": function(elem) {
                    return rheader.test(elem.nodeName);
                },
                "input": function(elem) {
                    return rinputs.test(elem.nodeName);
                },
                "button": function(elem) {
                    var name = elem.nodeName.toLowerCase();
                    return "input" === name && "button" === elem.type || "button" === name;
                },
                "text": function(elem) {
                    var attr;
                    return "input" === elem.nodeName.toLowerCase() && "text" === elem.type && (null == (attr = elem.getAttribute("type")) || "text" === attr.toLowerCase());
                },
                "first": createPositionalPseudo(function() {
                    return [ 0 ];
                }),
                "last": createPositionalPseudo(function(matchIndexes, length) {
                    return [ length - 1 ];
                }),
                "eq": createPositionalPseudo(function(matchIndexes, length, argument) {
                    return [ argument < 0 ? argument + length : argument ];
                }),
                "even": createPositionalPseudo(function(matchIndexes, length) {
                    var i = 0;
                    for (;i < length; i += 2) matchIndexes.push(i);
                    return matchIndexes;
                }),
                "odd": createPositionalPseudo(function(matchIndexes, length) {
                    var i = 1;
                    for (;i < length; i += 2) matchIndexes.push(i);
                    return matchIndexes;
                }),
                "lt": createPositionalPseudo(function(matchIndexes, length, argument) {
                    var i = argument < 0 ? argument + length : argument;
                    for (;--i >= 0; ) matchIndexes.push(i);
                    return matchIndexes;
                }),
                "gt": createPositionalPseudo(function(matchIndexes, length, argument) {
                    var i = argument < 0 ? argument + length : argument;
                    for (;++i < length; ) matchIndexes.push(i);
                    return matchIndexes;
                })
            }
        };
        Expr.pseudos["nth"] = Expr.pseudos["eq"];
        for (i in {
            "radio": true,
            "checkbox": true,
            "file": true,
            "password": true,
            "image": true
        }) Expr.pseudos[i] = createInputPseudo(i);
        for (i in {
            "submit": true,
            "reset": true
        }) Expr.pseudos[i] = createButtonPseudo(i);
        function setFilters() {}
        setFilters.prototype = Expr.filters = Expr.pseudos;
        Expr.setFilters = new setFilters();
        function tokenize(selector, parseOnly) {
            var matched, match, tokens, type, soFar, groups, preFilters, cached = tokenCache[selector + " "];
            if (cached) return parseOnly ? 0 : cached.slice(0);
            soFar = selector;
            groups = [];
            preFilters = Expr.preFilter;
            while (soFar) {
                if (!matched || (match = rcomma.exec(soFar))) {
                    if (match) soFar = soFar.slice(match[0].length) || soFar;
                    groups.push(tokens = []);
                }
                matched = false;
                if (match = rcombinators.exec(soFar)) {
                    matched = match.shift();
                    tokens.push({
                        "value": matched,
                        "type": match[0].replace(rtrim, " ")
                    });
                    soFar = soFar.slice(matched.length);
                }
                for (type in Expr.filter) if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
                    matched = match.shift();
                    tokens.push({
                        "value": matched,
                        "type": type,
                        "matches": match
                    });
                    soFar = soFar.slice(matched.length);
                }
                if (!matched) break;
            }
            return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : tokenCache(selector, groups).slice(0);
        }
        function toSelector(tokens) {
            var i = 0, len = tokens.length, selector = "";
            for (;i < len; i++) selector += tokens[i].value;
            return selector;
        }
        function addCombinator(matcher, combinator, base) {
            var dir = combinator.dir, checkNonElements = base && "parentNode" === dir, doneName = done++;
            return combinator.first ? function(elem, context, xml) {
                while (elem = elem[dir]) if (1 === elem.nodeType || checkNonElements) return matcher(elem, context, xml);
            } : function(elem, context, xml) {
                var oldCache, outerCache, newCache = [ dirruns, doneName ];
                if (xml) {
                    while (elem = elem[dir]) if (1 === elem.nodeType || checkNonElements) if (matcher(elem, context, xml)) return true;
                } else while (elem = elem[dir]) if (1 === elem.nodeType || checkNonElements) {
                    outerCache = elem[expando] || (elem[expando] = {});
                    if ((oldCache = outerCache[dir]) && oldCache[0] === dirruns && oldCache[1] === doneName) return newCache[2] = oldCache[2]; else {
                        outerCache[dir] = newCache;
                        if (newCache[2] = matcher(elem, context, xml)) return true;
                    }
                }
            };
        }
        function elementMatcher(matchers) {
            return matchers.length > 1 ? function(elem, context, xml) {
                var i = matchers.length;
                while (i--) if (!matchers[i](elem, context, xml)) return false;
                return true;
            } : matchers[0];
        }
        function condense(unmatched, map, filter, context, xml) {
            var elem, newUnmatched = [], i = 0, len = unmatched.length, mapped = null != map;
            for (;i < len; i++) if (elem = unmatched[i]) if (!filter || filter(elem, context, xml)) {
                newUnmatched.push(elem);
                if (mapped) map.push(i);
            }
            return newUnmatched;
        }
        function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
            if (postFilter && !postFilter[expando]) postFilter = setMatcher(postFilter);
            if (postFinder && !postFinder[expando]) postFinder = setMatcher(postFinder, postSelector);
            return markFunction(function(seed, results, context, xml) {
                var temp, i, elem, preMap = [], postMap = [], preexisting = results.length, elems = seed || multipleContexts(selector || "*", context.nodeType ? [ context ] : context, []), matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems, matcherOut = matcher ? postFinder || (seed ? preFilter : preexisting || postFilter) ? [] : results : matcherIn;
                if (matcher) matcher(matcherIn, matcherOut, context, xml);
                if (postFilter) {
                    temp = condense(matcherOut, postMap);
                    postFilter(temp, [], context, xml);
                    i = temp.length;
                    while (i--) if (elem = temp[i]) matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
                }
                if (seed) {
                    if (postFinder || preFilter) {
                        if (postFinder) {
                            temp = [];
                            i = matcherOut.length;
                            while (i--) if (elem = matcherOut[i]) temp.push(matcherIn[i] = elem);
                            postFinder(null, matcherOut = [], temp, xml);
                        }
                        i = matcherOut.length;
                        while (i--) if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf.call(seed, elem) : preMap[i]) > -1) seed[temp] = !(results[temp] = elem);
                    }
                } else {
                    matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
                    if (postFinder) postFinder(null, results, matcherOut, xml); else push.apply(results, matcherOut);
                }
            });
        }
        function matcherFromTokens(tokens) {
            var checkContext, matcher, j, len = tokens.length, leadingRelative = Expr.relative[tokens[0].type], implicitRelative = leadingRelative || Expr.relative[" "], i = leadingRelative ? 1 : 0, matchContext = addCombinator(function(elem) {
                return elem === checkContext;
            }, implicitRelative, true), matchAnyContext = addCombinator(function(elem) {
                return indexOf.call(checkContext, elem) > -1;
            }, implicitRelative, true), matchers = [ function(elem, context, xml) {
                return !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
            } ];
            for (;i < len; i++) if (matcher = Expr.relative[tokens[i].type]) matchers = [ addCombinator(elementMatcher(matchers), matcher) ]; else {
                matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);
                if (matcher[expando]) {
                    j = ++i;
                    for (;j < len; j++) if (Expr.relative[tokens[j].type]) break;
                    return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(tokens.slice(0, i - 1).concat({
                        "value": " " === tokens[i - 2].type ? "*" : ""
                    })).replace(rtrim, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));
                }
                matchers.push(matcher);
            }
            return elementMatcher(matchers);
        }
        function matcherFromGroupMatchers(elementMatchers, setMatchers) {
            var bySet = setMatchers.length > 0, byElement = elementMatchers.length > 0, superMatcher = function(seed, context, xml, results, outermost) {
                var elem, j, matcher, matchedCount = 0, i = "0", unmatched = seed && [], setMatched = [], contextBackup = outermostContext, elems = seed || byElement && Expr.find["TAG"]("*", outermost), dirrunsUnique = dirruns += null == contextBackup ? 1 : Math.random() || .1, len = elems.length;
                if (outermost) outermostContext = context !== document && context;
                for (;i !== len && null != (elem = elems[i]); i++) {
                    if (byElement && elem) {
                        j = 0;
                        while (matcher = elementMatchers[j++]) if (matcher(elem, context, xml)) {
                            results.push(elem);
                            break;
                        }
                        if (outermost) dirruns = dirrunsUnique;
                    }
                    if (bySet) {
                        if (elem = !matcher && elem) matchedCount--;
                        if (seed) unmatched.push(elem);
                    }
                }
                matchedCount += i;
                if (bySet && i !== matchedCount) {
                    j = 0;
                    while (matcher = setMatchers[j++]) matcher(unmatched, setMatched, context, xml);
                    if (seed) {
                        if (matchedCount > 0) while (i--) if (!(unmatched[i] || setMatched[i])) setMatched[i] = pop.call(results);
                        setMatched = condense(setMatched);
                    }
                    push.apply(results, setMatched);
                    if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) Sizzle.uniqueSort(results);
                }
                if (outermost) {
                    dirruns = dirrunsUnique;
                    outermostContext = contextBackup;
                }
                return unmatched;
            };
            return bySet ? markFunction(superMatcher) : superMatcher;
        }
        compile = Sizzle.compile = function(selector, group) {
            var i, setMatchers = [], elementMatchers = [], cached = compilerCache[selector + " "];
            if (!cached) {
                if (!group) group = tokenize(selector);
                i = group.length;
                while (i--) {
                    cached = matcherFromTokens(group[i]);
                    if (cached[expando]) setMatchers.push(cached); else elementMatchers.push(cached);
                }
                cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));
            }
            return cached;
        };
        function multipleContexts(selector, contexts, results) {
            var i = 0, len = contexts.length;
            for (;i < len; i++) Sizzle(selector, contexts[i], results);
            return results;
        }
        function select(selector, context, results, seed) {
            var i, tokens, token, type, find, match = tokenize(selector);
            if (!seed) if (1 === match.length) {
                tokens = match[0] = match[0].slice(0);
                if (tokens.length > 2 && "ID" === (token = tokens[0]).type && support.getById && 9 === context.nodeType && documentIsHTML && Expr.relative[tokens[1].type]) {
                    context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0];
                    if (!context) return results;
                    selector = selector.slice(tokens.shift().value.length);
                }
                i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;
                while (i--) {
                    token = tokens[i];
                    if (Expr.relative[type = token.type]) break;
                    if (find = Expr.find[type]) if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {
                        tokens.splice(i, 1);
                        selector = seed.length && toSelector(tokens);
                        if (!selector) {
                            push.apply(results, seed);
                            return results;
                        }
                        break;
                    }
                }
            }
            compile(selector, match)(seed, context, !documentIsHTML, results, rsibling.test(selector) && testContext(context.parentNode) || context);
            return results;
        }
        support.sortStable = expando.split("").sort(sortOrder).join("") === expando;
        support.detectDuplicates = !!hasDuplicate;
        setDocument();
        support.sortDetached = assert(function(div1) {
            return 1 & div1.compareDocumentPosition(document.createElement("div"));
        });
        if (!assert(function(div) {
            div.innerHTML = "<a href='#'></a>";
            return "#" === div.firstChild.getAttribute("href");
        })) addHandle("type|href|height|width", function(elem, name, isXML) {
            if (!isXML) return elem.getAttribute(name, "type" === name.toLowerCase() ? 1 : 2);
        });
        if (!support.attributes || !assert(function(div) {
            div.innerHTML = "<input/>";
            div.firstChild.setAttribute("value", "");
            return "" === div.firstChild.getAttribute("value");
        })) addHandle("value", function(elem, name, isXML) {
            if (!isXML && "input" === elem.nodeName.toLowerCase()) return elem.defaultValue;
        });
        if (!assert(function(div) {
            return null == div.getAttribute("disabled");
        })) addHandle(booleans, function(elem, name, isXML) {
            var val;
            if (!isXML) return true === elem[name] ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
        });
        return Sizzle;
    }(window);
    jQuery.find = Sizzle;
    jQuery.expr = Sizzle.selectors;
    jQuery.expr[":"] = jQuery.expr.pseudos;
    jQuery.unique = Sizzle.uniqueSort;
    jQuery.text = Sizzle.getText;
    jQuery.isXMLDoc = Sizzle.isXML;
    jQuery.contains = Sizzle.contains;
    var rneedsContext = jQuery.expr.match.needsContext;
    var rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/;
    var risSimple = /^.[^:#\[\.,]*$/;
    function winnow(elements, qualifier, not) {
        if (jQuery.isFunction(qualifier)) return jQuery.grep(elements, function(elem, i) {
            return !!qualifier.call(elem, i, elem) !== not;
        });
        if (qualifier.nodeType) return jQuery.grep(elements, function(elem) {
            return elem === qualifier !== not;
        });
        if ("string" === typeof qualifier) {
            if (risSimple.test(qualifier)) return jQuery.filter(qualifier, elements, not);
            qualifier = jQuery.filter(qualifier, elements);
        }
        return jQuery.grep(elements, function(elem) {
            return jQuery.inArray(elem, qualifier) >= 0 !== not;
        });
    }
    jQuery.filter = function(expr, elems, not) {
        var elem = elems[0];
        if (not) expr = ":not(" + expr + ")";
        return 1 === elems.length && 1 === elem.nodeType ? jQuery.find.matchesSelector(elem, expr) ? [ elem ] : [] : jQuery.find.matches(expr, jQuery.grep(elems, function(elem) {
            return 1 === elem.nodeType;
        }));
    };
    jQuery.fn.extend({
        "find": function(selector) {
            var i, ret = [], self = this, len = self.length;
            if ("string" !== typeof selector) return this.pushStack(jQuery(selector).filter(function() {
                for (i = 0; i < len; i++) if (jQuery.contains(self[i], this)) return true;
            }));
            for (i = 0; i < len; i++) jQuery.find(selector, self[i], ret);
            ret = this.pushStack(len > 1 ? jQuery.unique(ret) : ret);
            ret.selector = this.selector ? this.selector + " " + selector : selector;
            return ret;
        },
        "filter": function(selector) {
            return this.pushStack(winnow(this, selector || [], false));
        },
        "not": function(selector) {
            return this.pushStack(winnow(this, selector || [], true));
        },
        "is": function(selector) {
            return !!winnow(this, "string" === typeof selector && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;
        }
    });
    var rootjQuery, document = window.document, rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/, init = jQuery.fn.init = function(selector, context) {
        var match, elem;
        if (!selector) return this;
        if ("string" === typeof selector) {
            if ("<" === selector.charAt(0) && ">" === selector.charAt(selector.length - 1) && selector.length >= 3) match = [ null, selector, null ]; else match = rquickExpr.exec(selector);
            if (match && (match[1] || !context)) if (match[1]) {
                context = context instanceof jQuery ? context[0] : context;
                jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));
                if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) for (match in context) if (jQuery.isFunction(this[match])) this[match](context[match]); else this.attr(match, context[match]);
                return this;
            } else {
                elem = document.getElementById(match[2]);
                if (elem && elem.parentNode) {
                    if (elem.id !== match[2]) return rootjQuery.find(selector);
                    this.length = 1;
                    this[0] = elem;
                }
                this.context = document;
                this.selector = selector;
                return this;
            } else if (!context || context.jquery) return (context || rootjQuery).find(selector); else return this.constructor(context).find(selector);
        } else if (selector.nodeType) {
            this.context = this[0] = selector;
            this.length = 1;
            return this;
        } else if (jQuery.isFunction(selector)) return "undefined" !== typeof rootjQuery.ready ? rootjQuery.ready(selector) : selector(jQuery);
        if (void 0 !== selector.selector) {
            this.selector = selector.selector;
            this.context = selector.context;
        }
        return jQuery.makeArray(selector, this);
    };
    init.prototype = jQuery.fn;
    rootjQuery = jQuery(document);
    var rparentsprev = /^(?:parents|prev(?:Until|All))/, guaranteedUnique = {
        "children": true,
        "contents": true,
        "next": true,
        "prev": true
    };
    jQuery.extend({
        "dir": function(elem, dir, until) {
            var matched = [], cur = elem[dir];
            while (cur && 9 !== cur.nodeType && (void 0 === until || 1 !== cur.nodeType || !jQuery(cur).is(until))) {
                if (1 === cur.nodeType) matched.push(cur);
                cur = cur[dir];
            }
            return matched;
        },
        "sibling": function(n, elem) {
            var r = [];
            for (;n; n = n.nextSibling) if (1 === n.nodeType && n !== elem) r.push(n);
            return r;
        }
    });
    jQuery.fn.extend({
        "has": function(target) {
            var i, targets = jQuery(target, this), len = targets.length;
            return this.filter(function() {
                for (i = 0; i < len; i++) if (jQuery.contains(this, targets[i])) return true;
            });
        },
        "closest": function(selectors, context) {
            var cur, i = 0, l = this.length, matched = [], pos = rneedsContext.test(selectors) || "string" !== typeof selectors ? jQuery(selectors, context || this.context) : 0;
            for (;i < l; i++) for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) if (cur.nodeType < 11 && (pos ? pos.index(cur) > -1 : 1 === cur.nodeType && jQuery.find.matchesSelector(cur, selectors))) {
                matched.push(cur);
                break;
            }
            return this.pushStack(matched.length > 1 ? jQuery.unique(matched) : matched);
        },
        "index": function(elem) {
            if (!elem) return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
            if ("string" === typeof elem) return jQuery.inArray(this[0], jQuery(elem));
            return jQuery.inArray(elem.jquery ? elem[0] : elem, this);
        },
        "add": function(selector, context) {
            return this.pushStack(jQuery.unique(jQuery.merge(this.get(), jQuery(selector, context))));
        },
        "addBack": function(selector) {
            return this.add(null == selector ? this.prevObject : this.prevObject.filter(selector));
        }
    });
    function sibling(cur, dir) {
        do cur = cur[dir]; while (cur && 1 !== cur.nodeType);
        return cur;
    }
    jQuery.each({
        "parent": function(elem) {
            var parent = elem.parentNode;
            return parent && 11 !== parent.nodeType ? parent : null;
        },
        "parents": function(elem) {
            return jQuery.dir(elem, "parentNode");
        },
        "parentsUntil": function(elem, i, until) {
            return jQuery.dir(elem, "parentNode", until);
        },
        "next": function(elem) {
            return sibling(elem, "nextSibling");
        },
        "prev": function(elem) {
            return sibling(elem, "previousSibling");
        },
        "nextAll": function(elem) {
            return jQuery.dir(elem, "nextSibling");
        },
        "prevAll": function(elem) {
            return jQuery.dir(elem, "previousSibling");
        },
        "nextUntil": function(elem, i, until) {
            return jQuery.dir(elem, "nextSibling", until);
        },
        "prevUntil": function(elem, i, until) {
            return jQuery.dir(elem, "previousSibling", until);
        },
        "siblings": function(elem) {
            return jQuery.sibling((elem.parentNode || {}).firstChild, elem);
        },
        "children": function(elem) {
            return jQuery.sibling(elem.firstChild);
        },
        "contents": function(elem) {
            return jQuery.nodeName(elem, "iframe") ? elem.contentDocument || elem.contentWindow.document : jQuery.merge([], elem.childNodes);
        }
    }, function(name, fn) {
        jQuery.fn[name] = function(until, selector) {
            var ret = jQuery.map(this, fn, until);
            if ("Until" !== name.slice(-5)) selector = until;
            if (selector && "string" === typeof selector) ret = jQuery.filter(selector, ret);
            if (this.length > 1) {
                if (!guaranteedUnique[name]) ret = jQuery.unique(ret);
                if (rparentsprev.test(name)) ret = ret.reverse();
            }
            return this.pushStack(ret);
        };
    });
    var rnotwhite = /\S+/g;
    var optionsCache = {};
    function createOptions(options) {
        var object = optionsCache[options] = {};
        jQuery.each(options.match(rnotwhite) || [], function(_, flag) {
            object[flag] = true;
        });
        return object;
    }
    jQuery.Callbacks = function(options) {
        options = "string" === typeof options ? optionsCache[options] || createOptions(options) : jQuery.extend({}, options);
        var firing, memory, fired, firingLength, firingIndex, firingStart, list = [], stack = !options.once && [], fire = function(data) {
            memory = options.memory && data;
            fired = true;
            firingIndex = firingStart || 0;
            firingStart = 0;
            firingLength = list.length;
            firing = true;
            for (;list && firingIndex < firingLength; firingIndex++) if (false === list[firingIndex].apply(data[0], data[1]) && options.stopOnFalse) {
                memory = false;
                break;
            }
            firing = false;
            if (list) if (stack) {
                if (stack.length) fire(stack.shift());
            } else if (memory) list = []; else self.disable();
        }, self = {
            "add": function() {
                if (list) {
                    var start = list.length;
                    !function add(args) {
                        jQuery.each(args, function(_, arg) {
                            var type = jQuery.type(arg);
                            if ("function" === type) {
                                if (!options.unique || !self.has(arg)) list.push(arg);
                            } else if (arg && arg.length && "string" !== type) add(arg);
                        });
                    }(arguments);
                    if (firing) firingLength = list.length; else if (memory) {
                        firingStart = start;
                        fire(memory);
                    }
                }
                return this;
            },
            "remove": function() {
                if (list) jQuery.each(arguments, function(_, arg) {
                    var index;
                    while ((index = jQuery.inArray(arg, list, index)) > -1) {
                        list.splice(index, 1);
                        if (firing) {
                            if (index <= firingLength) firingLength--;
                            if (index <= firingIndex) firingIndex--;
                        }
                    }
                });
                return this;
            },
            "has": function(fn) {
                return fn ? jQuery.inArray(fn, list) > -1 : !!(list && list.length);
            },
            "empty": function() {
                list = [];
                firingLength = 0;
                return this;
            },
            "disable": function() {
                list = stack = memory = void 0;
                return this;
            },
            "disabled": function() {
                return !list;
            },
            "lock": function() {
                stack = void 0;
                if (!memory) self.disable();
                return this;
            },
            "locked": function() {
                return !stack;
            },
            "fireWith": function(context, args) {
                if (list && (!fired || stack)) {
                    args = args || [];
                    args = [ context, args.slice ? args.slice() : args ];
                    if (firing) stack.push(args); else fire(args);
                }
                return this;
            },
            "fire": function() {
                self.fireWith(this, arguments);
                return this;
            },
            "fired": function() {
                return !!fired;
            }
        };
        return self;
    };
    jQuery.extend({
        "Deferred": function(func) {
            var tuples = [ [ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ], [ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ], [ "notify", "progress", jQuery.Callbacks("memory") ] ], state = "pending", promise = {
                "state": function() {
                    return state;
                },
                "always": function() {
                    deferred.done(arguments).fail(arguments);
                    return this;
                },
                "then": function() {
                    var fns = arguments;
                    return jQuery.Deferred(function(newDefer) {
                        jQuery.each(tuples, function(i, tuple) {
                            var fn = jQuery.isFunction(fns[i]) && fns[i];
                            deferred[tuple[1]](function() {
                                var returned = fn && fn.apply(this, arguments);
                                if (returned && jQuery.isFunction(returned.promise)) returned.promise().done(newDefer.resolve).fail(newDefer.reject).progress(newDefer.notify); else newDefer[tuple[0] + "With"](this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments);
                            });
                        });
                        fns = null;
                    }).promise();
                },
                "promise": function(obj) {
                    return null != obj ? jQuery.extend(obj, promise) : promise;
                }
            }, deferred = {};
            promise.pipe = promise.then;
            jQuery.each(tuples, function(i, tuple) {
                var list = tuple[2], stateString = tuple[3];
                promise[tuple[1]] = list.add;
                if (stateString) list.add(function() {
                    state = stateString;
                }, tuples[1 ^ i][2].disable, tuples[2][2].lock);
                deferred[tuple[0]] = function() {
                    deferred[tuple[0] + "With"](this === deferred ? promise : this, arguments);
                    return this;
                };
                deferred[tuple[0] + "With"] = list.fireWith;
            });
            promise.promise(deferred);
            if (func) func.call(deferred, deferred);
            return deferred;
        },
        "when": function(subordinate) {
            var i = 0, resolveValues = slice.call(arguments), length = resolveValues.length, remaining = 1 !== length || subordinate && jQuery.isFunction(subordinate.promise) ? length : 0, deferred = 1 === remaining ? subordinate : jQuery.Deferred(), updateFunc = function(i, contexts, values) {
                return function(value) {
                    contexts[i] = this;
                    values[i] = arguments.length > 1 ? slice.call(arguments) : value;
                    if (values === progressValues) deferred.notifyWith(contexts, values); else if (!--remaining) deferred.resolveWith(contexts, values);
                };
            }, progressValues, progressContexts, resolveContexts;
            if (length > 1) {
                progressValues = new Array(length);
                progressContexts = new Array(length);
                resolveContexts = new Array(length);
                for (;i < length; i++) if (resolveValues[i] && jQuery.isFunction(resolveValues[i].promise)) resolveValues[i].promise().done(updateFunc(i, resolveContexts, resolveValues)).fail(deferred.reject).progress(updateFunc(i, progressContexts, progressValues)); else --remaining;
            }
            if (!remaining) deferred.resolveWith(resolveContexts, resolveValues);
            return deferred.promise();
        }
    });
    var readyList;
    jQuery.fn.ready = function(fn) {
        jQuery.ready.promise().done(fn);
        return this;
    };
    jQuery.extend({
        "isReady": false,
        "readyWait": 1,
        "holdReady": function(hold) {
            if (hold) jQuery.readyWait++; else jQuery.ready(true);
        },
        "ready": function(wait) {
            if (true === wait ? --jQuery.readyWait : jQuery.isReady) return;
            if (!document.body) return setTimeout(jQuery.ready);
            jQuery.isReady = true;
            if (true !== wait && --jQuery.readyWait > 0) return;
            readyList.resolveWith(document, [ jQuery ]);
            if (jQuery.fn.trigger) jQuery(document).trigger("ready").off("ready");
        }
    });
    function detach() {
        if (document.addEventListener) {
            document.removeEventListener("DOMContentLoaded", completed, false);
            window.removeEventListener("load", completed, false);
        } else {
            document.detachEvent("onreadystatechange", completed);
            window.detachEvent("onload", completed);
        }
    }
    function completed() {
        if (document.addEventListener || "load" === event.type || "complete" === document.readyState) {
            detach();
            jQuery.ready();
        }
    }
    jQuery.ready.promise = function(obj) {
        if (!readyList) {
            readyList = jQuery.Deferred();
            if ("complete" === document.readyState) setTimeout(jQuery.ready); else if (document.addEventListener) {
                document.addEventListener("DOMContentLoaded", completed, false);
                window.addEventListener("load", completed, false);
            } else {
                document.attachEvent("onreadystatechange", completed);
                window.attachEvent("onload", completed);
                var top = false;
                try {
                    top = null == window.frameElement && document.documentElement;
                } catch (e) {}
                if (top && top.doScroll) !function doScrollCheck() {
                    if (!jQuery.isReady) {
                        try {
                            top.doScroll("left");
                        } catch (e) {
                            return setTimeout(doScrollCheck, 50);
                        }
                        detach();
                        jQuery.ready();
                    }
                }();
            }
        }
        return readyList.promise(obj);
    };
    var strundefined = typeof void 0;
    var i;
    for (i in jQuery(support)) break;
    support.ownLast = "0" !== i;
    support.inlineBlockNeedsLayout = false;
    jQuery(function() {
        var container, div, body = document.getElementsByTagName("body")[0];
        if (!body) return;
        container = document.createElement("div");
        container.style.cssText = "border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px";
        div = document.createElement("div");
        body.appendChild(container).appendChild(div);
        if (typeof div.style.zoom !== strundefined) {
            div.style.cssText = "border:0;margin:0;width:1px;padding:1px;display:inline;zoom:1";
            if (support.inlineBlockNeedsLayout = 3 === div.offsetWidth) body.style.zoom = 1;
        }
        body.removeChild(container);
        container = div = null;
    });
    !function() {
        var div = document.createElement("div");
        if (null == support.deleteExpando) {
            support.deleteExpando = true;
            try {
                delete div.test;
            } catch (e) {
                support.deleteExpando = false;
            }
        }
        div = null;
    }();
    jQuery.acceptData = function(elem) {
        var noData = jQuery.noData[(elem.nodeName + " ").toLowerCase()], nodeType = +elem.nodeType || 1;
        return 1 !== nodeType && 9 !== nodeType ? false : !noData || true !== noData && elem.getAttribute("classid") === noData;
    };
    var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/, rmultiDash = /([A-Z])/g;
    function dataAttr(elem, key, data) {
        if (void 0 === data && 1 === elem.nodeType) {
            var name = "data-" + key.replace(rmultiDash, "-$1").toLowerCase();
            data = elem.getAttribute(name);
            if ("string" === typeof data) {
                try {
                    data = "true" === data ? true : "false" === data ? false : "null" === data ? null : +data + "" === data ? +data : rbrace.test(data) ? jQuery.parseJSON(data) : data;
                } catch (e) {}
                jQuery.data(elem, key, data);
            } else data = void 0;
        }
        return data;
    }
    function isEmptyDataObject(obj) {
        var name;
        for (name in obj) {
            if ("data" === name && jQuery.isEmptyObject(obj[name])) continue;
            if ("toJSON" !== name) return false;
        }
        return true;
    }
    function internalData(elem, name, data, pvt) {
        if (!jQuery.acceptData(elem)) return;
        var ret, thisCache, internalKey = jQuery.expando, isNode = elem.nodeType, cache = isNode ? jQuery.cache : elem, id = isNode ? elem[internalKey] : elem[internalKey] && internalKey;
        if ((!id || !cache[id] || !pvt && !cache[id].data) && void 0 === data && "string" === typeof name) return;
        if (!id) if (isNode) id = elem[internalKey] = deletedIds.pop() || jQuery.guid++; else id = internalKey;
        if (!cache[id]) cache[id] = isNode ? {} : {
            "toJSON": jQuery.noop
        };
        if ("object" === typeof name || "function" === typeof name) if (pvt) cache[id] = jQuery.extend(cache[id], name); else cache[id].data = jQuery.extend(cache[id].data, name);
        thisCache = cache[id];
        if (!pvt) {
            if (!thisCache.data) thisCache.data = {};
            thisCache = thisCache.data;
        }
        if (void 0 !== data) thisCache[jQuery.camelCase(name)] = data;
        if ("string" === typeof name) {
            ret = thisCache[name];
            if (null == ret) ret = thisCache[jQuery.camelCase(name)];
        } else ret = thisCache;
        return ret;
    }
    function internalRemoveData(elem, name, pvt) {
        if (!jQuery.acceptData(elem)) return;
        var thisCache, i, isNode = elem.nodeType, cache = isNode ? jQuery.cache : elem, id = isNode ? elem[jQuery.expando] : jQuery.expando;
        if (!cache[id]) return;
        if (name) {
            thisCache = pvt ? cache[id] : cache[id].data;
            if (thisCache) {
                if (!jQuery.isArray(name)) if (name in thisCache) name = [ name ]; else {
                    name = jQuery.camelCase(name);
                    if (name in thisCache) name = [ name ]; else name = name.split(" ");
                } else name = name.concat(jQuery.map(name, jQuery.camelCase));
                i = name.length;
                while (i--) delete thisCache[name[i]];
                if (pvt ? !isEmptyDataObject(thisCache) : !jQuery.isEmptyObject(thisCache)) return;
            }
        }
        if (!pvt) {
            delete cache[id].data;
            if (!isEmptyDataObject(cache[id])) return;
        }
        if (isNode) jQuery.cleanData([ elem ], true); else if (support.deleteExpando || cache != cache.window) delete cache[id]; else cache[id] = null;
    }
    jQuery.extend({
        "cache": {},
        "noData": {
            "applet ": true,
            "embed ": true,
            "object ": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
        },
        "hasData": function(elem) {
            elem = elem.nodeType ? jQuery.cache[elem[jQuery.expando]] : elem[jQuery.expando];
            return !!elem && !isEmptyDataObject(elem);
        },
        "data": function(elem, name, data) {
            return internalData(elem, name, data);
        },
        "removeData": function(elem, name) {
            return internalRemoveData(elem, name);
        },
        "_data": function(elem, name, data) {
            return internalData(elem, name, data, true);
        },
        "_removeData": function(elem, name) {
            return internalRemoveData(elem, name, true);
        }
    });
    jQuery.fn.extend({
        "data": function(key, value) {
            var i, name, data, elem = this[0], attrs = elem && elem.attributes;
            if (void 0 === key) {
                if (this.length) {
                    data = jQuery.data(elem);
                    if (1 === elem.nodeType && !jQuery._data(elem, "parsedAttrs")) {
                        i = attrs.length;
                        while (i--) {
                            name = attrs[i].name;
                            if (0 === name.indexOf("data-")) {
                                name = jQuery.camelCase(name.slice(5));
                                dataAttr(elem, name, data[name]);
                            }
                        }
                        jQuery._data(elem, "parsedAttrs", true);
                    }
                }
                return data;
            }
            if ("object" === typeof key) return this.each(function() {
                jQuery.data(this, key);
            });
            return arguments.length > 1 ? this.each(function() {
                jQuery.data(this, key, value);
            }) : elem ? dataAttr(elem, key, jQuery.data(elem, key)) : void 0;
        },
        "removeData": function(key) {
            return this.each(function() {
                jQuery.removeData(this, key);
            });
        }
    });
    jQuery.extend({
        "queue": function(elem, type, data) {
            var queue;
            if (elem) {
                type = (type || "fx") + "queue";
                queue = jQuery._data(elem, type);
                if (data) if (!queue || jQuery.isArray(data)) queue = jQuery._data(elem, type, jQuery.makeArray(data)); else queue.push(data);
                return queue || [];
            }
        },
        "dequeue": function(elem, type) {
            type = type || "fx";
            var queue = jQuery.queue(elem, type), startLength = queue.length, fn = queue.shift(), hooks = jQuery._queueHooks(elem, type), next = function() {
                jQuery.dequeue(elem, type);
            };
            if ("inprogress" === fn) {
                fn = queue.shift();
                startLength--;
            }
            if (fn) {
                if ("fx" === type) queue.unshift("inprogress");
                delete hooks.stop;
                fn.call(elem, next, hooks);
            }
            if (!startLength && hooks) hooks.empty.fire();
        },
        "_queueHooks": function(elem, type) {
            var key = type + "queueHooks";
            return jQuery._data(elem, key) || jQuery._data(elem, key, {
                "empty": jQuery.Callbacks("once memory").add(function() {
                    jQuery._removeData(elem, type + "queue");
                    jQuery._removeData(elem, key);
                })
            });
        }
    });
    jQuery.fn.extend({
        "queue": function(type, data) {
            var setter = 2;
            if ("string" !== typeof type) {
                data = type;
                type = "fx";
                setter--;
            }
            if (arguments.length < setter) return jQuery.queue(this[0], type);
            return void 0 === data ? this : this.each(function() {
                var queue = jQuery.queue(this, type, data);
                jQuery._queueHooks(this, type);
                if ("fx" === type && "inprogress" !== queue[0]) jQuery.dequeue(this, type);
            });
        },
        "dequeue": function(type) {
            return this.each(function() {
                jQuery.dequeue(this, type);
            });
        },
        "clearQueue": function(type) {
            return this.queue(type || "fx", []);
        },
        "promise": function(type, obj) {
            var tmp, count = 1, defer = jQuery.Deferred(), elements = this, i = this.length, resolve = function() {
                if (!--count) defer.resolveWith(elements, [ elements ]);
            };
            if ("string" !== typeof type) {
                obj = type;
                type = void 0;
            }
            type = type || "fx";
            while (i--) {
                tmp = jQuery._data(elements[i], type + "queueHooks");
                if (tmp && tmp.empty) {
                    count++;
                    tmp.empty.add(resolve);
                }
            }
            resolve();
            return defer.promise(obj);
        }
    });
    var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;
    var cssExpand = [ "Top", "Right", "Bottom", "Left" ];
    var isHidden = function(elem, el) {
        elem = el || elem;
        return "none" === jQuery.css(elem, "display") || !jQuery.contains(elem.ownerDocument, elem);
    };
    var access = jQuery.access = function(elems, fn, key, value, chainable, emptyGet, raw) {
        var i = 0, length = elems.length, bulk = null == key;
        if ("object" === jQuery.type(key)) {
            chainable = true;
            for (i in key) jQuery.access(elems, fn, i, key[i], true, emptyGet, raw);
        } else if (void 0 !== value) {
            chainable = true;
            if (!jQuery.isFunction(value)) raw = true;
            if (bulk) if (raw) {
                fn.call(elems, value);
                fn = null;
            } else {
                bulk = fn;
                fn = function(elem, key, value) {
                    return bulk.call(jQuery(elem), value);
                };
            }
            if (fn) for (;i < length; i++) fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
        }
        return chainable ? elems : bulk ? fn.call(elems) : length ? fn(elems[0], key) : emptyGet;
    };
    var rcheckableType = /^(?:checkbox|radio)$/i;
    !function() {
        var fragment = document.createDocumentFragment(), div = document.createElement("div"), input = document.createElement("input");
        div.setAttribute("className", "t");
        div.innerHTML = "  <link/><table></table><a href='/a'>a</a>";
        support.leadingWhitespace = 3 === div.firstChild.nodeType;
        support.tbody = !div.getElementsByTagName("tbody").length;
        support.htmlSerialize = !!div.getElementsByTagName("link").length;
        support.html5Clone = "<:nav></:nav>" !== document.createElement("nav").cloneNode(true).outerHTML;
        input.type = "checkbox";
        input.checked = true;
        fragment.appendChild(input);
        support.appendChecked = input.checked;
        div.innerHTML = "<textarea>x</textarea>";
        support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;
        fragment.appendChild(div);
        div.innerHTML = "<input type='radio' checked='checked' name='t'/>";
        support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;
        support.noCloneEvent = true;
        if (div.attachEvent) {
            div.attachEvent("onclick", function() {
                support.noCloneEvent = false;
            });
            div.cloneNode(true).click();
        }
        if (null == support.deleteExpando) {
            support.deleteExpando = true;
            try {
                delete div.test;
            } catch (e) {
                support.deleteExpando = false;
            }
        }
        fragment = div = input = null;
    }();
    !function() {
        var i, eventName, div = document.createElement("div");
        for (i in {
            "submit": true,
            "change": true,
            "focusin": true
        }) {
            eventName = "on" + i;
            if (!(support[i + "Bubbles"] = eventName in window)) {
                div.setAttribute(eventName, "t");
                support[i + "Bubbles"] = false === div.attributes[eventName].expando;
            }
        }
        div = null;
    }();
    var rformElems = /^(?:input|select|textarea)$/i, rkeyEvent = /^key/, rmouseEvent = /^(?:mouse|contextmenu)|click/, rfocusMorph = /^(?:focusinfocus|focusoutblur)$/, rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;
    function returnTrue() {
        return true;
    }
    function returnFalse() {
        return false;
    }
    function safeActiveElement() {
        try {
            return document.activeElement;
        } catch (err) {}
    }
    jQuery.event = {
        "global": {},
        "add": function(elem, types, handler, data, selector) {
            var tmp, events, t, handleObjIn, special, eventHandle, handleObj, handlers, type, namespaces, origType, elemData = jQuery._data(elem);
            if (!elemData) return;
            if (handler.handler) {
                handleObjIn = handler;
                handler = handleObjIn.handler;
                selector = handleObjIn.selector;
            }
            if (!handler.guid) handler.guid = jQuery.guid++;
            if (!(events = elemData.events)) events = elemData.events = {};
            if (!(eventHandle = elemData.handle)) {
                eventHandle = elemData.handle = function(e) {
                    return typeof jQuery !== strundefined && (!e || jQuery.event.triggered !== e.type) ? jQuery.event.dispatch.apply(eventHandle.elem, arguments) : void 0;
                };
                eventHandle.elem = elem;
            }
            types = (types || "").match(rnotwhite) || [ "" ];
            t = types.length;
            while (t--) {
                tmp = rtypenamespace.exec(types[t]) || [];
                type = origType = tmp[1];
                namespaces = (tmp[2] || "").split(".").sort();
                if (!type) continue;
                special = jQuery.event.special[type] || {};
                type = (selector ? special.delegateType : special.bindType) || type;
                special = jQuery.event.special[type] || {};
                handleObj = jQuery.extend({
                    "type": type,
                    "origType": origType,
                    "data": data,
                    "handler": handler,
                    "guid": handler.guid,
                    "selector": selector,
                    "needsContext": selector && jQuery.expr.match.needsContext.test(selector),
                    "namespace": namespaces.join(".")
                }, handleObjIn);
                if (!(handlers = events[type])) {
                    handlers = events[type] = [];
                    handlers.delegateCount = 0;
                    if (!special.setup || false === special.setup.call(elem, data, namespaces, eventHandle)) if (elem.addEventListener) elem.addEventListener(type, eventHandle, false); else if (elem.attachEvent) elem.attachEvent("on" + type, eventHandle);
                }
                if (special.add) {
                    special.add.call(elem, handleObj);
                    if (!handleObj.handler.guid) handleObj.handler.guid = handler.guid;
                }
                if (selector) handlers.splice(handlers.delegateCount++, 0, handleObj); else handlers.push(handleObj);
                jQuery.event.global[type] = true;
            }
            elem = null;
        },
        "remove": function(elem, types, handler, selector, mappedTypes) {
            var j, handleObj, tmp, origCount, t, events, special, handlers, type, namespaces, origType, elemData = jQuery.hasData(elem) && jQuery._data(elem);
            if (!elemData || !(events = elemData.events)) return;
            types = (types || "").match(rnotwhite) || [ "" ];
            t = types.length;
            while (t--) {
                tmp = rtypenamespace.exec(types[t]) || [];
                type = origType = tmp[1];
                namespaces = (tmp[2] || "").split(".").sort();
                if (!type) {
                    for (type in events) jQuery.event.remove(elem, type + types[t], handler, selector, true);
                    continue;
                }
                special = jQuery.event.special[type] || {};
                type = (selector ? special.delegateType : special.bindType) || type;
                handlers = events[type] || [];
                tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");
                origCount = j = handlers.length;
                while (j--) {
                    handleObj = handlers[j];
                    if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || "**" === selector && handleObj.selector)) {
                        handlers.splice(j, 1);
                        if (handleObj.selector) handlers.delegateCount--;
                        if (special.remove) special.remove.call(elem, handleObj);
                    }
                }
                if (origCount && !handlers.length) {
                    if (!special.teardown || false === special.teardown.call(elem, namespaces, elemData.handle)) jQuery.removeEvent(elem, type, elemData.handle);
                    delete events[type];
                }
            }
            if (jQuery.isEmptyObject(events)) {
                delete elemData.handle;
                jQuery._removeData(elem, "events");
            }
        },
        "trigger": function(event, data, elem, onlyHandlers) {
            var handle, ontype, cur, bubbleType, special, tmp, i, eventPath = [ elem || document ], type = hasOwn.call(event, "type") ? event.type : event, namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];
            cur = tmp = elem = elem || document;
            if (3 === elem.nodeType || 8 === elem.nodeType) return;
            if (rfocusMorph.test(type + jQuery.event.triggered)) return;
            if (type.indexOf(".") >= 0) {
                namespaces = type.split(".");
                type = namespaces.shift();
                namespaces.sort();
            }
            ontype = type.indexOf(":") < 0 && "on" + type;
            event = event[jQuery.expando] ? event : new jQuery.Event(type, "object" === typeof event && event);
            event.isTrigger = onlyHandlers ? 2 : 3;
            event.namespace = namespaces.join(".");
            event.namespace_re = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;
            event.result = void 0;
            if (!event.target) event.target = elem;
            data = null == data ? [ event ] : jQuery.makeArray(data, [ event ]);
            special = jQuery.event.special[type] || {};
            if (!onlyHandlers && special.trigger && false === special.trigger.apply(elem, data)) return;
            if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {
                bubbleType = special.delegateType || type;
                if (!rfocusMorph.test(bubbleType + type)) cur = cur.parentNode;
                for (;cur; cur = cur.parentNode) {
                    eventPath.push(cur);
                    tmp = cur;
                }
                if (tmp === (elem.ownerDocument || document)) eventPath.push(tmp.defaultView || tmp.parentWindow || window);
            }
            i = 0;
            while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
                event.type = i > 1 ? bubbleType : special.bindType || type;
                handle = (jQuery._data(cur, "events") || {})[event.type] && jQuery._data(cur, "handle");
                if (handle) handle.apply(cur, data);
                handle = ontype && cur[ontype];
                if (handle && handle.apply && jQuery.acceptData(cur)) {
                    event.result = handle.apply(cur, data);
                    if (false === event.result) event.preventDefault();
                }
            }
            event.type = type;
            if (!onlyHandlers && !event.isDefaultPrevented()) if ((!special._default || false === special._default.apply(eventPath.pop(), data)) && jQuery.acceptData(elem)) if (ontype && elem[type] && !jQuery.isWindow(elem)) {
                tmp = elem[ontype];
                if (tmp) elem[ontype] = null;
                jQuery.event.triggered = type;
                try {
                    elem[type]();
                } catch (e) {}
                jQuery.event.triggered = void 0;
                if (tmp) elem[ontype] = tmp;
            }
            return event.result;
        },
        "dispatch": function(event) {
            event = jQuery.event.fix(event);
            var i, ret, handleObj, matched, j, handlerQueue = [], args = slice.call(arguments), handlers = (jQuery._data(this, "events") || {})[event.type] || [], special = jQuery.event.special[event.type] || {};
            args[0] = event;
            event.delegateTarget = this;
            if (special.preDispatch && false === special.preDispatch.call(this, event)) return;
            handlerQueue = jQuery.event.handlers.call(this, event, handlers);
            i = 0;
            while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
                event.currentTarget = matched.elem;
                j = 0;
                while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) if (!event.namespace_re || event.namespace_re.test(handleObj.namespace)) {
                    event.handleObj = handleObj;
                    event.data = handleObj.data;
                    ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);
                    if (void 0 !== ret) if (false === (event.result = ret)) {
                        event.preventDefault();
                        event.stopPropagation();
                    }
                }
            }
            if (special.postDispatch) special.postDispatch.call(this, event);
            return event.result;
        },
        "handlers": function(event, handlers) {
            var sel, handleObj, matches, i, handlerQueue = [], delegateCount = handlers.delegateCount, cur = event.target;
            if (delegateCount && cur.nodeType && (!event.button || "click" !== event.type)) for (;cur != this; cur = cur.parentNode || this) if (1 === cur.nodeType && (true !== cur.disabled || "click" !== event.type)) {
                matches = [];
                for (i = 0; i < delegateCount; i++) {
                    handleObj = handlers[i];
                    sel = handleObj.selector + " ";
                    if (void 0 === matches[sel]) matches[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) >= 0 : jQuery.find(sel, this, null, [ cur ]).length;
                    if (matches[sel]) matches.push(handleObj);
                }
                if (matches.length) handlerQueue.push({
                    "elem": cur,
                    "handlers": matches
                });
            }
            if (delegateCount < handlers.length) handlerQueue.push({
                "elem": this,
                "handlers": handlers.slice(delegateCount)
            });
            return handlerQueue;
        },
        "fix": function(event) {
            if (event[jQuery.expando]) return event;
            var i, prop, copy, type = event.type, originalEvent = event, fixHook = this.fixHooks[type];
            if (!fixHook) this.fixHooks[type] = fixHook = rmouseEvent.test(type) ? this.mouseHooks : rkeyEvent.test(type) ? this.keyHooks : {};
            copy = fixHook.props ? this.props.concat(fixHook.props) : this.props;
            event = new jQuery.Event(originalEvent);
            i = copy.length;
            while (i--) {
                prop = copy[i];
                event[prop] = originalEvent[prop];
            }
            if (!event.target) event.target = originalEvent.srcElement || document;
            if (3 === event.target.nodeType) event.target = event.target.parentNode;
            event.metaKey = !!event.metaKey;
            return fixHook.filter ? fixHook.filter(event, originalEvent) : event;
        },
        "props": "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),
        "fixHooks": {},
        "keyHooks": {
            "props": "char charCode key keyCode".split(" "),
            "filter": function(event, original) {
                if (null == event.which) event.which = null != original.charCode ? original.charCode : original.keyCode;
                return event;
            }
        },
        "mouseHooks": {
            "props": "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
            "filter": function(event, original) {
                var body, eventDoc, doc, button = original.button, fromElement = original.fromElement;
                if (null == event.pageX && null != original.clientX) {
                    eventDoc = event.target.ownerDocument || document;
                    doc = eventDoc.documentElement;
                    body = eventDoc.body;
                    event.pageX = original.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
                    event.pageY = original.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
                }
                if (!event.relatedTarget && fromElement) event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;
                if (!event.which && void 0 !== button) event.which = 1 & button ? 1 : 2 & button ? 3 : 4 & button ? 2 : 0;
                return event;
            }
        },
        "special": {
            "load": {
                "noBubble": true
            },
            "focus": {
                "trigger": function() {
                    if (this !== safeActiveElement() && this.focus) try {
                        this.focus();
                        return false;
                    } catch (e) {}
                },
                "delegateType": "focusin"
            },
            "blur": {
                "trigger": function() {
                    if (this === safeActiveElement() && this.blur) {
                        this.blur();
                        return false;
                    }
                },
                "delegateType": "focusout"
            },
            "click": {
                "trigger": function() {
                    if (jQuery.nodeName(this, "input") && "checkbox" === this.type && this.click) {
                        this.click();
                        return false;
                    }
                },
                "_default": function(event) {
                    return jQuery.nodeName(event.target, "a");
                }
            },
            "beforeunload": {
                "postDispatch": function(event) {
                    if (void 0 !== event.result) event.originalEvent.returnValue = event.result;
                }
            }
        },
        "simulate": function(type, elem, event, bubble) {
            var e = jQuery.extend(new jQuery.Event(), event, {
                "type": type,
                "isSimulated": true,
                "originalEvent": {}
            });
            if (bubble) jQuery.event.trigger(e, null, elem); else jQuery.event.dispatch.call(elem, e);
            if (e.isDefaultPrevented()) event.preventDefault();
        }
    };
    jQuery.removeEvent = document.removeEventListener ? function(elem, type, handle) {
        if (elem.removeEventListener) elem.removeEventListener(type, handle, false);
    } : function(elem, type, handle) {
        var name = "on" + type;
        if (elem.detachEvent) {
            if (typeof elem[name] === strundefined) elem[name] = null;
            elem.detachEvent(name, handle);
        }
    };
    jQuery.Event = function(src, props) {
        if (!(this instanceof jQuery.Event)) return new jQuery.Event(src, props);
        if (src && src.type) {
            this.originalEvent = src;
            this.type = src.type;
            this.isDefaultPrevented = src.defaultPrevented || void 0 === src.defaultPrevented && (false === src.returnValue || src.getPreventDefault && src.getPreventDefault()) ? returnTrue : returnFalse;
        } else this.type = src;
        if (props) jQuery.extend(this, props);
        this.timeStamp = src && src.timeStamp || jQuery.now();
        this[jQuery.expando] = true;
    };
    jQuery.Event.prototype = {
        "isDefaultPrevented": returnFalse,
        "isPropagationStopped": returnFalse,
        "isImmediatePropagationStopped": returnFalse,
        "preventDefault": function() {
            var e = this.originalEvent;
            this.isDefaultPrevented = returnTrue;
            if (!e) return;
            if (e.preventDefault) e.preventDefault(); else e.returnValue = false;
        },
        "stopPropagation": function() {
            var e = this.originalEvent;
            this.isPropagationStopped = returnTrue;
            if (!e) return;
            if (e.stopPropagation) e.stopPropagation();
            e.cancelBubble = true;
        },
        "stopImmediatePropagation": function() {
            this.isImmediatePropagationStopped = returnTrue;
            this.stopPropagation();
        }
    };
    jQuery.each({
        "mouseenter": "mouseover",
        "mouseleave": "mouseout"
    }, function(orig, fix) {
        jQuery.event.special[orig] = {
            "delegateType": fix,
            "bindType": fix,
            "handle": function(event) {
                var ret, target = this, related = event.relatedTarget, handleObj = event.handleObj;
                if (!related || related !== target && !jQuery.contains(target, related)) {
                    event.type = handleObj.origType;
                    ret = handleObj.handler.apply(this, arguments);
                    event.type = fix;
                }
                return ret;
            }
        };
    });
    if (!support.submitBubbles) jQuery.event.special.submit = {
        "setup": function() {
            if (jQuery.nodeName(this, "form")) return false;
            jQuery.event.add(this, "click._submit keypress._submit", function(e) {
                var elem = e.target, form = jQuery.nodeName(elem, "input") || jQuery.nodeName(elem, "button") ? elem.form : void 0;
                if (form && !jQuery._data(form, "submitBubbles")) {
                    jQuery.event.add(form, "submit._submit", function(event) {
                        event._submit_bubble = true;
                    });
                    jQuery._data(form, "submitBubbles", true);
                }
            });
        },
        "postDispatch": function(event) {
            if (event._submit_bubble) {
                delete event._submit_bubble;
                if (this.parentNode && !event.isTrigger) jQuery.event.simulate("submit", this.parentNode, event, true);
            }
        },
        "teardown": function() {
            if (jQuery.nodeName(this, "form")) return false;
            jQuery.event.remove(this, "._submit");
        }
    };
    if (!support.changeBubbles) jQuery.event.special.change = {
        "setup": function() {
            if (rformElems.test(this.nodeName)) {
                if ("checkbox" === this.type || "radio" === this.type) {
                    jQuery.event.add(this, "propertychange._change", function(event) {
                        if ("checked" === event.originalEvent.propertyName) this._just_changed = true;
                    });
                    jQuery.event.add(this, "click._change", function(event) {
                        if (this._just_changed && !event.isTrigger) this._just_changed = false;
                        jQuery.event.simulate("change", this, event, true);
                    });
                }
                return false;
            }
            jQuery.event.add(this, "beforeactivate._change", function(e) {
                var elem = e.target;
                if (rformElems.test(elem.nodeName) && !jQuery._data(elem, "changeBubbles")) {
                    jQuery.event.add(elem, "change._change", function(event) {
                        if (this.parentNode && !event.isSimulated && !event.isTrigger) jQuery.event.simulate("change", this.parentNode, event, true);
                    });
                    jQuery._data(elem, "changeBubbles", true);
                }
            });
        },
        "handle": function(event) {
            var elem = event.target;
            if (this !== elem || event.isSimulated || event.isTrigger || "radio" !== elem.type && "checkbox" !== elem.type) return event.handleObj.handler.apply(this, arguments);
        },
        "teardown": function() {
            jQuery.event.remove(this, "._change");
            return !rformElems.test(this.nodeName);
        }
    };
    if (!support.focusinBubbles) jQuery.each({
        "focus": "focusin",
        "blur": "focusout"
    }, function(orig, fix) {
        var handler = function(event) {
            jQuery.event.simulate(fix, event.target, jQuery.event.fix(event), true);
        };
        jQuery.event.special[fix] = {
            "setup": function() {
                var doc = this.ownerDocument || this, attaches = jQuery._data(doc, fix);
                if (!attaches) doc.addEventListener(orig, handler, true);
                jQuery._data(doc, fix, (attaches || 0) + 1);
            },
            "teardown": function() {
                var doc = this.ownerDocument || this, attaches = jQuery._data(doc, fix) - 1;
                if (!attaches) {
                    doc.removeEventListener(orig, handler, true);
                    jQuery._removeData(doc, fix);
                } else jQuery._data(doc, fix, attaches);
            }
        };
    });
    jQuery.fn.extend({
        "on": function(types, selector, data, fn, one) {
            var type, origFn;
            if ("object" === typeof types) {
                if ("string" !== typeof selector) {
                    data = data || selector;
                    selector = void 0;
                }
                for (type in types) this.on(type, selector, data, types[type], one);
                return this;
            }
            if (null == data && null == fn) {
                fn = selector;
                data = selector = void 0;
            } else if (null == fn) if ("string" === typeof selector) {
                fn = data;
                data = void 0;
            } else {
                fn = data;
                data = selector;
                selector = void 0;
            }
            if (false === fn) fn = returnFalse; else if (!fn) return this;
            if (1 === one) {
                origFn = fn;
                fn = function(event) {
                    jQuery().off(event);
                    return origFn.apply(this, arguments);
                };
                fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
            }
            return this.each(function() {
                jQuery.event.add(this, types, fn, data, selector);
            });
        },
        "one": function(types, selector, data, fn) {
            return this.on(types, selector, data, fn, 1);
        },
        "off": function(types, selector, fn) {
            var handleObj, type;
            if (types && types.preventDefault && types.handleObj) {
                handleObj = types.handleObj;
                jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
                return this;
            }
            if ("object" === typeof types) {
                for (type in types) this.off(type, selector, types[type]);
                return this;
            }
            if (false === selector || "function" === typeof selector) {
                fn = selector;
                selector = void 0;
            }
            if (false === fn) fn = returnFalse;
            return this.each(function() {
                jQuery.event.remove(this, types, fn, selector);
            });
        },
        "trigger": function(type, data) {
            return this.each(function() {
                jQuery.event.trigger(type, data, this);
            });
        },
        "triggerHandler": function(type, data) {
            var elem = this[0];
            if (elem) return jQuery.event.trigger(type, data, elem, true);
        }
    });
    function createSafeFragment(document) {
        var list = nodeNames.split("|"), safeFrag = document.createDocumentFragment();
        if (safeFrag.createElement) while (list.length) safeFrag.createElement(list.pop());
        return safeFrag;
    }
    var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|" + "header|hgroup|mark|meter|nav|output|progress|section|summary|time|video", rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g, rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"), rleadingWhitespace = /^\s+/, rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi, rtagName = /<([\w:]+)/, rtbody = /<tbody/i, rhtml = /<|&#?\w+;/, rnoInnerhtml = /<(?:script|style|link)/i, rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i, rscriptType = /^$|\/(?:java|ecma)script/i, rscriptTypeMasked = /^true\/(.*)/, rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g, wrapMap = {
        "option": [ 1, "<select multiple='multiple'>", "</select>" ],
        "legend": [ 1, "<fieldset>", "</fieldset>" ],
        "area": [ 1, "<map>", "</map>" ],
        "param": [ 1, "<object>", "</object>" ],
        "thead": [ 1, "<table>", "</table>" ],
        "tr": [ 2, "<table><tbody>", "</tbody></table>" ],
        "col": [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
        "td": [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],
        "_default": support.htmlSerialize ? [ 0, "", "" ] : [ 1, "X<div>", "</div>" ]
    }, safeFragment = createSafeFragment(document), fragmentDiv = safeFragment.appendChild(document.createElement("div"));
    wrapMap.optgroup = wrapMap.option;
    wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
    wrapMap.th = wrapMap.td;
    function getAll(context, tag) {
        var elems, elem, i = 0, found = typeof context.getElementsByTagName !== strundefined ? context.getElementsByTagName(tag || "*") : typeof context.querySelectorAll !== strundefined ? context.querySelectorAll(tag || "*") : void 0;
        if (!found) for (found = [], elems = context.childNodes || context; null != (elem = elems[i]); i++) if (!tag || jQuery.nodeName(elem, tag)) found.push(elem); else jQuery.merge(found, getAll(elem, tag));
        return void 0 === tag || tag && jQuery.nodeName(context, tag) ? jQuery.merge([ context ], found) : found;
    }
    function fixDefaultChecked(elem) {
        if (rcheckableType.test(elem.type)) elem.defaultChecked = elem.checked;
    }
    function manipulationTarget(elem, content) {
        return jQuery.nodeName(elem, "table") && jQuery.nodeName(11 !== content.nodeType ? content : content.firstChild, "tr") ? elem.getElementsByTagName("tbody")[0] || elem.appendChild(elem.ownerDocument.createElement("tbody")) : elem;
    }
    function disableScript(elem) {
        elem.type = (null !== jQuery.find.attr(elem, "type")) + "/" + elem.type;
        return elem;
    }
    function restoreScript(elem) {
        var match = rscriptTypeMasked.exec(elem.type);
        if (match) elem.type = match[1]; else elem.removeAttribute("type");
        return elem;
    }
    function setGlobalEval(elems, refElements) {
        var elem, i = 0;
        for (;null != (elem = elems[i]); i++) jQuery._data(elem, "globalEval", !refElements || jQuery._data(refElements[i], "globalEval"));
    }
    function cloneCopyEvent(src, dest) {
        if (1 !== dest.nodeType || !jQuery.hasData(src)) return;
        var type, i, l, oldData = jQuery._data(src), curData = jQuery._data(dest, oldData), events = oldData.events;
        if (events) {
            delete curData.handle;
            curData.events = {};
            for (type in events) for (i = 0, l = events[type].length; i < l; i++) jQuery.event.add(dest, type, events[type][i]);
        }
        if (curData.data) curData.data = jQuery.extend({}, curData.data);
    }
    function fixCloneNodeIssues(src, dest) {
        var nodeName, e, data;
        if (1 !== dest.nodeType) return;
        nodeName = dest.nodeName.toLowerCase();
        if (!support.noCloneEvent && dest[jQuery.expando]) {
            data = jQuery._data(dest);
            for (e in data.events) jQuery.removeEvent(dest, e, data.handle);
            dest.removeAttribute(jQuery.expando);
        }
        if ("script" === nodeName && dest.text !== src.text) {
            disableScript(dest).text = src.text;
            restoreScript(dest);
        } else if ("object" === nodeName) {
            if (dest.parentNode) dest.outerHTML = src.outerHTML;
            if (support.html5Clone && src.innerHTML && !jQuery.trim(dest.innerHTML)) dest.innerHTML = src.innerHTML;
        } else if ("input" === nodeName && rcheckableType.test(src.type)) {
            dest.defaultChecked = dest.checked = src.checked;
            if (dest.value !== src.value) dest.value = src.value;
        } else if ("option" === nodeName) dest.defaultSelected = dest.selected = src.defaultSelected; else if ("input" === nodeName || "textarea" === nodeName) dest.defaultValue = src.defaultValue;
    }
    jQuery.extend({
        "clone": function(elem, dataAndEvents, deepDataAndEvents) {
            var destElements, node, clone, i, srcElements, inPage = jQuery.contains(elem.ownerDocument, elem);
            if (support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test("<" + elem.nodeName + ">")) clone = elem.cloneNode(true); else {
                fragmentDiv.innerHTML = elem.outerHTML;
                fragmentDiv.removeChild(clone = fragmentDiv.firstChild);
            }
            if ((!support.noCloneEvent || !support.noCloneChecked) && (1 === elem.nodeType || 11 === elem.nodeType) && !jQuery.isXMLDoc(elem)) {
                destElements = getAll(clone);
                srcElements = getAll(elem);
                for (i = 0; null != (node = srcElements[i]); ++i) if (destElements[i]) fixCloneNodeIssues(node, destElements[i]);
            }
            if (dataAndEvents) if (deepDataAndEvents) {
                srcElements = srcElements || getAll(elem);
                destElements = destElements || getAll(clone);
                for (i = 0; null != (node = srcElements[i]); i++) cloneCopyEvent(node, destElements[i]);
            } else cloneCopyEvent(elem, clone);
            destElements = getAll(clone, "script");
            if (destElements.length > 0) setGlobalEval(destElements, !inPage && getAll(elem, "script"));
            destElements = srcElements = node = null;
            return clone;
        },
        "buildFragment": function(elems, context, scripts, selection) {
            var j, elem, contains, tmp, tag, tbody, wrap, l = elems.length, safe = createSafeFragment(context), nodes = [], i = 0;
            for (;i < l; i++) {
                elem = elems[i];
                if (elem || 0 === elem) if ("object" === jQuery.type(elem)) jQuery.merge(nodes, elem.nodeType ? [ elem ] : elem); else if (!rhtml.test(elem)) nodes.push(context.createTextNode(elem)); else {
                    tmp = tmp || safe.appendChild(context.createElement("div"));
                    tag = (rtagName.exec(elem) || [ "", "" ])[1].toLowerCase();
                    wrap = wrapMap[tag] || wrapMap._default;
                    tmp.innerHTML = wrap[1] + elem.replace(rxhtmlTag, "<$1></$2>") + wrap[2];
                    j = wrap[0];
                    while (j--) tmp = tmp.lastChild;
                    if (!support.leadingWhitespace && rleadingWhitespace.test(elem)) nodes.push(context.createTextNode(rleadingWhitespace.exec(elem)[0]));
                    if (!support.tbody) {
                        elem = "table" === tag && !rtbody.test(elem) ? tmp.firstChild : "<table>" === wrap[1] && !rtbody.test(elem) ? tmp : 0;
                        j = elem && elem.childNodes.length;
                        while (j--) if (jQuery.nodeName(tbody = elem.childNodes[j], "tbody") && !tbody.childNodes.length) elem.removeChild(tbody);
                    }
                    jQuery.merge(nodes, tmp.childNodes);
                    tmp.textContent = "";
                    while (tmp.firstChild) tmp.removeChild(tmp.firstChild);
                    tmp = safe.lastChild;
                }
            }
            if (tmp) safe.removeChild(tmp);
            if (!support.appendChecked) jQuery.grep(getAll(nodes, "input"), fixDefaultChecked);
            i = 0;
            while (elem = nodes[i++]) {
                if (selection && jQuery.inArray(elem, selection) !== -1) continue;
                contains = jQuery.contains(elem.ownerDocument, elem);
                tmp = getAll(safe.appendChild(elem), "script");
                if (contains) setGlobalEval(tmp);
                if (scripts) {
                    j = 0;
                    while (elem = tmp[j++]) if (rscriptType.test(elem.type || "")) scripts.push(elem);
                }
            }
            tmp = null;
            return safe;
        },
        "cleanData": function(elems, acceptData) {
            var elem, type, id, data, i = 0, internalKey = jQuery.expando, cache = jQuery.cache, deleteExpando = support.deleteExpando, special = jQuery.event.special;
            for (;null != (elem = elems[i]); i++) if (acceptData || jQuery.acceptData(elem)) {
                id = elem[internalKey];
                data = id && cache[id];
                if (data) {
                    if (data.events) for (type in data.events) if (special[type]) jQuery.event.remove(elem, type); else jQuery.removeEvent(elem, type, data.handle);
                    if (cache[id]) {
                        delete cache[id];
                        if (deleteExpando) delete elem[internalKey]; else if (typeof elem.removeAttribute !== strundefined) elem.removeAttribute(internalKey); else elem[internalKey] = null;
                        deletedIds.push(id);
                    }
                }
            }
        }
    });
    jQuery.fn.extend({
        "text": function(value) {
            return access(this, function(value) {
                return void 0 === value ? jQuery.text(this) : this.empty().append((this[0] && this[0].ownerDocument || document).createTextNode(value));
            }, null, value, arguments.length);
        },
        "append": function() {
            return this.domManip(arguments, function(elem) {
                if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
                    var target = manipulationTarget(this, elem);
                    target.appendChild(elem);
                }
            });
        },
        "prepend": function() {
            return this.domManip(arguments, function(elem) {
                if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
                    var target = manipulationTarget(this, elem);
                    target.insertBefore(elem, target.firstChild);
                }
            });
        },
        "before": function() {
            return this.domManip(arguments, function(elem) {
                if (this.parentNode) this.parentNode.insertBefore(elem, this);
            });
        },
        "after": function() {
            return this.domManip(arguments, function(elem) {
                if (this.parentNode) this.parentNode.insertBefore(elem, this.nextSibling);
            });
        },
        "remove": function(selector, keepData) {
            var elem, elems = selector ? jQuery.filter(selector, this) : this, i = 0;
            for (;null != (elem = elems[i]); i++) {
                if (!keepData && 1 === elem.nodeType) jQuery.cleanData(getAll(elem));
                if (elem.parentNode) {
                    if (keepData && jQuery.contains(elem.ownerDocument, elem)) setGlobalEval(getAll(elem, "script"));
                    elem.parentNode.removeChild(elem);
                }
            }
            return this;
        },
        "empty": function() {
            var elem, i = 0;
            for (;null != (elem = this[i]); i++) {
                if (1 === elem.nodeType) jQuery.cleanData(getAll(elem, false));
                while (elem.firstChild) elem.removeChild(elem.firstChild);
                if (elem.options && jQuery.nodeName(elem, "select")) elem.options.length = 0;
            }
            return this;
        },
        "clone": function(dataAndEvents, deepDataAndEvents) {
            dataAndEvents = null == dataAndEvents ? false : dataAndEvents;
            deepDataAndEvents = null == deepDataAndEvents ? dataAndEvents : deepDataAndEvents;
            return this.map(function() {
                return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
            });
        },
        "html": function(value) {
            return access(this, function(value) {
                var elem = this[0] || {}, i = 0, l = this.length;
                if (void 0 === value) return 1 === elem.nodeType ? elem.innerHTML.replace(rinlinejQuery, "") : void 0;
                if ("string" === typeof value && !rnoInnerhtml.test(value) && (support.htmlSerialize || !rnoshimcache.test(value)) && (support.leadingWhitespace || !rleadingWhitespace.test(value)) && !wrapMap[(rtagName.exec(value) || [ "", "" ])[1].toLowerCase()]) {
                    value = value.replace(rxhtmlTag, "<$1></$2>");
                    try {
                        for (;i < l; i++) {
                            elem = this[i] || {};
                            if (1 === elem.nodeType) {
                                jQuery.cleanData(getAll(elem, false));
                                elem.innerHTML = value;
                            }
                        }
                        elem = 0;
                    } catch (e) {}
                }
                if (elem) this.empty().append(value);
            }, null, value, arguments.length);
        },
        "replaceWith": function() {
            var arg = arguments[0];
            this.domManip(arguments, function(elem) {
                arg = this.parentNode;
                jQuery.cleanData(getAll(this));
                if (arg) arg.replaceChild(elem, this);
            });
            return arg && (arg.length || arg.nodeType) ? this : this.remove();
        },
        "detach": function(selector) {
            return this.remove(selector, true);
        },
        "domManip": function(args, callback) {
            args = concat.apply([], args);
            var first, node, hasScripts, scripts, doc, fragment, i = 0, l = this.length, set = this, iNoClone = l - 1, value = args[0], isFunction = jQuery.isFunction(value);
            if (isFunction || l > 1 && "string" === typeof value && !support.checkClone && rchecked.test(value)) return this.each(function(index) {
                var self = set.eq(index);
                if (isFunction) args[0] = value.call(this, index, self.html());
                self.domManip(args, callback);
            });
            if (l) {
                fragment = jQuery.buildFragment(args, this[0].ownerDocument, false, this);
                first = fragment.firstChild;
                if (1 === fragment.childNodes.length) fragment = first;
                if (first) {
                    scripts = jQuery.map(getAll(fragment, "script"), disableScript);
                    hasScripts = scripts.length;
                    for (;i < l; i++) {
                        node = fragment;
                        if (i !== iNoClone) {
                            node = jQuery.clone(node, true, true);
                            if (hasScripts) jQuery.merge(scripts, getAll(node, "script"));
                        }
                        callback.call(this[i], node, i);
                    }
                    if (hasScripts) {
                        doc = scripts[scripts.length - 1].ownerDocument;
                        jQuery.map(scripts, restoreScript);
                        for (i = 0; i < hasScripts; i++) {
                            node = scripts[i];
                            if (rscriptType.test(node.type || "") && !jQuery._data(node, "globalEval") && jQuery.contains(doc, node)) if (node.src) {
                                if (jQuery._evalUrl) jQuery._evalUrl(node.src);
                            } else jQuery.globalEval((node.text || node.textContent || node.innerHTML || "").replace(rcleanScript, ""));
                        }
                    }
                    fragment = first = null;
                }
            }
            return this;
        }
    });
    jQuery.each({
        "appendTo": "append",
        "prependTo": "prepend",
        "insertBefore": "before",
        "insertAfter": "after",
        "replaceAll": "replaceWith"
    }, function(name, original) {
        jQuery.fn[name] = function(selector) {
            var elems, i = 0, ret = [], insert = jQuery(selector), last = insert.length - 1;
            for (;i <= last; i++) {
                elems = i === last ? this : this.clone(true);
                jQuery(insert[i])[original](elems);
                push.apply(ret, elems.get());
            }
            return this.pushStack(ret);
        };
    });
    var iframe, elemdisplay = {};
    function actualDisplay(name, doc) {
        var elem = jQuery(doc.createElement(name)).appendTo(doc.body), display = window.getDefaultComputedStyle ? window.getDefaultComputedStyle(elem[0]).display : jQuery.css(elem[0], "display");
        elem.detach();
        return display;
    }
    function defaultDisplay(nodeName) {
        var doc = document, display = elemdisplay[nodeName];
        if (!display) {
            display = actualDisplay(nodeName, doc);
            if ("none" === display || !display) {
                iframe = (iframe || jQuery("<iframe frameborder='0' width='0' height='0'/>")).appendTo(doc.documentElement);
                doc = (iframe[0].contentWindow || iframe[0].contentDocument).document;
                doc.write();
                doc.close();
                display = actualDisplay(nodeName, doc);
                iframe.detach();
            }
            elemdisplay[nodeName] = display;
        }
        return display;
    }
    !function() {
        var a, shrinkWrapBlocksVal, div = document.createElement("div"), divReset = "-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;" + "display:block;padding:0;margin:0;border:0";
        div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
        a = div.getElementsByTagName("a")[0];
        a.style.cssText = "float:left;opacity:.5";
        support.opacity = /^0.5/.test(a.style.opacity);
        support.cssFloat = !!a.style.cssFloat;
        div.style.backgroundClip = "content-box";
        div.cloneNode(true).style.backgroundClip = "";
        support.clearCloneStyle = "content-box" === div.style.backgroundClip;
        a = div = null;
        support.shrinkWrapBlocks = function() {
            var body, container, div, containerStyles;
            if (null == shrinkWrapBlocksVal) {
                body = document.getElementsByTagName("body")[0];
                if (!body) return;
                containerStyles = "border:0;width:0;height:0;position:absolute;top:0;left:-9999px";
                container = document.createElement("div");
                div = document.createElement("div");
                body.appendChild(container).appendChild(div);
                shrinkWrapBlocksVal = false;
                if (typeof div.style.zoom !== strundefined) {
                    div.style.cssText = divReset + ";width:1px;padding:1px;zoom:1";
                    div.innerHTML = "<div></div>";
                    div.firstChild.style.width = "5px";
                    shrinkWrapBlocksVal = 3 !== div.offsetWidth;
                }
                body.removeChild(container);
                body = container = div = null;
            }
            return shrinkWrapBlocksVal;
        };
    }();
    var rmargin = /^margin/;
    var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");
    var getStyles, curCSS, rposition = /^(top|right|bottom|left)$/;
    if (window.getComputedStyle) {
        getStyles = function(elem) {
            return elem.ownerDocument.defaultView.getComputedStyle(elem, null);
        };
        curCSS = function(elem, name, computed) {
            var width, minWidth, maxWidth, ret, style = elem.style;
            computed = computed || getStyles(elem);
            ret = computed ? computed.getPropertyValue(name) || computed[name] : void 0;
            if (computed) {
                if ("" === ret && !jQuery.contains(elem.ownerDocument, elem)) ret = jQuery.style(elem, name);
                if (rnumnonpx.test(ret) && rmargin.test(name)) {
                    width = style.width;
                    minWidth = style.minWidth;
                    maxWidth = style.maxWidth;
                    style.minWidth = style.maxWidth = style.width = ret;
                    ret = computed.width;
                    style.width = width;
                    style.minWidth = minWidth;
                    style.maxWidth = maxWidth;
                }
            }
            return void 0 === ret ? ret : ret + "";
        };
    } else if (document.documentElement.currentStyle) {
        getStyles = function(elem) {
            return elem.currentStyle;
        };
        curCSS = function(elem, name, computed) {
            var left, rs, rsLeft, ret, style = elem.style;
            computed = computed || getStyles(elem);
            ret = computed ? computed[name] : void 0;
            if (null == ret && style && style[name]) ret = style[name];
            if (rnumnonpx.test(ret) && !rposition.test(name)) {
                left = style.left;
                rs = elem.runtimeStyle;
                rsLeft = rs && rs.left;
                if (rsLeft) rs.left = elem.currentStyle.left;
                style.left = "fontSize" === name ? "1em" : ret;
                ret = style.pixelLeft + "px";
                style.left = left;
                if (rsLeft) rs.left = rsLeft;
            }
            return void 0 === ret ? ret : ret + "" || "auto";
        };
    }
    function addGetHookIf(conditionFn, hookFn) {
        return {
            "get": function() {
                var condition = conditionFn();
                if (null == condition) return;
                if (condition) {
                    delete this.get;
                    return;
                }
                return (this.get = hookFn).apply(this, arguments);
            }
        };
    }
    !function() {
        var a, reliableHiddenOffsetsVal, boxSizingVal, boxSizingReliableVal, pixelPositionVal, reliableMarginRightVal, div = document.createElement("div"), containerStyles = "border:0;width:0;height:0;position:absolute;top:0;left:-9999px", divReset = "-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;" + "display:block;padding:0;margin:0;border:0";
        div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
        a = div.getElementsByTagName("a")[0];
        a.style.cssText = "float:left;opacity:.5";
        support.opacity = /^0.5/.test(a.style.opacity);
        support.cssFloat = !!a.style.cssFloat;
        div.style.backgroundClip = "content-box";
        div.cloneNode(true).style.backgroundClip = "";
        support.clearCloneStyle = "content-box" === div.style.backgroundClip;
        a = div = null;
        jQuery.extend(support, {
            "reliableHiddenOffsets": function() {
                if (null != reliableHiddenOffsetsVal) return reliableHiddenOffsetsVal;
                var container, tds, isSupported, div = document.createElement("div"), body = document.getElementsByTagName("body")[0];
                if (!body) return;
                div.setAttribute("className", "t");
                div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
                container = document.createElement("div");
                container.style.cssText = containerStyles;
                body.appendChild(container).appendChild(div);
                div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
                tds = div.getElementsByTagName("td");
                tds[0].style.cssText = "padding:0;margin:0;border:0;display:none";
                isSupported = 0 === tds[0].offsetHeight;
                tds[0].style.display = "";
                tds[1].style.display = "none";
                reliableHiddenOffsetsVal = isSupported && 0 === tds[0].offsetHeight;
                body.removeChild(container);
                div = body = null;
                return reliableHiddenOffsetsVal;
            },
            "boxSizing": function() {
                if (null == boxSizingVal) computeStyleTests();
                return boxSizingVal;
            },
            "boxSizingReliable": function() {
                if (null == boxSizingReliableVal) computeStyleTests();
                return boxSizingReliableVal;
            },
            "pixelPosition": function() {
                if (null == pixelPositionVal) computeStyleTests();
                return pixelPositionVal;
            },
            "reliableMarginRight": function() {
                var body, container, div, marginDiv;
                if (null == reliableMarginRightVal && window.getComputedStyle) {
                    body = document.getElementsByTagName("body")[0];
                    if (!body) return;
                    container = document.createElement("div");
                    div = document.createElement("div");
                    container.style.cssText = containerStyles;
                    body.appendChild(container).appendChild(div);
                    marginDiv = div.appendChild(document.createElement("div"));
                    marginDiv.style.cssText = div.style.cssText = divReset;
                    marginDiv.style.marginRight = marginDiv.style.width = "0";
                    div.style.width = "1px";
                    reliableMarginRightVal = !parseFloat((window.getComputedStyle(marginDiv, null) || {}).marginRight);
                    body.removeChild(container);
                }
                return reliableMarginRightVal;
            }
        });
        function computeStyleTests() {
            var container, div, body = document.getElementsByTagName("body")[0];
            if (!body) return;
            container = document.createElement("div");
            div = document.createElement("div");
            container.style.cssText = containerStyles;
            body.appendChild(container).appendChild(div);
            div.style.cssText = "-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;" + "position:absolute;display:block;padding:1px;border:1px;width:4px;" + "margin-top:1%;top:1%";
            jQuery.swap(body, null != body.style.zoom ? {
                "zoom": 1
            } : {}, function() {
                boxSizingVal = 4 === div.offsetWidth;
            });
            boxSizingReliableVal = true;
            pixelPositionVal = false;
            reliableMarginRightVal = true;
            if (window.getComputedStyle) {
                pixelPositionVal = "1%" !== (window.getComputedStyle(div, null) || {}).top;
                boxSizingReliableVal = "4px" === (window.getComputedStyle(div, null) || {
                    "width": "4px"
                }).width;
            }
            body.removeChild(container);
            div = body = null;
        }
    }();
    jQuery.swap = function(elem, options, callback, args) {
        var ret, name, old = {};
        for (name in options) {
            old[name] = elem.style[name];
            elem.style[name] = options[name];
        }
        ret = callback.apply(elem, args || []);
        for (name in options) elem.style[name] = old[name];
        return ret;
    };
    var ralpha = /alpha\([^)]*\)/i, ropacity = /opacity\s*=\s*([^)]*)/, rdisplayswap = /^(none|table(?!-c[ea]).+)/, rnumsplit = new RegExp("^(" + pnum + ")(.*)$", "i"), rrelNum = new RegExp("^([+-])=(" + pnum + ")", "i"), cssShow = {
        "position": "absolute",
        "visibility": "hidden",
        "display": "block"
    }, cssNormalTransform = {
        "letterSpacing": 0,
        "fontWeight": 400
    }, cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];
    function vendorPropName(style, name) {
        if (name in style) return name;
        var capName = name.charAt(0).toUpperCase() + name.slice(1), origName = name, i = cssPrefixes.length;
        while (i--) {
            name = cssPrefixes[i] + capName;
            if (name in style) return name;
        }
        return origName;
    }
    function showHide(elements, show) {
        var display, elem, hidden, values = [], index = 0, length = elements.length;
        for (;index < length; index++) {
            elem = elements[index];
            if (!elem.style) continue;
            values[index] = jQuery._data(elem, "olddisplay");
            display = elem.style.display;
            if (show) {
                if (!values[index] && "none" === display) elem.style.display = "";
                if ("" === elem.style.display && isHidden(elem)) values[index] = jQuery._data(elem, "olddisplay", defaultDisplay(elem.nodeName));
            } else if (!values[index]) {
                hidden = isHidden(elem);
                if (display && "none" !== display || !hidden) jQuery._data(elem, "olddisplay", hidden ? display : jQuery.css(elem, "display"));
            }
        }
        for (index = 0; index < length; index++) {
            elem = elements[index];
            if (!elem.style) continue;
            if (!show || "none" === elem.style.display || "" === elem.style.display) elem.style.display = show ? values[index] || "" : "none";
        }
        return elements;
    }
    function setPositiveNumber(elem, value, subtract) {
        var matches = rnumsplit.exec(value);
        return matches ? Math.max(0, matches[1] - (subtract || 0)) + (matches[2] || "px") : value;
    }
    function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {
        var i = extra === (isBorderBox ? "border" : "content") ? 4 : "width" === name ? 1 : 0, val = 0;
        for (;i < 4; i += 2) {
            if ("margin" === extra) val += jQuery.css(elem, extra + cssExpand[i], true, styles);
            if (isBorderBox) {
                if ("content" === extra) val -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);
                if ("margin" !== extra) val -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
            } else {
                val += jQuery.css(elem, "padding" + cssExpand[i], true, styles);
                if ("padding" !== extra) val += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
            }
        }
        return val;
    }
    function getWidthOrHeight(elem, name, extra) {
        var valueIsBorderBox = true, val = "width" === name ? elem.offsetWidth : elem.offsetHeight, styles = getStyles(elem), isBorderBox = support.boxSizing() && "border-box" === jQuery.css(elem, "boxSizing", false, styles);
        if (val <= 0 || null == val) {
            val = curCSS(elem, name, styles);
            if (val < 0 || null == val) val = elem.style[name];
            if (rnumnonpx.test(val)) return val;
            valueIsBorderBox = isBorderBox && (support.boxSizingReliable() || val === elem.style[name]);
            val = parseFloat(val) || 0;
        }
        return val + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles) + "px";
    }
    jQuery.extend({
        "cssHooks": {
            "opacity": {
                "get": function(elem, computed) {
                    if (computed) {
                        var ret = curCSS(elem, "opacity");
                        return "" === ret ? "1" : ret;
                    }
                }
            }
        },
        "cssNumber": {
            "columnCount": true,
            "fillOpacity": true,
            "fontWeight": true,
            "lineHeight": true,
            "opacity": true,
            "order": true,
            "orphans": true,
            "widows": true,
            "zIndex": true,
            "zoom": true
        },
        "cssProps": {
            "float": support.cssFloat ? "cssFloat" : "styleFloat"
        },
        "style": function(elem, name, value, extra) {
            if (!elem || 3 === elem.nodeType || 8 === elem.nodeType || !elem.style) return;
            var ret, type, hooks, origName = jQuery.camelCase(name), style = elem.style;
            name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(style, origName));
            hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
            if (void 0 !== value) {
                type = typeof value;
                if ("string" === type && (ret = rrelNum.exec(value))) {
                    value = (ret[1] + 1) * ret[2] + parseFloat(jQuery.css(elem, name));
                    type = "number";
                }
                if (null == value || value !== value) return;
                if ("number" === type && !jQuery.cssNumber[origName]) value += "px";
                if (!support.clearCloneStyle && "" === value && 0 === name.indexOf("background")) style[name] = "inherit";
                if (!hooks || !("set" in hooks) || void 0 !== (value = hooks.set(elem, value, extra))) try {
                    style[name] = "";
                    style[name] = value;
                } catch (e) {}
            } else {
                if (hooks && "get" in hooks && void 0 !== (ret = hooks.get(elem, false, extra))) return ret;
                return style[name];
            }
        },
        "css": function(elem, name, extra, styles) {
            var num, val, hooks, origName = jQuery.camelCase(name);
            name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(elem.style, origName));
            hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
            if (hooks && "get" in hooks) val = hooks.get(elem, true, extra);
            if (void 0 === val) val = curCSS(elem, name, styles);
            if ("normal" === val && name in cssNormalTransform) val = cssNormalTransform[name];
            if ("" === extra || extra) {
                num = parseFloat(val);
                return true === extra || jQuery.isNumeric(num) ? num || 0 : val;
            }
            return val;
        }
    });
    jQuery.each([ "height", "width" ], function(i, name) {
        jQuery.cssHooks[name] = {
            "get": function(elem, computed, extra) {
                if (computed) return 0 === elem.offsetWidth && rdisplayswap.test(jQuery.css(elem, "display")) ? jQuery.swap(elem, cssShow, function() {
                    return getWidthOrHeight(elem, name, extra);
                }) : getWidthOrHeight(elem, name, extra);
            },
            "set": function(elem, value, extra) {
                var styles = extra && getStyles(elem);
                return setPositiveNumber(elem, value, extra ? augmentWidthOrHeight(elem, name, extra, support.boxSizing() && "border-box" === jQuery.css(elem, "boxSizing", false, styles), styles) : 0);
            }
        };
    });
    if (!support.opacity) jQuery.cssHooks.opacity = {
        "get": function(elem, computed) {
            return ropacity.test((computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "") ? .01 * parseFloat(RegExp.$1) + "" : computed ? "1" : "";
        },
        "set": function(elem, value) {
            var style = elem.style, currentStyle = elem.currentStyle, opacity = jQuery.isNumeric(value) ? "alpha(opacity=" + 100 * value + ")" : "", filter = currentStyle && currentStyle.filter || style.filter || "";
            style.zoom = 1;
            if ((value >= 1 || "" === value) && "" === jQuery.trim(filter.replace(ralpha, "")) && style.removeAttribute) {
                style.removeAttribute("filter");
                if ("" === value || currentStyle && !currentStyle.filter) return;
            }
            style.filter = ralpha.test(filter) ? filter.replace(ralpha, opacity) : filter + " " + opacity;
        }
    };
    jQuery.cssHooks.marginRight = addGetHookIf(support.reliableMarginRight, function(elem, computed) {
        if (computed) return jQuery.swap(elem, {
            "display": "inline-block"
        }, curCSS, [ elem, "marginRight" ]);
    });
    jQuery.each({
        "margin": "",
        "padding": "",
        "border": "Width"
    }, function(prefix, suffix) {
        jQuery.cssHooks[prefix + suffix] = {
            "expand": function(value) {
                var i = 0, expanded = {}, parts = "string" === typeof value ? value.split(" ") : [ value ];
                for (;i < 4; i++) expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
                return expanded;
            }
        };
        if (!rmargin.test(prefix)) jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
    });
    jQuery.fn.extend({
        "css": function(name, value) {
            return access(this, function(elem, name, value) {
                var styles, len, map = {}, i = 0;
                if (jQuery.isArray(name)) {
                    styles = getStyles(elem);
                    len = name.length;
                    for (;i < len; i++) map[name[i]] = jQuery.css(elem, name[i], false, styles);
                    return map;
                }
                return void 0 !== value ? jQuery.style(elem, name, value) : jQuery.css(elem, name);
            }, name, value, arguments.length > 1);
        },
        "show": function() {
            return showHide(this, true);
        },
        "hide": function() {
            return showHide(this);
        },
        "toggle": function(state) {
            if ("boolean" === typeof state) return state ? this.show() : this.hide();
            return this.each(function() {
                if (isHidden(this)) jQuery(this).show(); else jQuery(this).hide();
            });
        }
    });
    function Tween(elem, options, prop, end, easing) {
        return new Tween.prototype.init(elem, options, prop, end, easing);
    }
    jQuery.Tween = Tween;
    Tween.prototype = {
        "constructor": Tween,
        "init": function(elem, options, prop, end, easing, unit) {
            this.elem = elem;
            this.prop = prop;
            this.easing = easing || "swing";
            this.options = options;
            this.start = this.now = this.cur();
            this.end = end;
            this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
        },
        "cur": function() {
            var hooks = Tween.propHooks[this.prop];
            return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
        },
        "run": function(percent) {
            var eased, hooks = Tween.propHooks[this.prop];
            if (this.options.duration) this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration); else this.pos = eased = percent;
            this.now = (this.end - this.start) * eased + this.start;
            if (this.options.step) this.options.step.call(this.elem, this.now, this);
            if (hooks && hooks.set) hooks.set(this); else Tween.propHooks._default.set(this);
            return this;
        }
    };
    Tween.prototype.init.prototype = Tween.prototype;
    Tween.propHooks = {
        "_default": {
            "get": function(tween) {
                var result;
                if (null != tween.elem[tween.prop] && (!tween.elem.style || null == tween.elem.style[tween.prop])) return tween.elem[tween.prop];
                result = jQuery.css(tween.elem, tween.prop, "");
                return !result || "auto" === result ? 0 : result;
            },
            "set": function(tween) {
                if (jQuery.fx.step[tween.prop]) jQuery.fx.step[tween.prop](tween); else if (tween.elem.style && (null != tween.elem.style[jQuery.cssProps[tween.prop]] || jQuery.cssHooks[tween.prop])) jQuery.style(tween.elem, tween.prop, tween.now + tween.unit); else tween.elem[tween.prop] = tween.now;
            }
        }
    };
    Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
        "set": function(tween) {
            if (tween.elem.nodeType && tween.elem.parentNode) tween.elem[tween.prop] = tween.now;
        }
    };
    jQuery.easing = {
        "linear": function(p) {
            return p;
        },
        "swing": function(p) {
            return .5 - Math.cos(p * Math.PI) / 2;
        }
    };
    jQuery.fx = Tween.prototype.init;
    jQuery.fx.step = {};
    var fxNow, timerId, rfxtypes = /^(?:toggle|show|hide)$/, rfxnum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i"), rrun = /queueHooks$/, animationPrefilters = [ defaultPrefilter ], tweeners = {
        "*": [ function(prop, value) {
            var tween = this.createTween(prop, value), target = tween.cur(), parts = rfxnum.exec(value), unit = parts && parts[3] || (jQuery.cssNumber[prop] ? "" : "px"), start = (jQuery.cssNumber[prop] || "px" !== unit && +target) && rfxnum.exec(jQuery.css(tween.elem, prop)), scale = 1, maxIterations = 20;
            if (start && start[3] !== unit) {
                unit = unit || start[3];
                parts = parts || [];
                start = +target || 1;
                do {
                    scale = scale || ".5";
                    start /= scale;
                    jQuery.style(tween.elem, prop, start + unit);
                } while (scale !== (scale = tween.cur() / target) && 1 !== scale && --maxIterations);
            }
            if (parts) {
                start = tween.start = +start || +target || 0;
                tween.unit = unit;
                tween.end = parts[1] ? start + (parts[1] + 1) * parts[2] : +parts[2];
            }
            return tween;
        } ]
    };
    function createFxNow() {
        setTimeout(function() {
            fxNow = void 0;
        });
        return fxNow = jQuery.now();
    }
    function genFx(type, includeWidth) {
        var which, attrs = {
            "height": type
        }, i = 0;
        includeWidth = includeWidth ? 1 : 0;
        for (;i < 4; i += 2 - includeWidth) {
            which = cssExpand[i];
            attrs["margin" + which] = attrs["padding" + which] = type;
        }
        if (includeWidth) attrs.opacity = attrs.width = type;
        return attrs;
    }
    function createTween(value, prop, animation) {
        var tween, collection = (tweeners[prop] || []).concat(tweeners["*"]), index = 0, length = collection.length;
        for (;index < length; index++) if (tween = collection[index].call(animation, prop, value)) return tween;
    }
    function defaultPrefilter(elem, props, opts) {
        var prop, value, toggle, tween, hooks, oldfire, display, dDisplay, anim = this, orig = {}, style = elem.style, hidden = elem.nodeType && isHidden(elem), dataShow = jQuery._data(elem, "fxshow");
        if (!opts.queue) {
            hooks = jQuery._queueHooks(elem, "fx");
            if (null == hooks.unqueued) {
                hooks.unqueued = 0;
                oldfire = hooks.empty.fire;
                hooks.empty.fire = function() {
                    if (!hooks.unqueued) oldfire();
                };
            }
            hooks.unqueued++;
            anim.always(function() {
                anim.always(function() {
                    hooks.unqueued--;
                    if (!jQuery.queue(elem, "fx").length) hooks.empty.fire();
                });
            });
        }
        if (1 === elem.nodeType && ("height" in props || "width" in props)) {
            opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];
            display = jQuery.css(elem, "display");
            dDisplay = defaultDisplay(elem.nodeName);
            if ("none" === display) display = dDisplay;
            if ("inline" === display && "none" === jQuery.css(elem, "float")) if (!support.inlineBlockNeedsLayout || "inline" === dDisplay) style.display = "inline-block"; else style.zoom = 1;
        }
        if (opts.overflow) {
            style.overflow = "hidden";
            if (!support.shrinkWrapBlocks()) anim.always(function() {
                style.overflow = opts.overflow[0];
                style.overflowX = opts.overflow[1];
                style.overflowY = opts.overflow[2];
            });
        }
        for (prop in props) {
            value = props[prop];
            if (rfxtypes.exec(value)) {
                delete props[prop];
                toggle = toggle || "toggle" === value;
                if (value === (hidden ? "hide" : "show")) if ("show" === value && dataShow && void 0 !== dataShow[prop]) hidden = true; else continue;
                orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);
            }
        }
        if (!jQuery.isEmptyObject(orig)) {
            if (dataShow) {
                if ("hidden" in dataShow) hidden = dataShow.hidden;
            } else dataShow = jQuery._data(elem, "fxshow", {});
            if (toggle) dataShow.hidden = !hidden;
            if (hidden) jQuery(elem).show(); else anim.done(function() {
                jQuery(elem).hide();
            });
            anim.done(function() {
                var prop;
                jQuery._removeData(elem, "fxshow");
                for (prop in orig) jQuery.style(elem, prop, orig[prop]);
            });
            for (prop in orig) {
                tween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
                if (!(prop in dataShow)) {
                    dataShow[prop] = tween.start;
                    if (hidden) {
                        tween.end = tween.start;
                        tween.start = "width" === prop || "height" === prop ? 1 : 0;
                    }
                }
            }
        }
    }
    function propFilter(props, specialEasing) {
        var index, name, easing, value, hooks;
        for (index in props) {
            name = jQuery.camelCase(index);
            easing = specialEasing[name];
            value = props[index];
            if (jQuery.isArray(value)) {
                easing = value[1];
                value = props[index] = value[0];
            }
            if (index !== name) {
                props[name] = value;
                delete props[index];
            }
            hooks = jQuery.cssHooks[name];
            if (hooks && "expand" in hooks) {
                value = hooks.expand(value);
                delete props[name];
                for (index in value) if (!(index in props)) {
                    props[index] = value[index];
                    specialEasing[index] = easing;
                }
            } else specialEasing[name] = easing;
        }
    }
    function Animation(elem, properties, options) {
        var result, stopped, index = 0, length = animationPrefilters.length, deferred = jQuery.Deferred().always(function() {
            delete tick.elem;
        }), tick = function() {
            if (stopped) return false;
            var currentTime = fxNow || createFxNow(), remaining = Math.max(0, animation.startTime + animation.duration - currentTime), temp = remaining / animation.duration || 0, percent = 1 - temp, index = 0, length = animation.tweens.length;
            for (;index < length; index++) animation.tweens[index].run(percent);
            deferred.notifyWith(elem, [ animation, percent, remaining ]);
            if (percent < 1 && length) return remaining; else {
                deferred.resolveWith(elem, [ animation ]);
                return false;
            }
        }, animation = deferred.promise({
            "elem": elem,
            "props": jQuery.extend({}, properties),
            "opts": jQuery.extend(true, {
                "specialEasing": {}
            }, options),
            "originalProperties": properties,
            "originalOptions": options,
            "startTime": fxNow || createFxNow(),
            "duration": options.duration,
            "tweens": [],
            "createTween": function(prop, end) {
                var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
                animation.tweens.push(tween);
                return tween;
            },
            "stop": function(gotoEnd) {
                var index = 0, length = gotoEnd ? animation.tweens.length : 0;
                if (stopped) return this;
                stopped = true;
                for (;index < length; index++) animation.tweens[index].run(1);
                if (gotoEnd) deferred.resolveWith(elem, [ animation, gotoEnd ]); else deferred.rejectWith(elem, [ animation, gotoEnd ]);
                return this;
            }
        }), props = animation.props;
        propFilter(props, animation.opts.specialEasing);
        for (;index < length; index++) {
            result = animationPrefilters[index].call(animation, elem, props, animation.opts);
            if (result) return result;
        }
        jQuery.map(props, createTween, animation);
        if (jQuery.isFunction(animation.opts.start)) animation.opts.start.call(elem, animation);
        jQuery.fx.timer(jQuery.extend(tick, {
            "elem": elem,
            "anim": animation,
            "queue": animation.opts.queue
        }));
        return animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
    }
    jQuery.Animation = jQuery.extend(Animation, {
        "tweener": function(props, callback) {
            if (jQuery.isFunction(props)) {
                callback = props;
                props = [ "*" ];
            } else props = props.split(" ");
            var prop, index = 0, length = props.length;
            for (;index < length; index++) {
                prop = props[index];
                tweeners[prop] = tweeners[prop] || [];
                tweeners[prop].unshift(callback);
            }
        },
        "prefilter": function(callback, prepend) {
            if (prepend) animationPrefilters.unshift(callback); else animationPrefilters.push(callback);
        }
    });
    jQuery.speed = function(speed, easing, fn) {
        var opt = speed && "object" === typeof speed ? jQuery.extend({}, speed) : {
            "complete": fn || !fn && easing || jQuery.isFunction(speed) && speed,
            "duration": speed,
            "easing": fn && easing || easing && !jQuery.isFunction(easing) && easing
        };
        opt.duration = jQuery.fx.off ? 0 : "number" === typeof opt.duration ? opt.duration : opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default;
        if (null == opt.queue || true === opt.queue) opt.queue = "fx";
        opt.old = opt.complete;
        opt.complete = function() {
            if (jQuery.isFunction(opt.old)) opt.old.call(this);
            if (opt.queue) jQuery.dequeue(this, opt.queue);
        };
        return opt;
    };
    jQuery.fn.extend({
        "fadeTo": function(speed, to, easing, callback) {
            return this.filter(isHidden).css("opacity", 0).show().end().animate({
                "opacity": to
            }, speed, easing, callback);
        },
        "animate": function(prop, speed, easing, callback) {
            var empty = jQuery.isEmptyObject(prop), optall = jQuery.speed(speed, easing, callback), doAnimation = function() {
                var anim = Animation(this, jQuery.extend({}, prop), optall);
                if (empty || jQuery._data(this, "finish")) anim.stop(true);
            };
            doAnimation.finish = doAnimation;
            return empty || false === optall.queue ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
        },
        "stop": function(type, clearQueue, gotoEnd) {
            var stopQueue = function(hooks) {
                var stop = hooks.stop;
                delete hooks.stop;
                stop(gotoEnd);
            };
            if ("string" !== typeof type) {
                gotoEnd = clearQueue;
                clearQueue = type;
                type = void 0;
            }
            if (clearQueue && false !== type) this.queue(type || "fx", []);
            return this.each(function() {
                var dequeue = true, index = null != type && type + "queueHooks", timers = jQuery.timers, data = jQuery._data(this);
                if (index) {
                    if (data[index] && data[index].stop) stopQueue(data[index]);
                } else for (index in data) if (data[index] && data[index].stop && rrun.test(index)) stopQueue(data[index]);
                for (index = timers.length; index--; ) if (timers[index].elem === this && (null == type || timers[index].queue === type)) {
                    timers[index].anim.stop(gotoEnd);
                    dequeue = false;
                    timers.splice(index, 1);
                }
                if (dequeue || !gotoEnd) jQuery.dequeue(this, type);
            });
        },
        "finish": function(type) {
            if (false !== type) type = type || "fx";
            return this.each(function() {
                var index, data = jQuery._data(this), queue = data[type + "queue"], hooks = data[type + "queueHooks"], timers = jQuery.timers, length = queue ? queue.length : 0;
                data.finish = true;
                jQuery.queue(this, type, []);
                if (hooks && hooks.stop) hooks.stop.call(this, true);
                for (index = timers.length; index--; ) if (timers[index].elem === this && timers[index].queue === type) {
                    timers[index].anim.stop(true);
                    timers.splice(index, 1);
                }
                for (index = 0; index < length; index++) if (queue[index] && queue[index].finish) queue[index].finish.call(this);
                delete data.finish;
            });
        }
    });
    jQuery.each([ "toggle", "show", "hide" ], function(i, name) {
        var cssFn = jQuery.fn[name];
        jQuery.fn[name] = function(speed, easing, callback) {
            return null == speed || "boolean" === typeof speed ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
        };
    });
    jQuery.each({
        "slideDown": genFx("show"),
        "slideUp": genFx("hide"),
        "slideToggle": genFx("toggle"),
        "fadeIn": {
            "opacity": "show"
        },
        "fadeOut": {
            "opacity": "hide"
        },
        "fadeToggle": {
            "opacity": "toggle"
        }
    }, function(name, props) {
        jQuery.fn[name] = function(speed, easing, callback) {
            return this.animate(props, speed, easing, callback);
        };
    });
    jQuery.timers = [];
    jQuery.fx.tick = function() {
        var timer, timers = jQuery.timers, i = 0;
        fxNow = jQuery.now();
        for (;i < timers.length; i++) {
            timer = timers[i];
            if (!timer() && timers[i] === timer) timers.splice(i--, 1);
        }
        if (!timers.length) jQuery.fx.stop();
        fxNow = void 0;
    };
    jQuery.fx.timer = function(timer) {
        jQuery.timers.push(timer);
        if (timer()) jQuery.fx.start(); else jQuery.timers.pop();
    };
    jQuery.fx.interval = 13;
    jQuery.fx.start = function() {
        if (!timerId) timerId = setInterval(jQuery.fx.tick, jQuery.fx.interval);
    };
    jQuery.fx.stop = function() {
        clearInterval(timerId);
        timerId = null;
    };
    jQuery.fx.speeds = {
        "slow": 600,
        "fast": 200,
        "_default": 400
    };
    jQuery.fn.delay = function(time, type) {
        time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
        type = type || "fx";
        return this.queue(type, function(next, hooks) {
            var timeout = setTimeout(next, time);
            hooks.stop = function() {
                clearTimeout(timeout);
            };
        });
    };
    !function() {
        var a, input, select, opt, div = document.createElement("div");
        div.setAttribute("className", "t");
        div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
        a = div.getElementsByTagName("a")[0];
        select = document.createElement("select");
        opt = select.appendChild(document.createElement("option"));
        input = div.getElementsByTagName("input")[0];
        a.style.cssText = "top:1px";
        support.getSetAttribute = "t" !== div.className;
        support.style = /top/.test(a.getAttribute("style"));
        support.hrefNormalized = "/a" === a.getAttribute("href");
        support.checkOn = !!input.value;
        support.optSelected = opt.selected;
        support.enctype = !!document.createElement("form").enctype;
        select.disabled = true;
        support.optDisabled = !opt.disabled;
        input = document.createElement("input");
        input.setAttribute("value", "");
        support.input = "" === input.getAttribute("value");
        input.value = "t";
        input.setAttribute("type", "radio");
        support.radioValue = "t" === input.value;
        a = input = select = opt = div = null;
    }();
    var rreturn = /\r/g;
    jQuery.fn.extend({
        "val": function(value) {
            var hooks, ret, isFunction, elem = this[0];
            if (!arguments.length) {
                if (elem) {
                    hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];
                    if (hooks && "get" in hooks && void 0 !== (ret = hooks.get(elem, "value"))) return ret;
                    ret = elem.value;
                    return "string" === typeof ret ? ret.replace(rreturn, "") : null == ret ? "" : ret;
                }
                return;
            }
            isFunction = jQuery.isFunction(value);
            return this.each(function(i) {
                var val;
                if (1 !== this.nodeType) return;
                if (isFunction) val = value.call(this, i, jQuery(this).val()); else val = value;
                if (null == val) val = ""; else if ("number" === typeof val) val += ""; else if (jQuery.isArray(val)) val = jQuery.map(val, function(value) {
                    return null == value ? "" : value + "";
                });
                hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];
                if (!hooks || !("set" in hooks) || void 0 === hooks.set(this, val, "value")) this.value = val;
            });
        }
    });
    jQuery.extend({
        "valHooks": {
            "option": {
                "get": function(elem) {
                    var val = jQuery.find.attr(elem, "value");
                    return null != val ? val : jQuery.text(elem);
                }
            },
            "select": {
                "get": function(elem) {
                    var value, option, options = elem.options, index = elem.selectedIndex, one = "select-one" === elem.type || index < 0, values = one ? null : [], max = one ? index + 1 : options.length, i = index < 0 ? max : one ? index : 0;
                    for (;i < max; i++) {
                        option = options[i];
                        if ((option.selected || i === index) && (support.optDisabled ? !option.disabled : null === option.getAttribute("disabled")) && (!option.parentNode.disabled || !jQuery.nodeName(option.parentNode, "optgroup"))) {
                            value = jQuery(option).val();
                            if (one) return value;
                            values.push(value);
                        }
                    }
                    return values;
                },
                "set": function(elem, value) {
                    var optionSet, option, options = elem.options, values = jQuery.makeArray(value), i = options.length;
                    while (i--) {
                        option = options[i];
                        if (jQuery.inArray(jQuery.valHooks.option.get(option), values) >= 0) try {
                            option.selected = optionSet = true;
                        } catch (_) {
                            option.scrollHeight;
                        } else option.selected = false;
                    }
                    if (!optionSet) elem.selectedIndex = -1;
                    return options;
                }
            }
        }
    });
    jQuery.each([ "radio", "checkbox" ], function() {
        jQuery.valHooks[this] = {
            "set": function(elem, value) {
                if (jQuery.isArray(value)) return elem.checked = jQuery.inArray(jQuery(elem).val(), value) >= 0;
            }
        };
        if (!support.checkOn) jQuery.valHooks[this].get = function(elem) {
            return null === elem.getAttribute("value") ? "on" : elem.value;
        };
    });
    var nodeHook, boolHook, attrHandle = jQuery.expr.attrHandle, ruseDefault = /^(?:checked|selected)$/i, getSetAttribute = support.getSetAttribute, getSetInput = support.input;
    jQuery.fn.extend({
        "attr": function(name, value) {
            return access(this, jQuery.attr, name, value, arguments.length > 1);
        },
        "removeAttr": function(name) {
            return this.each(function() {
                jQuery.removeAttr(this, name);
            });
        }
    });
    jQuery.extend({
        "attr": function(elem, name, value) {
            var hooks, ret, nType = elem.nodeType;
            if (!elem || 3 === nType || 8 === nType || 2 === nType) return;
            if (typeof elem.getAttribute === strundefined) return jQuery.prop(elem, name, value);
            if (1 !== nType || !jQuery.isXMLDoc(elem)) {
                name = name.toLowerCase();
                hooks = jQuery.attrHooks[name] || (jQuery.expr.match.bool.test(name) ? boolHook : nodeHook);
            }
            if (void 0 !== value) if (null === value) jQuery.removeAttr(elem, name); else if (hooks && "set" in hooks && void 0 !== (ret = hooks.set(elem, value, name))) return ret; else {
                elem.setAttribute(name, value + "");
                return value;
            } else if (hooks && "get" in hooks && null !== (ret = hooks.get(elem, name))) return ret; else {
                ret = jQuery.find.attr(elem, name);
                return null == ret ? void 0 : ret;
            }
        },
        "removeAttr": function(elem, value) {
            var name, propName, i = 0, attrNames = value && value.match(rnotwhite);
            if (attrNames && 1 === elem.nodeType) while (name = attrNames[i++]) {
                propName = jQuery.propFix[name] || name;
                if (jQuery.expr.match.bool.test(name)) if (getSetInput && getSetAttribute || !ruseDefault.test(name)) elem[propName] = false; else elem[jQuery.camelCase("default-" + name)] = elem[propName] = false; else jQuery.attr(elem, name, "");
                elem.removeAttribute(getSetAttribute ? name : propName);
            }
        },
        "attrHooks": {
            "type": {
                "set": function(elem, value) {
                    if (!support.radioValue && "radio" === value && jQuery.nodeName(elem, "input")) {
                        var val = elem.value;
                        elem.setAttribute("type", value);
                        if (val) elem.value = val;
                        return value;
                    }
                }
            }
        }
    });
    boolHook = {
        "set": function(elem, value, name) {
            if (false === value) jQuery.removeAttr(elem, name); else if (getSetInput && getSetAttribute || !ruseDefault.test(name)) elem.setAttribute(!getSetAttribute && jQuery.propFix[name] || name, name); else elem[jQuery.camelCase("default-" + name)] = elem[name] = true;
            return name;
        }
    };
    jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function(i, name) {
        var getter = attrHandle[name] || jQuery.find.attr;
        attrHandle[name] = getSetInput && getSetAttribute || !ruseDefault.test(name) ? function(elem, name, isXML) {
            var ret, handle;
            if (!isXML) {
                handle = attrHandle[name];
                attrHandle[name] = ret;
                ret = null != getter(elem, name, isXML) ? name.toLowerCase() : null;
                attrHandle[name] = handle;
            }
            return ret;
        } : function(elem, name, isXML) {
            if (!isXML) return elem[jQuery.camelCase("default-" + name)] ? name.toLowerCase() : null;
        };
    });
    if (!getSetInput || !getSetAttribute) jQuery.attrHooks.value = {
        "set": function(elem, value, name) {
            if (jQuery.nodeName(elem, "input")) elem.defaultValue = value; else return nodeHook && nodeHook.set(elem, value, name);
        }
    };
    if (!getSetAttribute) {
        nodeHook = {
            "set": function(elem, value, name) {
                var ret = elem.getAttributeNode(name);
                if (!ret) elem.setAttributeNode(ret = elem.ownerDocument.createAttribute(name));
                ret.value = value += "";
                if ("value" === name || value === elem.getAttribute(name)) return value;
            }
        };
        attrHandle.id = attrHandle.name = attrHandle.coords = function(elem, name, isXML) {
            var ret;
            if (!isXML) return (ret = elem.getAttributeNode(name)) && "" !== ret.value ? ret.value : null;
        };
        jQuery.valHooks.button = {
            "get": function(elem, name) {
                var ret = elem.getAttributeNode(name);
                if (ret && ret.specified) return ret.value;
            },
            "set": nodeHook.set
        };
        jQuery.attrHooks.contenteditable = {
            "set": function(elem, value, name) {
                nodeHook.set(elem, "" === value ? false : value, name);
            }
        };
        jQuery.each([ "width", "height" ], function(i, name) {
            jQuery.attrHooks[name] = {
                "set": function(elem, value) {
                    if ("" === value) {
                        elem.setAttribute(name, "auto");
                        return value;
                    }
                }
            };
        });
    }
    if (!support.style) jQuery.attrHooks.style = {
        "get": function(elem) {
            return elem.style.cssText || void 0;
        },
        "set": function(elem, value) {
            return elem.style.cssText = value + "";
        }
    };
    var rfocusable = /^(?:input|select|textarea|button|object)$/i, rclickable = /^(?:a|area)$/i;
    jQuery.fn.extend({
        "prop": function(name, value) {
            return access(this, jQuery.prop, name, value, arguments.length > 1);
        },
        "removeProp": function(name) {
            name = jQuery.propFix[name] || name;
            return this.each(function() {
                try {
                    this[name] = void 0;
                    delete this[name];
                } catch (e) {}
            });
        }
    });
    jQuery.extend({
        "propFix": {
            "for": "htmlFor",
            "class": "className"
        },
        "prop": function(elem, name, value) {
            var ret, hooks, notxml, nType = elem.nodeType;
            if (!elem || 3 === nType || 8 === nType || 2 === nType) return;
            notxml = 1 !== nType || !jQuery.isXMLDoc(elem);
            if (notxml) {
                name = jQuery.propFix[name] || name;
                hooks = jQuery.propHooks[name];
            }
            if (void 0 !== value) return hooks && "set" in hooks && void 0 !== (ret = hooks.set(elem, value, name)) ? ret : elem[name] = value; else return hooks && "get" in hooks && null !== (ret = hooks.get(elem, name)) ? ret : elem[name];
        },
        "propHooks": {
            "tabIndex": {
                "get": function(elem) {
                    var tabindex = jQuery.find.attr(elem, "tabindex");
                    return tabindex ? parseInt(tabindex, 10) : rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href ? 0 : -1;
                }
            }
        }
    });
    if (!support.hrefNormalized) jQuery.each([ "href", "src" ], function(i, name) {
        jQuery.propHooks[name] = {
            "get": function(elem) {
                return elem.getAttribute(name, 4);
            }
        };
    });
    if (!support.optSelected) jQuery.propHooks.selected = {
        "get": function(elem) {
            var parent = elem.parentNode;
            if (parent) {
                parent.selectedIndex;
                if (parent.parentNode) parent.parentNode.selectedIndex;
            }
            return null;
        }
    };
    jQuery.each([ "tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable" ], function() {
        jQuery.propFix[this.toLowerCase()] = this;
    });
    if (!support.enctype) jQuery.propFix.enctype = "encoding";
    var rclass = /[\t\r\n\f]/g;
    jQuery.fn.extend({
        "addClass": function(value) {
            var classes, elem, cur, clazz, j, finalValue, i = 0, len = this.length, proceed = "string" === typeof value && value;
            if (jQuery.isFunction(value)) return this.each(function(j) {
                jQuery(this).addClass(value.call(this, j, this.className));
            });
            if (proceed) {
                classes = (value || "").match(rnotwhite) || [];
                for (;i < len; i++) {
                    elem = this[i];
                    cur = 1 === elem.nodeType && (elem.className ? (" " + elem.className + " ").replace(rclass, " ") : " ");
                    if (cur) {
                        j = 0;
                        while (clazz = classes[j++]) if (cur.indexOf(" " + clazz + " ") < 0) cur += clazz + " ";
                        finalValue = jQuery.trim(cur);
                        if (elem.className !== finalValue) elem.className = finalValue;
                    }
                }
            }
            return this;
        },
        "removeClass": function(value) {
            var classes, elem, cur, clazz, j, finalValue, i = 0, len = this.length, proceed = 0 === arguments.length || "string" === typeof value && value;
            if (jQuery.isFunction(value)) return this.each(function(j) {
                jQuery(this).removeClass(value.call(this, j, this.className));
            });
            if (proceed) {
                classes = (value || "").match(rnotwhite) || [];
                for (;i < len; i++) {
                    elem = this[i];
                    cur = 1 === elem.nodeType && (elem.className ? (" " + elem.className + " ").replace(rclass, " ") : "");
                    if (cur) {
                        j = 0;
                        while (clazz = classes[j++]) while (cur.indexOf(" " + clazz + " ") >= 0) cur = cur.replace(" " + clazz + " ", " ");
                        finalValue = value ? jQuery.trim(cur) : "";
                        if (elem.className !== finalValue) elem.className = finalValue;
                    }
                }
            }
            return this;
        },
        "toggleClass": function(value, stateVal) {
            var type = typeof value;
            if ("boolean" === typeof stateVal && "string" === type) return stateVal ? this.addClass(value) : this.removeClass(value);
            if (jQuery.isFunction(value)) return this.each(function(i) {
                jQuery(this).toggleClass(value.call(this, i, this.className, stateVal), stateVal);
            });
            return this.each(function() {
                if ("string" === type) {
                    var className, i = 0, self = jQuery(this), classNames = value.match(rnotwhite) || [];
                    while (className = classNames[i++]) if (self.hasClass(className)) self.removeClass(className); else self.addClass(className);
                } else if (type === strundefined || "boolean" === type) {
                    if (this.className) jQuery._data(this, "__className__", this.className);
                    this.className = this.className || false === value ? "" : jQuery._data(this, "__className__") || "";
                }
            });
        },
        "hasClass": function(selector) {
            var className = " " + selector + " ", i = 0, l = this.length;
            for (;i < l; i++) if (1 === this[i].nodeType && (" " + this[i].className + " ").replace(rclass, " ").indexOf(className) >= 0) return true;
            return false;
        }
    });
    jQuery.each(("blur focus focusin focusout load resize scroll unload click dblclick " + "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " + "change select submit keydown keypress keyup error contextmenu").split(" "), function(i, name) {
        jQuery.fn[name] = function(data, fn) {
            return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
        };
    });
    jQuery.fn.extend({
        "hover": function(fnOver, fnOut) {
            return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
        },
        "bind": function(types, data, fn) {
            return this.on(types, null, data, fn);
        },
        "unbind": function(types, fn) {
            return this.off(types, null, fn);
        },
        "delegate": function(selector, types, data, fn) {
            return this.on(types, selector, data, fn);
        },
        "undelegate": function(selector, types, fn) {
            return 1 === arguments.length ? this.off(selector, "**") : this.off(types, selector || "**", fn);
        }
    });
    var nonce = jQuery.now();
    var rquery = /\?/;
    var rvalidtokens = /(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;
    jQuery.parseJSON = function(data) {
        if (window.JSON && window.JSON.parse) return window.JSON.parse(data + "");
        var requireNonComma, depth = null, str = jQuery.trim(data + "");
        return str && !jQuery.trim(str.replace(rvalidtokens, function(token, comma, open, close) {
            if (requireNonComma && comma) depth = 0;
            if (0 === depth) return token;
            requireNonComma = open || comma;
            depth += !close - !open;
            return "";
        })) ? Function("return " + str)() : jQuery.error("Invalid JSON: " + data);
    };
    jQuery.parseXML = function(data) {
        var xml, tmp;
        if (!data || "string" !== typeof data) return null;
        try {
            if (window.DOMParser) {
                tmp = new DOMParser();
                xml = tmp.parseFromString(data, "text/xml");
            } else {
                xml = new ActiveXObject("Microsoft.XMLDOM");
                xml.async = "false";
                xml.loadXML(data);
            }
        } catch (e) {
            xml = void 0;
        }
        if (!xml || !xml.documentElement || xml.getElementsByTagName("parsererror").length) jQuery.error("Invalid XML: " + data);
        return xml;
    };
    var ajaxLocParts, ajaxLocation, rhash = /#.*$/, rts = /([?&])_=[^&]*/, rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/gm, rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/, rnoContent = /^(?:GET|HEAD)$/, rprotocol = /^\/\//, rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/, prefilters = {}, transports = {}, allTypes = "*/".concat("*");
    try {
        ajaxLocation = location.href;
    } catch (e) {
        ajaxLocation = document.createElement("a");
        ajaxLocation.href = "";
        ajaxLocation = ajaxLocation.href;
    }
    ajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || [];
    function addToPrefiltersOrTransports(structure) {
        return function(dataTypeExpression, func) {
            if ("string" !== typeof dataTypeExpression) {
                func = dataTypeExpression;
                dataTypeExpression = "*";
            }
            var dataType, i = 0, dataTypes = dataTypeExpression.toLowerCase().match(rnotwhite) || [];
            if (jQuery.isFunction(func)) while (dataType = dataTypes[i++]) if ("+" === dataType.charAt(0)) {
                dataType = dataType.slice(1) || "*";
                (structure[dataType] = structure[dataType] || []).unshift(func);
            } else (structure[dataType] = structure[dataType] || []).push(func);
        };
    }
    function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
        var inspected = {}, seekingTransport = structure === transports;
        function inspect(dataType) {
            var selected;
            inspected[dataType] = true;
            jQuery.each(structure[dataType] || [], function(_, prefilterOrFactory) {
                var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
                if ("string" === typeof dataTypeOrTransport && !seekingTransport && !inspected[dataTypeOrTransport]) {
                    options.dataTypes.unshift(dataTypeOrTransport);
                    inspect(dataTypeOrTransport);
                    return false;
                } else if (seekingTransport) return !(selected = dataTypeOrTransport);
            });
            return selected;
        }
        return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
    }
    function ajaxExtend(target, src) {
        var deep, key, flatOptions = jQuery.ajaxSettings.flatOptions || {};
        for (key in src) if (void 0 !== src[key]) (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
        if (deep) jQuery.extend(true, target, deep);
        return target;
    }
    function ajaxHandleResponses(s, jqXHR, responses) {
        var firstDataType, ct, finalDataType, type, contents = s.contents, dataTypes = s.dataTypes;
        while ("*" === dataTypes[0]) {
            dataTypes.shift();
            if (void 0 === ct) ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
        }
        if (ct) for (type in contents) if (contents[type] && contents[type].test(ct)) {
            dataTypes.unshift(type);
            break;
        }
        if (dataTypes[0] in responses) finalDataType = dataTypes[0]; else {
            for (type in responses) {
                if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
                    finalDataType = type;
                    break;
                }
                if (!firstDataType) firstDataType = type;
            }
            finalDataType = finalDataType || firstDataType;
        }
        if (finalDataType) {
            if (finalDataType !== dataTypes[0]) dataTypes.unshift(finalDataType);
            return responses[finalDataType];
        }
    }
    function ajaxConvert(s, response, jqXHR, isSuccess) {
        var conv2, current, conv, tmp, prev, converters = {}, dataTypes = s.dataTypes.slice();
        if (dataTypes[1]) for (conv in s.converters) converters[conv.toLowerCase()] = s.converters[conv];
        current = dataTypes.shift();
        while (current) {
            if (s.responseFields[current]) jqXHR[s.responseFields[current]] = response;
            if (!prev && isSuccess && s.dataFilter) response = s.dataFilter(response, s.dataType);
            prev = current;
            current = dataTypes.shift();
            if (current) if ("*" === current) current = prev; else if ("*" !== prev && prev !== current) {
                conv = converters[prev + " " + current] || converters["* " + current];
                if (!conv) for (conv2 in converters) {
                    tmp = conv2.split(" ");
                    if (tmp[1] === current) {
                        conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];
                        if (conv) {
                            if (true === conv) conv = converters[conv2]; else if (true !== converters[conv2]) {
                                current = tmp[0];
                                dataTypes.unshift(tmp[1]);
                            }
                            break;
                        }
                    }
                }
                if (true !== conv) if (conv && s["throws"]) response = conv(response); else try {
                    response = conv(response);
                } catch (e) {
                    return {
                        "state": "parsererror",
                        "error": conv ? e : "No conversion from " + prev + " to " + current
                    };
                }
            }
        }
        return {
            "state": "success",
            "data": response
        };
    }
    jQuery.extend({
        "active": 0,
        "lastModified": {},
        "etag": {},
        "ajaxSettings": {
            "url": ajaxLocation,
            "type": "GET",
            "isLocal": rlocalProtocol.test(ajaxLocParts[1]),
            "global": true,
            "processData": true,
            "async": true,
            "contentType": "application/x-www-form-urlencoded; charset=UTF-8",
            "accepts": {
                "*": allTypes,
                "text": "text/plain",
                "html": "text/html",
                "xml": "application/xml, text/xml",
                "json": "application/json, text/javascript"
            },
            "contents": {
                "xml": /xml/,
                "html": /html/,
                "json": /json/
            },
            "responseFields": {
                "xml": "responseXML",
                "text": "responseText",
                "json": "responseJSON"
            },
            "converters": {
                "* text": String,
                "text html": true,
                "text json": jQuery.parseJSON,
                "text xml": jQuery.parseXML
            },
            "flatOptions": {
                "url": true,
                "context": true
            }
        },
        "ajaxSetup": function(target, settings) {
            return settings ? ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) : ajaxExtend(jQuery.ajaxSettings, target);
        },
        "ajaxPrefilter": addToPrefiltersOrTransports(prefilters),
        "ajaxTransport": addToPrefiltersOrTransports(transports),
        "ajax": function(url, options) {
            if ("object" === typeof url) {
                options = url;
                url = void 0;
            }
            options = options || {};
            var parts, i, cacheURL, responseHeadersString, timeoutTimer, fireGlobals, transport, responseHeaders, s = jQuery.ajaxSetup({}, options), callbackContext = s.context || s, globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event, deferred = jQuery.Deferred(), completeDeferred = jQuery.Callbacks("once memory"), statusCode = s.statusCode || {}, requestHeaders = {}, requestHeadersNames = {}, state = 0, strAbort = "canceled", jqXHR = {
                "readyState": 0,
                "getResponseHeader": function(key) {
                    var match;
                    if (2 === state) {
                        if (!responseHeaders) {
                            responseHeaders = {};
                            while (match = rheaders.exec(responseHeadersString)) responseHeaders[match[1].toLowerCase()] = match[2];
                        }
                        match = responseHeaders[key.toLowerCase()];
                    }
                    return null == match ? null : match;
                },
                "getAllResponseHeaders": function() {
                    return 2 === state ? responseHeadersString : null;
                },
                "setRequestHeader": function(name, value) {
                    var lname = name.toLowerCase();
                    if (!state) {
                        name = requestHeadersNames[lname] = requestHeadersNames[lname] || name;
                        requestHeaders[name] = value;
                    }
                    return this;
                },
                "overrideMimeType": function(type) {
                    if (!state) s.mimeType = type;
                    return this;
                },
                "statusCode": function(map) {
                    var code;
                    if (map) if (state < 2) for (code in map) statusCode[code] = [ statusCode[code], map[code] ]; else jqXHR.always(map[jqXHR.status]);
                    return this;
                },
                "abort": function(statusText) {
                    var finalText = statusText || strAbort;
                    if (transport) transport.abort(finalText);
                    done(0, finalText);
                    return this;
                }
            };
            deferred.promise(jqXHR).complete = completeDeferred.add;
            jqXHR.success = jqXHR.done;
            jqXHR.error = jqXHR.fail;
            s.url = ((url || s.url || ajaxLocation) + "").replace(rhash, "").replace(rprotocol, ajaxLocParts[1] + "//");
            s.type = options.method || options.type || s.method || s.type;
            s.dataTypes = jQuery.trim(s.dataType || "*").toLowerCase().match(rnotwhite) || [ "" ];
            if (null == s.crossDomain) {
                parts = rurl.exec(s.url.toLowerCase());
                s.crossDomain = !!(parts && (parts[1] !== ajaxLocParts[1] || parts[2] !== ajaxLocParts[2] || (parts[3] || ("http:" === parts[1] ? "80" : "443")) !== (ajaxLocParts[3] || ("http:" === ajaxLocParts[1] ? "80" : "443"))));
            }
            if (s.data && s.processData && "string" !== typeof s.data) s.data = jQuery.param(s.data, s.traditional);
            inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);
            if (2 === state) return jqXHR;
            fireGlobals = s.global;
            if (fireGlobals && 0 === jQuery.active++) jQuery.event.trigger("ajaxStart");
            s.type = s.type.toUpperCase();
            s.hasContent = !rnoContent.test(s.type);
            cacheURL = s.url;
            if (!s.hasContent) {
                if (s.data) {
                    cacheURL = s.url += (rquery.test(cacheURL) ? "&" : "?") + s.data;
                    delete s.data;
                }
                if (false === s.cache) s.url = rts.test(cacheURL) ? cacheURL.replace(rts, "$1_=" + nonce++) : cacheURL + (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce++;
            }
            if (s.ifModified) {
                if (jQuery.lastModified[cacheURL]) jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
                if (jQuery.etag[cacheURL]) jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
            }
            if (s.data && s.hasContent && false !== s.contentType || options.contentType) jqXHR.setRequestHeader("Content-Type", s.contentType);
            jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + ("*" !== s.dataTypes[0] ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]);
            for (i in s.headers) jqXHR.setRequestHeader(i, s.headers[i]);
            if (s.beforeSend && (false === s.beforeSend.call(callbackContext, jqXHR, s) || 2 === state)) return jqXHR.abort();
            strAbort = "abort";
            for (i in {
                "success": 1,
                "error": 1,
                "complete": 1
            }) jqXHR[i](s[i]);
            transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);
            if (!transport) done(-1, "No Transport"); else {
                jqXHR.readyState = 1;
                if (fireGlobals) globalEventContext.trigger("ajaxSend", [ jqXHR, s ]);
                if (s.async && s.timeout > 0) timeoutTimer = setTimeout(function() {
                    jqXHR.abort("timeout");
                }, s.timeout);
                try {
                    state = 1;
                    transport.send(requestHeaders, done);
                } catch (e) {
                    if (state < 2) done(-1, e); else throw e;
                }
            }
            function done(status, nativeStatusText, responses, headers) {
                var isSuccess, success, error, response, modified, statusText = nativeStatusText;
                if (2 === state) return;
                state = 2;
                if (timeoutTimer) clearTimeout(timeoutTimer);
                transport = void 0;
                responseHeadersString = headers || "";
                jqXHR.readyState = status > 0 ? 4 : 0;
                isSuccess = status >= 200 && status < 300 || 304 === status;
                if (responses) response = ajaxHandleResponses(s, jqXHR, responses);
                response = ajaxConvert(s, response, jqXHR, isSuccess);
                if (isSuccess) {
                    if (s.ifModified) {
                        modified = jqXHR.getResponseHeader("Last-Modified");
                        if (modified) jQuery.lastModified[cacheURL] = modified;
                        modified = jqXHR.getResponseHeader("etag");
                        if (modified) jQuery.etag[cacheURL] = modified;
                    }
                    if (204 === status || "HEAD" === s.type) statusText = "nocontent"; else if (304 === status) statusText = "notmodified"; else {
                        statusText = response.state;
                        success = response.data;
                        error = response.error;
                        isSuccess = !error;
                    }
                } else {
                    error = statusText;
                    if (status || !statusText) {
                        statusText = "error";
                        if (status < 0) status = 0;
                    }
                }
                jqXHR.status = status;
                jqXHR.statusText = (nativeStatusText || statusText) + "";
                if (isSuccess) deferred.resolveWith(callbackContext, [ success, statusText, jqXHR ]); else deferred.rejectWith(callbackContext, [ jqXHR, statusText, error ]);
                jqXHR.statusCode(statusCode);
                statusCode = void 0;
                if (fireGlobals) globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [ jqXHR, s, isSuccess ? success : error ]);
                completeDeferred.fireWith(callbackContext, [ jqXHR, statusText ]);
                if (fireGlobals) {
                    globalEventContext.trigger("ajaxComplete", [ jqXHR, s ]);
                    if (!--jQuery.active) jQuery.event.trigger("ajaxStop");
                }
            }
            return jqXHR;
        },
        "getJSON": function(url, data, callback) {
            return jQuery.get(url, data, callback, "json");
        },
        "getScript": function(url, callback) {
            return jQuery.get(url, void 0, callback, "script");
        }
    });
    jQuery.each([ "get", "post" ], function(i, method) {
        jQuery[method] = function(url, data, callback, type) {
            if (jQuery.isFunction(data)) {
                type = type || callback;
                callback = data;
                data = void 0;
            }
            return jQuery.ajax({
                "url": url,
                "type": method,
                "dataType": type,
                "data": data,
                "success": callback
            });
        };
    });
    jQuery.each([ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function(i, type) {
        jQuery.fn[type] = function(fn) {
            return this.on(type, fn);
        };
    });
    jQuery._evalUrl = function(url) {
        return jQuery.ajax({
            "url": url,
            "type": "GET",
            "dataType": "script",
            "async": false,
            "global": false,
            "throws": true
        });
    };
    jQuery.fn.extend({
        "wrapAll": function(html) {
            if (jQuery.isFunction(html)) return this.each(function(i) {
                jQuery(this).wrapAll(html.call(this, i));
            });
            if (this[0]) {
                var wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);
                if (this[0].parentNode) wrap.insertBefore(this[0]);
                wrap.map(function() {
                    var elem = this;
                    while (elem.firstChild && 1 === elem.firstChild.nodeType) elem = elem.firstChild;
                    return elem;
                }).append(this);
            }
            return this;
        },
        "wrapInner": function(html) {
            if (jQuery.isFunction(html)) return this.each(function(i) {
                jQuery(this).wrapInner(html.call(this, i));
            });
            return this.each(function() {
                var self = jQuery(this), contents = self.contents();
                if (contents.length) contents.wrapAll(html); else self.append(html);
            });
        },
        "wrap": function(html) {
            var isFunction = jQuery.isFunction(html);
            return this.each(function(i) {
                jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);
            });
        },
        "unwrap": function() {
            return this.parent().each(function() {
                if (!jQuery.nodeName(this, "body")) jQuery(this).replaceWith(this.childNodes);
            }).end();
        }
    });
    jQuery.expr.filters.hidden = function(elem) {
        return elem.offsetWidth <= 0 && elem.offsetHeight <= 0 || !support.reliableHiddenOffsets() && "none" === (elem.style && elem.style.display || jQuery.css(elem, "display"));
    };
    jQuery.expr.filters.visible = function(elem) {
        return !jQuery.expr.filters.hidden(elem);
    };
    var r20 = /%20/g, rbracket = /\[\]$/, rCRLF = /\r?\n/g, rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i, rsubmittable = /^(?:input|select|textarea|keygen)/i;
    function buildParams(prefix, obj, traditional, add) {
        var name;
        if (jQuery.isArray(obj)) jQuery.each(obj, function(i, v) {
            if (traditional || rbracket.test(prefix)) add(prefix, v); else buildParams(prefix + "[" + ("object" === typeof v ? i : "") + "]", v, traditional, add);
        }); else if (!traditional && "object" === jQuery.type(obj)) for (name in obj) buildParams(prefix + "[" + name + "]", obj[name], traditional, add); else add(prefix, obj);
    }
    jQuery.param = function(a, traditional) {
        var prefix, s = [], add = function(key, value) {
            value = jQuery.isFunction(value) ? value() : null == value ? "" : value;
            s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value);
        };
        if (void 0 === traditional) traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
        if (jQuery.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) jQuery.each(a, function() {
            add(this.name, this.value);
        }); else for (prefix in a) buildParams(prefix, a[prefix], traditional, add);
        return s.join("&").replace(r20, "+");
    };
    jQuery.fn.extend({
        "serialize": function() {
            return jQuery.param(this.serializeArray());
        },
        "serializeArray": function() {
            return this.map(function() {
                var elements = jQuery.prop(this, "elements");
                return elements ? jQuery.makeArray(elements) : this;
            }).filter(function() {
                var type = this.type;
                return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
            }).map(function(i, elem) {
                var val = jQuery(this).val();
                return null == val ? null : jQuery.isArray(val) ? jQuery.map(val, function(val) {
                    return {
                        "name": elem.name,
                        "value": val.replace(rCRLF, "\r\n")
                    };
                }) : {
                    "name": elem.name,
                    "value": val.replace(rCRLF, "\r\n")
                };
            }).get();
        }
    });
    jQuery.ajaxSettings.xhr = void 0 !== window.ActiveXObject ? function() {
        return !this.isLocal && /^(get|post|head|put|delete|options)$/i.test(this.type) && createStandardXHR() || createActiveXHR();
    } : createStandardXHR;
    var xhrId = 0, xhrCallbacks = {}, xhrSupported = jQuery.ajaxSettings.xhr();
    if (window.ActiveXObject) jQuery(window).on("unload", function() {
        for (var key in xhrCallbacks) xhrCallbacks[key](void 0, true);
    });
    support.cors = !!xhrSupported && "withCredentials" in xhrSupported;
    xhrSupported = support.ajax = !!xhrSupported;
    if (xhrSupported) jQuery.ajaxTransport(function(options) {
        if (!options.crossDomain || support.cors) {
            var callback;
            return {
                "send": function(headers, complete) {
                    var i, xhr = options.xhr(), id = ++xhrId;
                    xhr.open(options.type, options.url, options.async, options.username, options.password);
                    if (options.xhrFields) for (i in options.xhrFields) xhr[i] = options.xhrFields[i];
                    if (options.mimeType && xhr.overrideMimeType) xhr.overrideMimeType(options.mimeType);
                    if (!options.crossDomain && !headers["X-Requested-With"]) headers["X-Requested-With"] = "XMLHttpRequest";
                    for (i in headers) if (void 0 !== headers[i]) xhr.setRequestHeader(i, headers[i] + "");
                    xhr.send(options.hasContent && options.data || null);
                    callback = function(_, isAbort) {
                        var status, statusText, responses;
                        if (callback && (isAbort || 4 === xhr.readyState)) {
                            delete xhrCallbacks[id];
                            callback = void 0;
                            xhr.onreadystatechange = jQuery.noop;
                            if (isAbort) {
                                if (4 !== xhr.readyState) xhr.abort();
                            } else {
                                responses = {};
                                status = xhr.status;
                                if ("string" === typeof xhr.responseText) responses.text = xhr.responseText;
                                try {
                                    statusText = xhr.statusText;
                                } catch (e) {
                                    statusText = "";
                                }
                                if (!status && options.isLocal && !options.crossDomain) status = responses.text ? 200 : 404; else if (1223 === status) status = 204;
                            }
                        }
                        if (responses) complete(status, statusText, responses, xhr.getAllResponseHeaders());
                    };
                    if (!options.async) callback(); else if (4 === xhr.readyState) setTimeout(callback); else xhr.onreadystatechange = xhrCallbacks[id] = callback;
                },
                "abort": function() {
                    if (callback) callback(void 0, true);
                }
            };
        }
    });
    function createStandardXHR() {
        try {
            return new window.XMLHttpRequest();
        } catch (e) {}
    }
    function createActiveXHR() {
        try {
            return new window.ActiveXObject("Microsoft.XMLHTTP");
        } catch (e) {}
    }
    jQuery.ajaxSetup({
        "accepts": {
            "script": "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
        },
        "contents": {
            "script": /(?:java|ecma)script/
        },
        "converters": {
            "text script": function(text) {
                jQuery.globalEval(text);
                return text;
            }
        }
    });
    jQuery.ajaxPrefilter("script", function(s) {
        if (void 0 === s.cache) s.cache = false;
        if (s.crossDomain) {
            s.type = "GET";
            s.global = false;
        }
    });
    jQuery.ajaxTransport("script", function(s) {
        if (s.crossDomain) {
            var script, head = document.head || jQuery("head")[0] || document.documentElement;
            return {
                "send": function(_, callback) {
                    script = document.createElement("script");
                    script.async = true;
                    if (s.scriptCharset) script.charset = s.scriptCharset;
                    script.src = s.url;
                    script.onload = script.onreadystatechange = function(_, isAbort) {
                        if (isAbort || !script.readyState || /loaded|complete/.test(script.readyState)) {
                            script.onload = script.onreadystatechange = null;
                            if (script.parentNode) script.parentNode.removeChild(script);
                            script = null;
                            if (!isAbort) callback(200, "success");
                        }
                    };
                    head.insertBefore(script, head.firstChild);
                },
                "abort": function() {
                    if (script) script.onload(void 0, true);
                }
            };
        }
    });
    var oldCallbacks = [], rjsonp = /(=)\?(?=&|$)|\?\?/;
    jQuery.ajaxSetup({
        "jsonp": "callback",
        "jsonpCallback": function() {
            var callback = oldCallbacks.pop() || jQuery.expando + "_" + nonce++;
            this[callback] = true;
            return callback;
        }
    });
    jQuery.ajaxPrefilter("json jsonp", function(s, originalSettings, jqXHR) {
        var callbackName, overwritten, responseContainer, jsonProp = false !== s.jsonp && (rjsonp.test(s.url) ? "url" : "string" === typeof s.data && !(s.contentType || "").indexOf("application/x-www-form-urlencoded") && rjsonp.test(s.data) && "data");
        if (jsonProp || "jsonp" === s.dataTypes[0]) {
            callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;
            if (jsonProp) s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName); else if (false !== s.jsonp) s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
            s.converters["script json"] = function() {
                if (!responseContainer) jQuery.error(callbackName + " was not called");
                return responseContainer[0];
            };
            s.dataTypes[0] = "json";
            overwritten = window[callbackName];
            window[callbackName] = function() {
                responseContainer = arguments;
            };
            jqXHR.always(function() {
                window[callbackName] = overwritten;
                if (s[callbackName]) {
                    s.jsonpCallback = originalSettings.jsonpCallback;
                    oldCallbacks.push(callbackName);
                }
                if (responseContainer && jQuery.isFunction(overwritten)) overwritten(responseContainer[0]);
                responseContainer = overwritten = void 0;
            });
            return "script";
        }
    });
    jQuery.parseHTML = function(data, context, keepScripts) {
        if (!data || "string" !== typeof data) return null;
        if ("boolean" === typeof context) {
            keepScripts = context;
            context = false;
        }
        context = context || document;
        var parsed = rsingleTag.exec(data), scripts = !keepScripts && [];
        if (parsed) return [ context.createElement(parsed[1]) ];
        parsed = jQuery.buildFragment([ data ], context, scripts);
        if (scripts && scripts.length) jQuery(scripts).remove();
        return jQuery.merge([], parsed.childNodes);
    };
    var _load = jQuery.fn.load;
    jQuery.fn.load = function(url, params, callback) {
        if ("string" !== typeof url && _load) return _load.apply(this, arguments);
        var selector, response, type, self = this, off = url.indexOf(" ");
        if (off >= 0) {
            selector = url.slice(off, url.length);
            url = url.slice(0, off);
        }
        if (jQuery.isFunction(params)) {
            callback = params;
            params = void 0;
        } else if (params && "object" === typeof params) type = "POST";
        if (self.length > 0) jQuery.ajax({
            "url": url,
            "type": type,
            "dataType": "html",
            "data": params
        }).done(function(responseText) {
            response = arguments;
            self.html(selector ? jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) : responseText);
        }).complete(callback && function(jqXHR, status) {
            self.each(callback, response || [ jqXHR.responseText, status, jqXHR ]);
        });
        return this;
    };
    jQuery.expr.filters.animated = function(elem) {
        return jQuery.grep(jQuery.timers, function(fn) {
            return elem === fn.elem;
        }).length;
    };
    var docElem = window.document.documentElement;
    function getWindow(elem) {
        return jQuery.isWindow(elem) ? elem : 9 === elem.nodeType ? elem.defaultView || elem.parentWindow : false;
    }
    jQuery.offset = {
        "setOffset": function(elem, options, i) {
            var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition, position = jQuery.css(elem, "position"), curElem = jQuery(elem), props = {};
            if ("static" === position) elem.style.position = "relative";
            curOffset = curElem.offset();
            curCSSTop = jQuery.css(elem, "top");
            curCSSLeft = jQuery.css(elem, "left");
            calculatePosition = ("absolute" === position || "fixed" === position) && jQuery.inArray("auto", [ curCSSTop, curCSSLeft ]) > -1;
            if (calculatePosition) {
                curPosition = curElem.position();
                curTop = curPosition.top;
                curLeft = curPosition.left;
            } else {
                curTop = parseFloat(curCSSTop) || 0;
                curLeft = parseFloat(curCSSLeft) || 0;
            }
            if (jQuery.isFunction(options)) options = options.call(elem, i, curOffset);
            if (null != options.top) props.top = options.top - curOffset.top + curTop;
            if (null != options.left) props.left = options.left - curOffset.left + curLeft;
            if ("using" in options) options.using.call(elem, props); else curElem.css(props);
        }
    };
    jQuery.fn.extend({
        "offset": function(options) {
            if (arguments.length) return void 0 === options ? this : this.each(function(i) {
                jQuery.offset.setOffset(this, options, i);
            });
            var docElem, win, box = {
                "top": 0,
                "left": 0
            }, elem = this[0], doc = elem && elem.ownerDocument;
            if (!doc) return;
            docElem = doc.documentElement;
            if (!jQuery.contains(docElem, elem)) return box;
            if (typeof elem.getBoundingClientRect !== strundefined) box = elem.getBoundingClientRect();
            win = getWindow(doc);
            return {
                "top": box.top + (win.pageYOffset || docElem.scrollTop) - (docElem.clientTop || 0),
                "left": box.left + (win.pageXOffset || docElem.scrollLeft) - (docElem.clientLeft || 0)
            };
        },
        "position": function() {
            if (!this[0]) return;
            var offsetParent, offset, parentOffset = {
                "top": 0,
                "left": 0
            }, elem = this[0];
            if ("fixed" === jQuery.css(elem, "position")) offset = elem.getBoundingClientRect(); else {
                offsetParent = this.offsetParent();
                offset = this.offset();
                if (!jQuery.nodeName(offsetParent[0], "html")) parentOffset = offsetParent.offset();
                parentOffset.top += jQuery.css(offsetParent[0], "borderTopWidth", true);
                parentOffset.left += jQuery.css(offsetParent[0], "borderLeftWidth", true);
            }
            return {
                "top": offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
                "left": offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
            };
        },
        "offsetParent": function() {
            return this.map(function() {
                var offsetParent = this.offsetParent || docElem;
                while (offsetParent && !jQuery.nodeName(offsetParent, "html") && "static" === jQuery.css(offsetParent, "position")) offsetParent = offsetParent.offsetParent;
                return offsetParent || docElem;
            });
        }
    });
    jQuery.each({
        "scrollLeft": "pageXOffset",
        "scrollTop": "pageYOffset"
    }, function(method, prop) {
        var top = /Y/.test(prop);
        jQuery.fn[method] = function(val) {
            return access(this, function(elem, method, val) {
                var win = getWindow(elem);
                if (void 0 === val) return win ? prop in win ? win[prop] : win.document.documentElement[method] : elem[method];
                if (win) win.scrollTo(!top ? val : jQuery(win).scrollLeft(), top ? val : jQuery(win).scrollTop()); else elem[method] = val;
            }, method, val, arguments.length, null);
        };
    });
    jQuery.each([ "top", "left" ], function(i, prop) {
        jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function(elem, computed) {
            if (computed) {
                computed = curCSS(elem, prop);
                return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + "px" : computed;
            }
        });
    });
    jQuery.each({
        "Height": "height",
        "Width": "width"
    }, function(name, type) {
        jQuery.each({
            "padding": "inner" + name,
            "content": type,
            "": "outer" + name
        }, function(defaultExtra, funcName) {
            jQuery.fn[funcName] = function(margin, value) {
                var chainable = arguments.length && (defaultExtra || "boolean" !== typeof margin), extra = defaultExtra || (true === margin || true === value ? "margin" : "border");
                return access(this, function(elem, type, value) {
                    var doc;
                    if (jQuery.isWindow(elem)) return elem.document.documentElement["client" + name];
                    if (9 === elem.nodeType) {
                        doc = elem.documentElement;
                        return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);
                    }
                    return void 0 === value ? jQuery.css(elem, type, extra) : jQuery.style(elem, type, value, extra);
                }, type, chainable ? margin : void 0, chainable, null);
            };
        });
    });
    jQuery.fn.size = function() {
        return this.length;
    };
    jQuery.fn.andSelf = jQuery.fn.addBack;
    if ("function" === typeof define && define.amd) define("jquery", [], function() {
        return jQuery;
    });
    var _jQuery = window.jQuery, _$ = window.$;
    jQuery.noConflict = function(deep) {
        if (window.$ === jQuery) window.$ = _$;
        if (deep && window.jQuery === jQuery) window.jQuery = _jQuery;
        return jQuery;
    };
    if (typeof noGlobal === strundefined) window.jQuery = window.$ = jQuery;
    return jQuery;
});

!function(jQuery, window, undefined) {
    var warnedAbout = {};
    jQuery.migrateWarnings = [];
    if (!jQuery.migrateMute && window.console && window.console.log) window.console.log("JQMIGRATE: Logging is active");
    if (jQuery.migrateTrace === undefined) jQuery.migrateTrace = true;
    jQuery.migrateReset = function() {
        warnedAbout = {};
        jQuery.migrateWarnings.length = 0;
    };
    function migrateWarn(msg) {
        var console = window.console;
        if (!warnedAbout[msg]) {
            warnedAbout[msg] = true;
            jQuery.migrateWarnings.push(msg);
            if (console && console.warn && !jQuery.migrateMute) {
                console.warn("JQMIGRATE: " + msg);
                if (jQuery.migrateTrace && console.trace) console.trace();
            }
        }
    }
    function migrateWarnProp(obj, prop, value, msg) {
        if (Object.defineProperty) try {
            Object.defineProperty(obj, prop, {
                "configurable": true,
                "enumerable": true,
                "get": function() {
                    migrateWarn(msg);
                    return value;
                },
                "set": function(newValue) {
                    migrateWarn(msg);
                    value = newValue;
                }
            });
            return;
        } catch (err) {}
        jQuery._definePropertyBroken = true;
        obj[prop] = value;
    }
    if ("BackCompat" === document.compatMode) migrateWarn("jQuery is not compatible with Quirks Mode");
    var attrFn = jQuery("<input/>", {
        "size": 1
    }).attr("size") && jQuery.attrFn, oldAttr = jQuery.attr, valueAttrGet = jQuery.attrHooks.value && jQuery.attrHooks.value.get || function() {
        return null;
    }, valueAttrSet = jQuery.attrHooks.value && jQuery.attrHooks.value.set || function() {
        return undefined;
    }, rnoType = /^(?:input|button)$/i, rnoAttrNodeType = /^[238]$/, rboolean = /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i, ruseDefault = /^(?:checked|selected)$/i;
    migrateWarnProp(jQuery, "attrFn", attrFn || {}, "jQuery.attrFn is deprecated");
    jQuery.attr = function(elem, name, value, pass) {
        var lowerName = name.toLowerCase(), nType = elem && elem.nodeType;
        if (pass) {
            if (oldAttr.length < 4) migrateWarn("jQuery.fn.attr( props, pass ) is deprecated");
            if (elem && !rnoAttrNodeType.test(nType) && (attrFn ? name in attrFn : jQuery.isFunction(jQuery.fn[name]))) return jQuery(elem)[name](value);
        }
        if ("type" === name && value !== undefined && rnoType.test(elem.nodeName) && elem.parentNode) migrateWarn("Can't change the 'type' of an input or button in IE 6/7/8");
        if (!jQuery.attrHooks[lowerName] && rboolean.test(lowerName)) {
            jQuery.attrHooks[lowerName] = {
                "get": function(elem, name) {
                    var attrNode, property = jQuery.prop(elem, name);
                    return true === property || "boolean" !== typeof property && (attrNode = elem.getAttributeNode(name)) && false !== attrNode.nodeValue ? name.toLowerCase() : undefined;
                },
                "set": function(elem, value, name) {
                    var propName;
                    if (false === value) jQuery.removeAttr(elem, name); else {
                        propName = jQuery.propFix[name] || name;
                        if (propName in elem) elem[propName] = true;
                        elem.setAttribute(name, name.toLowerCase());
                    }
                    return name;
                }
            };
            if (ruseDefault.test(lowerName)) migrateWarn("jQuery.fn.attr('" + lowerName + "') may use property instead of attribute");
        }
        return oldAttr.call(jQuery, elem, name, value);
    };
    jQuery.attrHooks.value = {
        "get": function(elem, name) {
            var nodeName = (elem.nodeName || "").toLowerCase();
            if ("button" === nodeName) return valueAttrGet.apply(this, arguments);
            if ("input" !== nodeName && "option" !== nodeName) migrateWarn("jQuery.fn.attr('value') no longer gets properties");
            return name in elem ? elem.value : null;
        },
        "set": function(elem, value) {
            var nodeName = (elem.nodeName || "").toLowerCase();
            if ("button" === nodeName) return valueAttrSet.apply(this, arguments);
            if ("input" !== nodeName && "option" !== nodeName) migrateWarn("jQuery.fn.attr('value', val) no longer sets properties");
            elem.value = value;
        }
    };
    var matched, browser, oldInit = jQuery.fn.init, oldParseJSON = jQuery.parseJSON, rquickExpr = /^([^<]*)(<[\w\W]+>)([^>]*)$/;
    jQuery.fn.init = function(selector, context, rootjQuery) {
        var match;
        if (selector && "string" === typeof selector && !jQuery.isPlainObject(context) && (match = rquickExpr.exec(jQuery.trim(selector))) && match[0]) {
            if ("<" !== selector.charAt(0)) migrateWarn("$(html) HTML strings must start with '<' character");
            if (match[3]) migrateWarn("$(html) HTML text after last tag is ignored");
            if ("#" === match[0].charAt(0)) {
                migrateWarn("HTML string cannot start with a '#' character");
                jQuery.error("JQMIGRATE: Invalid selector string (XSS)");
            }
            if (context && context.context) context = context.context;
            if (jQuery.parseHTML) return oldInit.call(this, jQuery.parseHTML(match[2], context, true), context, rootjQuery);
        }
        return oldInit.apply(this, arguments);
    };
    jQuery.fn.init.prototype = jQuery.fn;
    jQuery.parseJSON = function(json) {
        if (!json && null !== json) {
            migrateWarn("jQuery.parseJSON requires a valid JSON string");
            return null;
        }
        return oldParseJSON.apply(this, arguments);
    };
    jQuery.uaMatch = function(ua) {
        ua = ua.toLowerCase();
        var match = /(chrome)[ \/]([\w.]+)/.exec(ua) || /(webkit)[ \/]([\w.]+)/.exec(ua) || /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(ua) || /(msie) ([\w.]+)/.exec(ua) || ua.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(ua) || [];
        return {
            "browser": match[1] || "",
            "version": match[2] || "0"
        };
    };
    if (!jQuery.browser) {
        matched = jQuery.uaMatch(navigator.userAgent);
        browser = {};
        if (matched.browser) {
            browser[matched.browser] = true;
            browser.version = matched.version;
        }
        if (browser.chrome) browser.webkit = true; else if (browser.webkit) browser.safari = true;
        jQuery.browser = browser;
    }
    migrateWarnProp(jQuery, "browser", jQuery.browser, "jQuery.browser is deprecated");
    jQuery.sub = function() {
        function jQuerySub(selector, context) {
            return new jQuerySub.fn.init(selector, context);
        }
        jQuery.extend(true, jQuerySub, this);
        jQuerySub.superclass = this;
        jQuerySub.fn = jQuerySub.prototype = this();
        jQuerySub.fn.constructor = jQuerySub;
        jQuerySub.sub = this.sub;
        jQuerySub.fn.init = function init(selector, context) {
            if (context && context instanceof jQuery && !(context instanceof jQuerySub)) context = jQuerySub(context);
            return jQuery.fn.init.call(this, selector, context, rootjQuerySub);
        };
        jQuerySub.fn.init.prototype = jQuerySub.fn;
        var rootjQuerySub = jQuerySub(document);
        migrateWarn("jQuery.sub() is deprecated");
        return jQuerySub;
    };
    jQuery.ajaxSetup({
        "converters": {
            "text json": jQuery.parseJSON
        }
    });
    var oldFnData = jQuery.fn.data;
    jQuery.fn.data = function(name) {
        var ret, evt, elem = this[0];
        if (elem && "events" === name && 1 === arguments.length) {
            ret = jQuery.data(elem, name);
            evt = jQuery._data(elem, name);
            if ((ret === undefined || ret === evt) && evt !== undefined) {
                migrateWarn("Use of jQuery.fn.data('events') is deprecated");
                return evt;
            }
        }
        return oldFnData.apply(this, arguments);
    };
    var rscriptType = /\/(java|ecma)script/i, oldSelf = jQuery.fn.andSelf || jQuery.fn.addBack;
    jQuery.fn.andSelf = function() {
        migrateWarn("jQuery.fn.andSelf() replaced by jQuery.fn.addBack()");
        return oldSelf.apply(this, arguments);
    };
    if (!jQuery.clean) jQuery.clean = function(elems, context, fragment, scripts) {
        context = context || document;
        context = !context.nodeType && context[0] || context;
        context = context.ownerDocument || context;
        migrateWarn("jQuery.clean() is deprecated");
        var i, elem, handleScript, jsTags, ret = [];
        jQuery.merge(ret, jQuery.buildFragment(elems, context).childNodes);
        if (fragment) {
            handleScript = function(elem) {
                if (!elem.type || rscriptType.test(elem.type)) return scripts ? scripts.push(elem.parentNode ? elem.parentNode.removeChild(elem) : elem) : fragment.appendChild(elem);
            };
            for (i = 0; null != (elem = ret[i]); i++) if (!(jQuery.nodeName(elem, "script") && handleScript(elem))) {
                fragment.appendChild(elem);
                if ("undefined" !== typeof elem.getElementsByTagName) {
                    jsTags = jQuery.grep(jQuery.merge([], elem.getElementsByTagName("script")), handleScript);
                    ret.splice.apply(ret, [ i + 1, 0 ].concat(jsTags));
                    i += jsTags.length;
                }
            }
        }
        return ret;
    };
    var eventAdd = jQuery.event.add, eventRemove = jQuery.event.remove, eventTrigger = jQuery.event.trigger, oldToggle = jQuery.fn.toggle, oldLive = jQuery.fn.live, oldDie = jQuery.fn.die, ajaxEvents = "ajaxStart|ajaxStop|ajaxSend|ajaxComplete|ajaxError|ajaxSuccess", rajaxEvent = new RegExp("\\b(?:" + ajaxEvents + ")\\b"), rhoverHack = /(?:^|\s)hover(\.\S+|)\b/, hoverHack = function(events) {
        if ("string" !== typeof events || jQuery.event.special.hover) return events;
        if (rhoverHack.test(events)) migrateWarn("'hover' pseudo-event is deprecated, use 'mouseenter mouseleave'");
        return events && events.replace(rhoverHack, "mouseenter$1 mouseleave$1");
    };
    if (jQuery.event.props && "attrChange" !== jQuery.event.props[0]) jQuery.event.props.unshift("attrChange", "attrName", "relatedNode", "srcElement");
    if (jQuery.event.dispatch) migrateWarnProp(jQuery.event, "handle", jQuery.event.dispatch, "jQuery.event.handle is undocumented and deprecated");
    jQuery.event.add = function(elem, types, handler, data, selector) {
        if (elem !== document && rajaxEvent.test(types)) migrateWarn("AJAX events should be attached to document: " + types);
        eventAdd.call(this, elem, hoverHack(types || ""), handler, data, selector);
    };
    jQuery.event.remove = function(elem, types, handler, selector, mappedTypes) {
        eventRemove.call(this, elem, hoverHack(types) || "", handler, selector, mappedTypes);
    };
    jQuery.fn.error = function() {
        var args = Array.prototype.slice.call(arguments, 0);
        migrateWarn("jQuery.fn.error() is deprecated");
        args.splice(0, 0, "error");
        if (arguments.length) return this.bind.apply(this, args);
        this.triggerHandler.apply(this, args);
        return this;
    };
    jQuery.fn.toggle = function(fn, fn2) {
        if (!jQuery.isFunction(fn) || !jQuery.isFunction(fn2)) return oldToggle.apply(this, arguments);
        migrateWarn("jQuery.fn.toggle(handler, handler...) is deprecated");
        var args = arguments, guid = fn.guid || jQuery.guid++, i = 0, toggler = function(event) {
            var lastToggle = (jQuery._data(this, "lastToggle" + fn.guid) || 0) % i;
            jQuery._data(this, "lastToggle" + fn.guid, lastToggle + 1);
            event.preventDefault();
            return args[lastToggle].apply(this, arguments) || false;
        };
        toggler.guid = guid;
        while (i < args.length) args[i++].guid = guid;
        return this.click(toggler);
    };
    jQuery.fn.live = function(types, data, fn) {
        migrateWarn("jQuery.fn.live() is deprecated");
        if (oldLive) return oldLive.apply(this, arguments);
        jQuery(this.context).on(types, this.selector, data, fn);
        return this;
    };
    jQuery.fn.die = function(types, fn) {
        migrateWarn("jQuery.fn.die() is deprecated");
        if (oldDie) return oldDie.apply(this, arguments);
        jQuery(this.context).off(types, this.selector || "**", fn);
        return this;
    };
    jQuery.event.trigger = function(event, data, elem, onlyHandlers) {
        if (!elem && !rajaxEvent.test(event)) migrateWarn("Global events are undocumented and deprecated");
        return eventTrigger.call(this, event, data, elem || document, onlyHandlers);
    };
    jQuery.each(ajaxEvents.split("|"), function(_, name) {
        jQuery.event.special[name] = {
            "setup": function() {
                var elem = this;
                if (elem !== document) {
                    jQuery.event.add(document, name + "." + jQuery.guid, function() {
                        jQuery.event.trigger(name, null, elem, true);
                    });
                    jQuery._data(this, name, jQuery.guid++);
                }
                return false;
            },
            "teardown": function() {
                if (this !== document) jQuery.event.remove(document, name + "." + jQuery._data(this, name));
                return false;
            }
        };
    });
}(jQuery, window);

!function($) {
    $.noConflict();
    $.fn.extend({
        "_wsHide": $.fn.hide,
        "_wsShow": $.fn.show,
        "hide": function() {
            this._wsHide.apply(this, arguments);
            return this.addClass("hidden");
        },
        "show": function() {
            this.removeClass("hidden");
            return this._wsShow.apply(this, arguments);
        }
    });
    $.extend($.expr[":"], {
        "inView": function(a) {
            var st = document.documentElement.scrollTop || document.body.scrollTop, ot = $(a).offset().top, wh = window.innerHeight && window.innerHeight < $(window).height() ? window.innerHeight : $(window).height();
            return ot > st && $(a).height() + ot < st + wh;
        }
    });
    $(document).ready(function() {
        $.ui.dialog.prototype._allowInteraction = function(e) {
            return !!$(e.target).closest(".ui-dialog, .ui-datepicker, .select2-drop").length;
        };
    });
}(jQuery);

window.ws = jQuery.extend(window.ws, {
    "namespace": function(ns) {
        var parts = ns.split("."), parent = ws, i;
        if ("ws" === parts[0]) parts = parts.slice(1);
        for (i = 0; i < parts.length; i += 1) {
            if ("undefined" === typeof parent[parts[i]]) parent[parts[i]] = {};
            parent = parent[parts[i]];
        }
        return parent;
    }
});

(function() {
    var root = this;
    var previousUnderscore = root._;
    var breaker = {};
    var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;
    var push = ArrayProto.push, slice = ArrayProto.slice, concat = ArrayProto.concat, toString = ObjProto.toString, hasOwnProperty = ObjProto.hasOwnProperty;
    var nativeForEach = ArrayProto.forEach, nativeMap = ArrayProto.map, nativeReduce = ArrayProto.reduce, nativeReduceRight = ArrayProto.reduceRight, nativeFilter = ArrayProto.filter, nativeEvery = ArrayProto.every, nativeSome = ArrayProto.some, nativeIndexOf = ArrayProto.indexOf, nativeLastIndexOf = ArrayProto.lastIndexOf, nativeIsArray = Array.isArray, nativeKeys = Object.keys, nativeBind = FuncProto.bind;
    var _ = function(obj) {
        if (obj instanceof _) return obj;
        if (!(this instanceof _)) return new _(obj);
        this._wrapped = obj;
    };
    if ("undefined" !== typeof exports) {
        if ("undefined" !== typeof module && module.exports) exports = module.exports = _;
        exports._ = _;
    } else root._ = _;
    _.VERSION = "1.6.0";
    var each = _.each = _.forEach = function(obj, iterator, context) {
        if (null == obj) return obj;
        if (nativeForEach && obj.forEach === nativeForEach) obj.forEach(iterator, context); else if (obj.length === +obj.length) {
            for (var i = 0, length = obj.length; i < length; i++) if (iterator.call(context, obj[i], i, obj) === breaker) return;
        } else {
            var keys = _.keys(obj);
            for (var i = 0, length = keys.length; i < length; i++) if (iterator.call(context, obj[keys[i]], keys[i], obj) === breaker) return;
        }
        return obj;
    };
    _.map = _.collect = function(obj, iterator, context) {
        var results = [];
        if (null == obj) return results;
        if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);
        each(obj, function(value, index, list) {
            results.push(iterator.call(context, value, index, list));
        });
        return results;
    };
    var reduceError = "Reduce of empty array with no initial value";
    _.reduce = _.foldl = _.inject = function(obj, iterator, memo, context) {
        var initial = arguments.length > 2;
        if (null == obj) obj = [];
        if (nativeReduce && obj.reduce === nativeReduce) {
            if (context) iterator = _.bind(iterator, context);
            return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator);
        }
        each(obj, function(value, index, list) {
            if (!initial) {
                memo = value;
                initial = true;
            } else memo = iterator.call(context, memo, value, index, list);
        });
        if (!initial) throw new TypeError(reduceError);
        return memo;
    };
    _.reduceRight = _.foldr = function(obj, iterator, memo, context) {
        var initial = arguments.length > 2;
        if (null == obj) obj = [];
        if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {
            if (context) iterator = _.bind(iterator, context);
            return initial ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator);
        }
        var length = obj.length;
        if (length !== +length) {
            var keys = _.keys(obj);
            length = keys.length;
        }
        each(obj, function(value, index, list) {
            index = keys ? keys[--length] : --length;
            if (!initial) {
                memo = obj[index];
                initial = true;
            } else memo = iterator.call(context, memo, obj[index], index, list);
        });
        if (!initial) throw new TypeError(reduceError);
        return memo;
    };
    _.find = _.detect = function(obj, predicate, context) {
        var result;
        any(obj, function(value, index, list) {
            if (predicate.call(context, value, index, list)) {
                result = value;
                return true;
            }
        });
        return result;
    };
    _.filter = _.select = function(obj, predicate, context) {
        var results = [];
        if (null == obj) return results;
        if (nativeFilter && obj.filter === nativeFilter) return obj.filter(predicate, context);
        each(obj, function(value, index, list) {
            if (predicate.call(context, value, index, list)) results.push(value);
        });
        return results;
    };
    _.reject = function(obj, predicate, context) {
        return _.filter(obj, function(value, index, list) {
            return !predicate.call(context, value, index, list);
        }, context);
    };
    _.every = _.all = function(obj, predicate, context) {
        predicate || (predicate = _.identity);
        var result = true;
        if (null == obj) return result;
        if (nativeEvery && obj.every === nativeEvery) return obj.every(predicate, context);
        each(obj, function(value, index, list) {
            if (!(result = result && predicate.call(context, value, index, list))) return breaker;
        });
        return !!result;
    };
    var any = _.some = _.any = function(obj, predicate, context) {
        predicate || (predicate = _.identity);
        var result = false;
        if (null == obj) return result;
        if (nativeSome && obj.some === nativeSome) return obj.some(predicate, context);
        each(obj, function(value, index, list) {
            if (result || (result = predicate.call(context, value, index, list))) return breaker;
        });
        return !!result;
    };
    _.contains = _.include = function(obj, target) {
        if (null == obj) return false;
        if (nativeIndexOf && obj.indexOf === nativeIndexOf) return obj.indexOf(target) != -1;
        return any(obj, function(value) {
            return value === target;
        });
    };
    _.invoke = function(obj, method) {
        var args = slice.call(arguments, 2);
        var isFunc = _.isFunction(method);
        return _.map(obj, function(value) {
            return (isFunc ? method : value[method]).apply(value, args);
        });
    };
    _.pluck = function(obj, key) {
        return _.map(obj, _.property(key));
    };
    _.where = function(obj, attrs) {
        return _.filter(obj, _.matches(attrs));
    };
    _.findWhere = function(obj, attrs) {
        return _.find(obj, _.matches(attrs));
    };
    _.max = function(obj, iterator, context) {
        if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) return Math.max.apply(Math, obj);
        var result = -1/0, lastComputed = -1/0;
        each(obj, function(value, index, list) {
            var computed = iterator ? iterator.call(context, value, index, list) : value;
            if (computed > lastComputed) {
                result = value;
                lastComputed = computed;
            }
        });
        return result;
    };
    _.min = function(obj, iterator, context) {
        if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) return Math.min.apply(Math, obj);
        var result = 1/0, lastComputed = 1/0;
        each(obj, function(value, index, list) {
            var computed = iterator ? iterator.call(context, value, index, list) : value;
            if (computed < lastComputed) {
                result = value;
                lastComputed = computed;
            }
        });
        return result;
    };
    _.shuffle = function(obj) {
        var rand;
        var index = 0;
        var shuffled = [];
        each(obj, function(value) {
            rand = _.random(index++);
            shuffled[index - 1] = shuffled[rand];
            shuffled[rand] = value;
        });
        return shuffled;
    };
    _.sample = function(obj, n, guard) {
        if (null == n || guard) {
            if (obj.length !== +obj.length) obj = _.values(obj);
            return obj[_.random(obj.length - 1)];
        }
        return _.shuffle(obj).slice(0, Math.max(0, n));
    };
    var lookupIterator = function(value) {
        if (null == value) return _.identity;
        if (_.isFunction(value)) return value;
        return _.property(value);
    };
    _.sortBy = function(obj, iterator, context) {
        iterator = lookupIterator(iterator);
        return _.pluck(_.map(obj, function(value, index, list) {
            return {
                "value": value,
                "index": index,
                "criteria": iterator.call(context, value, index, list)
            };
        }).sort(function(left, right) {
            var a = left.criteria;
            var b = right.criteria;
            if (a !== b) {
                if (a > b || a === void 0) return 1;
                if (a < b || b === void 0) return -1;
            }
            return left.index - right.index;
        }), "value");
    };
    var group = function(behavior) {
        return function(obj, iterator, context) {
            var result = {};
            iterator = lookupIterator(iterator);
            each(obj, function(value, index) {
                var key = iterator.call(context, value, index, obj);
                behavior(result, key, value);
            });
            return result;
        };
    };
    _.groupBy = group(function(result, key, value) {
        _.has(result, key) ? result[key].push(value) : result[key] = [ value ];
    });
    _.indexBy = group(function(result, key, value) {
        result[key] = value;
    });
    _.countBy = group(function(result, key) {
        _.has(result, key) ? result[key]++ : result[key] = 1;
    });
    _.sortedIndex = function(array, obj, iterator, context) {
        iterator = lookupIterator(iterator);
        var value = iterator.call(context, obj);
        var low = 0, high = array.length;
        while (low < high) {
            var mid = low + high >>> 1;
            iterator.call(context, array[mid]) < value ? low = mid + 1 : high = mid;
        }
        return low;
    };
    _.toArray = function(obj) {
        if (!obj) return [];
        if (_.isArray(obj)) return slice.call(obj);
        if (obj.length === +obj.length) return _.map(obj, _.identity);
        return _.values(obj);
    };
    _.size = function(obj) {
        if (null == obj) return 0;
        return obj.length === +obj.length ? obj.length : _.keys(obj).length;
    };
    _.first = _.head = _.take = function(array, n, guard) {
        if (null == array) return void 0;
        if (null == n || guard) return array[0];
        if (n < 0) return [];
        return slice.call(array, 0, n);
    };
    _.initial = function(array, n, guard) {
        return slice.call(array, 0, array.length - (null == n || guard ? 1 : n));
    };
    _.last = function(array, n, guard) {
        if (null == array) return void 0;
        if (null == n || guard) return array[array.length - 1];
        return slice.call(array, Math.max(array.length - n, 0));
    };
    _.rest = _.tail = _.drop = function(array, n, guard) {
        return slice.call(array, null == n || guard ? 1 : n);
    };
    _.compact = function(array) {
        return _.filter(array, _.identity);
    };
    var flatten = function(input, shallow, output) {
        if (shallow && _.every(input, _.isArray)) return concat.apply(output, input);
        each(input, function(value) {
            if (_.isArray(value) || _.isArguments(value)) shallow ? push.apply(output, value) : flatten(value, shallow, output); else output.push(value);
        });
        return output;
    };
    _.flatten = function(array, shallow) {
        return flatten(array, shallow, []);
    };
    _.without = function(array) {
        return _.difference(array, slice.call(arguments, 1));
    };
    _.partition = function(array, predicate) {
        var pass = [], fail = [];
        each(array, function(elem) {
            (predicate(elem) ? pass : fail).push(elem);
        });
        return [ pass, fail ];
    };
    _.uniq = _.unique = function(array, isSorted, iterator, context) {
        if (_.isFunction(isSorted)) {
            context = iterator;
            iterator = isSorted;
            isSorted = false;
        }
        var initial = iterator ? _.map(array, iterator, context) : array;
        var results = [];
        var seen = [];
        each(initial, function(value, index) {
            if (isSorted ? !index || seen[seen.length - 1] !== value : !_.contains(seen, value)) {
                seen.push(value);
                results.push(array[index]);
            }
        });
        return results;
    };
    _.union = function() {
        return _.uniq(_.flatten(arguments, true));
    };
    _.intersection = function(array) {
        var rest = slice.call(arguments, 1);
        return _.filter(_.uniq(array), function(item) {
            return _.every(rest, function(other) {
                return _.contains(other, item);
            });
        });
    };
    _.difference = function(array) {
        var rest = concat.apply(ArrayProto, slice.call(arguments, 1));
        return _.filter(array, function(value) {
            return !_.contains(rest, value);
        });
    };
    _.zip = function() {
        var length = _.max(_.pluck(arguments, "length").concat(0));
        var results = new Array(length);
        for (var i = 0; i < length; i++) results[i] = _.pluck(arguments, "" + i);
        return results;
    };
    _.object = function(list, values) {
        if (null == list) return {};
        var result = {};
        for (var i = 0, length = list.length; i < length; i++) if (values) result[list[i]] = values[i]; else result[list[i][0]] = list[i][1];
        return result;
    };
    _.indexOf = function(array, item, isSorted) {
        if (null == array) return -1;
        var i = 0, length = array.length;
        if (isSorted) if ("number" == typeof isSorted) i = isSorted < 0 ? Math.max(0, length + isSorted) : isSorted; else {
            i = _.sortedIndex(array, item);
            return array[i] === item ? i : -1;
        }
        if (nativeIndexOf && array.indexOf === nativeIndexOf) return array.indexOf(item, isSorted);
        for (;i < length; i++) if (array[i] === item) return i;
        return -1;
    };
    _.lastIndexOf = function(array, item, from) {
        if (null == array) return -1;
        var hasIndex = null != from;
        if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) return hasIndex ? array.lastIndexOf(item, from) : array.lastIndexOf(item);
        var i = hasIndex ? from : array.length;
        while (i--) if (array[i] === item) return i;
        return -1;
    };
    _.range = function(start, stop, step) {
        if (arguments.length <= 1) {
            stop = start || 0;
            start = 0;
        }
        step = arguments[2] || 1;
        var length = Math.max(Math.ceil((stop - start) / step), 0);
        var idx = 0;
        var range = new Array(length);
        while (idx < length) {
            range[idx++] = start;
            start += step;
        }
        return range;
    };
    var ctor = function() {};
    _.bind = function(func, context) {
        var args, bound;
        if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
        if (!_.isFunction(func)) throw new TypeError();
        args = slice.call(arguments, 2);
        return bound = function() {
            if (!(this instanceof bound)) return func.apply(context, args.concat(slice.call(arguments)));
            ctor.prototype = func.prototype;
            var self = new ctor();
            ctor.prototype = null;
            var result = func.apply(self, args.concat(slice.call(arguments)));
            if (Object(result) === result) return result;
            return self;
        };
    };
    _.partial = function(func) {
        var boundArgs = slice.call(arguments, 1);
        return function() {
            var position = 0;
            var args = boundArgs.slice();
            for (var i = 0, length = args.length; i < length; i++) if (args[i] === _) args[i] = arguments[position++];
            while (position < arguments.length) args.push(arguments[position++]);
            return func.apply(this, args);
        };
    };
    _.bindAll = function(obj) {
        var funcs = slice.call(arguments, 1);
        if (0 === funcs.length) throw new Error("bindAll must be passed function names");
        each(funcs, function(f) {
            obj[f] = _.bind(obj[f], obj);
        });
        return obj;
    };
    _.memoize = function(func, hasher) {
        var memo = {};
        hasher || (hasher = _.identity);
        return function() {
            var key = hasher.apply(this, arguments);
            return _.has(memo, key) ? memo[key] : memo[key] = func.apply(this, arguments);
        };
    };
    _.delay = function(func, wait) {
        var args = slice.call(arguments, 2);
        return setTimeout(function() {
            return func.apply(null, args);
        }, wait);
    };
    _.defer = function(func) {
        return _.delay.apply(_, [ func, 1 ].concat(slice.call(arguments, 1)));
    };
    _.throttle = function(func, wait, options) {
        var context, args, result;
        var timeout = null;
        var previous = 0;
        options || (options = {});
        var later = function() {
            previous = false === options.leading ? 0 : _.now();
            timeout = null;
            result = func.apply(context, args);
            context = args = null;
        };
        return function() {
            var now = _.now();
            if (!previous && false === options.leading) previous = now;
            var remaining = wait - (now - previous);
            context = this;
            args = arguments;
            if (remaining <= 0) {
                clearTimeout(timeout);
                timeout = null;
                previous = now;
                result = func.apply(context, args);
                context = args = null;
            } else if (!timeout && false !== options.trailing) timeout = setTimeout(later, remaining);
            return result;
        };
    };
    _.debounce = function(func, wait, immediate) {
        var timeout, args, context, timestamp, result;
        var later = function() {
            var last = _.now() - timestamp;
            if (last < wait) timeout = setTimeout(later, wait - last); else {
                timeout = null;
                if (!immediate) {
                    result = func.apply(context, args);
                    context = args = null;
                }
            }
        };
        return function() {
            context = this;
            args = arguments;
            timestamp = _.now();
            var callNow = immediate && !timeout;
            if (!timeout) timeout = setTimeout(later, wait);
            if (callNow) {
                result = func.apply(context, args);
                context = args = null;
            }
            return result;
        };
    };
    _.once = function(func) {
        var ran = false, memo;
        return function() {
            if (ran) return memo;
            ran = true;
            memo = func.apply(this, arguments);
            func = null;
            return memo;
        };
    };
    _.wrap = function(func, wrapper) {
        return _.partial(wrapper, func);
    };
    _.compose = function() {
        var funcs = arguments;
        return function() {
            var args = arguments;
            for (var i = funcs.length - 1; i >= 0; i--) args = [ funcs[i].apply(this, args) ];
            return args[0];
        };
    };
    _.after = function(times, func) {
        return function() {
            if (--times < 1) return func.apply(this, arguments);
        };
    };
    _.keys = function(obj) {
        if (!_.isObject(obj)) return [];
        if (nativeKeys) return nativeKeys(obj);
        var keys = [];
        for (var key in obj) if (_.has(obj, key)) keys.push(key);
        return keys;
    };
    _.values = function(obj) {
        var keys = _.keys(obj);
        var length = keys.length;
        var values = new Array(length);
        for (var i = 0; i < length; i++) values[i] = obj[keys[i]];
        return values;
    };
    _.pairs = function(obj) {
        var keys = _.keys(obj);
        var length = keys.length;
        var pairs = new Array(length);
        for (var i = 0; i < length; i++) pairs[i] = [ keys[i], obj[keys[i]] ];
        return pairs;
    };
    _.invert = function(obj) {
        var result = {};
        var keys = _.keys(obj);
        for (var i = 0, length = keys.length; i < length; i++) result[obj[keys[i]]] = keys[i];
        return result;
    };
    _.functions = _.methods = function(obj) {
        var names = [];
        for (var key in obj) if (_.isFunction(obj[key])) names.push(key);
        return names.sort();
    };
    _.extend = function(obj) {
        each(slice.call(arguments, 1), function(source) {
            if (source) for (var prop in source) obj[prop] = source[prop];
        });
        return obj;
    };
    _.pick = function(obj) {
        var copy = {};
        var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
        each(keys, function(key) {
            if (key in obj) copy[key] = obj[key];
        });
        return copy;
    };
    _.omit = function(obj) {
        var copy = {};
        var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
        for (var key in obj) if (!_.contains(keys, key)) copy[key] = obj[key];
        return copy;
    };
    _.defaults = function(obj) {
        each(slice.call(arguments, 1), function(source) {
            if (source) for (var prop in source) if (obj[prop] === void 0) obj[prop] = source[prop];
        });
        return obj;
    };
    _.clone = function(obj) {
        if (!_.isObject(obj)) return obj;
        return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
    };
    _.tap = function(obj, interceptor) {
        interceptor(obj);
        return obj;
    };
    var eq = function(a, b, aStack, bStack) {
        if (a === b) return 0 !== a || 1 / a == 1 / b;
        if (null == a || null == b) return a === b;
        if (a instanceof _) a = a._wrapped;
        if (b instanceof _) b = b._wrapped;
        var className = toString.call(a);
        if (className != toString.call(b)) return false;
        switch (className) {
          case "[object String]":
            return a == String(b);

          case "[object Number]":
            return a != +a ? b != +b : 0 == a ? 1 / a == 1 / b : a == +b;

          case "[object Date]":
          case "[object Boolean]":
            return +a == +b;

          case "[object RegExp]":
            return a.source == b.source && a.global == b.global && a.multiline == b.multiline && a.ignoreCase == b.ignoreCase;
        }
        if ("object" != typeof a || "object" != typeof b) return false;
        var length = aStack.length;
        while (length--) if (aStack[length] == a) return bStack[length] == b;
        var aCtor = a.constructor, bCtor = b.constructor;
        if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor && _.isFunction(bCtor) && bCtor instanceof bCtor) && "constructor" in a && "constructor" in b) return false;
        aStack.push(a);
        bStack.push(b);
        var size = 0, result = true;
        if ("[object Array]" == className) {
            size = a.length;
            result = size == b.length;
            if (result) while (size--) if (!(result = eq(a[size], b[size], aStack, bStack))) break;
        } else {
            for (var key in a) if (_.has(a, key)) {
                size++;
                if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack))) break;
            }
            if (result) {
                for (key in b) if (_.has(b, key) && !size--) break;
                result = !size;
            }
        }
        aStack.pop();
        bStack.pop();
        return result;
    };
    _.isEqual = function(a, b) {
        return eq(a, b, [], []);
    };
    _.isEmpty = function(obj) {
        if (null == obj) return true;
        if (_.isArray(obj) || _.isString(obj)) return 0 === obj.length;
        for (var key in obj) if (_.has(obj, key)) return false;
        return true;
    };
    _.isElement = function(obj) {
        return !!(obj && 1 === obj.nodeType);
    };
    _.isArray = nativeIsArray || function(obj) {
        return "[object Array]" == toString.call(obj);
    };
    _.isObject = function(obj) {
        return obj === Object(obj);
    };
    each([ "Arguments", "Function", "String", "Number", "Date", "RegExp" ], function(name) {
        _["is" + name] = function(obj) {
            return toString.call(obj) == "[object " + name + "]";
        };
    });
    if (!_.isArguments(arguments)) _.isArguments = function(obj) {
        return !!(obj && _.has(obj, "callee"));
    };
    if ("function" !== typeof /./) _.isFunction = function(obj) {
        return "function" === typeof obj;
    };
    _.isFinite = function(obj) {
        return isFinite(obj) && !isNaN(parseFloat(obj));
    };
    _.isNaN = function(obj) {
        return _.isNumber(obj) && obj != +obj;
    };
    _.isBoolean = function(obj) {
        return true === obj || false === obj || "[object Boolean]" == toString.call(obj);
    };
    _.isNull = function(obj) {
        return null === obj;
    };
    _.isUndefined = function(obj) {
        return obj === void 0;
    };
    _.has = function(obj, key) {
        return hasOwnProperty.call(obj, key);
    };
    _.noConflict = function() {
        root._ = previousUnderscore;
        return this;
    };
    _.identity = function(value) {
        return value;
    };
    _.constant = function(value) {
        return function() {
            return value;
        };
    };
    _.property = function(key) {
        return function(obj) {
            return obj[key];
        };
    };
    _.matches = function(attrs) {
        return function(obj) {
            if (obj === attrs) return true;
            for (var key in attrs) if (attrs[key] !== obj[key]) return false;
            return true;
        };
    };
    _.times = function(n, iterator, context) {
        var accum = Array(Math.max(0, n));
        for (var i = 0; i < n; i++) accum[i] = iterator.call(context, i);
        return accum;
    };
    _.random = function(min, max) {
        if (null == max) {
            max = min;
            min = 0;
        }
        return min + Math.floor(Math.random() * (max - min + 1));
    };
    _.now = Date.now || function() {
        return new Date().getTime();
    };
    var entityMap = {
        "escape": {
            "&": "&amp;",
            "<": "&lt;",
            ">": "&gt;",
            '"': "&quot;",
            "'": "&#x27;"
        }
    };
    entityMap.unescape = _.invert(entityMap.escape);
    var entityRegexes = {
        "escape": new RegExp("[" + _.keys(entityMap.escape).join("") + "]", "g"),
        "unescape": new RegExp("(" + _.keys(entityMap.unescape).join("|") + ")", "g")
    };
    _.each([ "escape", "unescape" ], function(method) {
        _[method] = function(string) {
            if (null == string) return "";
            return ("" + string).replace(entityRegexes[method], function(match) {
                return entityMap[method][match];
            });
        };
    });
    _.result = function(object, property) {
        if (null == object) return void 0;
        var value = object[property];
        return _.isFunction(value) ? value.call(object) : value;
    };
    _.mixin = function(obj) {
        each(_.functions(obj), function(name) {
            var func = _[name] = obj[name];
            _.prototype[name] = function() {
                var args = [ this._wrapped ];
                push.apply(args, arguments);
                return result.call(this, func.apply(_, args));
            };
        });
    };
    var idCounter = 0;
    _.uniqueId = function(prefix) {
        var id = ++idCounter + "";
        return prefix ? prefix + id : id;
    };
    _.templateSettings = {
        "evaluate": /<%([\s\S]+?)%>/g,
        "interpolate": /<%=([\s\S]+?)%>/g,
        "escape": /<%-([\s\S]+?)%>/g
    };
    var noMatch = /(.)^/;
    var escapes = {
        "'": "'",
        "\\": "\\",
        "\r": "r",
        "\n": "n",
        "	": "t",
        "\u2028": "u2028",
        "\u2029": "u2029"
    };
    var escaper = /\\|'|\r|\n|\t|\u2028|\u2029/g;
    _.template = function(text, data, settings) {
        var render;
        settings = _.defaults({}, settings, _.templateSettings);
        var matcher = new RegExp([ (settings.escape || noMatch).source, (settings.interpolate || noMatch).source, (settings.evaluate || noMatch).source ].join("|") + "|$", "g");
        var index = 0;
        var source = "__p+='";
        text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
            source += text.slice(index, offset).replace(escaper, function(match) {
                return "\\" + escapes[match];
            });
            if (escape) source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
            if (interpolate) source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
            if (evaluate) source += "';\n" + evaluate + "\n__p+='";
            index = offset + match.length;
            return match;
        });
        source += "';\n";
        if (!settings.variable) source = "with(obj||{}){\n" + source + "}\n";
        source = "var __t,__p='',__j=Array.prototype.join," + "print=function(){__p+=__j.call(arguments,'');};\n" + source + "return __p;\n";
        try {
            render = new Function(settings.variable || "obj", "_", source);
        } catch (e) {
            e.source = source;
            throw e;
        }
        if (data) return render(data, _);
        var template = function(data) {
            return render.call(this, data, _);
        };
        template.source = "function(" + (settings.variable || "obj") + "){\n" + source + "}";
        return template;
    };
    _.chain = function(obj) {
        return _(obj).chain();
    };
    var result = function(obj) {
        return this._chain ? _(obj).chain() : obj;
    };
    _.mixin(_);
    each([ "pop", "push", "reverse", "shift", "sort", "splice", "unshift" ], function(name) {
        var method = ArrayProto[name];
        _.prototype[name] = function() {
            var obj = this._wrapped;
            method.apply(obj, arguments);
            if (("shift" == name || "splice" == name) && 0 === obj.length) delete obj[0];
            return result.call(this, obj);
        };
    });
    each([ "concat", "join", "slice" ], function(name) {
        var method = ArrayProto[name];
        _.prototype[name] = function() {
            return result.call(this, method.apply(this._wrapped, arguments));
        };
    });
    _.extend(_.prototype, {
        "chain": function() {
            this._chain = true;
            return this;
        },
        "value": function() {
            return this._wrapped;
        }
    });
    if ("function" === typeof define && define.amd) define("underscore", [], function() {
        return _;
    });
}).call(this);

!function(root, factory) {
    if ("function" === typeof define && define.amd) define([ "underscore", "jquery", "exports" ], function(_, $, exports) {
        root.Backbone = factory(root, exports, _, $);
    }); else if ("undefined" !== typeof exports) {
        var _ = require("underscore");
        factory(root, exports, _);
    } else root.Backbone = factory(root, {}, root._, root.jQuery || root.Zepto || root.ender || root.$);
}(this, function(root, Backbone, _, $) {
    var previousBackbone = root.Backbone;
    var array = [];
    var push = array.push;
    var slice = array.slice;
    var splice = array.splice;
    Backbone.VERSION = "1.1.2";
    Backbone.$ = $;
    Backbone.noConflict = function() {
        root.Backbone = previousBackbone;
        return this;
    };
    Backbone.emulateHTTP = false;
    Backbone.emulateJSON = false;
    var Events = Backbone.Events = {
        "on": function(name, callback, context) {
            if (!eventsApi(this, "on", name, [ callback, context ]) || !callback) return this;
            this._events || (this._events = {});
            var events = this._events[name] || (this._events[name] = []);
            events.push({
                "callback": callback,
                "context": context,
                "ctx": context || this
            });
            return this;
        },
        "once": function(name, callback, context) {
            if (!eventsApi(this, "once", name, [ callback, context ]) || !callback) return this;
            var self = this;
            var once = _.once(function() {
                self.off(name, once);
                callback.apply(this, arguments);
            });
            once._callback = callback;
            return this.on(name, once, context);
        },
        "off": function(name, callback, context) {
            var retain, ev, events, names, i, l, j, k;
            if (!this._events || !eventsApi(this, "off", name, [ callback, context ])) return this;
            if (!name && !callback && !context) {
                this._events = void 0;
                return this;
            }
            names = name ? [ name ] : _.keys(this._events);
            for (i = 0, l = names.length; i < l; i++) {
                name = names[i];
                if (events = this._events[name]) {
                    this._events[name] = retain = [];
                    if (callback || context) for (j = 0, k = events.length; j < k; j++) {
                        ev = events[j];
                        if (callback && callback !== ev.callback && callback !== ev.callback._callback || context && context !== ev.context) retain.push(ev);
                    }
                    if (!retain.length) delete this._events[name];
                }
            }
            return this;
        },
        "trigger": function(name) {
            if (!this._events) return this;
            var args = slice.call(arguments, 1);
            if (!eventsApi(this, "trigger", name, args)) return this;
            var events = this._events[name];
            var allEvents = this._events.all;
            if (events) triggerEvents(events, args);
            if (allEvents) triggerEvents(allEvents, arguments);
            return this;
        },
        "stopListening": function(obj, name, callback) {
            var listeningTo = this._listeningTo;
            if (!listeningTo) return this;
            var remove = !name && !callback;
            if (!callback && "object" === typeof name) callback = this;
            if (obj) (listeningTo = {})[obj._listenId] = obj;
            for (var id in listeningTo) {
                obj = listeningTo[id];
                obj.off(name, callback, this);
                if (remove || _.isEmpty(obj._events)) delete this._listeningTo[id];
            }
            return this;
        }
    };
    var eventSplitter = /\s+/;
    var eventsApi = function(obj, action, name, rest) {
        if (!name) return true;
        if ("object" === typeof name) {
            for (var key in name) obj[action].apply(obj, [ key, name[key] ].concat(rest));
            return false;
        }
        if (eventSplitter.test(name)) {
            var names = name.split(eventSplitter);
            for (var i = 0, l = names.length; i < l; i++) obj[action].apply(obj, [ names[i] ].concat(rest));
            return false;
        }
        return true;
    };
    var triggerEvents = function(events, args) {
        var ev, i = -1, l = events.length, a1 = args[0], a2 = args[1], a3 = args[2];
        switch (args.length) {
          case 0:
            while (++i < l) (ev = events[i]).callback.call(ev.ctx);
            return;

          case 1:
            while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1);
            return;

          case 2:
            while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2);
            return;

          case 3:
            while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2, a3);
            return;

          default:
            while (++i < l) (ev = events[i]).callback.apply(ev.ctx, args);
            return;
        }
    };
    var listenMethods = {
        "listenTo": "on",
        "listenToOnce": "once"
    };
    _.each(listenMethods, function(implementation, method) {
        Events[method] = function(obj, name, callback) {
            var listeningTo = this._listeningTo || (this._listeningTo = {});
            var id = obj._listenId || (obj._listenId = _.uniqueId("l"));
            listeningTo[id] = obj;
            if (!callback && "object" === typeof name) callback = this;
            obj[implementation](name, callback, this);
            return this;
        };
    });
    Events.bind = Events.on;
    Events.unbind = Events.off;
    _.extend(Backbone, Events);
    var Model = Backbone.Model = function(attributes, options) {
        var attrs = attributes || {};
        options || (options = {});
        this.cid = _.uniqueId("c");
        this.attributes = {};
        if (options.collection) this.collection = options.collection;
        if (options.parse) attrs = this.parse(attrs, options) || {};
        attrs = _.defaults({}, attrs, _.result(this, "defaults"));
        this.set(attrs, options);
        this.changed = {};
        this.initialize.apply(this, arguments);
    };
    _.extend(Model.prototype, Events, {
        "changed": null,
        "validationError": null,
        "idAttribute": "id",
        "initialize": function() {},
        "toJSON": function(options) {
            return _.clone(this.attributes);
        },
        "sync": function() {
            return Backbone.sync.apply(this, arguments);
        },
        "get": function(attr) {
            return this.attributes[attr];
        },
        "escape": function(attr) {
            return _.escape(this.get(attr));
        },
        "has": function(attr) {
            return null != this.get(attr);
        },
        "set": function(key, val, options) {
            var attr, attrs, unset, changes, silent, changing, prev, current;
            if (null == key) return this;
            if ("object" === typeof key) {
                attrs = key;
                options = val;
            } else (attrs = {})[key] = val;
            options || (options = {});
            if (!this._validate(attrs, options)) return false;
            unset = options.unset;
            silent = options.silent;
            changes = [];
            changing = this._changing;
            this._changing = true;
            if (!changing) {
                this._previousAttributes = _.clone(this.attributes);
                this.changed = {};
            }
            current = this.attributes, prev = this._previousAttributes;
            if (this.idAttribute in attrs) this.id = attrs[this.idAttribute];
            for (attr in attrs) {
                val = attrs[attr];
                if (!_.isEqual(current[attr], val)) changes.push(attr);
                if (!_.isEqual(prev[attr], val)) this.changed[attr] = val; else delete this.changed[attr];
                unset ? delete current[attr] : current[attr] = val;
            }
            if (!silent) {
                if (changes.length) this._pending = options;
                for (var i = 0, l = changes.length; i < l; i++) this.trigger("change:" + changes[i], this, current[changes[i]], options);
            }
            if (changing) return this;
            if (!silent) while (this._pending) {
                options = this._pending;
                this._pending = false;
                this.trigger("change", this, options);
            }
            this._pending = false;
            this._changing = false;
            return this;
        },
        "unset": function(attr, options) {
            return this.set(attr, void 0, _.extend({}, options, {
                "unset": true
            }));
        },
        "clear": function(options) {
            var attrs = {};
            for (var key in this.attributes) attrs[key] = void 0;
            return this.set(attrs, _.extend({}, options, {
                "unset": true
            }));
        },
        "hasChanged": function(attr) {
            if (null == attr) return !_.isEmpty(this.changed);
            return _.has(this.changed, attr);
        },
        "changedAttributes": function(diff) {
            if (!diff) return this.hasChanged() ? _.clone(this.changed) : false;
            var val, changed = false;
            var old = this._changing ? this._previousAttributes : this.attributes;
            for (var attr in diff) {
                if (_.isEqual(old[attr], val = diff[attr])) continue;
                (changed || (changed = {}))[attr] = val;
            }
            return changed;
        },
        "previous": function(attr) {
            if (null == attr || !this._previousAttributes) return null;
            return this._previousAttributes[attr];
        },
        "previousAttributes": function() {
            return _.clone(this._previousAttributes);
        },
        "fetch": function(options) {
            options = options ? _.clone(options) : {};
            if (options.parse === void 0) options.parse = true;
            var model = this;
            var success = options.success;
            options.success = function(resp) {
                if (!model.set(model.parse(resp, options), options)) return false;
                if (success) success(model, resp, options);
                model.trigger("sync", model, resp, options);
            };
            wrapError(this, options);
            return this.sync("read", this, options);
        },
        "save": function(key, val, options) {
            var attrs, method, xhr, attributes = this.attributes;
            if (null == key || "object" === typeof key) {
                attrs = key;
                options = val;
            } else (attrs = {})[key] = val;
            options = _.extend({
                "validate": true
            }, options);
            if (attrs && !options.wait) {
                if (!this.set(attrs, options)) return false;
            } else if (!this._validate(attrs, options)) return false;
            if (attrs && options.wait) this.attributes = _.extend({}, attributes, attrs);
            if (options.parse === void 0) options.parse = true;
            var model = this;
            var success = options.success;
            options.success = function(resp) {
                model.attributes = attributes;
                var serverAttrs = model.parse(resp, options);
                if (options.wait) serverAttrs = _.extend(attrs || {}, serverAttrs);
                if (_.isObject(serverAttrs) && !model.set(serverAttrs, options)) return false;
                if (success) success(model, resp, options);
                model.trigger("sync", model, resp, options);
            };
            wrapError(this, options);
            method = this.isNew() ? "create" : options.patch ? "patch" : "update";
            if ("patch" === method) options.attrs = attrs;
            xhr = this.sync(method, this, options);
            if (attrs && options.wait) this.attributes = attributes;
            return xhr;
        },
        "destroy": function(options) {
            options = options ? _.clone(options) : {};
            var model = this;
            var success = options.success;
            var destroy = function() {
                model.trigger("destroy", model, model.collection, options);
            };
            options.success = function(resp) {
                if (options.wait || model.isNew()) destroy();
                if (success) success(model, resp, options);
                if (!model.isNew()) model.trigger("sync", model, resp, options);
            };
            if (this.isNew()) {
                options.success();
                return false;
            }
            wrapError(this, options);
            var xhr = this.sync("delete", this, options);
            if (!options.wait) destroy();
            return xhr;
        },
        "url": function() {
            var base = _.result(this, "urlRoot") || _.result(this.collection, "url") || urlError();
            if (this.isNew()) return base;
            return base.replace(/([^\/])$/, "$1/") + encodeURIComponent(this.id);
        },
        "parse": function(resp, options) {
            return resp;
        },
        "clone": function() {
            return new this.constructor(this.attributes);
        },
        "isNew": function() {
            return !this.has(this.idAttribute);
        },
        "isValid": function(options) {
            return this._validate({}, _.extend(options || {}, {
                "validate": true
            }));
        },
        "_validate": function(attrs, options) {
            if (!options.validate || !this.validate) return true;
            attrs = _.extend({}, this.attributes, attrs);
            var error = this.validationError = this.validate(attrs, options) || null;
            if (!error) return true;
            this.trigger("invalid", this, error, _.extend(options, {
                "validationError": error
            }));
            return false;
        }
    });
    var modelMethods = [ "keys", "values", "pairs", "invert", "pick", "omit" ];
    _.each(modelMethods, function(method) {
        Model.prototype[method] = function() {
            var args = slice.call(arguments);
            args.unshift(this.attributes);
            return _[method].apply(_, args);
        };
    });
    var Collection = Backbone.Collection = function(models, options) {
        options || (options = {});
        if (options.model) this.model = options.model;
        if (options.comparator !== void 0) this.comparator = options.comparator;
        this._reset();
        this.initialize.apply(this, arguments);
        if (models) this.reset(models, _.extend({
            "silent": true
        }, options));
    };
    var setOptions = {
        "add": true,
        "remove": true,
        "merge": true
    };
    var addOptions = {
        "add": true,
        "remove": false
    };
    _.extend(Collection.prototype, Events, {
        "model": Model,
        "initialize": function() {},
        "toJSON": function(options) {
            return this.map(function(model) {
                return model.toJSON(options);
            });
        },
        "sync": function() {
            return Backbone.sync.apply(this, arguments);
        },
        "add": function(models, options) {
            return this.set(models, _.extend({
                "merge": false
            }, options, addOptions));
        },
        "remove": function(models, options) {
            var singular = !_.isArray(models);
            models = singular ? [ models ] : _.clone(models);
            options || (options = {});
            var i, l, index, model;
            for (i = 0, l = models.length; i < l; i++) {
                model = models[i] = this.get(models[i]);
                if (!model) continue;
                delete this._byId[model.id];
                delete this._byId[model.cid];
                index = this.indexOf(model);
                this.models.splice(index, 1);
                this.length--;
                if (!options.silent) {
                    options.index = index;
                    model.trigger("remove", model, this, options);
                }
                this._removeReference(model, options);
            }
            return singular ? models[0] : models;
        },
        "set": function(models, options) {
            options = _.defaults({}, options, setOptions);
            if (options.parse) models = this.parse(models, options);
            var singular = !_.isArray(models);
            models = singular ? models ? [ models ] : [] : _.clone(models);
            var i, l, id, model, attrs, existing, sort;
            var at = options.at;
            var targetModel = this.model;
            var sortable = this.comparator && null == at && false !== options.sort;
            var sortAttr = _.isString(this.comparator) ? this.comparator : null;
            var toAdd = [], toRemove = [], modelMap = {};
            var add = options.add, merge = options.merge, remove = options.remove;
            var order = !sortable && add && remove ? [] : false;
            for (i = 0, l = models.length; i < l; i++) {
                attrs = models[i] || {};
                if (attrs instanceof Model) id = model = attrs; else id = attrs[targetModel.prototype.idAttribute || "id"];
                if (existing = this.get(id)) {
                    if (remove) modelMap[existing.cid] = true;
                    if (merge) {
                        attrs = attrs === model ? model.attributes : attrs;
                        if (options.parse) attrs = existing.parse(attrs, options);
                        existing.set(attrs, options);
                        if (sortable && !sort && existing.hasChanged(sortAttr)) sort = true;
                    }
                    models[i] = existing;
                } else if (add) {
                    model = models[i] = this._prepareModel(attrs, options);
                    if (!model) continue;
                    toAdd.push(model);
                    this._addReference(model, options);
                }
                model = existing || model;
                if (order && (model.isNew() || !modelMap[model.id])) order.push(model);
                modelMap[model.id] = true;
            }
            if (remove) {
                for (i = 0, l = this.length; i < l; ++i) if (!modelMap[(model = this.models[i]).cid]) toRemove.push(model);
                if (toRemove.length) this.remove(toRemove, options);
            }
            if (toAdd.length || order && order.length) {
                if (sortable) sort = true;
                this.length += toAdd.length;
                if (null != at) for (i = 0, l = toAdd.length; i < l; i++) this.models.splice(at + i, 0, toAdd[i]); else {
                    if (order) this.models.length = 0;
                    var orderedModels = order || toAdd;
                    for (i = 0, l = orderedModels.length; i < l; i++) this.models.push(orderedModels[i]);
                }
            }
            if (sort) this.sort({
                "silent": true
            });
            if (!options.silent) {
                for (i = 0, l = toAdd.length; i < l; i++) (model = toAdd[i]).trigger("add", model, this, options);
                if (sort || order && order.length) this.trigger("sort", this, options);
            }
            return singular ? models[0] : models;
        },
        "reset": function(models, options) {
            options || (options = {});
            for (var i = 0, l = this.models.length; i < l; i++) this._removeReference(this.models[i], options);
            options.previousModels = this.models;
            this._reset();
            models = this.add(models, _.extend({
                "silent": true
            }, options));
            if (!options.silent) this.trigger("reset", this, options);
            return models;
        },
        "push": function(model, options) {
            return this.add(model, _.extend({
                "at": this.length
            }, options));
        },
        "pop": function(options) {
            var model = this.at(this.length - 1);
            this.remove(model, options);
            return model;
        },
        "unshift": function(model, options) {
            return this.add(model, _.extend({
                "at": 0
            }, options));
        },
        "shift": function(options) {
            var model = this.at(0);
            this.remove(model, options);
            return model;
        },
        "slice": function() {
            return slice.apply(this.models, arguments);
        },
        "get": function(obj) {
            if (null == obj) return void 0;
            return this._byId[obj] || this._byId[obj.id] || this._byId[obj.cid];
        },
        "at": function(index) {
            return this.models[index];
        },
        "where": function(attrs, first) {
            if (_.isEmpty(attrs)) return first ? void 0 : [];
            return this[first ? "find" : "filter"](function(model) {
                for (var key in attrs) if (attrs[key] !== model.get(key)) return false;
                return true;
            });
        },
        "findWhere": function(attrs) {
            return this.where(attrs, true);
        },
        "sort": function(options) {
            if (!this.comparator) throw new Error("Cannot sort a set without a comparator");
            options || (options = {});
            if (_.isString(this.comparator) || 1 === this.comparator.length) this.models = this.sortBy(this.comparator, this); else this.models.sort(_.bind(this.comparator, this));
            if (!options.silent) this.trigger("sort", this, options);
            return this;
        },
        "pluck": function(attr) {
            return _.invoke(this.models, "get", attr);
        },
        "fetch": function(options) {
            options = options ? _.clone(options) : {};
            if (options.parse === void 0) options.parse = true;
            var success = options.success;
            var collection = this;
            options.success = function(resp) {
                var method = options.reset ? "reset" : "set";
                collection[method](resp, options);
                if (success) success(collection, resp, options);
                collection.trigger("sync", collection, resp, options);
            };
            wrapError(this, options);
            return this.sync("read", this, options);
        },
        "create": function(model, options) {
            options = options ? _.clone(options) : {};
            if (!(model = this._prepareModel(model, options))) return false;
            if (!options.wait) this.add(model, options);
            var collection = this;
            var success = options.success;
            options.success = function(model, resp) {
                if (options.wait) collection.add(model, options);
                if (success) success(model, resp, options);
            };
            model.save(null, options);
            return model;
        },
        "parse": function(resp, options) {
            return resp;
        },
        "clone": function() {
            return new this.constructor(this.models);
        },
        "_reset": function() {
            this.length = 0;
            this.models = [];
            this._byId = {};
        },
        "_prepareModel": function(attrs, options) {
            if (attrs instanceof Model) return attrs;
            options = options ? _.clone(options) : {};
            options.collection = this;
            var model = new this.model(attrs, options);
            if (!model.validationError) return model;
            this.trigger("invalid", this, model.validationError, options);
            return false;
        },
        "_addReference": function(model, options) {
            this._byId[model.cid] = model;
            if (null != model.id) this._byId[model.id] = model;
            if (!model.collection) model.collection = this;
            model.on("all", this._onModelEvent, this);
        },
        "_removeReference": function(model, options) {
            if (this === model.collection) delete model.collection;
            model.off("all", this._onModelEvent, this);
        },
        "_onModelEvent": function(event, model, collection, options) {
            if (("add" === event || "remove" === event) && collection !== this) return;
            if ("destroy" === event) this.remove(model, options);
            if (model && event === "change:" + model.idAttribute) {
                delete this._byId[model.previous(model.idAttribute)];
                if (null != model.id) this._byId[model.id] = model;
            }
            this.trigger.apply(this, arguments);
        }
    });
    var methods = [ "forEach", "each", "map", "collect", "reduce", "foldl", "inject", "reduceRight", "foldr", "find", "detect", "filter", "select", "reject", "every", "all", "some", "any", "include", "contains", "invoke", "max", "min", "toArray", "size", "first", "head", "take", "initial", "rest", "tail", "drop", "last", "without", "difference", "indexOf", "shuffle", "lastIndexOf", "isEmpty", "chain", "sample" ];
    _.each(methods, function(method) {
        Collection.prototype[method] = function() {
            var args = slice.call(arguments);
            args.unshift(this.models);
            return _[method].apply(_, args);
        };
    });
    var attributeMethods = [ "groupBy", "countBy", "sortBy", "indexBy" ];
    _.each(attributeMethods, function(method) {
        Collection.prototype[method] = function(value, context) {
            var iterator = _.isFunction(value) ? value : function(model) {
                return model.get(value);
            };
            return _[method](this.models, iterator, context);
        };
    });
    var View = Backbone.View = function(options) {
        this.cid = _.uniqueId("view");
        options || (options = {});
        _.extend(this, _.pick(options, viewOptions));
        this._ensureElement();
        this.initialize.apply(this, arguments);
        this.delegateEvents();
    };
    var delegateEventSplitter = /^(\S+)\s*(.*)$/;
    var viewOptions = [ "model", "collection", "el", "id", "attributes", "className", "tagName", "events" ];
    _.extend(View.prototype, Events, {
        "tagName": "div",
        "$": function(selector) {
            return this.$el.find(selector);
        },
        "initialize": function() {},
        "render": function() {
            return this;
        },
        "remove": function() {
            this.$el.remove();
            this.stopListening();
            return this;
        },
        "setElement": function(element, delegate) {
            if (this.$el) this.undelegateEvents();
            this.$el = element instanceof Backbone.$ ? element : Backbone.$(element);
            this.el = this.$el[0];
            if (false !== delegate) this.delegateEvents();
            return this;
        },
        "delegateEvents": function(events) {
            if (!(events || (events = _.result(this, "events")))) return this;
            this.undelegateEvents();
            for (var key in events) {
                var method = events[key];
                if (!_.isFunction(method)) method = this[events[key]];
                if (!method) continue;
                var match = key.match(delegateEventSplitter);
                var eventName = match[1], selector = match[2];
                method = _.bind(method, this);
                eventName += ".delegateEvents" + this.cid;
                if ("" === selector) this.$el.on(eventName, method); else this.$el.on(eventName, selector, method);
            }
            return this;
        },
        "undelegateEvents": function() {
            this.$el.off(".delegateEvents" + this.cid);
            return this;
        },
        "_ensureElement": function() {
            if (!this.el) {
                var attrs = _.extend({}, _.result(this, "attributes"));
                if (this.id) attrs.id = _.result(this, "id");
                if (this.className) attrs["class"] = _.result(this, "className");
                var $el = Backbone.$("<" + _.result(this, "tagName") + ">").attr(attrs);
                this.setElement($el, false);
            } else this.setElement(_.result(this, "el"), false);
        }
    });
    Backbone.sync = function(method, model, options) {
        var type = methodMap[method];
        _.defaults(options || (options = {}), {
            "emulateHTTP": Backbone.emulateHTTP,
            "emulateJSON": Backbone.emulateJSON
        });
        var params = {
            "type": type,
            "dataType": "json"
        };
        if (!options.url) params.url = _.result(model, "url") || urlError();
        if (null == options.data && model && ("create" === method || "update" === method || "patch" === method)) {
            params.contentType = "application/json";
            params.data = JSON.stringify(options.attrs || model.toJSON(options));
        }
        if (options.emulateJSON) {
            params.contentType = "application/x-www-form-urlencoded";
            params.data = params.data ? {
                "model": params.data
            } : {};
        }
        if (options.emulateHTTP && ("PUT" === type || "DELETE" === type || "PATCH" === type)) {
            params.type = "POST";
            if (options.emulateJSON) params.data._method = type;
            var beforeSend = options.beforeSend;
            options.beforeSend = function(xhr) {
                xhr.setRequestHeader("X-HTTP-Method-Override", type);
                if (beforeSend) return beforeSend.apply(this, arguments);
            };
        }
        if ("GET" !== params.type && !options.emulateJSON) params.processData = false;
        if ("PATCH" === params.type && noXhrPatch) params.xhr = function() {
            return new ActiveXObject("Microsoft.XMLHTTP");
        };
        var xhr = options.xhr = Backbone.ajax(_.extend(params, options));
        model.trigger("request", model, xhr, options);
        return xhr;
    };
    var noXhrPatch = "undefined" !== typeof window && !!window.ActiveXObject && !(window.XMLHttpRequest && new XMLHttpRequest().dispatchEvent);
    var methodMap = {
        "create": "POST",
        "update": "PUT",
        "patch": "PATCH",
        "delete": "DELETE",
        "read": "GET"
    };
    Backbone.ajax = function() {
        return Backbone.$.ajax.apply(Backbone.$, arguments);
    };
    var Router = Backbone.Router = function(options) {
        options || (options = {});
        if (options.routes) this.routes = options.routes;
        this._bindRoutes();
        this.initialize.apply(this, arguments);
    };
    var optionalParam = /\((.*?)\)/g;
    var namedParam = /(\(\?)?:\w+/g;
    var splatParam = /\*\w+/g;
    var escapeRegExp = /[\-{}\[\]+?.,\\\^$|#\s]/g;
    _.extend(Router.prototype, Events, {
        "initialize": function() {},
        "route": function(route, name, callback) {
            if (!_.isRegExp(route)) route = this._routeToRegExp(route);
            if (_.isFunction(name)) {
                callback = name;
                name = "";
            }
            if (!callback) callback = this[name];
            var router = this;
            Backbone.history.route(route, function(fragment) {
                var args = router._extractParameters(route, fragment);
                router.execute(callback, args);
                router.trigger.apply(router, [ "route:" + name ].concat(args));
                router.trigger("route", name, args);
                Backbone.history.trigger("route", router, name, args);
            });
            return this;
        },
        "execute": function(callback, args) {
            if (callback) callback.apply(this, args);
        },
        "navigate": function(fragment, options) {
            Backbone.history.navigate(fragment, options);
            return this;
        },
        "_bindRoutes": function() {
            if (!this.routes) return;
            this.routes = _.result(this, "routes");
            var route, routes = _.keys(this.routes);
            while (null != (route = routes.pop())) this.route(route, this.routes[route]);
        },
        "_routeToRegExp": function(route) {
            route = route.replace(escapeRegExp, "\\$&").replace(optionalParam, "(?:$1)?").replace(namedParam, function(match, optional) {
                return optional ? match : "([^/?]+)";
            }).replace(splatParam, "([^?]*?)");
            return new RegExp("^" + route + "(?:\\?([\\s\\S]*))?$");
        },
        "_extractParameters": function(route, fragment) {
            var params = route.exec(fragment).slice(1);
            return _.map(params, function(param, i) {
                if (i === params.length - 1) return param || null;
                return param ? decodeURIComponent(param) : null;
            });
        }
    });
    var History = Backbone.History = function() {
        this.handlers = [];
        _.bindAll(this, "checkUrl");
        if ("undefined" !== typeof window) {
            this.location = window.location;
            this.history = window.history;
        }
    };
    var routeStripper = /^[#\/]|\s+$/g;
    var rootStripper = /^\/+|\/+$/g;
    var isExplorer = /msie [\w.]+/;
    var trailingSlash = /\/$/;
    var pathStripper = /#.*$/;
    History.started = false;
    _.extend(History.prototype, Events, {
        "interval": 50,
        "atRoot": function() {
            return this.location.pathname.replace(/[^\/]$/, "$&/") === this.root;
        },
        "getHash": function(window) {
            var match = (window || this).location.href.match(/#(.*)$/);
            return match ? match[1] : "";
        },
        "getFragment": function(fragment, forcePushState) {
            if (null == fragment) if (this._hasPushState || !this._wantsHashChange || forcePushState) {
                fragment = decodeURI(this.location.pathname + this.location.search);
                var root = this.root.replace(trailingSlash, "");
                if (!fragment.indexOf(root)) fragment = fragment.slice(root.length);
            } else fragment = this.getHash();
            return fragment.replace(routeStripper, "");
        },
        "start": function(options) {
            if (History.started) throw new Error("Backbone.history has already been started");
            History.started = true;
            this.options = _.extend({
                "root": "/"
            }, this.options, options);
            this.root = this.options.root;
            this._wantsHashChange = false !== this.options.hashChange;
            this._wantsPushState = !!this.options.pushState;
            this._hasPushState = !!(this.options.pushState && this.history && this.history.pushState);
            var fragment = this.getFragment();
            var docMode = document.documentMode;
            var oldIE = isExplorer.exec(navigator.userAgent.toLowerCase()) && (!docMode || docMode <= 7);
            this.root = ("/" + this.root + "/").replace(rootStripper, "/");
            if (oldIE && this._wantsHashChange) {
                var frame = Backbone.$('<iframe src="javascript:0" tabindex="-1">');
                this.iframe = frame.hide().appendTo("body")[0].contentWindow;
                this.navigate(fragment);
            }
            if (this._hasPushState) Backbone.$(window).on("popstate", this.checkUrl); else if (this._wantsHashChange && "onhashchange" in window && !oldIE) Backbone.$(window).on("hashchange", this.checkUrl); else if (this._wantsHashChange) this._checkUrlInterval = setInterval(this.checkUrl, this.interval);
            this.fragment = fragment;
            var loc = this.location;
            if (this._wantsHashChange && this._wantsPushState) if (!this._hasPushState && !this.atRoot()) {
                this.fragment = this.getFragment(null, true);
                this.location.replace(this.root + "#" + this.fragment);
                return true;
            } else if (this._hasPushState && this.atRoot() && loc.hash) {
                this.fragment = this.getHash().replace(routeStripper, "");
                this.history.replaceState({}, document.title, this.root + this.fragment);
            }
            if (!this.options.silent) return this.loadUrl();
        },
        "stop": function() {
            Backbone.$(window).off("popstate", this.checkUrl).off("hashchange", this.checkUrl);
            if (this._checkUrlInterval) clearInterval(this._checkUrlInterval);
            History.started = false;
        },
        "route": function(route, callback) {
            this.handlers.unshift({
                "route": route,
                "callback": callback
            });
        },
        "checkUrl": function(e) {
            var current = this.getFragment();
            if (current === this.fragment && this.iframe) current = this.getFragment(this.getHash(this.iframe));
            if (current === this.fragment) return false;
            if (this.iframe) this.navigate(current);
            this.loadUrl();
        },
        "loadUrl": function(fragment) {
            fragment = this.fragment = this.getFragment(fragment);
            return _.any(this.handlers, function(handler) {
                if (handler.route.test(fragment)) {
                    handler.callback(fragment);
                    return true;
                }
            });
        },
        "navigate": function(fragment, options) {
            if (!History.started) return false;
            if (!options || true === options) options = {
                "trigger": !!options
            };
            var url = this.root + (fragment = this.getFragment(fragment || ""));
            fragment = fragment.replace(pathStripper, "");
            if (this.fragment === fragment) return;
            this.fragment = fragment;
            if ("" === fragment && "/" !== url) url = url.slice(0, -1);
            if (this._hasPushState) this.history[options.replace ? "replaceState" : "pushState"]({}, document.title, url); else if (this._wantsHashChange) {
                this._updateHash(this.location, fragment, options.replace);
                if (this.iframe && fragment !== this.getFragment(this.getHash(this.iframe))) {
                    if (!options.replace) this.iframe.document.open().close();
                    this._updateHash(this.iframe.location, fragment, options.replace);
                }
            } else return this.location.assign(url);
            if (options.trigger) return this.loadUrl(fragment);
        },
        "_updateHash": function(location, fragment, replace) {
            if (replace) {
                var href = location.href.replace(/(javascript:|#).*$/, "");
                location.replace(href + "#" + fragment);
            } else location.hash = "#" + fragment;
        }
    });
    Backbone.history = new History();
    var extend = function(protoProps, staticProps) {
        var parent = this;
        var child;
        if (protoProps && _.has(protoProps, "constructor")) child = protoProps.constructor; else child = function() {
            return parent.apply(this, arguments);
        };
        _.extend(child, parent, staticProps);
        var Surrogate = function() {
            this.constructor = child;
        };
        Surrogate.prototype = parent.prototype;
        child.prototype = new Surrogate();
        if (protoProps) _.extend(child.prototype, protoProps);
        child.__super__ = parent.prototype;
        return child;
    };
    Model.extend = Collection.extend = Router.extend = View.extend = History.extend = extend;
    var urlError = function() {
        throw new Error('A "url" property or function must be specified');
    };
    var wrapError = function(model, options) {
        var error = options.error;
        options.error = function(resp) {
            if (error) error(model, resp, options);
            model.trigger("error", model, resp, options);
        };
    };
    return Backbone;
});

var JSON;

if (!JSON) JSON = {};

!function() {
    "use strict";
    function f(n) {
        return n < 10 ? "0" + n : n;
    }
    if ("function" !== typeof Date.prototype.toJSON) {
        Date.prototype.toJSON = function(key) {
            return isFinite(this.valueOf()) ? this.getUTCFullYear() + "-" + f(this.getUTCMonth() + 1) + "-" + f(this.getUTCDate()) + "T" + f(this.getUTCHours()) + ":" + f(this.getUTCMinutes()) + ":" + f(this.getUTCSeconds()) + "Z" : null;
        };
        String.prototype.toJSON = Number.prototype.toJSON = Boolean.prototype.toJSON = function(key) {
            return this.valueOf();
        };
    }
    var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, gap, indent, meta = {
        "\b": "\\b",
        "	": "\\t",
        "\n": "\\n",
        "\f": "\\f",
        "\r": "\\r",
        '"': '\\"',
        "\\": "\\\\"
    }, rep;
    function quote(string) {
        escapable.lastIndex = 0;
        return escapable.test(string) ? '"' + string.replace(escapable, function(a) {
            var c = meta[a];
            return "string" === typeof c ? c : "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4);
        }) + '"' : '"' + string + '"';
    }
    function str(key, holder) {
        var i, k, v, length, mind = gap, partial, value = holder[key];
        if (value && "object" === typeof value && "function" === typeof value.toJSON) value = value.toJSON(key);
        if ("function" === typeof rep) value = rep.call(holder, key, value);
        switch (typeof value) {
          case "string":
            return quote(value);

          case "number":
            return isFinite(value) ? String(value) : "null";

          case "boolean":
          case "null":
            return String(value);

          case "object":
            if (!value) return "null";
            gap += indent;
            partial = [];
            if ("[object Array]" === Object.prototype.toString.apply(value)) {
                length = value.length;
                for (i = 0; i < length; i += 1) partial[i] = str(i, value) || "null";
                v = 0 === partial.length ? "[]" : gap ? "[\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "]" : "[" + partial.join(",") + "]";
                gap = mind;
                return v;
            }
            if (rep && "object" === typeof rep) {
                length = rep.length;
                for (i = 0; i < length; i += 1) if ("string" === typeof rep[i]) {
                    k = rep[i];
                    v = str(k, value);
                    if (v) partial.push(quote(k) + (gap ? ": " : ":") + v);
                }
            } else for (k in value) if (Object.prototype.hasOwnProperty.call(value, k)) {
                v = str(k, value);
                if (v) partial.push(quote(k) + (gap ? ": " : ":") + v);
            }
            v = 0 === partial.length ? "{}" : gap ? "{\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "}" : "{" + partial.join(",") + "}";
            gap = mind;
            return v;
        }
    }
    if ("function" !== typeof JSON.stringify) JSON.stringify = function(value, replacer, space) {
        var i;
        gap = "";
        indent = "";
        if ("number" === typeof space) for (i = 0; i < space; i += 1) indent += " "; else if ("string" === typeof space) indent = space;
        rep = replacer;
        if (replacer && "function" !== typeof replacer && ("object" !== typeof replacer || "number" !== typeof replacer.length)) throw new Error("JSON.stringify");
        return str("", {
            "": value
        });
    };
    if ("function" !== typeof JSON.parse) JSON.parse = function(text, reviver) {
        var j;
        function walk(holder, key) {
            var k, v, value = holder[key];
            if (value && "object" === typeof value) for (k in value) if (Object.prototype.hasOwnProperty.call(value, k)) {
                v = walk(value, k);
                if (void 0 !== v) value[k] = v; else delete value[k];
            }
            return reviver.call(holder, key, value);
        }
        text = String(text);
        cx.lastIndex = 0;
        if (cx.test(text)) text = text.replace(cx, function(a) {
            return "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4);
        });
        if (/^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, "@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, "]").replace(/(?:^|:|,)(?:\s*\[)+/g, ""))) {
            j = eval("(" + text + ")");
            return "function" === typeof reviver ? walk({
                "": j
            }, "") : j;
        }
        throw new SyntaxError("JSON.parse");
    };
}();

if ("undefined" === typeof jQuery) throw new Error("Bootstrap's JavaScript requires jQuery");

+function($) {
    "use strict";
    function transitionEnd() {
        var el = document.createElement("bootstrap");
        var transEndEventNames = {
            "WebkitTransition": "webkitTransitionEnd",
            "MozTransition": "transitionend",
            "OTransition": "oTransitionEnd otransitionend",
            "transition": "transitionend"
        };
        for (var name in transEndEventNames) if (void 0 !== el.style[name]) return {
            "end": transEndEventNames[name]
        };
        return false;
    }
    $.fn.emulateTransitionEnd = function(duration) {
        var called = false, $el = this;
        $(this).one($.support.transition.end, function() {
            called = true;
        });
        var callback = function() {
            if (!called) $($el).trigger($.support.transition.end);
        };
        setTimeout(callback, duration);
        return this;
    };
    $(function() {
        $.support.transition = transitionEnd();
    });
}(jQuery);

+function($) {
    "use strict";
    var dismiss = '[data-dismiss="alert"]';
    var Alert = function(el) {
        $(el).on("click", dismiss, this.close);
    };
    Alert.prototype.close = function(e) {
        var $this = $(this);
        var selector = $this.attr("data-target");
        if (!selector) {
            selector = $this.attr("href");
            selector = selector && selector.replace(/.*(?=#[^\s]*$)/, "");
        }
        var $parent = $(selector);
        if (e) e.preventDefault();
        if (!$parent.length) $parent = $this.hasClass("alert") ? $this : $this.parent();
        $parent.trigger(e = $.Event("close.bs.alert"));
        if (e.isDefaultPrevented()) return;
        $parent.removeClass("in");
        function removeElement() {
            $parent.trigger("closed.bs.alert").remove();
        }
        $.support.transition && $parent.hasClass("fade") ? $parent.one($.support.transition.end, removeElement).emulateTransitionEnd(150) : removeElement();
    };
    var old = $.fn.alert;
    $.fn.alert = function(option) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.alert");
            if (!data) $this.data("bs.alert", data = new Alert(this));
            if ("string" == typeof option) data[option].call($this);
        });
    };
    $.fn.alert.Constructor = Alert;
    $.fn.alert.noConflict = function() {
        $.fn.alert = old;
        return this;
    };
    $(document).on("click.bs.alert.data-api", dismiss, Alert.prototype.close);
}(jQuery);

+function($) {
    "use strict";
    var Button = function(element, options) {
        this.$element = $(element);
        this.options = $.extend({}, Button.DEFAULTS, options);
        this.isLoading = false;
    };
    Button.DEFAULTS = {
        "loadingText": "loading..."
    };
    Button.prototype.setState = function(state) {
        var d = "disabled";
        var $el = this.$element;
        var val = $el.is("input") ? "val" : "html";
        var data = $el.data();
        state += "Text";
        if (!data.resetText) $el.data("resetText", $el[val]());
        $el[val](data[state] || this.options[state]);
        setTimeout($.proxy(function() {
            if ("loadingText" == state) {
                this.isLoading = true;
                $el.addClass(d).attr(d, d);
            } else if (this.isLoading) {
                this.isLoading = false;
                $el.removeClass(d).removeAttr(d);
            }
        }, this), 0);
    };
    Button.prototype.toggle = function() {
        var changed = true;
        var $parent = this.$element.closest('[data-toggle="buttons"]');
        if ($parent.length) {
            var $input = this.$element.find("input");
            if ("radio" == $input.prop("type")) if ($input.prop("checked") && this.$element.hasClass("active")) changed = false; else $parent.find(".active").removeClass("active");
            if (changed) $input.prop("checked", !this.$element.hasClass("active")).trigger("change");
        }
        if (changed) this.$element.toggleClass("active");
    };
    var old = $.fn.button;
    $.fn.button = function(option) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.button");
            var options = "object" == typeof option && option;
            if (!data) $this.data("bs.button", data = new Button(this, options));
            if ("toggle" == option) data.toggle(); else if (option) data.setState(option);
        });
    };
    $.fn.button.Constructor = Button;
    $.fn.button.noConflict = function() {
        $.fn.button = old;
        return this;
    };
    $(document).on("click.bs.button.data-api", "[data-toggle^=button]", function(e) {
        var $btn = $(e.target);
        if (!$btn.hasClass("btn")) $btn = $btn.closest(".btn");
        $btn.button("toggle");
        e.preventDefault();
    });
}(jQuery);

+function($) {
    "use strict";
    var Carousel = function(element, options) {
        this.$element = $(element);
        this.$indicators = this.$element.find(".carousel-indicators");
        this.options = options;
        this.paused = this.sliding = this.interval = this.$active = this.$items = null;
        "hover" == this.options.pause && this.$element.on("mouseenter", $.proxy(this.pause, this)).on("mouseleave", $.proxy(this.cycle, this));
    };
    Carousel.DEFAULTS = {
        "interval": 5e3,
        "pause": "hover",
        "wrap": true
    };
    Carousel.prototype.cycle = function(e) {
        e || (this.paused = false);
        this.interval && clearInterval(this.interval);
        this.options.interval && !this.paused && (this.interval = setInterval($.proxy(this.next, this), this.options.interval));
        return this;
    };
    Carousel.prototype.getActiveIndex = function() {
        this.$active = this.$element.find(".item.active");
        this.$items = this.$active.parent().children();
        return this.$items.index(this.$active);
    };
    Carousel.prototype.to = function(pos) {
        var that = this;
        var activeIndex = this.getActiveIndex();
        if (pos > this.$items.length - 1 || pos < 0) return;
        if (this.sliding) return this.$element.one("slid.bs.carousel", function() {
            that.to(pos);
        });
        if (activeIndex == pos) return this.pause().cycle();
        return this.slide(pos > activeIndex ? "next" : "prev", $(this.$items[pos]));
    };
    Carousel.prototype.pause = function(e) {
        e || (this.paused = true);
        if (this.$element.find(".next, .prev").length && $.support.transition) {
            this.$element.trigger($.support.transition.end);
            this.cycle(true);
        }
        this.interval = clearInterval(this.interval);
        return this;
    };
    Carousel.prototype.next = function() {
        if (this.sliding) return;
        return this.slide("next");
    };
    Carousel.prototype.prev = function() {
        if (this.sliding) return;
        return this.slide("prev");
    };
    Carousel.prototype.slide = function(type, next) {
        var $active = this.$element.find(".item.active");
        var $next = next || $active[type]();
        var isCycling = this.interval;
        var direction = "next" == type ? "left" : "right";
        var fallback = "next" == type ? "first" : "last";
        var that = this;
        if (!$next.length) {
            if (!this.options.wrap) return;
            $next = this.$element.find(".item")[fallback]();
        }
        if ($next.hasClass("active")) return this.sliding = false;
        var e = $.Event("slide.bs.carousel", {
            "relatedTarget": $next[0],
            "direction": direction
        });
        this.$element.trigger(e);
        if (e.isDefaultPrevented()) return;
        this.sliding = true;
        isCycling && this.pause();
        if (this.$indicators.length) {
            this.$indicators.find(".active").removeClass("active");
            this.$element.one("slid.bs.carousel", function() {
                var $nextIndicator = $(that.$indicators.children()[that.getActiveIndex()]);
                $nextIndicator && $nextIndicator.addClass("active");
            });
        }
        if ($.support.transition && this.$element.hasClass("slide")) {
            $next.addClass(type);
            $next[0].offsetWidth;
            $active.addClass(direction);
            $next.addClass(direction);
            $active.one($.support.transition.end, function() {
                $next.removeClass([ type, direction ].join(" ")).addClass("active");
                $active.removeClass([ "active", direction ].join(" "));
                that.sliding = false;
                setTimeout(function() {
                    that.$element.trigger("slid.bs.carousel");
                }, 0);
            }).emulateTransitionEnd(1e3 * $active.css("transition-duration").slice(0, -1));
        } else {
            $active.removeClass("active");
            $next.addClass("active");
            this.sliding = false;
            this.$element.trigger("slid.bs.carousel");
        }
        isCycling && this.cycle();
        return this;
    };
    var old = $.fn.carousel;
    $.fn.carousel = function(option) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.carousel");
            var options = $.extend({}, Carousel.DEFAULTS, $this.data(), "object" == typeof option && option);
            var action = "string" == typeof option ? option : options.slide;
            if (!data) $this.data("bs.carousel", data = new Carousel(this, options));
            if ("number" == typeof option) data.to(option); else if (action) data[action](); else if (options.interval) data.pause().cycle();
        });
    };
    $.fn.carousel.Constructor = Carousel;
    $.fn.carousel.noConflict = function() {
        $.fn.carousel = old;
        return this;
    };
    $(document).on("click.bs.carousel.data-api", "[data-slide], [data-slide-to]", function(e) {
        var $this = $(this), href;
        var $target = $($this.attr("data-target") || (href = $this.attr("href")) && href.replace(/.*(?=#[^\s]+$)/, ""));
        var options = $.extend({}, $target.data(), $this.data());
        var slideIndex = $this.attr("data-slide-to");
        if (slideIndex) options.interval = false;
        $target.carousel(options);
        if (slideIndex = $this.attr("data-slide-to")) $target.data("bs.carousel").to(slideIndex);
        e.preventDefault();
    });
    $(window).on("load", function() {
        $('[data-ride="carousel"]').each(function() {
            var $carousel = $(this);
            $carousel.carousel($carousel.data());
        });
    });
}(jQuery);

+function($) {
    "use strict";
    var Collapse = function(element, options) {
        this.$element = $(element);
        this.options = $.extend({}, Collapse.DEFAULTS, options);
        this.transitioning = null;
        if (this.options.parent) this.$parent = $(this.options.parent);
        if (this.options.toggle) this.toggle();
    };
    Collapse.DEFAULTS = {
        "toggle": true
    };
    Collapse.prototype.dimension = function() {
        var hasWidth = this.$element.hasClass("width");
        return hasWidth ? "width" : "height";
    };
    Collapse.prototype.show = function() {
        if (this.transitioning || this.$element.hasClass("in")) return;
        var startEvent = $.Event("show.bs.collapse");
        this.$element.trigger(startEvent);
        if (startEvent.isDefaultPrevented()) return;
        var actives = this.$parent && this.$parent.find("> .panel > .in");
        if (actives && actives.length) {
            var hasData = actives.data("bs.collapse");
            if (hasData && hasData.transitioning) return;
            actives.collapse("hide");
            hasData || actives.data("bs.collapse", null);
        }
        var dimension = this.dimension();
        this.$element.removeClass("collapse").addClass("collapsing")[dimension](0);
        this.transitioning = 1;
        var complete = function() {
            this.$element.removeClass("collapsing").addClass("collapse in")[dimension]("auto");
            this.transitioning = 0;
            this.$element.trigger("shown.bs.collapse");
        };
        if (!$.support.transition) return complete.call(this);
        var scrollSize = $.camelCase([ "scroll", dimension ].join("-"));
        this.$element.one($.support.transition.end, $.proxy(complete, this)).emulateTransitionEnd(350)[dimension](this.$element[0][scrollSize]);
    };
    Collapse.prototype.hide = function() {
        if (this.transitioning || !this.$element.hasClass("in")) return;
        var startEvent = $.Event("hide.bs.collapse");
        this.$element.trigger(startEvent);
        if (startEvent.isDefaultPrevented()) return;
        var dimension = this.dimension();
        this.$element[dimension](this.$element[dimension]())[0].offsetHeight;
        this.$element.addClass("collapsing").removeClass("collapse").removeClass("in");
        this.transitioning = 1;
        var complete = function() {
            this.transitioning = 0;
            this.$element.trigger("hidden.bs.collapse").removeClass("collapsing").addClass("collapse");
        };
        if (!$.support.transition) return complete.call(this);
        this.$element[dimension](0).one($.support.transition.end, $.proxy(complete, this)).emulateTransitionEnd(350);
    };
    Collapse.prototype.toggle = function() {
        this[this.$element.hasClass("in") ? "hide" : "show"]();
    };
    var old = $.fn.collapse;
    $.fn.collapse = function(option) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.collapse");
            var options = $.extend({}, Collapse.DEFAULTS, $this.data(), "object" == typeof option && option);
            if (!data && options.toggle && "show" == option) option = !option;
            if (!data) $this.data("bs.collapse", data = new Collapse(this, options));
            if ("string" == typeof option) data[option]();
        });
    };
    $.fn.collapse.Constructor = Collapse;
    $.fn.collapse.noConflict = function() {
        $.fn.collapse = old;
        return this;
    };
    $(document).on("click.bs.collapse.data-api", "[data-toggle=collapse]", function(e) {
        var $this = $(this), href;
        var target = $this.attr("data-target") || e.preventDefault() || (href = $this.attr("href")) && href.replace(/.*(?=#[^\s]+$)/, "");
        var $target = $(target);
        var data = $target.data("bs.collapse");
        var option = data ? "toggle" : $this.data();
        var parent = $this.attr("data-parent");
        var $parent = parent && $(parent);
        if (!data || !data.transitioning) {
            if ($parent) $parent.find('[data-toggle=collapse][data-parent="' + parent + '"]').not($this).addClass("collapsed");
            $this[$target.hasClass("in") ? "addClass" : "removeClass"]("collapsed");
        }
        $target.collapse(option);
    });
}(jQuery);

+function($) {
    "use strict";
    var backdrop = ".dropdown-backdrop";
    var toggle = "[data-toggle=dropdown]";
    var Dropdown = function(element) {
        $(element).on("click.bs.dropdown", this.toggle);
    };
    Dropdown.prototype.toggle = function(e) {
        var $this = $(this);
        if ($this.is(".disabled, :disabled")) return;
        var $parent = getParent($this);
        var isActive = $parent.hasClass("open");
        clearMenus();
        if (!isActive) {
            if ("ontouchstart" in document.documentElement && !$parent.closest(".navbar-nav").length) $('<div class="dropdown-backdrop"/>').insertAfter($(this)).on("click", clearMenus);
            var relatedTarget = {
                "relatedTarget": this
            };
            $parent.trigger(e = $.Event("show.bs.dropdown", relatedTarget));
            if (e.isDefaultPrevented()) return;
            $parent.toggleClass("open").trigger("shown.bs.dropdown", relatedTarget);
            $this.focus();
        }
        return false;
    };
    Dropdown.prototype.keydown = function(e) {
        if (!/(38|40|27)/.test(e.keyCode)) return;
        var $this = $(this);
        e.preventDefault();
        e.stopPropagation();
        if ($this.is(".disabled, :disabled")) return;
        var $parent = getParent($this);
        var isActive = $parent.hasClass("open");
        if (!isActive || isActive && 27 == e.keyCode) {
            if (27 == e.which) $parent.find(toggle).focus();
            return $this.click();
        }
        var desc = " li:not(.divider):visible a";
        var $items = $parent.find("[role=menu]" + desc + ", [role=listbox]" + desc);
        if (!$items.length) return;
        var index = $items.index($items.filter(":focus"));
        if (38 == e.keyCode && index > 0) index--;
        if (40 == e.keyCode && index < $items.length - 1) index++;
        if (!~index) index = 0;
        $items.eq(index).focus();
    };
    function clearMenus(e) {
        $(backdrop).remove();
        $(toggle).each(function() {
            var $parent = getParent($(this));
            var relatedTarget = {
                "relatedTarget": this
            };
            if (!$parent.hasClass("open")) return;
            $parent.trigger(e = $.Event("hide.bs.dropdown", relatedTarget));
            if (e.isDefaultPrevented()) return;
            $parent.removeClass("open").trigger("hidden.bs.dropdown", relatedTarget);
        });
    }
    function getParent($this) {
        var selector = $this.attr("data-target");
        if (!selector) {
            selector = $this.attr("href");
            selector = selector && /#[A-Za-z]/.test(selector) && selector.replace(/.*(?=#[^\s]*$)/, "");
        }
        var $parent = selector && $(selector);
        return $parent && $parent.length ? $parent : $this.parent();
    }
    var old = $.fn.dropdown;
    $.fn.dropdown = function(option) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.dropdown");
            if (!data) $this.data("bs.dropdown", data = new Dropdown(this));
            if ("string" == typeof option) data[option].call($this);
        });
    };
    $.fn.dropdown.Constructor = Dropdown;
    $.fn.dropdown.noConflict = function() {
        $.fn.dropdown = old;
        return this;
    };
    $(document).on("click.bs.dropdown.data-api", clearMenus).on("click.bs.dropdown.data-api", ".dropdown form", function(e) {
        e.stopPropagation();
    }).on("click.bs.dropdown.data-api", toggle, Dropdown.prototype.toggle).on("keydown.bs.dropdown.data-api", toggle + ", [role=menu], [role=listbox]", Dropdown.prototype.keydown);
}(jQuery);

+function($) {
    "use strict";
    var Modal = function(element, options) {
        this.options = options;
        this.$element = $(element);
        this.$backdrop = this.isShown = null;
        if (this.options.remote) this.$element.find(".modal-content").load(this.options.remote, $.proxy(function() {
            this.$element.trigger("loaded.bs.modal");
        }, this));
    };
    Modal.DEFAULTS = {
        "backdrop": true,
        "keyboard": true,
        "show": true
    };
    Modal.prototype.toggle = function(_relatedTarget) {
        return this[!this.isShown ? "show" : "hide"](_relatedTarget);
    };
    Modal.prototype.show = function(_relatedTarget) {
        var that = this;
        var e = $.Event("show.bs.modal", {
            "relatedTarget": _relatedTarget
        });
        this.$element.trigger(e);
        if (this.isShown || e.isDefaultPrevented()) return;
        this.isShown = true;
        this.escape();
        this.$element.on("click.dismiss.bs.modal", '[data-dismiss="modal"]', $.proxy(this.hide, this));
        this.backdrop(function() {
            var transition = $.support.transition && that.$element.hasClass("fade");
            if (!that.$element.parent().length) that.$element.appendTo(document.body);
            that.$element.show().scrollTop(0);
            if (transition) that.$element[0].offsetWidth;
            that.$element.addClass("in").attr("aria-hidden", false);
            that.enforceFocus();
            var e = $.Event("shown.bs.modal", {
                "relatedTarget": _relatedTarget
            });
            transition ? that.$element.find(".modal-dialog").one($.support.transition.end, function() {
                that.$element.focus().trigger(e);
            }).emulateTransitionEnd(300) : that.$element.focus().trigger(e);
        });
    };
    Modal.prototype.hide = function(e) {
        if (e) e.preventDefault();
        e = $.Event("hide.bs.modal");
        this.$element.trigger(e);
        if (!this.isShown || e.isDefaultPrevented()) return;
        this.isShown = false;
        this.escape();
        $(document).off("focusin.bs.modal");
        this.$element.removeClass("in").attr("aria-hidden", true).off("click.dismiss.bs.modal");
        $.support.transition && this.$element.hasClass("fade") ? this.$element.one($.support.transition.end, $.proxy(this.hideModal, this)).emulateTransitionEnd(300) : this.hideModal();
    };
    Modal.prototype.enforceFocus = function() {
        $(document).off("focusin.bs.modal").on("focusin.bs.modal", $.proxy(function(e) {
            if (this.$element[0] !== e.target && !this.$element.has(e.target).length) this.$element.focus();
        }, this));
    };
    Modal.prototype.escape = function() {
        if (this.isShown && this.options.keyboard) this.$element.on("keyup.dismiss.bs.modal", $.proxy(function(e) {
            27 == e.which && this.hide();
        }, this)); else if (!this.isShown) this.$element.off("keyup.dismiss.bs.modal");
    };
    Modal.prototype.hideModal = function() {
        var that = this;
        this.$element.hide();
        this.backdrop(function() {
            that.removeBackdrop();
            that.$element.trigger("hidden.bs.modal");
        });
    };
    Modal.prototype.removeBackdrop = function() {
        this.$backdrop && this.$backdrop.remove();
        this.$backdrop = null;
    };
    Modal.prototype.backdrop = function(callback) {
        var animate = this.$element.hasClass("fade") ? "fade" : "";
        if (this.isShown && this.options.backdrop) {
            var doAnimate = $.support.transition && animate;
            this.$backdrop = $('<div class="modal-backdrop ' + animate + '" />').appendTo(document.body);
            this.$element.on("click.dismiss.bs.modal", $.proxy(function(e) {
                if (e.target !== e.currentTarget) return;
                "static" == this.options.backdrop ? this.$element[0].focus.call(this.$element[0]) : this.hide.call(this);
            }, this));
            if (doAnimate) this.$backdrop[0].offsetWidth;
            this.$backdrop.addClass("in");
            if (!callback) return;
            doAnimate ? this.$backdrop.one($.support.transition.end, callback).emulateTransitionEnd(150) : callback();
        } else if (!this.isShown && this.$backdrop) {
            this.$backdrop.removeClass("in");
            $.support.transition && this.$element.hasClass("fade") ? this.$backdrop.one($.support.transition.end, callback).emulateTransitionEnd(150) : callback();
        } else if (callback) callback();
    };
    var old = $.fn.modal;
    $.fn.modal = function(option, _relatedTarget) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.modal");
            var options = $.extend({}, Modal.DEFAULTS, $this.data(), "object" == typeof option && option);
            if (!data) $this.data("bs.modal", data = new Modal(this, options));
            if ("string" == typeof option) data[option](_relatedTarget); else if (options.show) data.show(_relatedTarget);
        });
    };
    $.fn.modal.Constructor = Modal;
    $.fn.modal.noConflict = function() {
        $.fn.modal = old;
        return this;
    };
    $(document).on("click.bs.modal.data-api", '[data-toggle="modal"]', function(e) {
        var $this = $(this);
        var href = $this.attr("href");
        var $target = $($this.attr("data-target") || href && href.replace(/.*(?=#[^\s]+$)/, ""));
        var option = $target.data("bs.modal") ? "toggle" : $.extend({
            "remote": !/#/.test(href) && href
        }, $target.data(), $this.data());
        if ($this.is("a")) e.preventDefault();
        $target.modal(option, this).one("hide", function() {
            $this.is(":visible") && $this.focus();
        });
    });
    $(document).on("show.bs.modal", ".modal", function() {
        $(document.body).addClass("modal-open");
    }).on("hidden.bs.modal", ".modal", function() {
        $(document.body).removeClass("modal-open");
    });
}(jQuery);

+function($) {
    "use strict";
    var Tooltip = function(element, options) {
        this.type = this.options = this.enabled = this.timeout = this.hoverState = this.$element = null;
        this.init("tooltip", element, options);
    };
    Tooltip.DEFAULTS = {
        "animation": true,
        "placement": "top",
        "selector": false,
        "template": '<div class="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
        "trigger": "hover focus",
        "title": "",
        "delay": 0,
        "html": false,
        "container": false
    };
    Tooltip.prototype.init = function(type, element, options) {
        this.enabled = true;
        this.type = type;
        this.$element = $(element);
        this.options = this.getOptions(options);
        var triggers = this.options.trigger.split(" ");
        for (var i = triggers.length; i--; ) {
            var trigger = triggers[i];
            if ("click" == trigger) this.$element.on("click." + this.type, this.options.selector, $.proxy(this.toggle, this)); else if ("manual" != trigger) {
                var eventIn = "hover" == trigger ? "mouseenter" : "focusin";
                var eventOut = "hover" == trigger ? "mouseleave" : "focusout";
                this.$element.on(eventIn + "." + this.type, this.options.selector, $.proxy(this.enter, this));
                this.$element.on(eventOut + "." + this.type, this.options.selector, $.proxy(this.leave, this));
            }
        }
        this.options.selector ? this._options = $.extend({}, this.options, {
            "trigger": "manual",
            "selector": ""
        }) : this.fixTitle();
    };
    Tooltip.prototype.getDefaults = function() {
        return Tooltip.DEFAULTS;
    };
    Tooltip.prototype.getOptions = function(options) {
        options = $.extend({}, this.getDefaults(), this.$element.data(), options);
        if (options.delay && "number" == typeof options.delay) options.delay = {
            "show": options.delay,
            "hide": options.delay
        };
        return options;
    };
    Tooltip.prototype.getDelegateOptions = function() {
        var options = {};
        var defaults = this.getDefaults();
        this._options && $.each(this._options, function(key, value) {
            if (defaults[key] != value) options[key] = value;
        });
        return options;
    };
    Tooltip.prototype.enter = function(obj) {
        var self = obj instanceof this.constructor ? obj : $(obj.currentTarget)[this.type](this.getDelegateOptions()).data("bs." + this.type);
        clearTimeout(self.timeout);
        self.hoverState = "in";
        if (!self.options.delay || !self.options.delay.show) return self.show();
        self.timeout = setTimeout(function() {
            if ("in" == self.hoverState) self.show();
        }, self.options.delay.show);
    };
    Tooltip.prototype.leave = function(obj) {
        var self = obj instanceof this.constructor ? obj : $(obj.currentTarget)[this.type](this.getDelegateOptions()).data("bs." + this.type);
        clearTimeout(self.timeout);
        self.hoverState = "out";
        if (!self.options.delay || !self.options.delay.hide) return self.hide();
        self.timeout = setTimeout(function() {
            if ("out" == self.hoverState) self.hide();
        }, self.options.delay.hide);
    };
    Tooltip.prototype.show = function() {
        var e = $.Event("show.bs." + this.type);
        if (this.hasContent() && this.enabled) {
            this.$element.trigger(e);
            if (e.isDefaultPrevented()) return;
            var that = this;
            var $tip = this.tip();
            this.setContent();
            if (this.options.animation) $tip.addClass("fade");
            var placement = "function" == typeof this.options.placement ? this.options.placement.call(this, $tip[0], this.$element[0]) : this.options.placement;
            var autoToken = /\s?auto?\s?/i;
            var autoPlace = autoToken.test(placement);
            if (autoPlace) placement = placement.replace(autoToken, "") || "top";
            $tip.detach().css({
                "top": 0,
                "left": 0,
                "display": "block"
            }).addClass(placement);
            this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element);
            var pos = this.getPosition();
            var actualWidth = $tip[0].offsetWidth;
            var actualHeight = $tip[0].offsetHeight;
            if (autoPlace) {
                var $parent = this.$element.parent();
                var orgPlacement = placement;
                var docScroll = document.documentElement.scrollTop || document.body.scrollTop;
                var parentWidth = "body" == this.options.container ? window.innerWidth : $parent.outerWidth();
                var parentHeight = "body" == this.options.container ? window.innerHeight : $parent.outerHeight();
                var parentLeft = "body" == this.options.container ? 0 : $parent.offset().left;
                placement = "bottom" == placement && pos.top + pos.height + actualHeight - docScroll > parentHeight ? "top" : "top" == placement && pos.top - docScroll - actualHeight < 0 ? "bottom" : "right" == placement && pos.right + actualWidth > parentWidth ? "left" : "left" == placement && pos.left - actualWidth < parentLeft ? "right" : placement;
                $tip.removeClass(orgPlacement).addClass(placement);
            }
            var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight);
            this.applyPlacement(calculatedOffset, placement);
            this.hoverState = null;
            var complete = function() {
                that.$element.trigger("shown.bs." + that.type);
            };
            $.support.transition && this.$tip.hasClass("fade") ? $tip.one($.support.transition.end, complete).emulateTransitionEnd(150) : complete();
        }
    };
    Tooltip.prototype.applyPlacement = function(offset, placement) {
        var replace;
        var $tip = this.tip();
        var width = $tip[0].offsetWidth;
        var height = $tip[0].offsetHeight;
        var marginTop = parseInt($tip.css("margin-top"), 10);
        var marginLeft = parseInt($tip.css("margin-left"), 10);
        if (isNaN(marginTop)) marginTop = 0;
        if (isNaN(marginLeft)) marginLeft = 0;
        offset.top = offset.top + marginTop;
        offset.left = offset.left + marginLeft;
        $.offset.setOffset($tip[0], $.extend({
            "using": function(props) {
                $tip.css({
                    "top": Math.round(props.top),
                    "left": Math.round(props.left)
                });
            }
        }, offset), 0);
        $tip.addClass("in");
        var actualWidth = $tip[0].offsetWidth;
        var actualHeight = $tip[0].offsetHeight;
        if ("top" == placement && actualHeight != height) {
            replace = true;
            offset.top = offset.top + height - actualHeight;
        }
        if (/bottom|top/.test(placement)) {
            var delta = 0;
            if (offset.left < 0) {
                delta = offset.left * -2;
                offset.left = 0;
                $tip.offset(offset);
                actualWidth = $tip[0].offsetWidth;
                actualHeight = $tip[0].offsetHeight;
            }
            this.replaceArrow(delta - width + actualWidth, actualWidth, "left");
        } else this.replaceArrow(actualHeight - height, actualHeight, "top");
        if (replace) $tip.offset(offset);
    };
    Tooltip.prototype.replaceArrow = function(delta, dimension, position) {
        this.arrow().css(position, delta ? 50 * (1 - delta / dimension) + "%" : "");
    };
    Tooltip.prototype.setContent = function() {
        var $tip = this.tip();
        var title = this.getTitle();
        $tip.find(".tooltip-inner")[this.options.html ? "html" : "text"](title);
        $tip.removeClass("fade in top bottom left right");
    };
    Tooltip.prototype.hide = function() {
        var that = this;
        var $tip = this.tip();
        var e = $.Event("hide.bs." + this.type);
        function complete() {
            if ("in" != that.hoverState) $tip.detach();
            that.$element.trigger("hidden.bs." + that.type);
        }
        this.$element.trigger(e);
        if (e.isDefaultPrevented()) return;
        $tip.removeClass("in");
        $.support.transition && this.$tip.hasClass("fade") ? $tip.one($.support.transition.end, complete).emulateTransitionEnd(150) : complete();
        this.hoverState = null;
        return this;
    };
    Tooltip.prototype.fixTitle = function() {
        var $e = this.$element;
        if ($e.attr("title") || "string" != typeof $e.attr("data-original-title")) $e.attr("data-original-title", $e.attr("title") || "").attr("title", "");
    };
    Tooltip.prototype.hasContent = function() {
        return this.getTitle();
    };
    Tooltip.prototype.getPosition = function() {
        var el = this.$element[0];
        return $.extend({}, "function" == typeof el.getBoundingClientRect ? el.getBoundingClientRect() : {
            "width": el.offsetWidth,
            "height": el.offsetHeight
        }, this.$element.offset());
    };
    Tooltip.prototype.getCalculatedOffset = function(placement, pos, actualWidth, actualHeight) {
        return "bottom" == placement ? {
            "top": pos.top + pos.height,
            "left": pos.left + pos.width / 2 - actualWidth / 2
        } : "top" == placement ? {
            "top": pos.top - actualHeight,
            "left": pos.left + pos.width / 2 - actualWidth / 2
        } : "left" == placement ? {
            "top": pos.top + pos.height / 2 - actualHeight / 2,
            "left": pos.left - actualWidth
        } : {
            "top": pos.top + pos.height / 2 - actualHeight / 2,
            "left": pos.left + pos.width
        };
    };
    Tooltip.prototype.getTitle = function() {
        var title;
        var $e = this.$element;
        var o = this.options;
        title = $e.attr("data-original-title") || ("function" == typeof o.title ? o.title.call($e[0]) : o.title);
        return title;
    };
    Tooltip.prototype.tip = function() {
        return this.$tip = this.$tip || $(this.options.template);
    };
    Tooltip.prototype.arrow = function() {
        return this.$arrow = this.$arrow || this.tip().find(".tooltip-arrow");
    };
    Tooltip.prototype.validate = function() {
        if (!this.$element[0].parentNode) {
            this.hide();
            this.$element = null;
            this.options = null;
        }
    };
    Tooltip.prototype.enable = function() {
        this.enabled = true;
    };
    Tooltip.prototype.disable = function() {
        this.enabled = false;
    };
    Tooltip.prototype.toggleEnabled = function() {
        this.enabled = !this.enabled;
    };
    Tooltip.prototype.toggle = function(e) {
        var self = e ? $(e.currentTarget)[this.type](this.getDelegateOptions()).data("bs." + this.type) : this;
        self.tip().hasClass("in") ? self.leave(self) : self.enter(self);
    };
    Tooltip.prototype.destroy = function() {
        clearTimeout(this.timeout);
        this.hide().$element.off("." + this.type).removeData("bs." + this.type);
    };
    var old = $.fn.tooltip;
    $.fn.tooltip = function(option) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.tooltip");
            var options = "object" == typeof option && option;
            if (!data && "destroy" == option) return;
            if (!data) $this.data("bs.tooltip", data = new Tooltip(this, options));
            if ("string" == typeof option) data[option]();
        });
    };
    $.fn.tooltip.Constructor = Tooltip;
    $.fn.tooltip.noConflict = function() {
        $.fn.tooltip = old;
        return this;
    };
}(jQuery);

+function($) {
    "use strict";
    var Popover = function(element, options) {
        this.init("popover", element, options);
    };
    if (!$.fn.tooltip) throw new Error("Popover requires tooltip.js");
    Popover.DEFAULTS = $.extend({}, $.fn.tooltip.Constructor.DEFAULTS, {
        "placement": "right",
        "trigger": "click",
        "content": "",
        "template": '<div class="popover"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'
    });
    Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype);
    Popover.prototype.constructor = Popover;
    Popover.prototype.getDefaults = function() {
        return Popover.DEFAULTS;
    };
    Popover.prototype.setContent = function() {
        var $tip = this.tip();
        var title = this.getTitle();
        var content = this.getContent();
        $tip.find(".popover-title")[this.options.html ? "html" : "text"](title);
        $tip.find(".popover-content")[this.options.html ? "string" == typeof content ? "html" : "append" : "text"](content);
        $tip.removeClass("fade top bottom left right in");
        if (!$tip.find(".popover-title").html()) $tip.find(".popover-title").hide();
    };
    Popover.prototype.hasContent = function() {
        return this.getTitle() || this.getContent();
    };
    Popover.prototype.getContent = function() {
        var $e = this.$element;
        var o = this.options;
        return $e.attr("data-content") || ("function" == typeof o.content ? o.content.call($e[0]) : o.content);
    };
    Popover.prototype.arrow = function() {
        return this.$arrow = this.$arrow || this.tip().find(".arrow");
    };
    Popover.prototype.tip = function() {
        if (!this.$tip) this.$tip = $(this.options.template);
        return this.$tip;
    };
    var old = $.fn.popover;
    $.fn.popover = function(option) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.popover");
            var options = "object" == typeof option && option;
            if (!data && "destroy" == option) return;
            if (!data) $this.data("bs.popover", data = new Popover(this, options));
            if ("string" == typeof option) data[option]();
        });
    };
    $.fn.popover.Constructor = Popover;
    $.fn.popover.noConflict = function() {
        $.fn.popover = old;
        return this;
    };
}(jQuery);

+function($) {
    "use strict";
    function ScrollSpy(element, options) {
        var href;
        var process = $.proxy(this.process, this);
        this.$element = $(element).is("body") ? $(window) : $(element);
        this.$body = $("body");
        this.$scrollElement = this.$element.on("scroll.bs.scroll-spy.data-api", process);
        this.options = $.extend({}, ScrollSpy.DEFAULTS, options);
        this.selector = (this.options.target || (href = $(element).attr("href")) && href.replace(/.*(?=#[^\s]+$)/, "") || "") + " .nav li > a";
        this.offsets = $([]);
        this.targets = $([]);
        this.activeTarget = null;
        this.refresh();
        this.process();
    }
    ScrollSpy.DEFAULTS = {
        "offset": 10
    };
    ScrollSpy.prototype.refresh = function() {
        var offsetMethod = this.$element[0] == window ? "offset" : "position";
        this.offsets = $([]);
        this.targets = $([]);
        var self = this;
        var $targets = this.$body.find(this.selector).map(function() {
            var $el = $(this);
            var href = $el.data("target") || $el.attr("href");
            var $href = /^#./.test(href) && $(href);
            return $href && $href.length && $href.is(":visible") && [ [ $href[offsetMethod]().top + (!$.isWindow(self.$scrollElement.get(0)) && self.$scrollElement.scrollTop()), href ] ] || null;
        }).sort(function(a, b) {
            return a[0] - b[0];
        }).each(function() {
            self.offsets.push(this[0]);
            self.targets.push(this[1]);
        });
    };
    ScrollSpy.prototype.process = function() {
        var scrollTop = this.$scrollElement.scrollTop() + this.options.offset;
        var scrollHeight = this.$scrollElement[0].scrollHeight || this.$body[0].scrollHeight;
        var maxScroll = scrollHeight - this.$scrollElement.height();
        var offsets = this.offsets;
        var targets = this.targets;
        var activeTarget = this.activeTarget;
        var i;
        if (scrollTop >= maxScroll) return activeTarget != (i = targets.last()[0]) && this.activate(i);
        if (activeTarget && scrollTop <= offsets[0]) return activeTarget != (i = targets[0]) && this.activate(i);
        for (i = offsets.length; i--; ) activeTarget != targets[i] && scrollTop >= offsets[i] && (!offsets[i + 1] || scrollTop <= offsets[i + 1]) && this.activate(targets[i]);
    };
    ScrollSpy.prototype.activate = function(target) {
        this.activeTarget = target;
        $(this.selector).parentsUntil(this.options.target, ".active").removeClass("active");
        var selector = this.selector + '[data-target="' + target + '"],' + this.selector + '[href="' + target + '"]';
        var active = $(selector).parents("li").addClass("active");
        if (active.parent(".dropdown-menu").length) active = active.closest("li.dropdown").addClass("active");
        active.trigger("activate.bs.scrollspy");
    };
    var old = $.fn.scrollspy;
    $.fn.scrollspy = function(option) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.scrollspy");
            var options = "object" == typeof option && option;
            if (!data) $this.data("bs.scrollspy", data = new ScrollSpy(this, options));
            if ("string" == typeof option) data[option]();
        });
    };
    $.fn.scrollspy.Constructor = ScrollSpy;
    $.fn.scrollspy.noConflict = function() {
        $.fn.scrollspy = old;
        return this;
    };
    $(window).on("load", function() {
        $('[data-spy="scroll"]').each(function() {
            var $spy = $(this);
            $spy.scrollspy($spy.data());
        });
    });
}(jQuery);

+function($) {
    "use strict";
    var Tab = function(element) {
        this.element = $(element);
    };
    Tab.prototype.show = function() {
        var $this = this.element;
        var $ul = $this.closest("ul:not(.dropdown-menu)");
        var selector = $this.data("target");
        if (!selector) {
            selector = $this.attr("href");
            selector = selector && selector.replace(/.*(?=#[^\s]*$)/, "");
        }
        if ($this.parent("li").hasClass("active")) return;
        var previous = $ul.find(".active:last a")[0];
        var e = $.Event("show.bs.tab", {
            "relatedTarget": previous
        });
        $this.trigger(e);
        if (e.isDefaultPrevented()) return;
        var $target = $(selector);
        this.activate($this.parent("li"), $ul);
        this.activate($target, $target.parent(), function() {
            $this.trigger({
                "type": "shown.bs.tab",
                "relatedTarget": previous
            });
        });
    };
    Tab.prototype.activate = function(element, container, callback) {
        var $active = container.find("> .active");
        var transition = callback && $.support.transition && $active.hasClass("fade");
        function next() {
            $active.removeClass("active").find("> .dropdown-menu > .active").removeClass("active");
            element.addClass("active");
            if (transition) {
                element[0].offsetWidth;
                element.addClass("in");
            } else element.removeClass("fade");
            if (element.parent(".dropdown-menu")) element.closest("li.dropdown").addClass("active");
            callback && callback();
        }
        transition ? $active.one($.support.transition.end, next).emulateTransitionEnd(150) : next();
        $active.removeClass("in");
    };
    var old = $.fn.tab;
    $.fn.tab = function(option) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.tab");
            if (!data) $this.data("bs.tab", data = new Tab(this));
            if ("string" == typeof option) data[option]();
        });
    };
    $.fn.tab.Constructor = Tab;
    $.fn.tab.noConflict = function() {
        $.fn.tab = old;
        return this;
    };
    $(document).on("click.bs.tab.data-api", '[data-toggle="tab"], [data-toggle="pill"]', function(e) {
        e.preventDefault();
        $(this).tab("show");
    });
}(jQuery);

+function($) {
    "use strict";
    var Affix = function(element, options) {
        this.options = $.extend({}, Affix.DEFAULTS, options);
        this.$window = $(window).on("scroll.bs.affix.data-api", $.proxy(this.checkPosition, this)).on("click.bs.affix.data-api", $.proxy(this.checkPositionWithEventLoop, this));
        this.$element = $(element);
        this.affixed = this.unpin = this.pinnedOffset = null;
        this.checkPosition();
    };
    Affix.RESET = "affix affix-top affix-bottom";
    Affix.DEFAULTS = {
        "offset": 0
    };
    Affix.prototype.getPinnedOffset = function() {
        if (this.pinnedOffset) return this.pinnedOffset;
        this.$element.removeClass(Affix.RESET).addClass("affix");
        var scrollTop = this.$window.scrollTop();
        var position = this.$element.offset();
        return this.pinnedOffset = position.top - scrollTop;
    };
    Affix.prototype.checkPositionWithEventLoop = function() {
        setTimeout($.proxy(this.checkPosition, this), 1);
    };
    Affix.prototype.checkPosition = function() {
        if (!this.$element.is(":visible")) return;
        var scrollHeight = $(document).height();
        var scrollTop = this.$window.scrollTop();
        var position = this.$element.offset();
        var offset = this.options.offset;
        var offsetTop = offset.top;
        var offsetBottom = offset.bottom;
        if ("top" == this.affixed) position.top += scrollTop;
        if ("object" != typeof offset) offsetBottom = offsetTop = offset;
        if ("function" == typeof offsetTop) offsetTop = offset.top(this.$element);
        if ("function" == typeof offsetBottom) offsetBottom = offset.bottom(this.$element);
        var affix = null != this.unpin && scrollTop + this.unpin <= position.top ? false : null != offsetBottom && position.top + this.$element.height() >= scrollHeight - offsetBottom ? "bottom" : null != offsetTop && scrollTop <= offsetTop ? "top" : false;
        if (this.affixed === affix) return;
        if (this.unpin) this.$element.css("top", "");
        var affixType = "affix" + (affix ? "-" + affix : "");
        var e = $.Event(affixType + ".bs.affix");
        this.$element.trigger(e);
        if (e.isDefaultPrevented()) return;
        this.affixed = affix;
        this.unpin = "bottom" == affix ? this.getPinnedOffset() : null;
        this.$element.removeClass(Affix.RESET).addClass(affixType).trigger($.Event(affixType.replace("affix", "affixed")));
        if ("bottom" == affix) this.$element.offset({
            "top": scrollHeight - offsetBottom - this.$element.height()
        });
    };
    var old = $.fn.affix;
    $.fn.affix = function(option) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.affix");
            var options = "object" == typeof option && option;
            if (!data) $this.data("bs.affix", data = new Affix(this, options));
            if ("string" == typeof option) data[option]();
        });
    };
    $.fn.affix.Constructor = Affix;
    $.fn.affix.noConflict = function() {
        $.fn.affix = old;
        return this;
    };
    $(window).on("load", function() {
        $('[data-spy="affix"]').each(function() {
            var $spy = $(this);
            var data = $spy.data();
            data.offset = data.offset || {};
            if (data.offsetBottom) data.offset.bottom = data.offsetBottom;
            if (data.offsetTop) data.offset.top = data.offsetTop;
            $spy.affix(data);
        });
    });
}(jQuery);

!function($, undefined) {
    $.fn.btn = $.fn.button.noConflict();
    $(document).off("click.bs.button.data-api").on("click.bs.button.data-api", "[data-toggle^=button]", function(e) {
        var $btn = $(e.target);
        if (!$btn.hasClass("btn")) $btn = $btn.closest(".btn");
        $btn.btn("toggle");
        e.preventDefault();
    });
}(jQuery);

!function($) {
    "use strict";
    var Color = function(val) {
        this.value = {
            "h": 0,
            "s": 0,
            "b": 0,
            "a": 1
        };
        this.origFormat = null;
        if (val) if (void 0 !== val.toLowerCase) this.setColor(val); else if (void 0 !== val.h) this.value = val;
    };
    Color.prototype = {
        "constructor": Color,
        "_sanitizeNumber": function(val) {
            if ("number" === typeof val) return val;
            if (isNaN(val) || null === val || "" === val || void 0 === val) return 1;
            if (void 0 !== val.toLowerCase) return parseFloat(val);
            return 1;
        },
        "setColor": function(strVal) {
            strVal = strVal.toLowerCase();
            this.value = this.stringToHSB(strVal) || {
                "h": 0,
                "s": 0,
                "b": 0,
                "a": 1
            };
        },
        "stringToHSB": function(strVal) {
            strVal = strVal.toLowerCase();
            var that = this, result = false;
            $.each(this.stringParsers, function(i, parser) {
                var match = parser.re.exec(strVal), values = match && parser.parse.apply(that, [ match ]), format = parser.format || "rgba";
                if (values) {
                    if (format.match(/hsla?/)) result = that.RGBtoHSB.apply(that, that.HSLtoRGB.apply(that, values)); else result = that.RGBtoHSB.apply(that, values);
                    that.origFormat = format;
                    return false;
                }
                return true;
            });
            return result;
        },
        "setHue": function(h) {
            this.value.h = 1 - h;
        },
        "setSaturation": function(s) {
            this.value.s = s;
        },
        "setBrightness": function(b) {
            this.value.b = 1 - b;
        },
        "setAlpha": function(a) {
            this.value.a = parseInt(100 * (1 - a), 10) / 100;
        },
        "toRGB": function(h, s, v, a) {
            h = h || this.value.h;
            s = s || this.value.s;
            v = v || this.value.b;
            a = a || this.value.a;
            var r, g, b, i, f, p, q, t;
            if (h && void 0 === s && void 0 === v) s = h.s, v = h.v, h = h.h;
            i = Math.floor(6 * h);
            f = 6 * h - i;
            p = v * (1 - s);
            q = v * (1 - f * s);
            t = v * (1 - (1 - f) * s);
            switch (i % 6) {
              case 0:
                r = v, g = t, b = p;
                break;

              case 1:
                r = q, g = v, b = p;
                break;

              case 2:
                r = p, g = v, b = t;
                break;

              case 3:
                r = p, g = q, b = v;
                break;

              case 4:
                r = t, g = p, b = v;
                break;

              case 5:
                r = v, g = p, b = q;
            }
            return {
                "r": Math.floor(255 * r),
                "g": Math.floor(255 * g),
                "b": Math.floor(255 * b),
                "a": a
            };
        },
        "toHex": function(h, s, b, a) {
            var rgb = this.toRGB(h, s, b, a);
            return "#" + (1 << 24 | parseInt(rgb.r) << 16 | parseInt(rgb.g) << 8 | parseInt(rgb.b)).toString(16).substr(1);
        },
        "toHSL": function(h, s, b, a) {
            h = h || this.value.h;
            s = s || this.value.s;
            b = b || this.value.b;
            a = a || this.value.a;
            var H = h, L = (2 - s) * b, S = s * b;
            if (L > 0 && L <= 1) S /= L; else S /= 2 - L;
            L /= 2;
            if (S > 1) S = 1;
            return {
                "h": isNaN(H) ? 0 : H,
                "s": isNaN(S) ? 0 : S,
                "l": isNaN(L) ? 0 : L,
                "a": isNaN(a) ? 0 : a
            };
        },
        "RGBtoHSB": function(r, g, b, a) {
            r /= 255;
            g /= 255;
            b /= 255;
            var H, S, V, C;
            V = Math.max(r, g, b);
            C = V - Math.min(r, g, b);
            H = 0 === C ? null : V === r ? (g - b) / C : V === g ? (b - r) / C + 2 : (r - g) / C + 4;
            H = (H + 360) % 6 * 60 / 360;
            S = 0 === C ? 0 : C / V;
            return {
                "h": this._sanitizeNumber(H),
                "s": S,
                "b": V,
                "a": this._sanitizeNumber(a)
            };
        },
        "HueToRGB": function(p, q, h) {
            if (h < 0) h += 1; else if (h > 1) h -= 1;
            if (6 * h < 1) return p + (q - p) * h * 6; else if (2 * h < 1) return q; else if (3 * h < 2) return p + (q - p) * (2 / 3 - h) * 6; else return p;
        },
        "HSLtoRGB": function(h, s, l, a) {
            if (s < 0) s = 0;
            var q;
            if (l <= .5) q = l * (1 + s); else q = l + s - l * s;
            var p = 2 * l - q;
            var tr = h + 1 / 3;
            var tg = h;
            var tb = h - 1 / 3;
            var r = Math.round(255 * this.HueToRGB(p, q, tr));
            var g = Math.round(255 * this.HueToRGB(p, q, tg));
            var b = Math.round(255 * this.HueToRGB(p, q, tb));
            return [ r, g, b, this._sanitizeNumber(a) ];
        },
        "toString": function(format) {
            format = format || "rgba";
            switch (format) {
              case "rgb":
                var rgb = this.toRGB();
                return "rgb(" + rgb.r + "," + rgb.g + "," + rgb.b + ")";
                break;

              case "rgba":
                var rgb = this.toRGB();
                return "rgba(" + rgb.r + "," + rgb.g + "," + rgb.b + "," + rgb.a + ")";
                break;

              case "hsl":
                var hsl = this.toHSL();
                return "hsl(" + Math.round(360 * hsl.h) + "," + Math.round(100 * hsl.s) + "%," + Math.round(100 * hsl.l) + "%)";
                break;

              case "hsla":
                var hsl = this.toHSL();
                return "hsla(" + Math.round(360 * hsl.h) + "," + Math.round(100 * hsl.s) + "%," + Math.round(100 * hsl.l) + "%," + hsl.a + ")";
                break;

              case "hex":
                return this.toHex();
                break;

              default:
                return false;
            }
        },
        "stringParsers": [ {
            "re": /#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/,
            "format": "hex",
            "parse": function(execResult) {
                return [ parseInt(execResult[1], 16), parseInt(execResult[2], 16), parseInt(execResult[3], 16), 1 ];
            }
        }, {
            "re": /#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])/,
            "format": "hex",
            "parse": function(execResult) {
                return [ parseInt(execResult[1] + execResult[1], 16), parseInt(execResult[2] + execResult[2], 16), parseInt(execResult[3] + execResult[3], 16), 1 ];
            }
        }, {
            "re": /rgb\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*?\)/,
            "format": "rgb",
            "parse": function(execResult) {
                return [ execResult[1], execResult[2], execResult[3], 1 ];
            }
        }, {
            "re": /rgb\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*?\)/,
            "format": "rgb",
            "parse": function(execResult) {
                return [ 2.55 * execResult[1], 2.55 * execResult[2], 2.55 * execResult[3], 1 ];
            }
        }, {
            "re": /rgba\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d+(?:\.\d+)?)\s*)?\)/,
            "format": "rgba",
            "parse": function(execResult) {
                return [ execResult[1], execResult[2], execResult[3], execResult[4] ];
            }
        }, {
            "re": /rgba\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d+(?:\.\d+)?)\s*)?\)/,
            "format": "rgba",
            "parse": function(execResult) {
                return [ 2.55 * execResult[1], 2.55 * execResult[2], 2.55 * execResult[3], execResult[4] ];
            }
        }, {
            "re": /hsl\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*?\)/,
            "format": "hsl",
            "parse": function(execResult) {
                return [ execResult[1] / 360, execResult[2] / 100, execResult[3] / 100, execResult[4] ];
            }
        }, {
            "re": /hsla\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d+(?:\.\d+)?)\s*)?\)/,
            "format": "hsla",
            "parse": function(execResult) {
                return [ execResult[1] / 360, execResult[2] / 100, execResult[3] / 100, execResult[4] ];
            }
        }, {
            "re": /^([a-z]{3,})$/,
            "format": "alias",
            "parse": function(execResult) {
                var hexval = this.colorNameToHex(execResult[0]) || "#000000";
                var match = this.stringParsers[0].re.exec(hexval), values = match && this.stringParsers[0].parse.apply(this, [ match ]);
                return values;
            }
        } ],
        "colorNameToHex": function(name) {
            var colors = {
                "aliceblue": "#f0f8ff",
                "antiquewhite": "#faebd7",
                "aqua": "#00ffff",
                "aquamarine": "#7fffd4",
                "azure": "#f0ffff",
                "beige": "#f5f5dc",
                "bisque": "#ffe4c4",
                "black": "#000000",
                "blanchedalmond": "#ffebcd",
                "blue": "#0000ff",
                "blueviolet": "#8a2be2",
                "brown": "#a52a2a",
                "burlywood": "#deb887",
                "cadetblue": "#5f9ea0",
                "chartreuse": "#7fff00",
                "chocolate": "#d2691e",
                "coral": "#ff7f50",
                "cornflowerblue": "#6495ed",
                "cornsilk": "#fff8dc",
                "crimson": "#dc143c",
                "cyan": "#00ffff",
                "darkblue": "#00008b",
                "darkcyan": "#008b8b",
                "darkgoldenrod": "#b8860b",
                "darkgray": "#a9a9a9",
                "darkgreen": "#006400",
                "darkkhaki": "#bdb76b",
                "darkmagenta": "#8b008b",
                "darkolivegreen": "#556b2f",
                "darkorange": "#ff8c00",
                "darkorchid": "#9932cc",
                "darkred": "#8b0000",
                "darksalmon": "#e9967a",
                "darkseagreen": "#8fbc8f",
                "darkslateblue": "#483d8b",
                "darkslategray": "#2f4f4f",
                "darkturquoise": "#00ced1",
                "darkviolet": "#9400d3",
                "deeppink": "#ff1493",
                "deepskyblue": "#00bfff",
                "dimgray": "#696969",
                "dodgerblue": "#1e90ff",
                "firebrick": "#b22222",
                "floralwhite": "#fffaf0",
                "forestgreen": "#228b22",
                "fuchsia": "#ff00ff",
                "gainsboro": "#dcdcdc",
                "ghostwhite": "#f8f8ff",
                "gold": "#ffd700",
                "goldenrod": "#daa520",
                "gray": "#808080",
                "green": "#008000",
                "greenyellow": "#adff2f",
                "honeydew": "#f0fff0",
                "hotpink": "#ff69b4",
                "indianred ": "#cd5c5c",
                "indigo ": "#4b0082",
                "ivory": "#fffff0",
                "khaki": "#f0e68c",
                "lavender": "#e6e6fa",
                "lavenderblush": "#fff0f5",
                "lawngreen": "#7cfc00",
                "lemonchiffon": "#fffacd",
                "lightblue": "#add8e6",
                "lightcoral": "#f08080",
                "lightcyan": "#e0ffff",
                "lightgoldenrodyellow": "#fafad2",
                "lightgrey": "#d3d3d3",
                "lightgreen": "#90ee90",
                "lightpink": "#ffb6c1",
                "lightsalmon": "#ffa07a",
                "lightseagreen": "#20b2aa",
                "lightskyblue": "#87cefa",
                "lightslategray": "#778899",
                "lightsteelblue": "#b0c4de",
                "lightyellow": "#ffffe0",
                "lime": "#00ff00",
                "limegreen": "#32cd32",
                "linen": "#faf0e6",
                "magenta": "#ff00ff",
                "maroon": "#800000",
                "mediumaquamarine": "#66cdaa",
                "mediumblue": "#0000cd",
                "mediumorchid": "#ba55d3",
                "mediumpurple": "#9370d8",
                "mediumseagreen": "#3cb371",
                "mediumslateblue": "#7b68ee",
                "mediumspringgreen": "#00fa9a",
                "mediumturquoise": "#48d1cc",
                "mediumvioletred": "#c71585",
                "midnightblue": "#191970",
                "mintcream": "#f5fffa",
                "mistyrose": "#ffe4e1",
                "moccasin": "#ffe4b5",
                "navajowhite": "#ffdead",
                "navy": "#000080",
                "oldlace": "#fdf5e6",
                "olive": "#808000",
                "olivedrab": "#6b8e23",
                "orange": "#ffa500",
                "orangered": "#ff4500",
                "orchid": "#da70d6",
                "palegoldenrod": "#eee8aa",
                "palegreen": "#98fb98",
                "paleturquoise": "#afeeee",
                "palevioletred": "#d87093",
                "papayawhip": "#ffefd5",
                "peachpuff": "#ffdab9",
                "peru": "#cd853f",
                "pink": "#ffc0cb",
                "plum": "#dda0dd",
                "powderblue": "#b0e0e6",
                "purple": "#800080",
                "red": "#ff0000",
                "rosybrown": "#bc8f8f",
                "royalblue": "#4169e1",
                "saddlebrown": "#8b4513",
                "salmon": "#fa8072",
                "sandybrown": "#f4a460",
                "seagreen": "#2e8b57",
                "seashell": "#fff5ee",
                "sienna": "#a0522d",
                "silver": "#c0c0c0",
                "skyblue": "#87ceeb",
                "slateblue": "#6a5acd",
                "slategray": "#708090",
                "snow": "#fffafa",
                "springgreen": "#00ff7f",
                "steelblue": "#4682b4",
                "tan": "#d2b48c",
                "teal": "#008080",
                "thistle": "#d8bfd8",
                "tomato": "#ff6347",
                "turquoise": "#40e0d0",
                "violet": "#ee82ee",
                "wheat": "#f5deb3",
                "white": "#ffffff",
                "whitesmoke": "#f5f5f5",
                "yellow": "#ffff00",
                "yellowgreen": "#9acd32"
            };
            if ("undefined" !== typeof colors[name.toLowerCase()]) return colors[name.toLowerCase()];
            return false;
        }
    };
    var defaults = {
        "horizontal": false,
        "inline": false,
        "color": false,
        "format": false,
        "input": "input",
        "container": false,
        "component": ".add-on, .input-group-addon",
        "sliders": {
            "saturation": {
                "maxLeft": 100,
                "maxTop": 100,
                "callLeft": "setSaturation",
                "callTop": "setBrightness"
            },
            "hue": {
                "maxLeft": 0,
                "maxTop": 100,
                "callLeft": false,
                "callTop": "setHue"
            },
            "alpha": {
                "maxLeft": 0,
                "maxTop": 100,
                "callLeft": false,
                "callTop": "setAlpha"
            }
        },
        "slidersHorz": {
            "saturation": {
                "maxLeft": 100,
                "maxTop": 100,
                "callLeft": "setSaturation",
                "callTop": "setBrightness"
            },
            "hue": {
                "maxLeft": 100,
                "maxTop": 0,
                "callLeft": "setHue",
                "callTop": false
            },
            "alpha": {
                "maxLeft": 100,
                "maxTop": 0,
                "callLeft": "setAlpha",
                "callTop": false
            }
        },
        "template": '<div class="colorpicker dropdown-menu">' + '<div class="colorpicker-saturation"><i><b></b></i></div>' + '<div class="colorpicker-hue"><i></i></div>' + '<div class="colorpicker-alpha"><i></i></div>' + '<div class="colorpicker-color"><div /></div>' + "</div>"
    };
    var Colorpicker = function(element, options) {
        this.element = $(element).addClass("colorpicker-element");
        this.options = $.extend({}, defaults, this.element.data(), options);
        this.component = this.options.component;
        this.component = false !== this.component ? this.element.find(this.component) : false;
        if (this.component && 0 === this.component.length) this.component = false;
        this.container = true === this.options.container ? this.element : this.options.container;
        this.container = false !== this.container ? $(this.container) : false;
        this.input = this.element.is("input") ? this.element : this.options.input ? this.element.find(this.options.input) : false;
        if (this.input && 0 === this.input.length) this.input = false;
        this.color = new Color(false !== this.options.color ? this.options.color : this.getValue());
        this.format = false !== this.options.format ? this.options.format : this.color.origFormat;
        this.picker = $(this.options.template);
        if (this.options.inline) this.picker.addClass("colorpicker-inline colorpicker-visible"); else this.picker.addClass("colorpicker-hidden");
        if (this.options.horizontal) this.picker.addClass("colorpicker-horizontal");
        if ("rgba" === this.format || "hsla" === this.format) this.picker.addClass("colorpicker-with-alpha");
        this.picker.on("mousedown.colorpicker", $.proxy(this.mousedown, this));
        this.picker.appendTo(this.container ? this.container : $("body"));
        if (false !== this.input) {
            this.input.on({
                "keyup.colorpicker": $.proxy(this.keyup, this)
            });
            if (false === this.component) this.element.on({
                "focus.colorpicker": $.proxy(this.show, this)
            });
            if (false === this.options.inline) this.element.on({
                "focusout.colorpicker": $.proxy(this.hide, this)
            });
        }
        if (false !== this.component) this.component.on({
            "click.colorpicker": $.proxy(this.show, this)
        });
        if (false === this.input && false === this.component) this.element.on({
            "click.colorpicker": $.proxy(this.show, this)
        });
        this.update();
        $($.proxy(function() {
            this.element.trigger("create");
        }, this));
    };
    Colorpicker.version = "2.0.0-beta";
    Colorpicker.Color = Color;
    Colorpicker.prototype = {
        "constructor": Colorpicker,
        "destroy": function() {
            this.picker.remove();
            this.element.removeData("colorpicker").off(".colorpicker");
            if (false !== this.input) this.input.off(".colorpicker");
            if (false !== this.component) this.component.off(".colorpicker");
            this.element.removeClass("colorpicker-element");
            this.element.trigger({
                "type": "destroy"
            });
        },
        "reposition": function() {
            if (false !== this.options.inline) return false;
            var offset = this.component ? this.component.offset() : this.element.offset();
            this.picker.css({
                "top": offset.top + (this.component ? this.component.outerHeight() : this.element.outerHeight()),
                "left": offset.left
            });
        },
        "show": function(e) {
            if (this.isDisabled()) return false;
            this.picker.addClass("colorpicker-visible").removeClass("colorpicker-hidden");
            this.reposition();
            $(window).on("resize.colorpicker", $.proxy(this.reposition, this));
            if (!this.hasInput() && e) if (e.stopPropagation && e.preventDefault) {
                e.stopPropagation();
                e.preventDefault();
            }
            if (false === this.options.inline) $(window.document).on({
                "mousedown.colorpicker": $.proxy(this.hide, this)
            });
            this.element.trigger({
                "type": "showPicker",
                "color": this.color
            });
        },
        "hide": function() {
            this.picker.addClass("colorpicker-hidden").removeClass("colorpicker-visible");
            $(window).off("resize.colorpicker", this.reposition);
            $(document).off({
                "mousedown.colorpicker": this.hide
            });
            this.update();
            this.element.trigger({
                "type": "hidePicker",
                "color": this.color
            });
        },
        "updateData": function(val) {
            val = val || this.color.toString(this.format);
            this.element.data("color", val);
            return val;
        },
        "updateInput": function(val) {
            val = val || this.color.toString(this.format);
            if (false !== this.input) this.input.prop("value", val);
            return val;
        },
        "updatePicker": function(val) {
            if (void 0 !== val) this.color = new Color(val);
            var sl = false === this.options.horizontal ? this.options.sliders : this.options.slidersHorz;
            var icns = this.picker.find("i");
            if (0 === icns.length) return;
            if (false === this.options.horizontal) {
                sl = this.options.sliders;
                icns.eq(1).css("top", sl.hue.maxTop * (1 - this.color.value.h)).end().eq(2).css("top", sl.alpha.maxTop * (1 - this.color.value.a));
            } else {
                sl = this.options.slidersHorz;
                icns.eq(1).css("left", sl.hue.maxLeft * (1 - this.color.value.h)).end().eq(2).css("left", sl.alpha.maxLeft * (1 - this.color.value.a));
            }
            icns.eq(0).css({
                "top": sl.saturation.maxTop - this.color.value.b * sl.saturation.maxTop,
                "left": this.color.value.s * sl.saturation.maxLeft
            });
            this.picker.find(".colorpicker-saturation").css("backgroundColor", this.color.toHex(this.color.value.h, 1, 1, 1));
            this.picker.find(".colorpicker-alpha").css("backgroundColor", this.color.toHex());
            this.picker.find(".colorpicker-color, .colorpicker-color div").css("backgroundColor", this.color.toString(this.format));
            return val;
        },
        "updateComponent": function(val) {
            val = val || this.color.toString(this.format);
            if (false !== this.component) {
                var icn = this.component.find("i").eq(0);
                if (icn.length > 0) icn.css({
                    "backgroundColor": val
                }); else this.component.css({
                    "backgroundColor": val
                });
            }
            return val;
        },
        "update": function(force) {
            var val = this.updateComponent();
            if (false !== this.getValue(false) || true === force) {
                this.updateInput(val);
                this.updateData(val);
            }
            this.updatePicker();
            return val;
        },
        "setValue": function(val) {
            this.color = new Color(val);
            this.update();
            this.element.trigger({
                "type": "changeColor",
                "color": this.color,
                "value": val
            });
        },
        "getValue": function(defaultValue) {
            defaultValue = void 0 === defaultValue ? "#000000" : defaultValue;
            var val;
            if (this.hasInput()) val = this.input.val(); else val = this.element.data("color");
            if (void 0 === val || "" === val || null === val) val = defaultValue;
            return val;
        },
        "hasInput": function() {
            return false !== this.input;
        },
        "isDisabled": function() {
            if (this.hasInput()) return true === this.input.prop("disabled");
            return false;
        },
        "disable": function() {
            if (this.hasInput()) {
                this.input.prop("disabled", true);
                return true;
            }
            return false;
        },
        "enable": function() {
            if (this.hasInput()) {
                this.input.prop("disabled", false);
                return true;
            }
            return false;
        },
        "currentSlider": null,
        "mousePointer": {
            "left": 0,
            "top": 0
        },
        "mousedown": function(e) {
            e.stopPropagation();
            e.preventDefault();
            var target = $(e.target);
            var zone = target.closest("div");
            var sl = this.options.horizontal ? this.options.slidersHorz : this.options.sliders;
            if (!zone.is(".colorpicker")) {
                if (zone.is(".colorpicker-saturation")) this.currentSlider = $.extend({}, sl.saturation); else if (zone.is(".colorpicker-hue")) this.currentSlider = $.extend({}, sl.hue); else if (zone.is(".colorpicker-alpha")) this.currentSlider = $.extend({}, sl.alpha); else return false;
                var offset = zone.offset();
                this.currentSlider.guide = zone.find("i")[0].style;
                this.currentSlider.left = e.pageX - offset.left;
                this.currentSlider.top = e.pageY - offset.top;
                this.mousePointer = {
                    "left": e.pageX,
                    "top": e.pageY
                };
                $(document).on({
                    "mousemove.colorpicker": $.proxy(this.mousemove, this),
                    "mouseup.colorpicker": $.proxy(this.mouseup, this)
                }).trigger("mousemove");
            }
            return false;
        },
        "mousemove": function(e) {
            e.stopPropagation();
            e.preventDefault();
            var left = Math.max(0, Math.min(this.currentSlider.maxLeft, this.currentSlider.left + ((e.pageX || this.mousePointer.left) - this.mousePointer.left)));
            var top = Math.max(0, Math.min(this.currentSlider.maxTop, this.currentSlider.top + ((e.pageY || this.mousePointer.top) - this.mousePointer.top)));
            this.currentSlider.guide.left = left + "px";
            this.currentSlider.guide.top = top + "px";
            if (this.currentSlider.callLeft) this.color[this.currentSlider.callLeft].call(this.color, left / 100);
            if (this.currentSlider.callTop) this.color[this.currentSlider.callTop].call(this.color, top / 100);
            this.update(true);
            this.element.trigger({
                "type": "changeColor",
                "color": this.color
            });
            return false;
        },
        "mouseup": function(e) {
            e.stopPropagation();
            e.preventDefault();
            $(document).off({
                "mousemove.colorpicker": this.mousemove,
                "mouseup.colorpicker": this.mouseup
            });
            return false;
        },
        "keyup": function(e) {
            if (38 === e.keyCode) {
                if (this.color.value.a < 1) this.color.value.a = Math.round(100 * (this.color.value.a + .01)) / 100;
                this.update(true);
            } else if (40 === e.keyCode) {
                if (this.color.value.a > 0) this.color.value.a = Math.round(100 * (this.color.value.a - .01)) / 100;
                this.update(true);
            } else {
                var val = this.input.val();
                this.color = new Color(val);
                if (false !== this.getValue(false)) {
                    this.updateData();
                    this.updateComponent();
                    this.updatePicker();
                }
            }
            this.element.trigger({
                "type": "changeColor",
                "color": this.color,
                "value": val
            });
        }
    };
    $.colorpicker = Colorpicker;
    $.fn.colorpicker = function(option) {
        var pickerArgs = arguments;
        return this.each(function() {
            var $this = $(this), inst = $this.data("colorpicker"), options = "object" === typeof option ? option : {};
            if (!inst && "string" !== typeof option) $this.data("colorpicker", new Colorpicker(this, options)); else if ("string" === typeof option) inst[option].apply(inst, Array.prototype.slice.call(pickerArgs, 1));
        });
    };
    $.fn.colorpicker.constructor = Colorpicker;
}(window.jQuery);

var Cookie = {
    "set": function(name, value, daysToExpire, options) {
        var expire = "";
        if (void 0 !== daysToExpire) {
            var d = new Date();
            d.setTime(d.getTime() + 864e5 * parseFloat(daysToExpire));
            expire = "; expires=" + d.toGMTString();
        }
        if (void 0 === options) options = {
            "path": "/"
        };
        var ret = document.cookie = escape(name) + "=" + escape(value || "") + (options.path ? ";path=" + options.path : "") + (options.domain ? ";domain=" + options.domain : "") + (options.secure ? ";secure" : "") + expire;
        return ret;
    },
    "get": function(name) {
        var cookie = document.cookie.match(new RegExp("(^|;)\\s*" + escape(name) + "=([^;\\s]*)"));
        return cookie ? unescape(cookie[2]) : null;
    },
    "erase": function(name) {
        var cookie = Cookie.get(name) || true;
        Cookie.set(name, "", -1);
        return cookie;
    },
    "all": function() {
        return _(document.cookie.split(";")).reduce(function(obj, pair) {
            kv = pair.split("=");
            obj[kv[0]] = kv[1];
            return obj;
        }, {});
    }
};

!function(global) {
    "use strict";
    function Map() {
        this.data = {};
    }
    Map.prototype = {
        "get": function(key) {
            return this.data[key + "~"];
        },
        "set": function(key, value) {
            this.data[key + "~"] = value;
        },
        "delete": function(key) {
            delete this.data[key + "~"];
        }
    };
    function EventTarget() {
        this.listeners = new Map();
    }
    function throwError(e) {
        setTimeout(function() {
            throw e;
        }, 0);
    }
    EventTarget.prototype = {
        "dispatchEvent": function(event) {
            var type = String(event.type);
            var listeners = this.listeners;
            var typeListeners = listeners.get(type);
            if (!typeListeners) return;
            var length = typeListeners.length;
            var i = -1;
            while (++i < length) {
                var listener = typeListeners[i];
                try {
                    listener.call(this, event);
                } catch (e) {
                    throwError(e);
                }
            }
        },
        "addEventListener": function(type, callback) {
            type = String(type);
            var listeners = this.listeners;
            var typeListeners = listeners.get(type);
            if (!typeListeners) listeners.set(type, typeListeners = []);
            var i = typeListeners.length;
            while (--i >= 0) if (typeListeners[i] === callback) return;
            typeListeners.push(callback);
        },
        "removeEventListener": function(type, callback) {
            type = String(type);
            var listeners = this.listeners;
            var typeListeners = listeners.get(type);
            if (!typeListeners) return;
            var length = typeListeners.length;
            var filtered = [];
            var i = -1;
            while (++i < length) if (typeListeners[i] !== callback) filtered.push(typeListeners[i]);
            if (0 === filtered.length) listeners["delete"](type); else listeners.set(type, filtered);
        }
    };
    function Event(type) {
        this.type = type;
    }
    function MessageEvent(type, options) {
        Event.call(this, type);
        this.data = options.data;
        this.lastEventId = options.lastEventId;
    }
    MessageEvent.prototype = Event.prototype;
    var XHR = global.XMLHttpRequest;
    var XDR = global.XDomainRequest;
    var xhr2 = Boolean(XHR && void 0 !== new XHR().withCredentials);
    var isXHR = xhr2;
    var Transport = xhr2 ? XHR : XDR;
    var WAITING = -1;
    var CONNECTING = 0;
    var OPEN = 1;
    var CLOSED = 2;
    var contentTypeRegExp = /^text\/event\-stream;?(\s*charset\=utf\-8)?$/i;
    var webkitBefore535 = /AppleWebKit\/5([0-2][0-9]|3[0-4])[^\d]/.test(navigator.userAgent);
    var endOfLine = /[\r\n]/;
    function getDuration(value, def) {
        var n = Number(value);
        return (n < 1 ? 1 : n > 18e6 ? 18e6 : n) || def;
    }
    function abort(xhr) {
        xhr.onload = xhr.onerror = xhr.onprogress = xhr.onreadystatechange = null;
        xhr.abort();
    }
    function fire(that, property, event) {
        try {
            if ("function" === typeof that[property]) that[property](event);
        } catch (e) {
            throwError(e);
        }
    }
    function EventSource(url, options) {
        url = String(url);
        var withCredentials = Boolean(xhr2 && options && options.withCredentials);
        var initialRetry = getDuration(options ? options.retry : 0/0, 1e3);
        var retryLimit = getDuration(options ? options.retryLimit : 0/0, 3e5);
        var heartbeatTimeout = getDuration(options ? options.heartbeatTimeout : 0/0, 45e3);
        var lastEventId = options && options.lastEventId && String(options.lastEventId) || "";
        var that = this;
        var retry = initialRetry;
        var wasActivity = false;
        var xhr = new Transport();
        var timeout = 0;
        var charOffset = 0;
        var currentState = WAITING;
        var dataBuffer = [];
        var lastEventIdBuffer = "";
        var eventTypeBuffer = "";
        var responseBuffer = [];
        var wasCR = false;
        options = null;
        function close() {
            if (null !== xhr) {
                abort(xhr);
                xhr = null;
            }
            if (0 !== timeout) {
                clearTimeout(timeout);
                timeout = 0;
            }
            currentState = CLOSED;
            that.readyState = CLOSED;
        }
        function onProgress(isLoadEnd) {
            var responseText = xhr.responseText || "";
            var event = null;
            if (currentState === CONNECTING) {
                var contentType = isXHR ? "" !== responseText ? xhr.getResponseHeader("Content-Type") : "" : xhr.contentType;
                if (contentType && contentTypeRegExp.test(contentType)) {
                    currentState = OPEN;
                    wasActivity = true;
                    retry = initialRetry;
                    that.readyState = OPEN;
                    event = new Event("open");
                    that.dispatchEvent(event);
                    fire(that, "onopen", event);
                    if (currentState === CLOSED) return;
                }
            }
            if (currentState === OPEN) {
                var part = responseText.slice(charOffset);
                if (part.length > 0) wasActivity = true;
                var i = 0;
                while ((i = part.search(endOfLine)) !== -1) {
                    var c = part.slice(i, i + 1);
                    if (wasCR && 0 === i && "\n" === c) {
                        wasCR = false;
                        part = part.slice(i + 1);
                        continue;
                    }
                    wasCR = "\r" === c;
                    responseBuffer.push(part.slice(0, i));
                    var field = responseBuffer.join("");
                    responseBuffer.length = 0;
                    part = part.slice(i + 1);
                    if ("" !== field) {
                        var value = "";
                        var j = field.indexOf(":");
                        if (j !== -1) {
                            value = field.slice(j + (" " === field.slice(j + 1, j + 2) ? 2 : 1));
                            field = field.slice(0, j);
                        }
                        if ("data" === field) dataBuffer.push(value); else if ("id" === field) lastEventIdBuffer = value; else if ("event" === field) eventTypeBuffer = value; else if ("retry" === field) {
                            initialRetry = getDuration(value, initialRetry);
                            retry = initialRetry;
                            if (retryLimit < initialRetry) retryLimit = initialRetry;
                        } else if ("retryLimit" === field) retryLimit = getDuration(value, retryLimit); else if ("heartbeatTimeout" === field) {
                            heartbeatTimeout = getDuration(value, heartbeatTimeout);
                            if (0 !== timeout) {
                                clearTimeout(timeout);
                                timeout = setTimeout(onTimeout, heartbeatTimeout);
                            }
                        }
                    } else {
                        if (0 !== dataBuffer.length) {
                            lastEventId = lastEventIdBuffer;
                            var type = eventTypeBuffer || "message";
                            event = new MessageEvent(type, {
                                "data": dataBuffer.join("\n"),
                                "lastEventId": lastEventIdBuffer
                            });
                            that.dispatchEvent(event);
                            if ("message" === type) fire(that, "onmessage", event);
                            if (currentState === CLOSED) return;
                        }
                        dataBuffer.length = 0;
                        eventTypeBuffer = "";
                    }
                }
                if ("" !== part) responseBuffer.push(part);
                charOffset = responseText.length;
            }
            if (isLoadEnd || charOffset > 1024 * 1024 || 0 === timeout && !wasActivity) {
                abort(xhr);
                if (0 !== timeout) {
                    clearTimeout(timeout);
                    timeout = 0;
                }
                if (retry > retryLimit) retry = retryLimit;
                currentState = WAITING;
                timeout = setTimeout(onTimeout, retry);
                retry = 2 * retry + 1;
                that.readyState = CONNECTING;
                event = new Event("error");
                that.dispatchEvent(event);
                fire(that, "onerror", event);
            } else if (0 === timeout) {
                wasActivity = false;
                timeout = setTimeout(onTimeout, heartbeatTimeout);
            }
        }
        function p() {
            if (currentState === OPEN) onProgress(false);
        }
        function onProgress2() {
            onProgress(false);
            setTimeout(p, 64);
        }
        function onLoad() {
            onProgress(true);
        }
        function onTimeout() {
            timeout = 0;
            if (currentState !== WAITING) {
                onProgress(false);
                return;
            }
            if (false === navigator.onLine) {
                timeout = setTimeout(onTimeout, 500);
                return;
            }
            if (webkitBefore535 && global.document && ("loading" === global.document.readyState || "interactive" === global.document.readyState)) {
                timeout = setTimeout(onTimeout, 100);
                return;
            }
            xhr.onload = xhr.onerror = onLoad;
            if (void 0 === xhr.mozAnon) xhr.onprogress = onProgress2;
            xhr.onreadystatechange = onProgress2;
            wasActivity = false;
            timeout = setTimeout(onTimeout, heartbeatTimeout);
            charOffset = 0;
            currentState = CONNECTING;
            dataBuffer.length = 0;
            eventTypeBuffer = "";
            lastEventIdBuffer = lastEventId;
            responseBuffer.length = 0;
            wasCR = false;
            xhr.open("GET", url + ((url.indexOf("?") === -1 ? "?" : "&") + "lastEventId=" + encodeURIComponent(lastEventId) + "&r=" + String(Math.random()).slice(2)), true);
            xhr.withCredentials = withCredentials;
            xhr.responseType = "text";
            if (isXHR) {
                xhr.setRequestHeader("Cache-Control", "no-cache");
                xhr.setRequestHeader("Accept", "text/event-stream");
                xhr.setRequestHeader("Last-Event-ID", lastEventId);
            }
            xhr.send(null);
        }
        EventTarget.call(this);
        this.close = close;
        this.url = url;
        this.readyState = CONNECTING;
        this.withCredentials = withCredentials;
        onTimeout();
    }
    function F() {
        this.CONNECTING = CONNECTING;
        this.OPEN = OPEN;
        this.CLOSED = CLOSED;
    }
    F.prototype = EventTarget.prototype;
    EventSource.prototype = new F();
    F.call(EventSource);
    if (Transport) global.EventSource = EventSource;
}(this);

!function($) {
    if ("undefined" == typeof $.fn.each2) $.extend($.fn, {
        "each2": function(c) {
            var j = $([ 0 ]), i = -1, l = this.length;
            while (++i < l && (j.context = j[0] = this[i]) && false !== c.call(j[0], i, j)) ;
            return this;
        }
    });
}(jQuery);

!function($, undefined) {
    "use strict";
    if (window.Select2 !== undefined) return;
    var KEY, AbstractSelect2, SingleSelect2, MultiSelect2, nextUid, sizer, lastMousePosition = {
        "x": 0,
        "y": 0
    }, $document, scrollBarDimensions, KEY = {
        "TAB": 9,
        "ENTER": 13,
        "ESC": 27,
        "SPACE": 32,
        "LEFT": 37,
        "UP": 38,
        "RIGHT": 39,
        "DOWN": 40,
        "SHIFT": 16,
        "CTRL": 17,
        "ALT": 18,
        "PAGE_UP": 33,
        "PAGE_DOWN": 34,
        "HOME": 36,
        "END": 35,
        "BACKSPACE": 8,
        "DELETE": 46,
        "isArrow": function(k) {
            k = k.which ? k.which : k;
            switch (k) {
              case KEY.LEFT:
              case KEY.RIGHT:
              case KEY.UP:
              case KEY.DOWN:
                return true;
            }
            return false;
        },
        "isControl": function(e) {
            var k = e.which;
            switch (k) {
              case KEY.SHIFT:
              case KEY.CTRL:
              case KEY.ALT:
                return true;
            }
            if (e.metaKey) return true;
            return false;
        },
        "isFunctionKey": function(k) {
            k = k.which ? k.which : k;
            return k >= 112 && k <= 123;
        }
    }, MEASURE_SCROLLBAR_TEMPLATE = "<div class='select2-measure-scrollbar'></div>", DIACRITICS = {
        "\u24b6": "A",
        "\uff21": "A",
        "\xc0": "A",
        "\xc1": "A",
        "\xc2": "A",
        "\u1ea6": "A",
        "\u1ea4": "A",
        "\u1eaa": "A",
        "\u1ea8": "A",
        "\xc3": "A",
        "\u0100": "A",
        "\u0102": "A",
        "\u1eb0": "A",
        "\u1eae": "A",
        "\u1eb4": "A",
        "\u1eb2": "A",
        "\u0226": "A",
        "\u01e0": "A",
        "\xc4": "A",
        "\u01de": "A",
        "\u1ea2": "A",
        "\xc5": "A",
        "\u01fa": "A",
        "\u01cd": "A",
        "\u0200": "A",
        "\u0202": "A",
        "\u1ea0": "A",
        "\u1eac": "A",
        "\u1eb6": "A",
        "\u1e00": "A",
        "\u0104": "A",
        "\u023a": "A",
        "\u2c6f": "A",
        "\ua732": "AA",
        "\xc6": "AE",
        "\u01fc": "AE",
        "\u01e2": "AE",
        "\ua734": "AO",
        "\ua736": "AU",
        "\ua738": "AV",
        "\ua73a": "AV",
        "\ua73c": "AY",
        "\u24b7": "B",
        "\uff22": "B",
        "\u1e02": "B",
        "\u1e04": "B",
        "\u1e06": "B",
        "\u0243": "B",
        "\u0182": "B",
        "\u0181": "B",
        "\u24b8": "C",
        "\uff23": "C",
        "\u0106": "C",
        "\u0108": "C",
        "\u010a": "C",
        "\u010c": "C",
        "\xc7": "C",
        "\u1e08": "C",
        "\u0187": "C",
        "\u023b": "C",
        "\ua73e": "C",
        "\u24b9": "D",
        "\uff24": "D",
        "\u1e0a": "D",
        "\u010e": "D",
        "\u1e0c": "D",
        "\u1e10": "D",
        "\u1e12": "D",
        "\u1e0e": "D",
        "\u0110": "D",
        "\u018b": "D",
        "\u018a": "D",
        "\u0189": "D",
        "\ua779": "D",
        "\u01f1": "DZ",
        "\u01c4": "DZ",
        "\u01f2": "Dz",
        "\u01c5": "Dz",
        "\u24ba": "E",
        "\uff25": "E",
        "\xc8": "E",
        "\xc9": "E",
        "\xca": "E",
        "\u1ec0": "E",
        "\u1ebe": "E",
        "\u1ec4": "E",
        "\u1ec2": "E",
        "\u1ebc": "E",
        "\u0112": "E",
        "\u1e14": "E",
        "\u1e16": "E",
        "\u0114": "E",
        "\u0116": "E",
        "\xcb": "E",
        "\u1eba": "E",
        "\u011a": "E",
        "\u0204": "E",
        "\u0206": "E",
        "\u1eb8": "E",
        "\u1ec6": "E",
        "\u0228": "E",
        "\u1e1c": "E",
        "\u0118": "E",
        "\u1e18": "E",
        "\u1e1a": "E",
        "\u0190": "E",
        "\u018e": "E",
        "\u24bb": "F",
        "\uff26": "F",
        "\u1e1e": "F",
        "\u0191": "F",
        "\ua77b": "F",
        "\u24bc": "G",
        "\uff27": "G",
        "\u01f4": "G",
        "\u011c": "G",
        "\u1e20": "G",
        "\u011e": "G",
        "\u0120": "G",
        "\u01e6": "G",
        "\u0122": "G",
        "\u01e4": "G",
        "\u0193": "G",
        "\ua7a0": "G",
        "\ua77d": "G",
        "\ua77e": "G",
        "\u24bd": "H",
        "\uff28": "H",
        "\u0124": "H",
        "\u1e22": "H",
        "\u1e26": "H",
        "\u021e": "H",
        "\u1e24": "H",
        "\u1e28": "H",
        "\u1e2a": "H",
        "\u0126": "H",
        "\u2c67": "H",
        "\u2c75": "H",
        "\ua78d": "H",
        "\u24be": "I",
        "\uff29": "I",
        "\xcc": "I",
        "\xcd": "I",
        "\xce": "I",
        "\u0128": "I",
        "\u012a": "I",
        "\u012c": "I",
        "\u0130": "I",
        "\xcf": "I",
        "\u1e2e": "I",
        "\u1ec8": "I",
        "\u01cf": "I",
        "\u0208": "I",
        "\u020a": "I",
        "\u1eca": "I",
        "\u012e": "I",
        "\u1e2c": "I",
        "\u0197": "I",
        "\u24bf": "J",
        "\uff2a": "J",
        "\u0134": "J",
        "\u0248": "J",
        "\u24c0": "K",
        "\uff2b": "K",
        "\u1e30": "K",
        "\u01e8": "K",
        "\u1e32": "K",
        "\u0136": "K",
        "\u1e34": "K",
        "\u0198": "K",
        "\u2c69": "K",
        "\ua740": "K",
        "\ua742": "K",
        "\ua744": "K",
        "\ua7a2": "K",
        "\u24c1": "L",
        "\uff2c": "L",
        "\u013f": "L",
        "\u0139": "L",
        "\u013d": "L",
        "\u1e36": "L",
        "\u1e38": "L",
        "\u013b": "L",
        "\u1e3c": "L",
        "\u1e3a": "L",
        "\u0141": "L",
        "\u023d": "L",
        "\u2c62": "L",
        "\u2c60": "L",
        "\ua748": "L",
        "\ua746": "L",
        "\ua780": "L",
        "\u01c7": "LJ",
        "\u01c8": "Lj",
        "\u24c2": "M",
        "\uff2d": "M",
        "\u1e3e": "M",
        "\u1e40": "M",
        "\u1e42": "M",
        "\u2c6e": "M",
        "\u019c": "M",
        "\u24c3": "N",
        "\uff2e": "N",
        "\u01f8": "N",
        "\u0143": "N",
        "\xd1": "N",
        "\u1e44": "N",
        "\u0147": "N",
        "\u1e46": "N",
        "\u0145": "N",
        "\u1e4a": "N",
        "\u1e48": "N",
        "\u0220": "N",
        "\u019d": "N",
        "\ua790": "N",
        "\ua7a4": "N",
        "\u01ca": "NJ",
        "\u01cb": "Nj",
        "\u24c4": "O",
        "\uff2f": "O",
        "\xd2": "O",
        "\xd3": "O",
        "\xd4": "O",
        "\u1ed2": "O",
        "\u1ed0": "O",
        "\u1ed6": "O",
        "\u1ed4": "O",
        "\xd5": "O",
        "\u1e4c": "O",
        "\u022c": "O",
        "\u1e4e": "O",
        "\u014c": "O",
        "\u1e50": "O",
        "\u1e52": "O",
        "\u014e": "O",
        "\u022e": "O",
        "\u0230": "O",
        "\xd6": "O",
        "\u022a": "O",
        "\u1ece": "O",
        "\u0150": "O",
        "\u01d1": "O",
        "\u020c": "O",
        "\u020e": "O",
        "\u01a0": "O",
        "\u1edc": "O",
        "\u1eda": "O",
        "\u1ee0": "O",
        "\u1ede": "O",
        "\u1ee2": "O",
        "\u1ecc": "O",
        "\u1ed8": "O",
        "\u01ea": "O",
        "\u01ec": "O",
        "\xd8": "O",
        "\u01fe": "O",
        "\u0186": "O",
        "\u019f": "O",
        "\ua74a": "O",
        "\ua74c": "O",
        "\u01a2": "OI",
        "\ua74e": "OO",
        "\u0222": "OU",
        "\u24c5": "P",
        "\uff30": "P",
        "\u1e54": "P",
        "\u1e56": "P",
        "\u01a4": "P",
        "\u2c63": "P",
        "\ua750": "P",
        "\ua752": "P",
        "\ua754": "P",
        "\u24c6": "Q",
        "\uff31": "Q",
        "\ua756": "Q",
        "\ua758": "Q",
        "\u024a": "Q",
        "\u24c7": "R",
        "\uff32": "R",
        "\u0154": "R",
        "\u1e58": "R",
        "\u0158": "R",
        "\u0210": "R",
        "\u0212": "R",
        "\u1e5a": "R",
        "\u1e5c": "R",
        "\u0156": "R",
        "\u1e5e": "R",
        "\u024c": "R",
        "\u2c64": "R",
        "\ua75a": "R",
        "\ua7a6": "R",
        "\ua782": "R",
        "\u24c8": "S",
        "\uff33": "S",
        "\u1e9e": "S",
        "\u015a": "S",
        "\u1e64": "S",
        "\u015c": "S",
        "\u1e60": "S",
        "\u0160": "S",
        "\u1e66": "S",
        "\u1e62": "S",
        "\u1e68": "S",
        "\u0218": "S",
        "\u015e": "S",
        "\u2c7e": "S",
        "\ua7a8": "S",
        "\ua784": "S",
        "\u24c9": "T",
        "\uff34": "T",
        "\u1e6a": "T",
        "\u0164": "T",
        "\u1e6c": "T",
        "\u021a": "T",
        "\u0162": "T",
        "\u1e70": "T",
        "\u1e6e": "T",
        "\u0166": "T",
        "\u01ac": "T",
        "\u01ae": "T",
        "\u023e": "T",
        "\ua786": "T",
        "\ua728": "TZ",
        "\u24ca": "U",
        "\uff35": "U",
        "\xd9": "U",
        "\xda": "U",
        "\xdb": "U",
        "\u0168": "U",
        "\u1e78": "U",
        "\u016a": "U",
        "\u1e7a": "U",
        "\u016c": "U",
        "\xdc": "U",
        "\u01db": "U",
        "\u01d7": "U",
        "\u01d5": "U",
        "\u01d9": "U",
        "\u1ee6": "U",
        "\u016e": "U",
        "\u0170": "U",
        "\u01d3": "U",
        "\u0214": "U",
        "\u0216": "U",
        "\u01af": "U",
        "\u1eea": "U",
        "\u1ee8": "U",
        "\u1eee": "U",
        "\u1eec": "U",
        "\u1ef0": "U",
        "\u1ee4": "U",
        "\u1e72": "U",
        "\u0172": "U",
        "\u1e76": "U",
        "\u1e74": "U",
        "\u0244": "U",
        "\u24cb": "V",
        "\uff36": "V",
        "\u1e7c": "V",
        "\u1e7e": "V",
        "\u01b2": "V",
        "\ua75e": "V",
        "\u0245": "V",
        "\ua760": "VY",
        "\u24cc": "W",
        "\uff37": "W",
        "\u1e80": "W",
        "\u1e82": "W",
        "\u0174": "W",
        "\u1e86": "W",
        "\u1e84": "W",
        "\u1e88": "W",
        "\u2c72": "W",
        "\u24cd": "X",
        "\uff38": "X",
        "\u1e8a": "X",
        "\u1e8c": "X",
        "\u24ce": "Y",
        "\uff39": "Y",
        "\u1ef2": "Y",
        "\xdd": "Y",
        "\u0176": "Y",
        "\u1ef8": "Y",
        "\u0232": "Y",
        "\u1e8e": "Y",
        "\u0178": "Y",
        "\u1ef6": "Y",
        "\u1ef4": "Y",
        "\u01b3": "Y",
        "\u024e": "Y",
        "\u1efe": "Y",
        "\u24cf": "Z",
        "\uff3a": "Z",
        "\u0179": "Z",
        "\u1e90": "Z",
        "\u017b": "Z",
        "\u017d": "Z",
        "\u1e92": "Z",
        "\u1e94": "Z",
        "\u01b5": "Z",
        "\u0224": "Z",
        "\u2c7f": "Z",
        "\u2c6b": "Z",
        "\ua762": "Z",
        "\u24d0": "a",
        "\uff41": "a",
        "\u1e9a": "a",
        "\xe0": "a",
        "\xe1": "a",
        "\xe2": "a",
        "\u1ea7": "a",
        "\u1ea5": "a",
        "\u1eab": "a",
        "\u1ea9": "a",
        "\xe3": "a",
        "\u0101": "a",
        "\u0103": "a",
        "\u1eb1": "a",
        "\u1eaf": "a",
        "\u1eb5": "a",
        "\u1eb3": "a",
        "\u0227": "a",
        "\u01e1": "a",
        "\xe4": "a",
        "\u01df": "a",
        "\u1ea3": "a",
        "\xe5": "a",
        "\u01fb": "a",
        "\u01ce": "a",
        "\u0201": "a",
        "\u0203": "a",
        "\u1ea1": "a",
        "\u1ead": "a",
        "\u1eb7": "a",
        "\u1e01": "a",
        "\u0105": "a",
        "\u2c65": "a",
        "\u0250": "a",
        "\ua733": "aa",
        "\xe6": "ae",
        "\u01fd": "ae",
        "\u01e3": "ae",
        "\ua735": "ao",
        "\ua737": "au",
        "\ua739": "av",
        "\ua73b": "av",
        "\ua73d": "ay",
        "\u24d1": "b",
        "\uff42": "b",
        "\u1e03": "b",
        "\u1e05": "b",
        "\u1e07": "b",
        "\u0180": "b",
        "\u0183": "b",
        "\u0253": "b",
        "\u24d2": "c",
        "\uff43": "c",
        "\u0107": "c",
        "\u0109": "c",
        "\u010b": "c",
        "\u010d": "c",
        "\xe7": "c",
        "\u1e09": "c",
        "\u0188": "c",
        "\u023c": "c",
        "\ua73f": "c",
        "\u2184": "c",
        "\u24d3": "d",
        "\uff44": "d",
        "\u1e0b": "d",
        "\u010f": "d",
        "\u1e0d": "d",
        "\u1e11": "d",
        "\u1e13": "d",
        "\u1e0f": "d",
        "\u0111": "d",
        "\u018c": "d",
        "\u0256": "d",
        "\u0257": "d",
        "\ua77a": "d",
        "\u01f3": "dz",
        "\u01c6": "dz",
        "\u24d4": "e",
        "\uff45": "e",
        "\xe8": "e",
        "\xe9": "e",
        "\xea": "e",
        "\u1ec1": "e",
        "\u1ebf": "e",
        "\u1ec5": "e",
        "\u1ec3": "e",
        "\u1ebd": "e",
        "\u0113": "e",
        "\u1e15": "e",
        "\u1e17": "e",
        "\u0115": "e",
        "\u0117": "e",
        "\xeb": "e",
        "\u1ebb": "e",
        "\u011b": "e",
        "\u0205": "e",
        "\u0207": "e",
        "\u1eb9": "e",
        "\u1ec7": "e",
        "\u0229": "e",
        "\u1e1d": "e",
        "\u0119": "e",
        "\u1e19": "e",
        "\u1e1b": "e",
        "\u0247": "e",
        "\u025b": "e",
        "\u01dd": "e",
        "\u24d5": "f",
        "\uff46": "f",
        "\u1e1f": "f",
        "\u0192": "f",
        "\ua77c": "f",
        "\u24d6": "g",
        "\uff47": "g",
        "\u01f5": "g",
        "\u011d": "g",
        "\u1e21": "g",
        "\u011f": "g",
        "\u0121": "g",
        "\u01e7": "g",
        "\u0123": "g",
        "\u01e5": "g",
        "\u0260": "g",
        "\ua7a1": "g",
        "\u1d79": "g",
        "\ua77f": "g",
        "\u24d7": "h",
        "\uff48": "h",
        "\u0125": "h",
        "\u1e23": "h",
        "\u1e27": "h",
        "\u021f": "h",
        "\u1e25": "h",
        "\u1e29": "h",
        "\u1e2b": "h",
        "\u1e96": "h",
        "\u0127": "h",
        "\u2c68": "h",
        "\u2c76": "h",
        "\u0265": "h",
        "\u0195": "hv",
        "\u24d8": "i",
        "\uff49": "i",
        "\xec": "i",
        "\xed": "i",
        "\xee": "i",
        "\u0129": "i",
        "\u012b": "i",
        "\u012d": "i",
        "\xef": "i",
        "\u1e2f": "i",
        "\u1ec9": "i",
        "\u01d0": "i",
        "\u0209": "i",
        "\u020b": "i",
        "\u1ecb": "i",
        "\u012f": "i",
        "\u1e2d": "i",
        "\u0268": "i",
        "\u0131": "i",
        "\u24d9": "j",
        "\uff4a": "j",
        "\u0135": "j",
        "\u01f0": "j",
        "\u0249": "j",
        "\u24da": "k",
        "\uff4b": "k",
        "\u1e31": "k",
        "\u01e9": "k",
        "\u1e33": "k",
        "\u0137": "k",
        "\u1e35": "k",
        "\u0199": "k",
        "\u2c6a": "k",
        "\ua741": "k",
        "\ua743": "k",
        "\ua745": "k",
        "\ua7a3": "k",
        "\u24db": "l",
        "\uff4c": "l",
        "\u0140": "l",
        "\u013a": "l",
        "\u013e": "l",
        "\u1e37": "l",
        "\u1e39": "l",
        "\u013c": "l",
        "\u1e3d": "l",
        "\u1e3b": "l",
        "\u017f": "l",
        "\u0142": "l",
        "\u019a": "l",
        "\u026b": "l",
        "\u2c61": "l",
        "\ua749": "l",
        "\ua781": "l",
        "\ua747": "l",
        "\u01c9": "lj",
        "\u24dc": "m",
        "\uff4d": "m",
        "\u1e3f": "m",
        "\u1e41": "m",
        "\u1e43": "m",
        "\u0271": "m",
        "\u026f": "m",
        "\u24dd": "n",
        "\uff4e": "n",
        "\u01f9": "n",
        "\u0144": "n",
        "\xf1": "n",
        "\u1e45": "n",
        "\u0148": "n",
        "\u1e47": "n",
        "\u0146": "n",
        "\u1e4b": "n",
        "\u1e49": "n",
        "\u019e": "n",
        "\u0272": "n",
        "\u0149": "n",
        "\ua791": "n",
        "\ua7a5": "n",
        "\u01cc": "nj",
        "\u24de": "o",
        "\uff4f": "o",
        "\xf2": "o",
        "\xf3": "o",
        "\xf4": "o",
        "\u1ed3": "o",
        "\u1ed1": "o",
        "\u1ed7": "o",
        "\u1ed5": "o",
        "\xf5": "o",
        "\u1e4d": "o",
        "\u022d": "o",
        "\u1e4f": "o",
        "\u014d": "o",
        "\u1e51": "o",
        "\u1e53": "o",
        "\u014f": "o",
        "\u022f": "o",
        "\u0231": "o",
        "\xf6": "o",
        "\u022b": "o",
        "\u1ecf": "o",
        "\u0151": "o",
        "\u01d2": "o",
        "\u020d": "o",
        "\u020f": "o",
        "\u01a1": "o",
        "\u1edd": "o",
        "\u1edb": "o",
        "\u1ee1": "o",
        "\u1edf": "o",
        "\u1ee3": "o",
        "\u1ecd": "o",
        "\u1ed9": "o",
        "\u01eb": "o",
        "\u01ed": "o",
        "\xf8": "o",
        "\u01ff": "o",
        "\u0254": "o",
        "\ua74b": "o",
        "\ua74d": "o",
        "\u0275": "o",
        "\u01a3": "oi",
        "\u0223": "ou",
        "\ua74f": "oo",
        "\u24df": "p",
        "\uff50": "p",
        "\u1e55": "p",
        "\u1e57": "p",
        "\u01a5": "p",
        "\u1d7d": "p",
        "\ua751": "p",
        "\ua753": "p",
        "\ua755": "p",
        "\u24e0": "q",
        "\uff51": "q",
        "\u024b": "q",
        "\ua757": "q",
        "\ua759": "q",
        "\u24e1": "r",
        "\uff52": "r",
        "\u0155": "r",
        "\u1e59": "r",
        "\u0159": "r",
        "\u0211": "r",
        "\u0213": "r",
        "\u1e5b": "r",
        "\u1e5d": "r",
        "\u0157": "r",
        "\u1e5f": "r",
        "\u024d": "r",
        "\u027d": "r",
        "\ua75b": "r",
        "\ua7a7": "r",
        "\ua783": "r",
        "\u24e2": "s",
        "\uff53": "s",
        "\xdf": "s",
        "\u015b": "s",
        "\u1e65": "s",
        "\u015d": "s",
        "\u1e61": "s",
        "\u0161": "s",
        "\u1e67": "s",
        "\u1e63": "s",
        "\u1e69": "s",
        "\u0219": "s",
        "\u015f": "s",
        "\u023f": "s",
        "\ua7a9": "s",
        "\ua785": "s",
        "\u1e9b": "s",
        "\u24e3": "t",
        "\uff54": "t",
        "\u1e6b": "t",
        "\u1e97": "t",
        "\u0165": "t",
        "\u1e6d": "t",
        "\u021b": "t",
        "\u0163": "t",
        "\u1e71": "t",
        "\u1e6f": "t",
        "\u0167": "t",
        "\u01ad": "t",
        "\u0288": "t",
        "\u2c66": "t",
        "\ua787": "t",
        "\ua729": "tz",
        "\u24e4": "u",
        "\uff55": "u",
        "\xf9": "u",
        "\xfa": "u",
        "\xfb": "u",
        "\u0169": "u",
        "\u1e79": "u",
        "\u016b": "u",
        "\u1e7b": "u",
        "\u016d": "u",
        "\xfc": "u",
        "\u01dc": "u",
        "\u01d8": "u",
        "\u01d6": "u",
        "\u01da": "u",
        "\u1ee7": "u",
        "\u016f": "u",
        "\u0171": "u",
        "\u01d4": "u",
        "\u0215": "u",
        "\u0217": "u",
        "\u01b0": "u",
        "\u1eeb": "u",
        "\u1ee9": "u",
        "\u1eef": "u",
        "\u1eed": "u",
        "\u1ef1": "u",
        "\u1ee5": "u",
        "\u1e73": "u",
        "\u0173": "u",
        "\u1e77": "u",
        "\u1e75": "u",
        "\u0289": "u",
        "\u24e5": "v",
        "\uff56": "v",
        "\u1e7d": "v",
        "\u1e7f": "v",
        "\u028b": "v",
        "\ua75f": "v",
        "\u028c": "v",
        "\ua761": "vy",
        "\u24e6": "w",
        "\uff57": "w",
        "\u1e81": "w",
        "\u1e83": "w",
        "\u0175": "w",
        "\u1e87": "w",
        "\u1e85": "w",
        "\u1e98": "w",
        "\u1e89": "w",
        "\u2c73": "w",
        "\u24e7": "x",
        "\uff58": "x",
        "\u1e8b": "x",
        "\u1e8d": "x",
        "\u24e8": "y",
        "\uff59": "y",
        "\u1ef3": "y",
        "\xfd": "y",
        "\u0177": "y",
        "\u1ef9": "y",
        "\u0233": "y",
        "\u1e8f": "y",
        "\xff": "y",
        "\u1ef7": "y",
        "\u1e99": "y",
        "\u1ef5": "y",
        "\u01b4": "y",
        "\u024f": "y",
        "\u1eff": "y",
        "\u24e9": "z",
        "\uff5a": "z",
        "\u017a": "z",
        "\u1e91": "z",
        "\u017c": "z",
        "\u017e": "z",
        "\u1e93": "z",
        "\u1e95": "z",
        "\u01b6": "z",
        "\u0225": "z",
        "\u0240": "z",
        "\u2c6c": "z",
        "\ua763": "z"
    };
    $document = $(document);
    nextUid = function() {
        var counter = 1;
        return function() {
            return counter++;
        };
    }();
    function stripDiacritics(str) {
        var ret, i, l, c;
        if (!str || str.length < 1) return str;
        ret = "";
        for (i = 0, l = str.length; i < l; i++) {
            c = str.charAt(i);
            ret += DIACRITICS[c] || c;
        }
        return ret;
    }
    function indexOf(value, array) {
        var i = 0, l = array.length;
        for (;i < l; i += 1) if (equal(value, array[i])) return i;
        return -1;
    }
    function measureScrollbar() {
        var $template = $(MEASURE_SCROLLBAR_TEMPLATE);
        $template.appendTo("body");
        var dim = {
            "width": $template.width() - $template[0].clientWidth,
            "height": $template.height() - $template[0].clientHeight
        };
        $template.remove();
        return dim;
    }
    function equal(a, b) {
        if (a === b) return true;
        if (a === undefined || b === undefined) return false;
        if (null === a || null === b) return false;
        if (a.constructor === String) return a + "" === b + "";
        if (b.constructor === String) return b + "" === a + "";
        return false;
    }
    function splitVal(string, separator) {
        var val, i, l;
        if (null === string || string.length < 1) return [];
        val = string.split(separator);
        for (i = 0, l = val.length; i < l; i += 1) val[i] = $.trim(val[i]);
        return val;
    }
    function getSideBorderPadding(element) {
        return element.outerWidth(false) - element.width();
    }
    function installKeyUpChangeEvent(element) {
        var key = "keyup-change-value";
        element.on("keydown", function() {
            if ($.data(element, key) === undefined) $.data(element, key, element.val());
        });
        element.on("keyup", function() {
            var val = $.data(element, key);
            if (val !== undefined && element.val() !== val) {
                $.removeData(element, key);
                element.trigger("keyup-change");
            }
        });
    }
    $document.on("mousemove", function(e) {
        lastMousePosition.x = e.pageX;
        lastMousePosition.y = e.pageY;
    });
    function installFilteredMouseMove(element) {
        element.on("mousemove", function(e) {
            var lastpos = lastMousePosition;
            if (lastpos === undefined || lastpos.x !== e.pageX || lastpos.y !== e.pageY) $(e.target).trigger("mousemove-filtered", e);
        });
    }
    function debounce(quietMillis, fn, ctx) {
        ctx = ctx || undefined;
        var timeout;
        return function() {
            var args = arguments;
            window.clearTimeout(timeout);
            timeout = window.setTimeout(function() {
                fn.apply(ctx, args);
            }, quietMillis);
        };
    }
    function thunk(formula) {
        var evaluated = false, value;
        return function() {
            if (false === evaluated) {
                value = formula();
                evaluated = true;
            }
            return value;
        };
    }
    function installDebouncedScroll(threshold, element) {
        var notify = debounce(threshold, function(e) {
            element.trigger("scroll-debounced", e);
        });
        element.on("scroll", function(e) {
            if (indexOf(e.target, element.get()) >= 0) notify(e);
        });
    }
    function focus($el) {
        if ($el[0] === document.activeElement) return;
        window.setTimeout(function() {
            var el = $el[0], pos = $el.val().length, range;
            $el.focus();
            if ($el.is(":visible") && el === document.activeElement) if (el.setSelectionRange) el.setSelectionRange(pos, pos); else if (el.createTextRange) {
                range = el.createTextRange();
                range.collapse(false);
                range.select();
            }
        }, 0);
    }
    function getCursorInfo(el) {
        el = $(el)[0];
        var offset = 0;
        var length = 0;
        if ("selectionStart" in el) {
            offset = el.selectionStart;
            length = el.selectionEnd - offset;
        } else if ("selection" in document) {
            el.focus();
            var sel = document.selection.createRange();
            length = document.selection.createRange().text.length;
            sel.moveStart("character", -el.value.length);
            offset = sel.text.length - length;
        }
        return {
            "offset": offset,
            "length": length
        };
    }
    function killEvent(event) {
        event.preventDefault();
        event.stopPropagation();
    }
    function killEventImmediately(event) {
        event.preventDefault();
        event.stopImmediatePropagation();
    }
    function measureTextWidth(e) {
        if (!sizer) {
            var style = e[0].currentStyle || window.getComputedStyle(e[0], null);
            sizer = $(document.createElement("div")).css({
                "position": "absolute",
                "left": "-10000px",
                "top": "-10000px",
                "display": "none",
                "fontSize": style.fontSize,
                "fontFamily": style.fontFamily,
                "fontStyle": style.fontStyle,
                "fontWeight": style.fontWeight,
                "letterSpacing": style.letterSpacing,
                "textTransform": style.textTransform,
                "whiteSpace": "nowrap"
            });
            sizer.attr("class", "select2-sizer");
            $("body").append(sizer);
        }
        sizer.text(e.val());
        return sizer.width();
    }
    function syncCssClasses(dest, src, adapter) {
        var classes, replacements = [], adapted;
        classes = dest.attr("class");
        if (classes) {
            classes = "" + classes;
            $(classes.split(" ")).each2(function() {
                if (0 === this.indexOf("select2-")) replacements.push(this);
            });
        }
        classes = src.attr("class");
        if (classes) {
            classes = "" + classes;
            $(classes.split(" ")).each2(function() {
                if (0 !== this.indexOf("select2-")) {
                    adapted = adapter(this);
                    if (adapted) replacements.push(adapted);
                }
            });
        }
        dest.attr("class", replacements.join(" "));
    }
    function markMatch(text, term, markup, escapeMarkup) {
        var match = stripDiacritics(text.toUpperCase()).indexOf(stripDiacritics(term.toUpperCase())), tl = term.length;
        if (match < 0) {
            markup.push(escapeMarkup(text));
            return;
        }
        markup.push(escapeMarkup(text.substring(0, match)));
        markup.push("<span class='select2-match'>");
        markup.push(escapeMarkup(text.substring(match, match + tl)));
        markup.push("</span>");
        markup.push(escapeMarkup(text.substring(match + tl, text.length)));
    }
    function defaultEscapeMarkup(markup) {
        var replace_map = {
            "\\": "&#92;",
            "&": "&amp;",
            "<": "&lt;",
            ">": "&gt;",
            '"': "&quot;",
            "'": "&#39;",
            "/": "&#47;"
        };
        return String(markup).replace(/[&<>"'\/\\]/g, function(match) {
            return replace_map[match];
        });
    }
    function ajax(options) {
        var timeout, handler = null, quietMillis = options.quietMillis || 100, ajaxUrl = options.url, self = this;
        return function(query) {
            window.clearTimeout(timeout);
            timeout = window.setTimeout(function() {
                var data = options.data, url = ajaxUrl, transport = options.transport || $.fn.select2.ajaxDefaults.transport, deprecated = {
                    "type": options.type || "GET",
                    "cache": options.cache || false,
                    "jsonpCallback": options.jsonpCallback || undefined,
                    "dataType": options.dataType || "json"
                }, params = $.extend({}, $.fn.select2.ajaxDefaults.params, deprecated);
                data = data ? data.call(self, query.term, query.page, query.context) : null;
                url = "function" === typeof url ? url.call(self, query.term, query.page, query.context) : url;
                if (handler && "function" === typeof handler.abort) handler.abort();
                if (options.params) if ($.isFunction(options.params)) $.extend(params, options.params.call(self)); else $.extend(params, options.params);
                $.extend(params, {
                    "url": url,
                    "dataType": options.dataType,
                    "data": data,
                    "success": function(data) {
                        var results = options.results(data, query.page);
                        query.callback(results);
                    }
                });
                handler = transport.call(self, params);
            }, quietMillis);
        };
    }
    function local(options) {
        var data = options, dataText, tmp, text = function(item) {
            return "" + item.text;
        };
        if ($.isArray(data)) {
            tmp = data;
            data = {
                "results": tmp
            };
        }
        if (false === $.isFunction(data)) {
            tmp = data;
            data = function() {
                return tmp;
            };
        }
        var dataItem = data();
        if (dataItem.text) {
            text = dataItem.text;
            if (!$.isFunction(text)) {
                dataText = dataItem.text;
                text = function(item) {
                    return item[dataText];
                };
            }
        }
        return function(query) {
            var t = query.term, filtered = {
                "results": []
            }, process;
            if ("" === t) {
                query.callback(data());
                return;
            }
            process = function(datum, collection) {
                var group, attr;
                datum = datum[0];
                if (datum.children) {
                    group = {};
                    for (attr in datum) if (datum.hasOwnProperty(attr)) group[attr] = datum[attr];
                    group.children = [];
                    $(datum.children).each2(function(i, childDatum) {
                        process(childDatum, group.children);
                    });
                    if (group.children.length || query.matcher(t, text(group), datum)) collection.push(group);
                } else if (query.matcher(t, text(datum), datum)) collection.push(datum);
            };
            $(data().results).each2(function(i, datum) {
                process(datum, filtered.results);
            });
            query.callback(filtered);
        };
    }
    function tags(data) {
        var isFunc = $.isFunction(data);
        return function(query) {
            var t = query.term, filtered = {
                "results": []
            };
            $(isFunc ? data() : data).each(function() {
                var isObject = this.text !== undefined, text = isObject ? this.text : this;
                if ("" === t || query.matcher(t, text)) filtered.results.push(isObject ? this : {
                    "id": this,
                    "text": this
                });
            });
            query.callback(filtered);
        };
    }
    function checkFormatter(formatter, formatterName) {
        if ($.isFunction(formatter)) return true;
        if (!formatter) return false;
        throw new Error(formatterName + " must be a function or a falsy value");
    }
    function evaluate(val) {
        return $.isFunction(val) ? val() : val;
    }
    function countResults(results) {
        var count = 0;
        $.each(results, function(i, item) {
            if (item.children) count += countResults(item.children); else count++;
        });
        return count;
    }
    function defaultTokenizer(input, selection, selectCallback, opts) {
        var original = input, dupe = false, token, index, i, l, separator;
        if (!opts.createSearchChoice || !opts.tokenSeparators || opts.tokenSeparators.length < 1) return undefined;
        while (true) {
            index = -1;
            for (i = 0, l = opts.tokenSeparators.length; i < l; i++) {
                separator = opts.tokenSeparators[i];
                index = input.indexOf(separator);
                if (index >= 0) break;
            }
            if (index < 0) break;
            token = input.substring(0, index);
            input = input.substring(index + separator.length);
            if (token.length > 0) {
                token = opts.createSearchChoice.call(this, token, selection);
                if (token !== undefined && null !== token && opts.id(token) !== undefined && null !== opts.id(token)) {
                    dupe = false;
                    for (i = 0, l = selection.length; i < l; i++) if (equal(opts.id(token), opts.id(selection[i]))) {
                        dupe = true;
                        break;
                    }
                    if (!dupe) selectCallback(token);
                }
            }
        }
        if (original !== input) return input;
    }
    function clazz(SuperClass, methods) {
        var constructor = function() {};
        constructor.prototype = new SuperClass();
        constructor.prototype.constructor = constructor;
        constructor.prototype.parent = SuperClass.prototype;
        constructor.prototype = $.extend(constructor.prototype, methods);
        return constructor;
    }
    AbstractSelect2 = clazz(Object, {
        "bind": function(func) {
            var self = this;
            return function() {
                func.apply(self, arguments);
            };
        },
        "init": function(opts) {
            var results, search, resultsSelector = ".select2-results";
            this.opts = opts = this.prepareOpts(opts);
            this.id = opts.id;
            if (opts.element.data("select2") !== undefined && null !== opts.element.data("select2")) opts.element.data("select2").destroy();
            this.container = this.createContainer();
            this.containerId = "s2id_" + (opts.element.attr("id") || "autogen" + nextUid()).replace(/([;&,\-\.\+\*\~':"\!\^#$%@\[\]\(\)=>\|])/g, "\\$1");
            this.containerSelector = "#" + this.containerId;
            this.container.attr("id", this.containerId);
            this.body = thunk(function() {
                return opts.element.closest("body");
            });
            syncCssClasses(this.container, this.opts.element, this.opts.adaptContainerCssClass);
            this.container.attr("style", opts.element.attr("style"));
            this.container.css(evaluate(opts.containerCss));
            this.container.addClass(evaluate(opts.containerCssClass));
            this.elementTabIndex = this.opts.element.attr("tabindex");
            this.opts.element.data("select2", this).attr("tabindex", "-1").before(this.container).on("click.select2", killEvent);
            this.container.data("select2", this);
            this.dropdown = this.container.find(".select2-drop");
            syncCssClasses(this.dropdown, this.opts.element, this.opts.adaptDropdownCssClass);
            this.dropdown.addClass(evaluate(opts.dropdownCssClass));
            this.dropdown.data("select2", this);
            this.dropdown.on("click", killEvent);
            this.results = results = this.container.find(resultsSelector);
            this.search = search = this.container.find("input.select2-input");
            this.queryCount = 0;
            this.resultsPage = 0;
            this.context = null;
            this.initContainer();
            this.container.on("click", killEvent);
            installFilteredMouseMove(this.results);
            this.dropdown.on("mousemove-filtered touchstart touchmove touchend", resultsSelector, this.bind(this.highlightUnderEvent));
            installDebouncedScroll(80, this.results);
            this.dropdown.on("scroll-debounced", resultsSelector, this.bind(this.loadMoreIfNeeded));
            $(this.container).on("change", ".select2-input", function(e) {
                e.stopPropagation();
            });
            $(this.dropdown).on("change", ".select2-input", function(e) {
                e.stopPropagation();
            });
            if ($.fn.mousewheel) results.mousewheel(function(e, delta, deltaX, deltaY) {
                var top = results.scrollTop();
                if (deltaY > 0 && top - deltaY <= 0) {
                    results.scrollTop(0);
                    killEvent(e);
                } else if (deltaY < 0 && results.get(0).scrollHeight - results.scrollTop() + deltaY <= results.height()) {
                    results.scrollTop(results.get(0).scrollHeight - results.height());
                    killEvent(e);
                }
            });
            installKeyUpChangeEvent(search);
            search.on("keyup-change input paste", this.bind(this.updateResults));
            search.on("focus", function() {
                search.addClass("select2-focused");
            });
            search.on("blur", function() {
                search.removeClass("select2-focused");
            });
            this.dropdown.on("mouseup", resultsSelector, this.bind(function(e) {
                if ($(e.target).closest(".select2-result-selectable").length > 0) {
                    this.highlightUnderEvent(e);
                    this.selectHighlighted(e);
                }
            }));
            this.dropdown.on("click mouseup mousedown", function(e) {
                e.stopPropagation();
            });
            if ($.isFunction(this.opts.initSelection)) {
                this.initSelection();
                this.monitorSource();
            }
            if (null !== opts.maximumInputLength) this.search.attr("maxlength", opts.maximumInputLength);
            var disabled = opts.element.prop("disabled");
            if (disabled === undefined) disabled = false;
            this.enable(!disabled);
            var readonly = opts.element.prop("readonly");
            if (readonly === undefined) readonly = false;
            this.readonly(readonly);
            scrollBarDimensions = scrollBarDimensions || measureScrollbar();
            this.autofocus = opts.element.prop("autofocus");
            opts.element.prop("autofocus", false);
            if (this.autofocus) this.focus();
            this.nextSearchTerm = undefined;
        },
        "destroy": function() {
            var element = this.opts.element, select2 = element.data("select2");
            this.close();
            if (this.propertyObserver) {
                delete this.propertyObserver;
                this.propertyObserver = null;
            }
            if (select2 !== undefined) {
                select2.container.remove();
                select2.dropdown.remove();
                element.removeClass("select2-offscreen").removeData("select2").off(".select2").prop("autofocus", this.autofocus || false);
                if (this.elementTabIndex) element.attr({
                    "tabindex": this.elementTabIndex
                }); else element.removeAttr("tabindex");
                element.show();
            }
        },
        "optionToData": function(element) {
            if (element.is("option")) return {
                "id": element.prop("value"),
                "text": element.text(),
                "element": element.get(),
                "css": element.attr("class"),
                "disabled": element.prop("disabled"),
                "locked": equal(element.attr("locked"), "locked") || equal(element.data("locked"), true)
            }; else if (element.is("optgroup")) return {
                "text": element.attr("label"),
                "children": [],
                "element": element.get(),
                "css": element.attr("class")
            };
        },
        "prepareOpts": function(opts) {
            var element, select, idKey, ajaxUrl, self = this;
            element = opts.element;
            if ("select" === element.get(0).tagName.toLowerCase()) this.select = select = opts.element;
            if (select) $.each([ "id", "multiple", "ajax", "query", "createSearchChoice", "initSelection", "data", "tags" ], function() {
                if (this in opts) throw new Error("Option '" + this + "' is not allowed for Select2 when attached to a <select> element.");
            });
            opts = $.extend({}, {
                "populateResults": function(container, results, query) {
                    var populate, id = this.opts.id;
                    populate = function(results, container, depth) {
                        var i, l, result, selectable, disabled, compound, node, label, innerContainer, formatted;
                        results = opts.sortResults(results, container, query);
                        for (i = 0, l = results.length; i < l; i += 1) {
                            result = results[i];
                            disabled = true === result.disabled;
                            selectable = !disabled && id(result) !== undefined;
                            compound = result.children && result.children.length > 0;
                            node = $("<li></li>");
                            node.addClass("select2-results-dept-" + depth);
                            node.addClass("select2-result");
                            node.addClass(selectable ? "select2-result-selectable" : "select2-result-unselectable");
                            if (disabled) node.addClass("select2-disabled");
                            if (compound) node.addClass("select2-result-with-children");
                            node.addClass(self.opts.formatResultCssClass(result));
                            node.attr("role", "presentation");
                            label = $(document.createElement("div"));
                            label.addClass("select2-result-label");
                            label.attr("id", "select2-result-label-" + nextUid());
                            label.attr("role", "option");
                            formatted = opts.formatResult(result, label, query, self.opts.escapeMarkup);
                            if (formatted !== undefined) label.html(formatted);
                            node.append(label);
                            if (compound) {
                                innerContainer = $("<ul></ul>");
                                innerContainer.addClass("select2-result-sub");
                                populate(result.children, innerContainer, depth + 1);
                                node.append(innerContainer);
                            }
                            node.data("select2-data", result);
                            container.append(node);
                        }
                    };
                    populate(results, container, 0);
                }
            }, $.fn.select2.defaults, opts);
            if ("function" !== typeof opts.id) {
                idKey = opts.id;
                opts.id = function(e) {
                    return e[idKey];
                };
            }
            if ($.isArray(opts.element.data("select2Tags"))) {
                if ("tags" in opts) throw "tags specified as both an attribute 'data-select2-tags' and in options of Select2 " + opts.element.attr("id");
                opts.tags = opts.element.data("select2Tags");
            }
            if (select) {
                opts.query = this.bind(function(query) {
                    var data = {
                        "results": [],
                        "more": false
                    }, term = query.term, children, placeholderOption, process;
                    process = function(element, collection) {
                        var group;
                        if (element.is("option")) {
                            if (query.matcher(term, element.text(), element)) collection.push(self.optionToData(element));
                        } else if (element.is("optgroup")) {
                            group = self.optionToData(element);
                            element.children().each2(function(i, elm) {
                                process(elm, group.children);
                            });
                            if (group.children.length > 0) collection.push(group);
                        }
                    };
                    children = element.children();
                    if (this.getPlaceholder() !== undefined && children.length > 0) {
                        placeholderOption = this.getPlaceholderOption();
                        if (placeholderOption) children = children.not(placeholderOption);
                    }
                    children.each2(function(i, elm) {
                        process(elm, data.results);
                    });
                    query.callback(data);
                });
                opts.id = function(e) {
                    return e.id;
                };
            } else if (!("query" in opts)) if ("ajax" in opts) {
                ajaxUrl = opts.element.data("ajax-url");
                if (ajaxUrl && ajaxUrl.length > 0) opts.ajax.url = ajaxUrl;
                opts.query = ajax.call(opts.element, opts.ajax);
            } else if ("data" in opts) opts.query = local(opts.data); else if ("tags" in opts) {
                opts.query = tags(opts.tags);
                if (opts.createSearchChoice === undefined) opts.createSearchChoice = function(term) {
                    return {
                        "id": $.trim(term),
                        "text": $.trim(term)
                    };
                };
                if (opts.initSelection === undefined) opts.initSelection = function(element, callback) {
                    var data = [];
                    $(splitVal(element.val(), opts.separator)).each(function() {
                        var obj = {
                            "id": this,
                            "text": this
                        }, tags = opts.tags;
                        if ($.isFunction(tags)) tags = tags();
                        $(tags).each(function() {
                            if (equal(this.id, obj.id)) {
                                obj = this;
                                return false;
                            }
                        });
                        data.push(obj);
                    });
                    callback(data);
                };
            }
            if ("function" !== typeof opts.query) throw "query function not defined for Select2 " + opts.element.attr("id");
            return opts;
        },
        "monitorSource": function() {
            var el = this.opts.element, sync, observer;
            el.on("change.select2", this.bind(function(e) {
                if (true !== this.opts.element.data("select2-change-triggered")) this.initSelection();
            }));
            sync = this.bind(function() {
                var disabled = el.prop("disabled");
                if (disabled === undefined) disabled = false;
                this.enable(!disabled);
                var readonly = el.prop("readonly");
                if (readonly === undefined) readonly = false;
                this.readonly(readonly);
                syncCssClasses(this.container, this.opts.element, this.opts.adaptContainerCssClass);
                this.container.addClass(evaluate(this.opts.containerCssClass));
                syncCssClasses(this.dropdown, this.opts.element, this.opts.adaptDropdownCssClass);
                this.dropdown.addClass(evaluate(this.opts.dropdownCssClass));
            });
            el.on("propertychange.select2", sync);
            if (this.mutationCallback === undefined) this.mutationCallback = function(mutations) {
                mutations.forEach(sync);
            };
            observer = window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver;
            if (observer !== undefined) {
                if (this.propertyObserver) {
                    delete this.propertyObserver;
                    this.propertyObserver = null;
                }
                this.propertyObserver = new observer(this.mutationCallback);
                this.propertyObserver.observe(el.get(0), {
                    "attributes": true,
                    "subtree": false
                });
            }
        },
        "triggerSelect": function(data) {
            var evt = $.Event("select2-selecting", {
                "val": this.id(data),
                "object": data
            });
            this.opts.element.trigger(evt);
            return !evt.isDefaultPrevented();
        },
        "triggerChange": function(details) {
            details = details || {};
            details = $.extend({}, details, {
                "type": "change",
                "val": this.val()
            });
            this.opts.element.data("select2-change-triggered", true);
            this.opts.element.trigger(details);
            this.opts.element.data("select2-change-triggered", false);
            this.opts.element.click();
            if (this.opts.blurOnChange) this.opts.element.blur();
        },
        "isInterfaceEnabled": function() {
            return true === this.enabledInterface;
        },
        "enableInterface": function() {
            var enabled = this._enabled && !this._readonly, disabled = !enabled;
            if (enabled === this.enabledInterface) return false;
            this.container.toggleClass("select2-container-disabled", disabled);
            this.close();
            this.enabledInterface = enabled;
            return true;
        },
        "enable": function(enabled) {
            if (enabled === undefined) enabled = true;
            if (this._enabled === enabled) return;
            this._enabled = enabled;
            this.opts.element.prop("disabled", !enabled);
            this.enableInterface();
        },
        "disable": function() {
            this.enable(false);
        },
        "readonly": function(enabled) {
            if (enabled === undefined) enabled = false;
            if (this._readonly === enabled) return false;
            this._readonly = enabled;
            this.opts.element.prop("readonly", enabled);
            this.enableInterface();
            return true;
        },
        "opened": function() {
            return this.container.hasClass("select2-dropdown-open");
        },
        "positionDropdown": function() {
            var $dropdown = this.dropdown, offset = this.container.offset(), height = this.container.outerHeight(false), width = this.container.outerWidth(false), dropHeight = $dropdown.outerHeight(false), $window = $(window), windowWidth = $window.width(), windowHeight = $window.height(), viewPortRight = $window.scrollLeft() + windowWidth, viewportBottom = $window.scrollTop() + windowHeight, dropTop = offset.top + height, dropLeft = offset.left, enoughRoomBelow = dropTop + dropHeight <= viewportBottom, enoughRoomAbove = offset.top - dropHeight >= this.body().scrollTop(), dropWidth = $dropdown.outerWidth(false), enoughRoomOnRight = dropLeft + dropWidth <= viewPortRight, aboveNow = $dropdown.hasClass("select2-drop-above"), bodyOffset, above, changeDirection, css, resultsListNode;
            if (aboveNow) {
                above = true;
                if (!enoughRoomAbove && enoughRoomBelow) {
                    changeDirection = true;
                    above = false;
                }
            } else {
                above = false;
                if (!enoughRoomBelow && enoughRoomAbove) {
                    changeDirection = true;
                    above = true;
                }
            }
            if (changeDirection) {
                $dropdown.hide();
                offset = this.container.offset();
                height = this.container.outerHeight(false);
                width = this.container.outerWidth(false);
                dropHeight = $dropdown.outerHeight(false);
                viewPortRight = $window.scrollLeft() + windowWidth;
                viewportBottom = $window.scrollTop() + windowHeight;
                dropTop = offset.top + height;
                dropLeft = offset.left;
                dropWidth = $dropdown.outerWidth(false);
                enoughRoomOnRight = dropLeft + dropWidth <= viewPortRight;
                $dropdown.show();
            }
            if (this.opts.dropdownAutoWidth) {
                resultsListNode = $(".select2-results", $dropdown)[0];
                $dropdown.addClass("select2-drop-auto-width");
                $dropdown.css("width", "");
                dropWidth = $dropdown.outerWidth(false) + (resultsListNode.scrollHeight === resultsListNode.clientHeight ? 0 : scrollBarDimensions.width);
                dropWidth > width ? width = dropWidth : dropWidth = width;
                enoughRoomOnRight = dropLeft + dropWidth <= viewPortRight;
            } else this.container.removeClass("select2-drop-auto-width");
            if ("static" !== this.body().css("position")) {
                bodyOffset = this.body().offset();
                dropTop -= bodyOffset.top;
                dropLeft -= bodyOffset.left;
            }
            if (!enoughRoomOnRight) dropLeft -= dropLeft + dropWidth - viewPortRight;
            css = {
                "left": dropLeft,
                "width": width
            };
            if (above) {
                css.top = offset.top - dropHeight;
                css.bottom = "auto";
                this.container.addClass("select2-drop-above");
                $dropdown.addClass("select2-drop-above");
            } else {
                css.top = dropTop;
                css.bottom = "auto";
                this.container.removeClass("select2-drop-above");
                $dropdown.removeClass("select2-drop-above");
            }
            css = $.extend(css, evaluate(this.opts.dropdownCss));
            $dropdown.css(css);
        },
        "shouldOpen": function() {
            var event;
            if (this.opened()) return false;
            if (false === this._enabled || true === this._readonly) return false;
            event = $.Event("select2-opening");
            this.opts.element.trigger(event);
            return !event.isDefaultPrevented();
        },
        "clearDropdownAlignmentPreference": function() {
            this.container.removeClass("select2-drop-above");
            this.dropdown.removeClass("select2-drop-above");
        },
        "open": function() {
            if (!this.shouldOpen()) return false;
            this.opening();
            return true;
        },
        "opening": function() {
            var cid = this.containerId, scroll = "scroll." + cid, resize = "resize." + cid, orient = "orientationchange." + cid, mask;
            this.container.addClass("select2-dropdown-open").addClass("select2-container-active");
            this.clearDropdownAlignmentPreference();
            if (this.dropdown[0] !== this.body().children().last()[0]) this.dropdown.detach().appendTo(this.body());
            mask = $("#select2-drop-mask");
            if (0 == mask.length) {
                mask = $(document.createElement("div"));
                mask.attr("id", "select2-drop-mask").attr("class", "select2-drop-mask");
                mask.hide();
                mask.appendTo(this.body());
                mask.on("mousedown touchstart click", function(e) {
                    var dropdown = $("#select2-drop"), self;
                    if (dropdown.length > 0) {
                        self = dropdown.data("select2");
                        if (self.opts.selectOnBlur) self.selectHighlighted({
                            "noFocus": true
                        });
                        self.close({
                            "focus": true
                        });
                        e.preventDefault();
                        e.stopPropagation();
                    }
                });
            }
            if (this.dropdown.prev()[0] !== mask[0]) this.dropdown.before(mask);
            $("#select2-drop").removeAttr("id");
            this.dropdown.attr("id", "select2-drop");
            mask.show();
            this.positionDropdown();
            this.dropdown.show();
            this.positionDropdown();
            this.dropdown.addClass("select2-drop-active");
            var that = this;
            this.container.parents().add(window).each(function() {
                $(this).on(resize + " " + scroll + " " + orient, function(e) {
                    that.positionDropdown();
                });
            });
        },
        "close": function() {
            if (!this.opened()) return;
            var cid = this.containerId, scroll = "scroll." + cid, resize = "resize." + cid, orient = "orientationchange." + cid;
            this.container.parents().add(window).each(function() {
                $(this).off(scroll).off(resize).off(orient);
            });
            this.clearDropdownAlignmentPreference();
            $("#select2-drop-mask").hide();
            this.dropdown.removeAttr("id");
            this.dropdown.hide();
            this.container.removeClass("select2-dropdown-open").removeClass("select2-container-active");
            this.results.empty();
            this.clearSearch();
            this.search.removeClass("select2-active");
            this.opts.element.trigger($.Event("select2-close"));
        },
        "externalSearch": function(term) {
            this.open();
            this.search.val(term);
            this.updateResults(false);
        },
        "clearSearch": function() {},
        "getMaximumSelectionSize": function() {
            return evaluate(this.opts.maximumSelectionSize);
        },
        "ensureHighlightVisible": function() {
            var results = this.results, children, index, child, hb, rb, y, more;
            index = this.highlight();
            if (index < 0) return;
            if (0 == index) {
                results.scrollTop(0);
                return;
            }
            children = this.findHighlightableChoices().find(".select2-result-label");
            child = $(children[index]);
            hb = child.offset().top + child.outerHeight(true);
            if (index === children.length - 1) {
                more = results.find("li.select2-more-results");
                if (more.length > 0) hb = more.offset().top + more.outerHeight(true);
            }
            rb = results.offset().top + results.outerHeight(true);
            if (hb > rb) results.scrollTop(results.scrollTop() + (hb - rb));
            y = child.offset().top - results.offset().top;
            if (y < 0 && "none" != child.css("display")) results.scrollTop(results.scrollTop() + y);
        },
        "findHighlightableChoices": function() {
            return this.results.find(".select2-result-selectable:not(.select2-disabled, .select2-selected)");
        },
        "moveHighlight": function(delta) {
            var choices = this.findHighlightableChoices(), index = this.highlight();
            while (index > -1 && index < choices.length) {
                index += delta;
                var choice = $(choices[index]);
                if (choice.hasClass("select2-result-selectable") && !choice.hasClass("select2-disabled") && !choice.hasClass("select2-selected")) {
                    this.highlight(index);
                    break;
                }
            }
        },
        "highlight": function(index) {
            var choices = this.findHighlightableChoices(), choice, data;
            if (0 === arguments.length) return indexOf(choices.filter(".select2-highlighted")[0], choices.get());
            if (index >= choices.length) index = choices.length - 1;
            if (index < 0) index = 0;
            this.removeHighlight();
            choice = $(choices[index]);
            choice.addClass("select2-highlighted");
            this.search.attr("aria-activedescendant", choice.find(".select2-result-label").attr("id"));
            this.ensureHighlightVisible();
            data = choice.data("select2-data");
            if (data) this.opts.element.trigger({
                "type": "select2-highlight",
                "val": this.id(data),
                "choice": data
            });
        },
        "removeHighlight": function() {
            this.results.find(".select2-highlighted").removeClass("select2-highlighted");
        },
        "countSelectableResults": function() {
            return this.findHighlightableChoices().length;
        },
        "highlightUnderEvent": function(event) {
            var el = $(event.target).closest(".select2-result-selectable");
            if (el.length > 0 && !el.is(".select2-highlighted")) {
                var choices = this.findHighlightableChoices();
                this.highlight(choices.index(el));
            } else if (0 == el.length) this.removeHighlight();
        },
        "loadMoreIfNeeded": function() {
            var results = this.results, more = results.find("li.select2-more-results"), below, page = this.resultsPage + 1, self = this, term = this.search.val(), context = this.context;
            if (0 === more.length) return;
            below = more.offset().top - results.offset().top - results.height();
            if (below <= this.opts.loadMorePadding) {
                more.addClass("select2-active");
                this.opts.query({
                    "element": this.opts.element,
                    "term": term,
                    "page": page,
                    "context": context,
                    "matcher": this.opts.matcher,
                    "callback": this.bind(function(data) {
                        if (!self.opened()) return;
                        self.opts.populateResults.call(this, results, data.results, {
                            "term": term,
                            "page": page,
                            "context": context
                        });
                        self.postprocessResults(data, false, false);
                        if (true === data.more) {
                            more.detach().appendTo(results).text(self.opts.formatLoadMore(page + 1));
                            window.setTimeout(function() {
                                self.loadMoreIfNeeded();
                            }, 10);
                        } else more.remove();
                        self.positionDropdown();
                        self.resultsPage = page;
                        self.context = data.context;
                        this.opts.element.trigger({
                            "type": "select2-loaded",
                            "items": data
                        });
                    })
                });
            }
        },
        "tokenize": function() {},
        "updateResults": function(initial) {
            var search = this.search, results = this.results, opts = this.opts, data, self = this, input, term = search.val(), lastTerm = $.data(this.container, "select2-last-term"), queryNumber;
            if (true !== initial && lastTerm && equal(term, lastTerm)) return;
            $.data(this.container, "select2-last-term", term);
            if (true !== initial && (false === this.showSearchInput || !this.opened())) return;
            function postRender() {
                search.removeClass("select2-active");
                self.positionDropdown();
            }
            function render(html) {
                results.html(html);
                postRender();
            }
            queryNumber = ++this.queryCount;
            var maxSelSize = this.getMaximumSelectionSize();
            if (maxSelSize >= 1) {
                data = this.data();
                if ($.isArray(data) && data.length >= maxSelSize && checkFormatter(opts.formatSelectionTooBig, "formatSelectionTooBig")) {
                    render("<li class='select2-selection-limit'>" + opts.formatSelectionTooBig(maxSelSize) + "</li>");
                    return;
                }
            }
            if (search.val().length < opts.minimumInputLength) {
                if (checkFormatter(opts.formatInputTooShort, "formatInputTooShort")) render("<li class='select2-no-results'>" + opts.formatInputTooShort(search.val(), opts.minimumInputLength) + "</li>"); else render("");
                if (initial && this.showSearch) this.showSearch(true);
                return;
            }
            if (opts.maximumInputLength && search.val().length > opts.maximumInputLength) {
                if (checkFormatter(opts.formatInputTooLong, "formatInputTooLong")) render("<li class='select2-no-results'>" + opts.formatInputTooLong(search.val(), opts.maximumInputLength) + "</li>"); else render("");
                return;
            }
            if (opts.formatSearching && 0 === this.findHighlightableChoices().length) render("<li class='select2-searching'>" + opts.formatSearching() + "</li>");
            search.addClass("select2-active");
            this.removeHighlight();
            input = this.tokenize();
            if (input != undefined && null != input) search.val(input);
            this.resultsPage = 1;
            opts.query({
                "element": opts.element,
                "term": search.val(),
                "page": this.resultsPage,
                "context": null,
                "matcher": opts.matcher,
                "callback": this.bind(function(data) {
                    var def;
                    if (queryNumber != this.queryCount) return;
                    if (!this.opened()) {
                        this.search.removeClass("select2-active");
                        return;
                    }
                    this.context = data.context === undefined ? null : data.context;
                    if (this.opts.createSearchChoice && "" !== search.val()) {
                        def = this.opts.createSearchChoice.call(self, search.val(), data.results);
                        if (def !== undefined && null !== def && self.id(def) !== undefined && null !== self.id(def)) if (0 === $(data.results).filter(function() {
                            return equal(self.id(this), self.id(def));
                        }).length) data.results.unshift(def);
                    }
                    if (0 === data.results.length && checkFormatter(opts.formatNoMatches, "formatNoMatches")) {
                        render("<li class='select2-no-results'>" + opts.formatNoMatches(search.val()) + "</li>");
                        return;
                    }
                    results.empty();
                    self.opts.populateResults.call(this, results, data.results, {
                        "term": search.val(),
                        "page": this.resultsPage,
                        "context": null
                    });
                    if (true === data.more && checkFormatter(opts.formatLoadMore, "formatLoadMore")) {
                        results.append("<li class='select2-more-results'>" + self.opts.escapeMarkup(opts.formatLoadMore(this.resultsPage)) + "</li>");
                        window.setTimeout(function() {
                            self.loadMoreIfNeeded();
                        }, 10);
                    }
                    this.postprocessResults(data, initial);
                    postRender();
                    this.opts.element.trigger({
                        "type": "select2-loaded",
                        "items": data
                    });
                })
            });
        },
        "cancel": function() {
            this.close();
        },
        "blur": function() {
            if (this.opts.selectOnBlur) this.selectHighlighted({
                "noFocus": true
            });
            this.close();
            this.container.removeClass("select2-container-active");
            if (this.search[0] === document.activeElement) this.search.blur();
            this.clearSearch();
            this.selection.find(".select2-search-choice-focus").removeClass("select2-search-choice-focus");
        },
        "focusSearch": function() {
            focus(this.search);
        },
        "selectHighlighted": function(options) {
            var index = this.highlight(), highlighted = this.results.find(".select2-highlighted"), data = highlighted.closest(".select2-result").data("select2-data");
            if (data) {
                this.highlight(index);
                this.onSelect(data, options);
                return true;
            } else if (options && options.noFocus) this.close();
            return false;
        },
        "getPlaceholder": function() {
            var placeholderOption;
            return this.opts.element.attr("placeholder") || this.opts.element.attr("data-placeholder") || this.opts.element.data("placeholder") || this.opts.placeholder || ((placeholderOption = this.getPlaceholderOption()) !== undefined ? placeholderOption.text() : undefined);
        },
        "getPlaceholderOption": function() {
            if (this.select) {
                var firstOption = this.select.children("option").first();
                if (this.opts.placeholderOption !== undefined) return "first" === this.opts.placeholderOption && firstOption || "function" === typeof this.opts.placeholderOption && this.opts.placeholderOption(this.select); else if ("" === firstOption.text() && "" === firstOption.val()) return firstOption;
            }
        },
        "initContainerWidth": function() {
            function resolveContainerWidth() {
                var style, attrs, matches, i, l, attr;
                if ("off" === this.opts.width) return null; else if ("element" === this.opts.width) return 0 === this.opts.element.outerWidth(false) ? "auto" : this.opts.element.outerWidth(false) + "px"; else if ("copy" === this.opts.width || "resolve" === this.opts.width) {
                    style = this.opts.element.attr("style");
                    if (style !== undefined) {
                        attrs = style.split(";");
                        for (i = 0, l = attrs.length; i < l; i += 1) {
                            attr = attrs[i].replace(/\s/g, "");
                            matches = attr.match(/^width:(([-+]?([0-9]*\.)?[0-9]+)(px|em|ex|%|in|cm|mm|pt|pc))/i);
                            if (null !== matches && matches.length >= 1) return matches[1];
                        }
                    }
                    if ("resolve" === this.opts.width) {
                        style = this.opts.element.css("width");
                        if (style.indexOf("%") > 0) return style;
                        return 0 === this.opts.element.outerWidth(false) ? "auto" : this.opts.element.outerWidth(false) + "px";
                    }
                    return null;
                } else if ($.isFunction(this.opts.width)) return this.opts.width(); else return this.opts.width;
            }
            var width = resolveContainerWidth.call(this);
            if (null !== width) this.container.css("width", width);
        }
    });
    SingleSelect2 = clazz(AbstractSelect2, {
        "createContainer": function() {
            var container = $(document.createElement("div")).attr({
                "class": "select2-container"
            }).html([ "<a href='javascript:void(0)' onclick='return false;' class='select2-choice' tabindex='-1'>", "   <span class='select2-chosen'>&nbsp;</span><abbr class='select2-search-choice-close'></abbr>", "   <span class='select2-arrow' role='presentation'><b role='presentation'></b></span>", "</a>", "<input class='select2-focusser select2-offscreen' type='text' aria-haspopup='true' role='button' />", "<div class='select2-drop select2-display-none'>", "   <div class='select2-search'>", "       <input type='text' autocomplete='off' autocorrect='off' autocapitalize='off' spellcheck='false' class='select2-input' role='combobox' aria-expanded='true'", "       aria-autocomplete='list' title='Search field' />", "   </div>", "   <ul class='select2-results' role='listbox'>", "   </ul>", "</div>" ].join(""));
            return container;
        },
        "enableInterface": function() {
            if (this.parent.enableInterface.apply(this, arguments)) this.focusser.prop("disabled", !this.isInterfaceEnabled());
        },
        "opening": function() {
            var el, range, len;
            if (this.opts.minimumResultsForSearch >= 0) this.showSearch(true);
            this.parent.opening.apply(this, arguments);
            if (false !== this.showSearchInput) this.search.val(this.focusser.val());
            this.search.focus();
            el = this.search.get(0);
            if (el.createTextRange) {
                range = el.createTextRange();
                range.collapse(false);
                range.select();
            } else if (el.setSelectionRange) {
                len = this.search.val().length;
                el.setSelectionRange(len, len);
            }
            if ("" === this.search.val()) if (this.nextSearchTerm != undefined) {
                this.search.val(this.nextSearchTerm);
                this.search.select();
            }
            this.focusser.prop("disabled", true).val("");
            this.updateResults(true);
            this.opts.element.trigger($.Event("select2-open"));
        },
        "close": function(params) {
            if (!this.opened()) return;
            this.parent.close.apply(this, arguments);
            params = params || {
                "focus": true
            };
            this.focusser.prop("disabled", false);
            if (params.focus) this.focusser.focus();
        },
        "focus": function() {
            if (this.opened()) this.close(); else {
                this.focusser.prop("disabled", false);
                this.focusser.focus();
            }
        },
        "isFocused": function() {
            return this.container.hasClass("select2-container-active");
        },
        "cancel": function() {
            this.parent.cancel.apply(this, arguments);
            this.focusser.prop("disabled", false);
            this.focusser.focus();
        },
        "destroy": function() {
            $("label[for='" + this.focusser.attr("id") + "']").attr("for", this.opts.element.attr("id"));
            this.parent.destroy.apply(this, arguments);
        },
        "initContainer": function() {
            var selection, container = this.container, dropdown = this.dropdown, idSuffix = nextUid(), elementLabel;
            if (this.opts.minimumResultsForSearch < 0) this.showSearch(false); else this.showSearch(true);
            this.selection = selection = container.find(".select2-choice");
            this.focusser = container.find(".select2-focusser");
            selection.find(".select2-chosen").attr("id", "select2-chosen-" + idSuffix);
            this.focusser.attr("aria-labelledby", "select2-chosen-" + idSuffix);
            this.results.attr("id", "select2-results-" + idSuffix);
            this.search.attr("aria-owns", "select2-results-" + idSuffix);
            this.focusser.attr("id", "s2id_autogen" + idSuffix);
            elementLabel = $("label[for='" + this.opts.element.attr("id") + "']").attr("for", this.focusser.attr("id"));
            var originalTitle = this.opts.element.attr("title");
            this.opts.element.attr("title", originalTitle || elementLabel.text());
            this.focusser.attr("tabindex", this.elementTabIndex);
            this.search.on("keydown", this.bind(function(e) {
                if (!this.isInterfaceEnabled()) return;
                if (e.which === KEY.PAGE_UP || e.which === KEY.PAGE_DOWN) {
                    killEvent(e);
                    return;
                }
                switch (e.which) {
                  case KEY.UP:
                  case KEY.DOWN:
                    this.moveHighlight(e.which === KEY.UP ? -1 : 1);
                    killEvent(e);
                    return;

                  case KEY.ENTER:
                    this.selectHighlighted();
                    killEvent(e);
                    return;

                  case KEY.TAB:
                    this.selectHighlighted({
                        "noFocus": true
                    });
                    return;

                  case KEY.ESC:
                    this.cancel(e);
                    killEvent(e);
                    return;
                }
            }));
            this.search.on("blur", this.bind(function(e) {
                if (document.activeElement === this.body().get(0)) window.setTimeout(this.bind(function() {
                    if (this.opened()) this.search.focus();
                }), 0);
            }));
            this.focusser.on("keydown", this.bind(function(e) {
                if (!this.isInterfaceEnabled()) return;
                if (e.which === KEY.TAB || KEY.isControl(e) || KEY.isFunctionKey(e) || e.which === KEY.ESC) return;
                if (false === this.opts.openOnEnter && e.which === KEY.ENTER) {
                    killEvent(e);
                    return;
                }
                if (e.which == KEY.DOWN || e.which == KEY.UP || e.which == KEY.ENTER && this.opts.openOnEnter) {
                    if (e.altKey || e.ctrlKey || e.shiftKey || e.metaKey) return;
                    this.open();
                    killEvent(e);
                    return;
                }
                if (e.which == KEY.DELETE || e.which == KEY.BACKSPACE) {
                    if (this.opts.allowClear) this.clear();
                    killEvent(e);
                    return;
                }
            }));
            installKeyUpChangeEvent(this.focusser);
            this.focusser.on("keyup-change input", this.bind(function(e) {
                if (this.opts.minimumResultsForSearch >= 0) {
                    e.stopPropagation();
                    if (this.opened()) return;
                    this.open();
                }
            }));
            selection.on("mousedown touchstart", "abbr", this.bind(function(e) {
                if (!this.isInterfaceEnabled()) return;
                this.clear();
                killEventImmediately(e);
                this.close();
                this.selection.focus();
            }));
            selection.on("mousedown touchstart", this.bind(function(e) {
                if (!this.container.hasClass("select2-container-active")) this.opts.element.trigger($.Event("select2-focus"));
                if (this.opened()) this.close(); else if (this.isInterfaceEnabled()) this.open();
                killEvent(e);
            }));
            dropdown.on("mousedown touchstart", this.bind(function() {
                this.search.focus();
            }));
            selection.on("focus", this.bind(function(e) {
                killEvent(e);
            }));
            this.focusser.on("focus", this.bind(function() {
                if (!this.container.hasClass("select2-container-active")) this.opts.element.trigger($.Event("select2-focus"));
                this.container.addClass("select2-container-active");
            })).on("blur", this.bind(function() {
                if (!this.opened()) {
                    this.container.removeClass("select2-container-active");
                    this.opts.element.trigger($.Event("select2-blur"));
                }
            }));
            this.search.on("focus", this.bind(function() {
                if (!this.container.hasClass("select2-container-active")) this.opts.element.trigger($.Event("select2-focus"));
                this.container.addClass("select2-container-active");
            }));
            this.initContainerWidth();
            this.opts.element.addClass("select2-offscreen");
            this.setPlaceholder();
        },
        "clear": function(triggerChange) {
            var data = this.selection.data("select2-data");
            if (data) {
                var evt = $.Event("select2-clearing");
                this.opts.element.trigger(evt);
                if (evt.isDefaultPrevented()) return;
                var placeholderOption = this.getPlaceholderOption();
                this.opts.element.val(placeholderOption ? placeholderOption.val() : "");
                this.selection.find(".select2-chosen").empty();
                this.selection.removeData("select2-data");
                this.setPlaceholder();
                if (false !== triggerChange) {
                    this.opts.element.trigger({
                        "type": "select2-removed",
                        "val": this.id(data),
                        "choice": data
                    });
                    this.triggerChange({
                        "removed": data
                    });
                }
            }
        },
        "initSelection": function() {
            var selected;
            if (this.isPlaceholderOptionSelected()) {
                this.updateSelection(null);
                this.close();
                this.setPlaceholder();
            } else {
                var self = this;
                this.opts.initSelection.call(null, this.opts.element, function(selected) {
                    if (selected !== undefined && null !== selected) {
                        self.updateSelection(selected);
                        self.close();
                        self.setPlaceholder();
                    }
                });
            }
        },
        "isPlaceholderOptionSelected": function() {
            var placeholderOption;
            if (!this.getPlaceholder()) return false;
            return (placeholderOption = this.getPlaceholderOption()) !== undefined && placeholderOption.prop("selected") || "" === this.opts.element.val() || this.opts.element.val() === undefined || null === this.opts.element.val();
        },
        "prepareOpts": function() {
            var opts = this.parent.prepareOpts.apply(this, arguments), self = this;
            if ("select" === opts.element.get(0).tagName.toLowerCase()) opts.initSelection = function(element, callback) {
                var selected = element.find("option").filter(function() {
                    return this.selected;
                });
                callback(self.optionToData(selected));
            }; else if ("data" in opts) opts.initSelection = opts.initSelection || function(element, callback) {
                var id = element.val();
                var match = null;
                opts.query({
                    "matcher": function(term, text, el) {
                        var is_match = equal(id, opts.id(el));
                        if (is_match) match = el;
                        return is_match;
                    },
                    "callback": !$.isFunction(callback) ? $.noop : function() {
                        callback(match);
                    }
                });
            };
            return opts;
        },
        "getPlaceholder": function() {
            if (this.select) if (this.getPlaceholderOption() === undefined) return undefined;
            return this.parent.getPlaceholder.apply(this, arguments);
        },
        "setPlaceholder": function() {
            var placeholder = this.getPlaceholder();
            if (this.isPlaceholderOptionSelected() && placeholder !== undefined) {
                if (this.select && this.getPlaceholderOption() === undefined) return;
                this.selection.find(".select2-chosen").html(this.opts.escapeMarkup(placeholder));
                this.selection.addClass("select2-default");
                this.container.removeClass("select2-allowclear");
            }
        },
        "postprocessResults": function(data, initial, noHighlightUpdate) {
            var selected = 0, self = this, showSearchInput = true;
            this.findHighlightableChoices().each2(function(i, elm) {
                if (equal(self.id(elm.data("select2-data")), self.opts.element.val())) {
                    selected = i;
                    return false;
                }
            });
            if (false !== noHighlightUpdate) if (true === initial && selected >= 0) this.highlight(selected); else this.highlight(0);
            if (true === initial) {
                var min = this.opts.minimumResultsForSearch;
                if (min >= 0) this.showSearch(countResults(data.results) >= min);
            }
        },
        "showSearch": function(showSearchInput) {
            if (this.showSearchInput === showSearchInput) return;
            this.showSearchInput = showSearchInput;
            this.dropdown.find(".select2-search").toggleClass("select2-search-hidden", !showSearchInput);
            this.dropdown.find(".select2-search").toggleClass("select2-offscreen", !showSearchInput);
            $(this.dropdown, this.container).toggleClass("select2-with-searchbox", showSearchInput);
        },
        "onSelect": function(data, options) {
            if (!this.triggerSelect(data)) return;
            var old = this.opts.element.val(), oldData = this.data();
            this.opts.element.val(this.id(data));
            this.updateSelection(data);
            this.opts.element.trigger({
                "type": "select2-selected",
                "val": this.id(data),
                "choice": data
            });
            this.nextSearchTerm = this.opts.nextSearchTerm(data, this.search.val());
            this.close();
            if (!options || !options.noFocus) this.focusser.focus();
            if (!equal(old, this.id(data))) this.triggerChange({
                "added": data,
                "removed": oldData
            });
        },
        "updateSelection": function(data) {
            var container = this.selection.find(".select2-chosen"), formatted, cssClass;
            this.selection.data("select2-data", data);
            container.empty();
            if (null !== data) formatted = this.opts.formatSelection(data, container, this.opts.escapeMarkup);
            if (formatted !== undefined) container.append(formatted);
            cssClass = this.opts.formatSelectionCssClass(data, container);
            if (cssClass !== undefined) container.addClass(cssClass);
            this.selection.removeClass("select2-default");
            if (this.opts.allowClear && this.getPlaceholder() !== undefined) this.container.addClass("select2-allowclear");
        },
        "val": function() {
            var val, triggerChange = false, data = null, self = this, oldData = this.data();
            if (0 === arguments.length) return this.opts.element.val();
            val = arguments[0];
            if (arguments.length > 1) triggerChange = arguments[1];
            if (this.select) {
                this.select.val(val).find("option").filter(function() {
                    return this.selected;
                }).each2(function(i, elm) {
                    data = self.optionToData(elm);
                    return false;
                });
                this.updateSelection(data);
                this.setPlaceholder();
                if (triggerChange) this.triggerChange({
                    "added": data,
                    "removed": oldData
                });
            } else {
                if (!val && 0 !== val) {
                    this.clear(triggerChange);
                    return;
                }
                if (this.opts.initSelection === undefined) throw new Error("cannot call val() if initSelection() is not defined");
                this.opts.element.val(val);
                this.opts.initSelection(this.opts.element, function(data) {
                    self.opts.element.val(!data ? "" : self.id(data));
                    self.updateSelection(data);
                    self.setPlaceholder();
                    if (triggerChange) self.triggerChange({
                        "added": data,
                        "removed": oldData
                    });
                });
            }
        },
        "clearSearch": function() {
            this.search.val("");
            this.focusser.val("");
        },
        "data": function(value) {
            var data, triggerChange = false;
            if (0 === arguments.length) {
                data = this.selection.data("select2-data");
                if (data == undefined) data = null;
                return data;
            } else {
                if (arguments.length > 1) triggerChange = arguments[1];
                if (!value) this.clear(triggerChange); else {
                    data = this.data();
                    this.opts.element.val(!value ? "" : this.id(value));
                    this.updateSelection(value);
                    if (triggerChange) this.triggerChange({
                        "added": value,
                        "removed": data
                    });
                }
            }
        }
    });
    MultiSelect2 = clazz(AbstractSelect2, {
        "createContainer": function() {
            var container = $(document.createElement("div")).attr({
                "class": "select2-container select2-container-multi"
            }).html([ "<ul class='select2-choices'>", "  <li class='select2-search-field'>", "    <input type='text' autocomplete='off' autocorrect='off' autocapitalize='off' spellcheck='false' class='select2-input'>", "  </li>", "</ul>", "<div class='select2-drop select2-drop-multi select2-display-none'>", "   <ul class='select2-results'>", "   </ul>", "</div>" ].join(""));
            return container;
        },
        "prepareOpts": function() {
            var opts = this.parent.prepareOpts.apply(this, arguments), self = this;
            if ("select" === opts.element.get(0).tagName.toLowerCase()) opts.initSelection = function(element, callback) {
                var data = [];
                element.find("option").filter(function() {
                    return this.selected;
                }).each2(function(i, elm) {
                    data.push(self.optionToData(elm));
                });
                callback(data);
            }; else if ("data" in opts) opts.initSelection = opts.initSelection || function(element, callback) {
                var ids = splitVal(element.val(), opts.separator);
                var matches = [];
                opts.query({
                    "matcher": function(term, text, el) {
                        var is_match = $.grep(ids, function(id) {
                            return equal(id, opts.id(el));
                        }).length;
                        if (is_match) matches.push(el);
                        return is_match;
                    },
                    "callback": !$.isFunction(callback) ? $.noop : function() {
                        var ordered = [];
                        for (var i = 0; i < ids.length; i++) {
                            var id = ids[i];
                            for (var j = 0; j < matches.length; j++) {
                                var match = matches[j];
                                if (equal(id, opts.id(match))) {
                                    ordered.push(match);
                                    matches.splice(j, 1);
                                    break;
                                }
                            }
                        }
                        callback(ordered);
                    }
                });
            };
            return opts;
        },
        "selectChoice": function(choice) {
            var selected = this.container.find(".select2-search-choice-focus");
            if (selected.length && choice && choice[0] == selected[0]) ; else {
                if (selected.length) this.opts.element.trigger("choice-deselected", selected);
                selected.removeClass("select2-search-choice-focus");
                if (choice && choice.length) {
                    this.close();
                    choice.addClass("select2-search-choice-focus");
                    this.opts.element.trigger("choice-selected", choice);
                }
            }
        },
        "destroy": function() {
            $("label[for='" + this.search.attr("id") + "']").attr("for", this.opts.element.attr("id"));
            this.parent.destroy.apply(this, arguments);
        },
        "initContainer": function() {
            var selector = ".select2-choices", selection;
            this.searchContainer = this.container.find(".select2-search-field");
            this.selection = selection = this.container.find(selector);
            var _this = this;
            this.selection.on("click", ".select2-search-choice:not(.select2-locked)", function(e) {
                _this.search[0].focus();
                _this.selectChoice($(this));
            });
            this.search.attr("id", "s2id_autogen" + nextUid());
            $("label[for='" + this.opts.element.attr("id") + "']").attr("for", this.search.attr("id"));
            this.search.on("input paste", this.bind(function() {
                if (!this.isInterfaceEnabled()) return;
                if (!this.opened()) this.open();
            }));
            this.search.attr("tabindex", this.elementTabIndex);
            this.keydowns = 0;
            this.search.on("keydown", this.bind(function(e) {
                if (!this.isInterfaceEnabled()) return;
                ++this.keydowns;
                var selected = selection.find(".select2-search-choice-focus");
                var prev = selected.prev(".select2-search-choice:not(.select2-locked)");
                var next = selected.next(".select2-search-choice:not(.select2-locked)");
                var pos = getCursorInfo(this.search);
                if (selected.length && (e.which == KEY.LEFT || e.which == KEY.RIGHT || e.which == KEY.BACKSPACE || e.which == KEY.DELETE || e.which == KEY.ENTER)) {
                    var selectedChoice = selected;
                    if (e.which == KEY.LEFT && prev.length) selectedChoice = prev; else if (e.which == KEY.RIGHT) selectedChoice = next.length ? next : null; else if (e.which === KEY.BACKSPACE) {
                        this.unselect(selected.first());
                        this.search.width(10);
                        selectedChoice = prev.length ? prev : next;
                    } else if (e.which == KEY.DELETE) {
                        this.unselect(selected.first());
                        this.search.width(10);
                        selectedChoice = next.length ? next : null;
                    } else if (e.which == KEY.ENTER) selectedChoice = null;
                    this.selectChoice(selectedChoice);
                    killEvent(e);
                    if (!selectedChoice || !selectedChoice.length) this.open();
                    return;
                } else if ((e.which === KEY.BACKSPACE && 1 == this.keydowns || e.which == KEY.LEFT) && 0 == pos.offset && !pos.length) {
                    this.selectChoice(selection.find(".select2-search-choice:not(.select2-locked)").last());
                    killEvent(e);
                    return;
                } else this.selectChoice(null);
                if (this.opened()) switch (e.which) {
                  case KEY.UP:
                  case KEY.DOWN:
                    this.moveHighlight(e.which === KEY.UP ? -1 : 1);
                    killEvent(e);
                    return;

                  case KEY.ENTER:
                    if (!this.selectHighlighted()) this.tokenize("\n");
                    killEvent(e);
                    return;

                  case KEY.TAB:
                    if (!this.selectHighlighted({
                        "noFocus": true
                    })) this.tokenize("	");
                    this.close();
                    return;

                  case KEY.ESC:
                    this.cancel(e);
                    killEvent(e);
                    return;
                }
                if (e.which === KEY.TAB || KEY.isControl(e) || KEY.isFunctionKey(e) || e.which === KEY.BACKSPACE || e.which === KEY.ESC) return;
                if (e.which === KEY.ENTER) if (false === this.opts.openOnEnter) return; else if (e.altKey || e.ctrlKey || e.shiftKey || e.metaKey) return;
                this.open();
                if (e.which === KEY.PAGE_UP || e.which === KEY.PAGE_DOWN) killEvent(e);
                if (e.which === KEY.ENTER) killEvent(e);
            }));
            this.search.on("keyup", this.bind(function(e) {
                this.keydowns = 0;
                this.resizeSearch();
            }));
            this.search.on("blur", this.bind(function(e) {
                this.container.removeClass("select2-container-active");
                this.search.removeClass("select2-focused");
                this.selectChoice(null);
                if (!this.opened()) this.clearSearch();
                e.stopImmediatePropagation();
                this.opts.element.trigger($.Event("select2-blur"));
            }));
            this.container.on("click", selector, this.bind(function(e) {
                if (!this.isInterfaceEnabled()) return;
                if ($(e.target).closest(".select2-search-choice").length > 0) return;
                this.selectChoice(null);
                this.clearPlaceholder();
                if (!this.container.hasClass("select2-container-active")) this.opts.element.trigger($.Event("select2-focus"));
                this.open();
                this.focusSearch();
                e.preventDefault();
            }));
            this.container.on("focus", selector, this.bind(function() {
                if (!this.isInterfaceEnabled()) return;
                if (!this.container.hasClass("select2-container-active")) this.opts.element.trigger($.Event("select2-focus"));
                this.container.addClass("select2-container-active");
                this.dropdown.addClass("select2-drop-active");
                this.clearPlaceholder();
            }));
            this.initContainerWidth();
            this.opts.element.addClass("select2-offscreen");
            this.clearSearch();
        },
        "enableInterface": function() {
            if (this.parent.enableInterface.apply(this, arguments)) this.search.prop("disabled", !this.isInterfaceEnabled());
        },
        "initSelection": function() {
            var data;
            if ("" === this.opts.element.val() && "" === this.opts.element.text()) {
                this.updateSelection([]);
                this.close();
                this.clearSearch();
            }
            if (this.select || "" !== this.opts.element.val()) {
                var self = this;
                this.opts.initSelection.call(null, this.opts.element, function(data) {
                    if (data !== undefined && null !== data) {
                        self.updateSelection(data);
                        self.close();
                        self.clearSearch();
                    }
                });
            }
        },
        "clearSearch": function() {
            var placeholder = this.getPlaceholder(), maxWidth = this.getMaxSearchWidth();
            if (placeholder !== undefined && 0 === this.getVal().length && false === this.search.hasClass("select2-focused")) {
                this.search.val(placeholder).addClass("select2-default");
                this.search.width(maxWidth > 0 ? maxWidth : this.container.css("width"));
            } else this.search.val("").width(10);
        },
        "clearPlaceholder": function() {
            if (this.search.hasClass("select2-default")) this.search.val("").removeClass("select2-default");
        },
        "opening": function() {
            this.clearPlaceholder();
            this.resizeSearch();
            this.parent.opening.apply(this, arguments);
            this.focusSearch();
            this.updateResults(true);
            this.search.focus();
            this.opts.element.trigger($.Event("select2-open"));
        },
        "close": function() {
            if (!this.opened()) return;
            this.parent.close.apply(this, arguments);
        },
        "focus": function() {
            this.close();
            this.search.focus();
        },
        "isFocused": function() {
            return this.search.hasClass("select2-focused");
        },
        "updateSelection": function(data) {
            var ids = [], filtered = [], self = this;
            $(data).each(function() {
                if (indexOf(self.id(this), ids) < 0) {
                    ids.push(self.id(this));
                    filtered.push(this);
                }
            });
            data = filtered;
            this.selection.find(".select2-search-choice").remove();
            $(data).each(function() {
                self.addSelectedChoice(this);
            });
            self.postprocessResults();
        },
        "tokenize": function(suffix) {
            var input = this.search.val() + (suffix || "");
            var leftover = this.opts.tokenizer.call(this, input, this.data(), this.bind(this.onSelect), this.opts);
            if (null != leftover && leftover != undefined && leftover != input) {
                this.search.val(leftover);
                if (leftover.length > 0) this.open();
            }
        },
        "onSelect": function(data, options) {
            if (!this.triggerSelect(data)) return;
            this.addSelectedChoice(data);
            this.opts.element.trigger({
                "type": "selected",
                "val": this.id(data),
                "choice": data
            });
            this.clearSearch();
            this.updateResults();
            if (this.select || !this.opts.closeOnSelect) this.postprocessResults(data, false, true === this.opts.closeOnSelect);
            if (this.opts.closeOnSelect) {
                this.close();
                this.search.width(10);
            } else if (this.countSelectableResults() > 0) {
                this.search.width(10);
                this.resizeSearch();
                if (this.getMaximumSelectionSize() > 0 && this.val().length >= this.getMaximumSelectionSize()) this.updateResults(true);
                this.positionDropdown();
            } else {
                this.close();
                this.search.width(10);
            }
            this.triggerChange({
                "added": data
            });
            if (!options || !options.noFocus) this.focusSearch();
        },
        "cancel": function() {
            this.close();
            this.focusSearch();
        },
        "addSelectedChoice": function(data) {
            var enableChoice = !data.locked, enabledItem = $("<li class='select2-search-choice'>" + "    <div></div>" + "    <a href='#' onclick='return false;' class='select2-search-choice-close' tabindex='-1'></a>" + "</li>"), disabledItem = $("<li class='select2-search-choice select2-locked'>" + "<div></div>" + "</li>");
            var choice = enableChoice ? enabledItem : disabledItem, id = this.id(data), val = this.getVal(), formatted, cssClass;
            formatted = this.opts.formatSelection(data, choice.find("div"), this.opts.escapeMarkup);
            if (formatted != undefined) choice.find("div").replaceWith("<div>" + formatted + "</div>");
            cssClass = this.opts.formatSelectionCssClass(data, choice.find("div"));
            if (cssClass != undefined) choice.addClass(cssClass);
            if (enableChoice) choice.find(".select2-search-choice-close").on("mousedown", killEvent).on("click dblclick", this.bind(function(e) {
                if (!this.isInterfaceEnabled()) return;
                $(e.target).closest(".select2-search-choice").fadeOut("fast", this.bind(function() {
                    this.unselect($(e.target));
                    this.selection.find(".select2-search-choice-focus").removeClass("select2-search-choice-focus");
                    this.close();
                    this.focusSearch();
                })).dequeue();
                killEvent(e);
            })).on("focus", this.bind(function() {
                if (!this.isInterfaceEnabled()) return;
                this.container.addClass("select2-container-active");
                this.dropdown.addClass("select2-drop-active");
            }));
            choice.data("select2-data", data);
            choice.insertBefore(this.searchContainer);
            val.push(id);
            this.setVal(val);
        },
        "unselect": function(selected) {
            var val = this.getVal(), data, index;
            selected = selected.closest(".select2-search-choice");
            if (0 === selected.length) throw "Invalid argument: " + selected + ". Must be .select2-search-choice";
            data = selected.data("select2-data");
            if (!data) return;
            while ((index = indexOf(this.id(data), val)) >= 0) {
                val.splice(index, 1);
                this.setVal(val);
                if (this.select) this.postprocessResults();
            }
            var evt = $.Event("select2-removing");
            evt.val = this.id(data);
            evt.choice = data;
            this.opts.element.trigger(evt);
            if (evt.isDefaultPrevented()) return;
            selected.remove();
            this.opts.element.trigger({
                "type": "select2-removed",
                "val": this.id(data),
                "choice": data
            });
            this.triggerChange({
                "removed": data
            });
        },
        "postprocessResults": function(data, initial, noHighlightUpdate) {
            var val = this.getVal(), choices = this.results.find(".select2-result"), compound = this.results.find(".select2-result-with-children"), self = this;
            choices.each2(function(i, choice) {
                var id = self.id(choice.data("select2-data"));
                if (indexOf(id, val) >= 0) {
                    choice.addClass("select2-selected");
                    choice.find(".select2-result-selectable").addClass("select2-selected");
                }
            });
            compound.each2(function(i, choice) {
                if (!choice.is(".select2-result-selectable") && 0 === choice.find(".select2-result-selectable:not(.select2-selected)").length) choice.addClass("select2-selected");
            });
            if (this.highlight() == -1 && false !== noHighlightUpdate) self.highlight(0);
            if (!this.opts.createSearchChoice && !choices.filter(".select2-result:not(.select2-selected)").length > 0) if (!data || data && !data.more && 0 === this.results.find(".select2-no-results").length) if (checkFormatter(self.opts.formatNoMatches, "formatNoMatches")) this.results.append("<li class='select2-no-results'>" + self.opts.formatNoMatches(self.search.val()) + "</li>");
        },
        "getMaxSearchWidth": function() {
            return this.selection.width() - getSideBorderPadding(this.search);
        },
        "resizeSearch": function() {
            var minimumWidth, left, maxWidth, containerLeft, searchWidth, sideBorderPadding = getSideBorderPadding(this.search);
            minimumWidth = measureTextWidth(this.search) + 10;
            left = this.search.offset().left;
            maxWidth = this.selection.width();
            containerLeft = this.selection.offset().left;
            searchWidth = maxWidth - (left - containerLeft) - sideBorderPadding;
            if (searchWidth < minimumWidth) searchWidth = maxWidth - sideBorderPadding;
            if (searchWidth < 40) searchWidth = maxWidth - sideBorderPadding;
            if (searchWidth <= 0) searchWidth = minimumWidth;
            this.search.width(Math.floor(searchWidth));
        },
        "getVal": function() {
            var val;
            if (this.select) {
                val = this.select.val();
                return null === val ? [] : val;
            } else {
                val = this.opts.element.val();
                return splitVal(val, this.opts.separator);
            }
        },
        "setVal": function(val) {
            var unique;
            if (this.select) this.select.val(val); else {
                unique = [];
                $(val).each(function() {
                    if (indexOf(this, unique) < 0) unique.push(this);
                });
                this.opts.element.val(0 === unique.length ? "" : unique.join(this.opts.separator));
            }
        },
        "buildChangeDetails": function(old, current) {
            var current = current.slice(0), old = old.slice(0);
            for (var i = 0; i < current.length; i++) for (var j = 0; j < old.length; j++) if (equal(this.opts.id(current[i]), this.opts.id(old[j]))) {
                current.splice(i, 1);
                if (i > 0) i--;
                old.splice(j, 1);
                j--;
            }
            return {
                "added": current,
                "removed": old
            };
        },
        "val": function(val, triggerChange) {
            var oldData, self = this;
            if (0 === arguments.length) return this.getVal();
            oldData = this.data();
            if (!oldData.length) oldData = [];
            if (!val && 0 !== val) {
                this.opts.element.val("");
                this.updateSelection([]);
                this.clearSearch();
                if (triggerChange) this.triggerChange({
                    "added": this.data(),
                    "removed": oldData
                });
                return;
            }
            this.setVal(val);
            if (this.select) {
                this.opts.initSelection(this.select, this.bind(this.updateSelection));
                if (triggerChange) this.triggerChange(this.buildChangeDetails(oldData, this.data()));
            } else {
                if (this.opts.initSelection === undefined) throw new Error("val() cannot be called if initSelection() is not defined");
                this.opts.initSelection(this.opts.element, function(data) {
                    var ids = $.map(data, self.id);
                    self.setVal(ids);
                    self.updateSelection(data);
                    self.clearSearch();
                    if (triggerChange) self.triggerChange(self.buildChangeDetails(oldData, self.data()));
                });
            }
            this.clearSearch();
        },
        "onSortStart": function() {
            if (this.select) throw new Error("Sorting of elements is not supported when attached to <select>. Attach to <input type='hidden'/> instead.");
            this.search.width(0);
            this.searchContainer.hide();
        },
        "onSortEnd": function() {
            var val = [], self = this;
            this.searchContainer.show();
            this.searchContainer.appendTo(this.searchContainer.parent());
            this.resizeSearch();
            this.selection.find(".select2-search-choice").each(function() {
                val.push(self.opts.id($(this).data("select2-data")));
            });
            this.setVal(val);
            this.triggerChange();
        },
        "data": function(values, triggerChange) {
            var self = this, ids, old;
            if (0 === arguments.length) return this.selection.children(".select2-search-choice").map(function() {
                return $(this).data("select2-data");
            }).get(); else {
                old = this.data();
                if (!values) values = [];
                ids = $.map(values, function(e) {
                    return self.opts.id(e);
                });
                this.setVal(ids);
                this.updateSelection(values);
                this.clearSearch();
                if (triggerChange) this.triggerChange(this.buildChangeDetails(old, this.data()));
            }
        }
    });
    $.fn.select2 = function() {
        var args = Array.prototype.slice.call(arguments, 0), opts, select2, method, value, multiple, allowedMethods = [ "val", "destroy", "opened", "open", "close", "focus", "isFocused", "container", "dropdown", "onSortStart", "onSortEnd", "enable", "disable", "readonly", "positionDropdown", "data", "search" ], valueMethods = [ "opened", "isFocused", "container", "dropdown" ], propertyMethods = [ "val", "data" ], methodsMap = {
            "search": "externalSearch"
        };
        this.each(function() {
            if (0 === args.length || "object" === typeof args[0]) {
                opts = 0 === args.length ? {} : $.extend({}, args[0]);
                opts.element = $(this);
                if ("select" === opts.element.get(0).tagName.toLowerCase()) multiple = opts.element.prop("multiple"); else {
                    multiple = opts.multiple || false;
                    if ("tags" in opts) opts.multiple = multiple = true;
                }
                select2 = multiple ? new MultiSelect2() : new SingleSelect2();
                select2.init(opts);
            } else if ("string" === typeof args[0]) {
                if (indexOf(args[0], allowedMethods) < 0) throw "Unknown method: " + args[0];
                value = undefined;
                select2 = $(this).data("select2");
                if (select2 === undefined) return;
                method = args[0];
                if ("container" === method) value = select2.container; else if ("dropdown" === method) value = select2.dropdown; else {
                    if (methodsMap[method]) method = methodsMap[method];
                    value = select2[method].apply(select2, args.slice(1));
                }
                if (indexOf(args[0], valueMethods) >= 0 || indexOf(args[0], propertyMethods) && 1 == args.length) return false;
            } else throw "Invalid arguments to select2 plugin: " + args;
        });
        return value === undefined ? this : value;
    };
    $.fn.select2.defaults = {
        "width": "copy",
        "loadMorePadding": 0,
        "closeOnSelect": true,
        "openOnEnter": true,
        "containerCss": {},
        "dropdownCss": {},
        "containerCssClass": "",
        "dropdownCssClass": "",
        "formatResult": function(result, container, query, escapeMarkup) {
            var markup = [];
            markMatch(result.text, query.term, markup, escapeMarkup);
            return markup.join("");
        },
        "formatSelection": function(data, container, escapeMarkup) {
            return data ? escapeMarkup(data.text) : undefined;
        },
        "sortResults": function(results, container, query) {
            return results;
        },
        "formatResultCssClass": function(data) {
            return data.css;
        },
        "formatSelectionCssClass": function(data, container) {
            return undefined;
        },
        "formatNoMatches": function() {
            return "No matches found";
        },
        "formatInputTooShort": function(input, min) {
            var n = min - input.length;
            return "Please enter " + n + " more character" + (1 == n ? "" : "s");
        },
        "formatInputTooLong": function(input, max) {
            var n = input.length - max;
            return "Please delete " + n + " character" + (1 == n ? "" : "s");
        },
        "formatSelectionTooBig": function(limit) {
            return "You can only select " + limit + " item" + (1 == limit ? "" : "s");
        },
        "formatLoadMore": function(pageNumber) {
            return "Loading more results...";
        },
        "formatSearching": function() {
            return "Searching...";
        },
        "minimumResultsForSearch": 0,
        "minimumInputLength": 0,
        "maximumInputLength": null,
        "maximumSelectionSize": 0,
        "id": function(e) {
            return e == undefined ? null : e.id;
        },
        "matcher": function(term, text) {
            return stripDiacritics("" + text).toUpperCase().indexOf(stripDiacritics("" + term).toUpperCase()) >= 0;
        },
        "separator": ",",
        "tokenSeparators": [],
        "tokenizer": defaultTokenizer,
        "escapeMarkup": defaultEscapeMarkup,
        "blurOnChange": false,
        "selectOnBlur": false,
        "adaptContainerCssClass": function(c) {
            return c;
        },
        "adaptDropdownCssClass": function(c) {
            return null;
        },
        "nextSearchTerm": function(selectedObject, currentSearchTerm) {
            return undefined;
        }
    };
    $.fn.select2.ajaxDefaults = {
        "transport": $.ajax,
        "params": {
            "type": "GET",
            "cache": false,
            "dataType": "json"
        }
    };
    window.Select2 = {
        "query": {
            "ajax": ajax,
            "local": local,
            "tags": tags
        },
        "util": {
            "debounce": debounce,
            "markMatch": markMatch,
            "escapeMarkup": defaultEscapeMarkup,
            "stripDiacritics": stripDiacritics
        },
        "class": {
            "abstract": AbstractSelect2,
            "single": SingleSelect2,
            "multi": MultiSelect2
        }
    };
}(jQuery);

!function($, undefined) {
    var dataSpace = "ui-effects-";
    $.effects = {
        "effect": {}
    };
    !function(jQuery, undefined) {
        var stepHooks = "backgroundColor borderBottomColor borderLeftColor borderRightColor borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor", rplusequals = /^([\-+])=\s*(\d+\.?\d*)/, stringParsers = [ {
            "re": /rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
            "parse": function(execResult) {
                return [ execResult[1], execResult[2], execResult[3], execResult[4] ];
            }
        }, {
            "re": /rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
            "parse": function(execResult) {
                return [ 2.55 * execResult[1], 2.55 * execResult[2], 2.55 * execResult[3], execResult[4] ];
            }
        }, {
            "re": /#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/,
            "parse": function(execResult) {
                return [ parseInt(execResult[1], 16), parseInt(execResult[2], 16), parseInt(execResult[3], 16) ];
            }
        }, {
            "re": /#([a-f0-9])([a-f0-9])([a-f0-9])/,
            "parse": function(execResult) {
                return [ parseInt(execResult[1] + execResult[1], 16), parseInt(execResult[2] + execResult[2], 16), parseInt(execResult[3] + execResult[3], 16) ];
            }
        }, {
            "re": /hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
            "space": "hsla",
            "parse": function(execResult) {
                return [ execResult[1], execResult[2] / 100, execResult[3] / 100, execResult[4] ];
            }
        } ], color = jQuery.Color = function(color, green, blue, alpha) {
            return new jQuery.Color.fn.parse(color, green, blue, alpha);
        }, spaces = {
            "rgba": {
                "props": {
                    "red": {
                        "idx": 0,
                        "type": "byte"
                    },
                    "green": {
                        "idx": 1,
                        "type": "byte"
                    },
                    "blue": {
                        "idx": 2,
                        "type": "byte"
                    }
                }
            },
            "hsla": {
                "props": {
                    "hue": {
                        "idx": 0,
                        "type": "degrees"
                    },
                    "saturation": {
                        "idx": 1,
                        "type": "percent"
                    },
                    "lightness": {
                        "idx": 2,
                        "type": "percent"
                    }
                }
            }
        }, propTypes = {
            "byte": {
                "floor": true,
                "max": 255
            },
            "percent": {
                "max": 1
            },
            "degrees": {
                "mod": 360,
                "floor": true
            }
        }, support = color.support = {}, supportElem = jQuery("<p>")[0], colors, each = jQuery.each;
        supportElem.style.cssText = "background-color:rgba(1,1,1,.5)";
        support.rgba = supportElem.style.backgroundColor.indexOf("rgba") > -1;
        each(spaces, function(spaceName, space) {
            space.cache = "_" + spaceName;
            space.props.alpha = {
                "idx": 3,
                "type": "percent",
                "def": 1
            };
        });
        function clamp(value, prop, allowEmpty) {
            var type = propTypes[prop.type] || {};
            if (null == value) return allowEmpty || !prop.def ? null : prop.def;
            value = type.floor ? ~~value : parseFloat(value);
            if (isNaN(value)) return prop.def;
            if (type.mod) return (value + type.mod) % type.mod;
            return 0 > value ? 0 : type.max < value ? type.max : value;
        }
        function stringParse(string) {
            var inst = color(), rgba = inst._rgba = [];
            string = string.toLowerCase();
            each(stringParsers, function(i, parser) {
                var parsed, match = parser.re.exec(string), values = match && parser.parse(match), spaceName = parser.space || "rgba";
                if (values) {
                    parsed = inst[spaceName](values);
                    inst[spaces[spaceName].cache] = parsed[spaces[spaceName].cache];
                    rgba = inst._rgba = parsed._rgba;
                    return false;
                }
            });
            if (rgba.length) {
                if ("0,0,0,0" === rgba.join()) jQuery.extend(rgba, colors.transparent);
                return inst;
            }
            return colors[string];
        }
        color.fn = jQuery.extend(color.prototype, {
            "parse": function(red, green, blue, alpha) {
                if (red === undefined) {
                    this._rgba = [ null, null, null, null ];
                    return this;
                }
                if (red.jquery || red.nodeType) {
                    red = jQuery(red).css(green);
                    green = undefined;
                }
                var inst = this, type = jQuery.type(red), rgba = this._rgba = [];
                if (green !== undefined) {
                    red = [ red, green, blue, alpha ];
                    type = "array";
                }
                if ("string" === type) return this.parse(stringParse(red) || colors._default);
                if ("array" === type) {
                    each(spaces.rgba.props, function(key, prop) {
                        rgba[prop.idx] = clamp(red[prop.idx], prop);
                    });
                    return this;
                }
                if ("object" === type) {
                    if (red instanceof color) each(spaces, function(spaceName, space) {
                        if (red[space.cache]) inst[space.cache] = red[space.cache].slice();
                    }); else each(spaces, function(spaceName, space) {
                        var cache = space.cache;
                        each(space.props, function(key, prop) {
                            if (!inst[cache] && space.to) {
                                if ("alpha" === key || null == red[key]) return;
                                inst[cache] = space.to(inst._rgba);
                            }
                            inst[cache][prop.idx] = clamp(red[key], prop, true);
                        });
                        if (inst[cache] && jQuery.inArray(null, inst[cache].slice(0, 3)) < 0) {
                            inst[cache][3] = 1;
                            if (space.from) inst._rgba = space.from(inst[cache]);
                        }
                    });
                    return this;
                }
            },
            "is": function(compare) {
                var is = color(compare), same = true, inst = this;
                each(spaces, function(_, space) {
                    var localCache, isCache = is[space.cache];
                    if (isCache) {
                        localCache = inst[space.cache] || space.to && space.to(inst._rgba) || [];
                        each(space.props, function(_, prop) {
                            if (null != isCache[prop.idx]) {
                                same = isCache[prop.idx] === localCache[prop.idx];
                                return same;
                            }
                        });
                    }
                    return same;
                });
                return same;
            },
            "_space": function() {
                var used = [], inst = this;
                each(spaces, function(spaceName, space) {
                    if (inst[space.cache]) used.push(spaceName);
                });
                return used.pop();
            },
            "transition": function(other, distance) {
                var end = color(other), spaceName = end._space(), space = spaces[spaceName], startColor = 0 === this.alpha() ? color("transparent") : this, start = startColor[space.cache] || space.to(startColor._rgba), result = start.slice();
                end = end[space.cache];
                each(space.props, function(key, prop) {
                    var index = prop.idx, startValue = start[index], endValue = end[index], type = propTypes[prop.type] || {};
                    if (null === endValue) return;
                    if (null === startValue) result[index] = endValue; else {
                        if (type.mod) if (endValue - startValue > type.mod / 2) startValue += type.mod; else if (startValue - endValue > type.mod / 2) startValue -= type.mod;
                        result[index] = clamp((endValue - startValue) * distance + startValue, prop);
                    }
                });
                return this[spaceName](result);
            },
            "blend": function(opaque) {
                if (1 === this._rgba[3]) return this;
                var rgb = this._rgba.slice(), a = rgb.pop(), blend = color(opaque)._rgba;
                return color(jQuery.map(rgb, function(v, i) {
                    return (1 - a) * blend[i] + a * v;
                }));
            },
            "toRgbaString": function() {
                var prefix = "rgba(", rgba = jQuery.map(this._rgba, function(v, i) {
                    return null == v ? i > 2 ? 1 : 0 : v;
                });
                if (1 === rgba[3]) {
                    rgba.pop();
                    prefix = "rgb(";
                }
                return prefix + rgba.join() + ")";
            },
            "toHslaString": function() {
                var prefix = "hsla(", hsla = jQuery.map(this.hsla(), function(v, i) {
                    if (null == v) v = i > 2 ? 1 : 0;
                    if (i && i < 3) v = Math.round(100 * v) + "%";
                    return v;
                });
                if (1 === hsla[3]) {
                    hsla.pop();
                    prefix = "hsl(";
                }
                return prefix + hsla.join() + ")";
            },
            "toHexString": function(includeAlpha) {
                var rgba = this._rgba.slice(), alpha = rgba.pop();
                if (includeAlpha) rgba.push(~~(255 * alpha));
                return "#" + jQuery.map(rgba, function(v) {
                    v = (v || 0).toString(16);
                    return 1 === v.length ? "0" + v : v;
                }).join("");
            },
            "toString": function() {
                return 0 === this._rgba[3] ? "transparent" : this.toRgbaString();
            }
        });
        color.fn.parse.prototype = color.fn;
        function hue2rgb(p, q, h) {
            h = (h + 1) % 1;
            if (6 * h < 1) return p + (q - p) * h * 6;
            if (2 * h < 1) return q;
            if (3 * h < 2) return p + (q - p) * (2 / 3 - h) * 6;
            return p;
        }
        spaces.hsla.to = function(rgba) {
            if (null == rgba[0] || null == rgba[1] || null == rgba[2]) return [ null, null, null, rgba[3] ];
            var r = rgba[0] / 255, g = rgba[1] / 255, b = rgba[2] / 255, a = rgba[3], max = Math.max(r, g, b), min = Math.min(r, g, b), diff = max - min, add = max + min, l = .5 * add, h, s;
            if (min === max) h = 0; else if (r === max) h = 60 * (g - b) / diff + 360; else if (g === max) h = 60 * (b - r) / diff + 120; else h = 60 * (r - g) / diff + 240;
            if (0 === diff) s = 0; else if (l <= .5) s = diff / add; else s = diff / (2 - add);
            return [ Math.round(h) % 360, s, l, null == a ? 1 : a ];
        };
        spaces.hsla.from = function(hsla) {
            if (null == hsla[0] || null == hsla[1] || null == hsla[2]) return [ null, null, null, hsla[3] ];
            var h = hsla[0] / 360, s = hsla[1], l = hsla[2], a = hsla[3], q = l <= .5 ? l * (1 + s) : l + s - l * s, p = 2 * l - q;
            return [ Math.round(255 * hue2rgb(p, q, h + 1 / 3)), Math.round(255 * hue2rgb(p, q, h)), Math.round(255 * hue2rgb(p, q, h - 1 / 3)), a ];
        };
        each(spaces, function(spaceName, space) {
            var props = space.props, cache = space.cache, to = space.to, from = space.from;
            color.fn[spaceName] = function(value) {
                if (to && !this[cache]) this[cache] = to(this._rgba);
                if (value === undefined) return this[cache].slice();
                var ret, type = jQuery.type(value), arr = "array" === type || "object" === type ? value : arguments, local = this[cache].slice();
                each(props, function(key, prop) {
                    var val = arr["object" === type ? key : prop.idx];
                    if (null == val) val = local[prop.idx];
                    local[prop.idx] = clamp(val, prop);
                });
                if (from) {
                    ret = color(from(local));
                    ret[cache] = local;
                    return ret;
                } else return color(local);
            };
            each(props, function(key, prop) {
                if (color.fn[key]) return;
                color.fn[key] = function(value) {
                    var vtype = jQuery.type(value), fn = "alpha" === key ? this._hsla ? "hsla" : "rgba" : spaceName, local = this[fn](), cur = local[prop.idx], match;
                    if ("undefined" === vtype) return cur;
                    if ("function" === vtype) {
                        value = value.call(this, cur);
                        vtype = jQuery.type(value);
                    }
                    if (null == value && prop.empty) return this;
                    if ("string" === vtype) {
                        match = rplusequals.exec(value);
                        if (match) value = cur + parseFloat(match[2]) * ("+" === match[1] ? 1 : -1);
                    }
                    local[prop.idx] = value;
                    return this[fn](local);
                };
            });
        });
        color.hook = function(hook) {
            var hooks = hook.split(" ");
            each(hooks, function(i, hook) {
                jQuery.cssHooks[hook] = {
                    "set": function(elem, value) {
                        var parsed, curElem, backgroundColor = "";
                        if ("transparent" !== value && ("string" !== jQuery.type(value) || (parsed = stringParse(value)))) {
                            value = color(parsed || value);
                            if (!support.rgba && 1 !== value._rgba[3]) {
                                curElem = "backgroundColor" === hook ? elem.parentNode : elem;
                                while (("" === backgroundColor || "transparent" === backgroundColor) && curElem && curElem.style) try {
                                    backgroundColor = jQuery.css(curElem, "backgroundColor");
                                    curElem = curElem.parentNode;
                                } catch (e) {}
                                value = value.blend(backgroundColor && "transparent" !== backgroundColor ? backgroundColor : "_default");
                            }
                            value = value.toRgbaString();
                        }
                        try {
                            elem.style[hook] = value;
                        } catch (e) {}
                    }
                };
                jQuery.fx.step[hook] = function(fx) {
                    if (!fx.colorInit) {
                        fx.start = color(fx.elem, hook);
                        fx.end = color(fx.end);
                        fx.colorInit = true;
                    }
                    jQuery.cssHooks[hook].set(fx.elem, fx.start.transition(fx.end, fx.pos));
                };
            });
        };
        color.hook(stepHooks);
        jQuery.cssHooks.borderColor = {
            "expand": function(value) {
                var expanded = {};
                each([ "Top", "Right", "Bottom", "Left" ], function(i, part) {
                    expanded["border" + part + "Color"] = value;
                });
                return expanded;
            }
        };
        colors = jQuery.Color.names = {
            "aqua": "#00ffff",
            "black": "#000000",
            "blue": "#0000ff",
            "fuchsia": "#ff00ff",
            "gray": "#808080",
            "green": "#008000",
            "lime": "#00ff00",
            "maroon": "#800000",
            "navy": "#000080",
            "olive": "#808000",
            "purple": "#800080",
            "red": "#ff0000",
            "silver": "#c0c0c0",
            "teal": "#008080",
            "white": "#ffffff",
            "yellow": "#ffff00",
            "transparent": [ null, null, null, 0 ],
            "_default": "#ffffff"
        };
    }(jQuery);
    !function() {
        var classAnimationActions = [ "add", "remove", "toggle" ], shorthandStyles = {
            "border": 1,
            "borderBottom": 1,
            "borderColor": 1,
            "borderLeft": 1,
            "borderRight": 1,
            "borderTop": 1,
            "borderWidth": 1,
            "margin": 1,
            "padding": 1
        };
        $.each([ "borderLeftStyle", "borderRightStyle", "borderBottomStyle", "borderTopStyle" ], function(_, prop) {
            $.fx.step[prop] = function(fx) {
                if ("none" !== fx.end && !fx.setAttr || 1 === fx.pos && !fx.setAttr) {
                    jQuery.style(fx.elem, prop, fx.end);
                    fx.setAttr = true;
                }
            };
        });
        function getElementStyles(elem) {
            var key, len, style = elem.ownerDocument.defaultView ? elem.ownerDocument.defaultView.getComputedStyle(elem, null) : elem.currentStyle, styles = {};
            if (style && style.length && style[0] && style[style[0]]) {
                len = style.length;
                while (len--) {
                    key = style[len];
                    if ("string" === typeof style[key]) styles[$.camelCase(key)] = style[key];
                }
            } else for (key in style) if ("string" === typeof style[key]) styles[key] = style[key];
            return styles;
        }
        function styleDifference(oldStyle, newStyle) {
            var diff = {}, name, value;
            for (name in newStyle) {
                value = newStyle[name];
                if (oldStyle[name] !== value) if (!shorthandStyles[name]) if ($.fx.step[name] || !isNaN(parseFloat(value))) diff[name] = value;
            }
            return diff;
        }
        if (!$.fn.addBack) $.fn.addBack = function(selector) {
            return this.add(null == selector ? this.prevObject : this.prevObject.filter(selector));
        };
        $.effects.animateClass = function(value, duration, easing, callback) {
            var o = $.speed(duration, easing, callback);
            return this.queue(function() {
                var animated = $(this), baseClass = animated.attr("class") || "", applyClassChange, allAnimations = o.children ? animated.find("*").addBack() : animated;
                allAnimations = allAnimations.map(function() {
                    var el = $(this);
                    return {
                        "el": el,
                        "start": getElementStyles(this)
                    };
                });
                applyClassChange = function() {
                    $.each(classAnimationActions, function(i, action) {
                        if (value[action]) animated[action + "Class"](value[action]);
                    });
                };
                applyClassChange();
                allAnimations = allAnimations.map(function() {
                    this.end = getElementStyles(this.el[0]);
                    this.diff = styleDifference(this.start, this.end);
                    return this;
                });
                animated.attr("class", baseClass);
                allAnimations = allAnimations.map(function() {
                    var styleInfo = this, dfd = $.Deferred(), opts = $.extend({}, o, {
                        "queue": false,
                        "complete": function() {
                            dfd.resolve(styleInfo);
                        }
                    });
                    this.el.animate(this.diff, opts);
                    return dfd.promise();
                });
                $.when.apply($, allAnimations.get()).done(function() {
                    applyClassChange();
                    $.each(arguments, function() {
                        var el = this.el;
                        $.each(this.diff, function(key) {
                            el.css(key, "");
                        });
                    });
                    o.complete.call(animated[0]);
                });
            });
        };
        $.fn.extend({
            "addClass": function(orig) {
                return function(classNames, speed, easing, callback) {
                    return speed ? $.effects.animateClass.call(this, {
                        "add": classNames
                    }, speed, easing, callback) : orig.apply(this, arguments);
                };
            }($.fn.addClass),
            "removeClass": function(orig) {
                return function(classNames, speed, easing, callback) {
                    return arguments.length > 1 ? $.effects.animateClass.call(this, {
                        "remove": classNames
                    }, speed, easing, callback) : orig.apply(this, arguments);
                };
            }($.fn.removeClass),
            "toggleClass": function(orig) {
                return function(classNames, force, speed, easing, callback) {
                    if ("boolean" === typeof force || force === undefined) if (!speed) return orig.apply(this, arguments); else return $.effects.animateClass.call(this, force ? {
                        "add": classNames
                    } : {
                        "remove": classNames
                    }, speed, easing, callback); else return $.effects.animateClass.call(this, {
                        "toggle": classNames
                    }, force, speed, easing);
                };
            }($.fn.toggleClass),
            "switchClass": function(remove, add, speed, easing, callback) {
                return $.effects.animateClass.call(this, {
                    "add": add,
                    "remove": remove
                }, speed, easing, callback);
            }
        });
    }();
    !function() {
        $.extend($.effects, {
            "version": "@VERSION",
            "save": function(element, set) {
                for (var i = 0; i < set.length; i++) if (null !== set[i]) element.data(dataSpace + set[i], element[0].style[set[i]]);
            },
            "restore": function(element, set) {
                var val, i;
                for (i = 0; i < set.length; i++) if (null !== set[i]) {
                    val = element.data(dataSpace + set[i]);
                    if (val === undefined) val = "";
                    element.css(set[i], val);
                }
            },
            "setMode": function(el, mode) {
                if ("toggle" === mode) mode = el.is(":hidden") ? "show" : "hide";
                return mode;
            },
            "getBaseline": function(origin, original) {
                var y, x;
                switch (origin[0]) {
                  case "top":
                    y = 0;
                    break;

                  case "middle":
                    y = .5;
                    break;

                  case "bottom":
                    y = 1;
                    break;

                  default:
                    y = origin[0] / original.height;
                }
                switch (origin[1]) {
                  case "left":
                    x = 0;
                    break;

                  case "center":
                    x = .5;
                    break;

                  case "right":
                    x = 1;
                    break;

                  default:
                    x = origin[1] / original.width;
                }
                return {
                    "x": x,
                    "y": y
                };
            },
            "createWrapper": function(element) {
                if (element.parent().is(".ui-effects-wrapper")) return element.parent();
                var props = {
                    "width": element.outerWidth(true),
                    "height": element.outerHeight(true),
                    "float": element.css("float")
                }, wrapper = $("<div></div>").addClass("ui-effects-wrapper").css({
                    "fontSize": "100%",
                    "background": "transparent",
                    "border": "none",
                    "margin": 0,
                    "padding": 0
                }), size = {
                    "width": element.width(),
                    "height": element.height()
                }, active = document.activeElement;
                try {
                    active.id;
                } catch (e) {
                    active = document.body;
                }
                element.wrap(wrapper);
                if (element[0] === active || $.contains(element[0], active)) $(active).focus();
                wrapper = element.parent();
                if ("static" === element.css("position")) {
                    wrapper.css({
                        "position": "relative"
                    });
                    element.css({
                        "position": "relative"
                    });
                } else {
                    $.extend(props, {
                        "position": element.css("position"),
                        "zIndex": element.css("z-index")
                    });
                    $.each([ "top", "left", "bottom", "right" ], function(i, pos) {
                        props[pos] = element.css(pos);
                        if (isNaN(parseInt(props[pos], 10))) props[pos] = "auto";
                    });
                    element.css({
                        "position": "relative",
                        "top": 0,
                        "left": 0,
                        "right": "auto",
                        "bottom": "auto"
                    });
                }
                element.css(size);
                return wrapper.css(props).show();
            },
            "removeWrapper": function(element) {
                var active = document.activeElement;
                if (element.parent().is(".ui-effects-wrapper")) {
                    element.parent().replaceWith(element);
                    if (element[0] === active || $.contains(element[0], active)) $(active).focus();
                }
                return element;
            },
            "setTransition": function(element, list, factor, value) {
                value = value || {};
                $.each(list, function(i, x) {
                    var unit = element.cssUnit(x);
                    if (unit[0] > 0) value[x] = unit[0] * factor + unit[1];
                });
                return value;
            }
        });
        function _normalizeArguments(effect, options, speed, callback) {
            if ($.isPlainObject(effect)) {
                options = effect;
                effect = effect.effect;
            }
            effect = {
                "effect": effect
            };
            if (null == options) options = {};
            if ($.isFunction(options)) {
                callback = options;
                speed = null;
                options = {};
            }
            if ("number" === typeof options || $.fx.speeds[options]) {
                callback = speed;
                speed = options;
                options = {};
            }
            if ($.isFunction(speed)) {
                callback = speed;
                speed = null;
            }
            if (options) $.extend(effect, options);
            speed = speed || options.duration;
            effect.duration = $.fx.off ? 0 : "number" === typeof speed ? speed : speed in $.fx.speeds ? $.fx.speeds[speed] : $.fx.speeds._default;
            effect.complete = callback || options.complete;
            return effect;
        }
        function standardAnimationOption(option) {
            if (!option || "number" === typeof option || $.fx.speeds[option]) return true;
            if ("string" === typeof option && !$.effects.effect[option]) return true;
            if ($.isFunction(option)) return true;
            if ("object" === typeof option && !option.effect) return true;
            return false;
        }
        $.fn.extend({
            "effect": function() {
                var args = _normalizeArguments.apply(this, arguments), mode = args.mode, queue = args.queue, effectMethod = $.effects.effect[args.effect];
                if ($.fx.off || !effectMethod) if (mode) return this[mode](args.duration, args.complete); else return this.each(function() {
                    if (args.complete) args.complete.call(this);
                });
                function run(next) {
                    var elem = $(this), complete = args.complete, mode = args.mode;
                    function done() {
                        if ($.isFunction(complete)) complete.call(elem[0]);
                        if ($.isFunction(next)) next();
                    }
                    if (elem.is(":hidden") ? "hide" === mode : "show" === mode) {
                        elem[mode]();
                        done();
                    } else effectMethod.call(elem[0], args, done);
                }
                return false === queue ? this.each(run) : this.queue(queue || "fx", run);
            },
            "show": function(orig) {
                return function(option) {
                    if (standardAnimationOption(option)) return orig.apply(this, arguments); else {
                        var args = _normalizeArguments.apply(this, arguments);
                        args.mode = "show";
                        return this.effect.call(this, args);
                    }
                };
            }($.fn.show),
            "hide": function(orig) {
                return function(option) {
                    if (standardAnimationOption(option)) return orig.apply(this, arguments); else {
                        var args = _normalizeArguments.apply(this, arguments);
                        args.mode = "hide";
                        return this.effect.call(this, args);
                    }
                };
            }($.fn.hide),
            "toggle": function(orig) {
                return function(option) {
                    if (standardAnimationOption(option) || "boolean" === typeof option) return orig.apply(this, arguments); else {
                        var args = _normalizeArguments.apply(this, arguments);
                        args.mode = "toggle";
                        return this.effect.call(this, args);
                    }
                };
            }($.fn.toggle),
            "cssUnit": function(key) {
                var style = this.css(key), val = [];
                $.each([ "em", "px", "%", "pt" ], function(i, unit) {
                    if (style.indexOf(unit) > 0) val = [ parseFloat(style), unit ];
                });
                return val;
            }
        });
    }();
    !function() {
        var baseEasings = {};
        $.each([ "Quad", "Cubic", "Quart", "Quint", "Expo" ], function(i, name) {
            baseEasings[name] = function(p) {
                return Math.pow(p, i + 2);
            };
        });
        $.extend(baseEasings, {
            "Sine": function(p) {
                return 1 - Math.cos(p * Math.PI / 2);
            },
            "Circ": function(p) {
                return 1 - Math.sqrt(1 - p * p);
            },
            "Elastic": function(p) {
                return 0 === p || 1 === p ? p : -Math.pow(2, 8 * (p - 1)) * Math.sin((80 * (p - 1) - 7.5) * Math.PI / 15);
            },
            "Back": function(p) {
                return p * p * (3 * p - 2);
            },
            "Bounce": function(p) {
                var pow2, bounce = 4;
                while (p < ((pow2 = Math.pow(2, --bounce)) - 1) / 11) ;
                return 1 / Math.pow(4, 3 - bounce) - 7.5625 * Math.pow((3 * pow2 - 2) / 22 - p, 2);
            }
        });
        $.each(baseEasings, function(name, easeIn) {
            $.easing["easeIn" + name] = easeIn;
            $.easing["easeOut" + name] = function(p) {
                return 1 - easeIn(1 - p);
            };
            $.easing["easeInOut" + name] = function(p) {
                return p < .5 ? easeIn(2 * p) / 2 : 1 - easeIn(p * -2 + 2) / 2;
            };
        });
    }();
}(jQuery);

!function($, undefined) {
    var uuid = 0, runiqueId = /^ui-id-\d+$/;
    $.ui = $.ui || {};
    $.extend($.ui, {
        "version": "@VERSION",
        "keyCode": {
            "BACKSPACE": 8,
            "COMMA": 188,
            "DELETE": 46,
            "DOWN": 40,
            "END": 35,
            "ENTER": 13,
            "ESCAPE": 27,
            "HOME": 36,
            "LEFT": 37,
            "NUMPAD_ADD": 107,
            "NUMPAD_DECIMAL": 110,
            "NUMPAD_DIVIDE": 111,
            "NUMPAD_ENTER": 108,
            "NUMPAD_MULTIPLY": 106,
            "NUMPAD_SUBTRACT": 109,
            "PAGE_DOWN": 34,
            "PAGE_UP": 33,
            "PERIOD": 190,
            "RIGHT": 39,
            "SPACE": 32,
            "TAB": 9,
            "UP": 38
        }
    });
    $.fn.extend({
        "focus": function(orig) {
            return function(delay, fn) {
                return "number" === typeof delay ? this.each(function() {
                    var elem = this;
                    setTimeout(function() {
                        $(elem).focus();
                        if (fn) fn.call(elem);
                    }, delay);
                }) : orig.apply(this, arguments);
            };
        }($.fn.focus),
        "scrollParent": function() {
            var scrollParent;
            if ($.ui.ie && /(static|relative)/.test(this.css("position")) || /absolute/.test(this.css("position"))) scrollParent = this.parents().filter(function() {
                return /(relative|absolute|fixed)/.test($.css(this, "position")) && /(auto|scroll)/.test($.css(this, "overflow") + $.css(this, "overflow-y") + $.css(this, "overflow-x"));
            }).eq(0); else scrollParent = this.parents().filter(function() {
                return /(auto|scroll)/.test($.css(this, "overflow") + $.css(this, "overflow-y") + $.css(this, "overflow-x"));
            }).eq(0);
            return /fixed/.test(this.css("position")) || !scrollParent.length ? $(document) : scrollParent;
        },
        "zIndex": function(zIndex) {
            if (zIndex !== undefined) return this.css("zIndex", zIndex);
            if (this.length) {
                var elem = $(this[0]), position, value;
                while (elem.length && elem[0] !== document) {
                    position = elem.css("position");
                    if ("absolute" === position || "relative" === position || "fixed" === position) {
                        value = parseInt(elem.css("zIndex"), 10);
                        if (!isNaN(value) && 0 !== value) return value;
                    }
                    elem = elem.parent();
                }
            }
            return 0;
        },
        "uniqueId": function() {
            return this.each(function() {
                if (!this.id) this.id = "ui-id-" + ++uuid;
            });
        },
        "removeUniqueId": function() {
            return this.each(function() {
                if (runiqueId.test(this.id)) $(this).removeAttr("id");
            });
        }
    });
    function focusable(element, isTabIndexNotNaN) {
        var map, mapName, img, nodeName = element.nodeName.toLowerCase();
        if ("area" === nodeName) {
            map = element.parentNode;
            mapName = map.name;
            if (!element.href || !mapName || "map" !== map.nodeName.toLowerCase()) return false;
            img = $("img[usemap=#" + mapName + "]")[0];
            return !!img && visible(img);
        }
        return (/input|select|textarea|button|object/.test(nodeName) ? !element.disabled : "a" === nodeName ? element.href || isTabIndexNotNaN : isTabIndexNotNaN) && visible(element);
    }
    function visible(element) {
        return $.expr.filters.visible(element) && !$(element).parents().addBack().filter(function() {
            return "hidden" === $.css(this, "visibility");
        }).length;
    }
    $.extend($.expr[":"], {
        "data": $.expr.createPseudo ? $.expr.createPseudo(function(dataName) {
            return function(elem) {
                return !!$.data(elem, dataName);
            };
        }) : function(elem, i, match) {
            return !!$.data(elem, match[3]);
        },
        "focusable": function(element) {
            return focusable(element, !isNaN($.attr(element, "tabindex")));
        },
        "tabbable": function(element) {
            var tabIndex = $.attr(element, "tabindex"), isTabIndexNaN = isNaN(tabIndex);
            return (isTabIndexNaN || tabIndex >= 0) && focusable(element, !isTabIndexNaN);
        }
    });
    if (!$("<a>").outerWidth(1).jquery) $.each([ "Width", "Height" ], function(i, name) {
        var side = "Width" === name ? [ "Left", "Right" ] : [ "Top", "Bottom" ], type = name.toLowerCase(), orig = {
            "innerWidth": $.fn.innerWidth,
            "innerHeight": $.fn.innerHeight,
            "outerWidth": $.fn.outerWidth,
            "outerHeight": $.fn.outerHeight
        };
        function reduce(elem, size, border, margin) {
            $.each(side, function() {
                size -= parseFloat($.css(elem, "padding" + this)) || 0;
                if (border) size -= parseFloat($.css(elem, "border" + this + "Width")) || 0;
                if (margin) size -= parseFloat($.css(elem, "margin" + this)) || 0;
            });
            return size;
        }
        $.fn["inner" + name] = function(size) {
            if (size === undefined) return orig["inner" + name].call(this);
            return this.each(function() {
                $(this).css(type, reduce(this, size) + "px");
            });
        };
        $.fn["outer" + name] = function(size, margin) {
            if ("number" !== typeof size) return orig["outer" + name].call(this, size);
            return this.each(function() {
                $(this).css(type, reduce(this, size, true, margin) + "px");
            });
        };
    });
    if (!$.fn.addBack) $.fn.addBack = function(selector) {
        return this.add(null == selector ? this.prevObject : this.prevObject.filter(selector));
    };
    if ($("<a>").data("a-b", "a").removeData("a-b").data("a-b")) $.fn.removeData = function(removeData) {
        return function(key) {
            if (arguments.length) return removeData.call(this, $.camelCase(key)); else return removeData.call(this);
        };
    }($.fn.removeData);
    $.ui.ie = !!/msie [\w.]+/.exec(navigator.userAgent.toLowerCase());
    $.support.selectstart = "onselectstart" in document.createElement("div");
    $.fn.extend({
        "disableSelection": function() {
            return this.bind(($.support.selectstart ? "selectstart" : "mousedown") + ".ui-disableSelection", function(event) {
                event.preventDefault();
            });
        },
        "enableSelection": function() {
            return this.unbind(".ui-disableSelection");
        }
    });
    $.extend($.ui, {
        "plugin": {
            "add": function(module, option, set) {
                var i, proto = $.ui[module].prototype;
                for (i in set) {
                    proto.plugins[i] = proto.plugins[i] || [];
                    proto.plugins[i].push([ option, set[i] ]);
                }
            },
            "call": function(instance, name, args) {
                var i, set = instance.plugins[name];
                if (!set || !instance.element[0].parentNode || 11 === instance.element[0].parentNode.nodeType) return;
                for (i = 0; i < set.length; i++) if (instance.options[set[i][0]]) set[i][1].apply(instance.element, args);
            }
        },
        "hasScroll": function(el, a) {
            if ("hidden" === $(el).css("overflow")) return false;
            var scroll = a && "left" === a ? "scrollLeft" : "scrollTop", has = false;
            if (el[scroll] > 0) return true;
            el[scroll] = 1;
            has = el[scroll] > 0;
            el[scroll] = 0;
            return has;
        }
    });
}(jQuery);

!function($, undefined) {
    var uuid = 0, slice = Array.prototype.slice, _cleanData = $.cleanData;
    $.cleanData = function(elems) {
        for (var i = 0, elem; null != (elem = elems[i]); i++) try {
            $(elem).triggerHandler("remove");
        } catch (e) {}
        _cleanData(elems);
    };
    $.widget = function(name, base, prototype) {
        var fullName, existingConstructor, constructor, basePrototype, proxiedPrototype = {}, namespace = name.split(".")[0];
        name = name.split(".")[1];
        fullName = namespace + "-" + name;
        if (!prototype) {
            prototype = base;
            base = $.Widget;
        }
        $.expr[":"][fullName.toLowerCase()] = function(elem) {
            return !!$.data(elem, fullName);
        };
        $[namespace] = $[namespace] || {};
        existingConstructor = $[namespace][name];
        constructor = $[namespace][name] = function(options, element) {
            if (!this._createWidget) return new constructor(options, element);
            if (arguments.length) this._createWidget(options, element);
        };
        $.extend(constructor, existingConstructor, {
            "version": prototype.version,
            "_proto": $.extend({}, prototype),
            "_childConstructors": []
        });
        basePrototype = new base();
        basePrototype.options = $.widget.extend({}, basePrototype.options);
        $.each(prototype, function(prop, value) {
            if (!$.isFunction(value)) {
                proxiedPrototype[prop] = value;
                return;
            }
            proxiedPrototype[prop] = function() {
                var _super = function() {
                    return base.prototype[prop].apply(this, arguments);
                }, _superApply = function(args) {
                    return base.prototype[prop].apply(this, args);
                };
                return function() {
                    var __super = this._super, __superApply = this._superApply, returnValue;
                    this._super = _super;
                    this._superApply = _superApply;
                    returnValue = value.apply(this, arguments);
                    this._super = __super;
                    this._superApply = __superApply;
                    return returnValue;
                };
            }();
        });
        constructor.prototype = $.widget.extend(basePrototype, {
            "widgetEventPrefix": existingConstructor ? basePrototype.widgetEventPrefix || name : name
        }, proxiedPrototype, {
            "constructor": constructor,
            "namespace": namespace,
            "widgetName": name,
            "widgetFullName": fullName
        });
        if (existingConstructor) {
            $.each(existingConstructor._childConstructors, function(i, child) {
                var childPrototype = child.prototype;
                $.widget(childPrototype.namespace + "." + childPrototype.widgetName, constructor, child._proto);
            });
            delete existingConstructor._childConstructors;
        } else base._childConstructors.push(constructor);
        $.widget.bridge(name, constructor);
    };
    $.widget.extend = function(target) {
        var input = slice.call(arguments, 1), inputIndex = 0, inputLength = input.length, key, value;
        for (;inputIndex < inputLength; inputIndex++) for (key in input[inputIndex]) {
            value = input[inputIndex][key];
            if (input[inputIndex].hasOwnProperty(key) && value !== undefined) if ($.isPlainObject(value)) target[key] = $.isPlainObject(target[key]) ? $.widget.extend({}, target[key], value) : $.widget.extend({}, value); else target[key] = value;
        }
        return target;
    };
    $.widget.bridge = function(name, object) {
        var fullName = object.prototype.widgetFullName || name;
        $.fn[name] = function(options) {
            var isMethodCall = "string" === typeof options, args = slice.call(arguments, 1), returnValue = this;
            options = !isMethodCall && args.length ? $.widget.extend.apply(null, [ options ].concat(args)) : options;
            if (isMethodCall) this.each(function() {
                var methodValue, instance = $.data(this, fullName);
                if (!instance) return $.error("cannot call methods on " + name + " prior to initialization; " + "attempted to call method '" + options + "'");
                if (!$.isFunction(instance[options]) || "_" === options.charAt(0)) return $.error("no such method '" + options + "' for " + name + " widget instance");
                methodValue = instance[options].apply(instance, args);
                if (methodValue !== instance && methodValue !== undefined) {
                    returnValue = methodValue && methodValue.jquery ? returnValue.pushStack(methodValue.get()) : methodValue;
                    return false;
                }
            }); else this.each(function() {
                var instance = $.data(this, fullName);
                if (instance) instance.option(options || {})._init(); else $.data(this, fullName, new object(options, this));
            });
            return returnValue;
        };
    };
    $.Widget = function() {};
    $.Widget._childConstructors = [];
    $.Widget.prototype = {
        "widgetName": "widget",
        "widgetEventPrefix": "",
        "defaultElement": "<div>",
        "options": {
            "disabled": false,
            "create": null
        },
        "_createWidget": function(options, element) {
            element = $(element || this.defaultElement || this)[0];
            this.element = $(element);
            this.uuid = uuid++;
            this.eventNamespace = "." + this.widgetName + this.uuid;
            this.options = $.widget.extend({}, this.options, this._getCreateOptions(), options);
            this.bindings = $();
            this.hoverable = $();
            this.focusable = $();
            if (element !== this) {
                $.data(element, this.widgetFullName, this);
                this._on(true, this.element, {
                    "remove": function(event) {
                        if (event.target === element) this.destroy();
                    }
                });
                this.document = $(element.style ? element.ownerDocument : element.document || element);
                this.window = $(this.document[0].defaultView || this.document[0].parentWindow);
            }
            this._create();
            this._trigger("create", null, this._getCreateEventData());
            this._init();
        },
        "_getCreateOptions": $.noop,
        "_getCreateEventData": $.noop,
        "_create": $.noop,
        "_init": $.noop,
        "destroy": function() {
            this._destroy();
            this.element.unbind(this.eventNamespace).removeData(this.widgetName).removeData(this.widgetFullName).removeData($.camelCase(this.widgetFullName));
            this.widget().unbind(this.eventNamespace).removeAttr("aria-disabled").removeClass(this.widgetFullName + "-disabled " + "ui-state-disabled");
            this.bindings.unbind(this.eventNamespace);
            this.hoverable.removeClass("ui-state-hover");
            this.focusable.removeClass("ui-state-focus");
        },
        "_destroy": $.noop,
        "widget": function() {
            return this.element;
        },
        "option": function(key, value) {
            var options = key, parts, curOption, i;
            if (0 === arguments.length) return $.widget.extend({}, this.options);
            if ("string" === typeof key) {
                options = {};
                parts = key.split(".");
                key = parts.shift();
                if (parts.length) {
                    curOption = options[key] = $.widget.extend({}, this.options[key]);
                    for (i = 0; i < parts.length - 1; i++) {
                        curOption[parts[i]] = curOption[parts[i]] || {};
                        curOption = curOption[parts[i]];
                    }
                    key = parts.pop();
                    if (1 === arguments.length) return curOption[key] === undefined ? null : curOption[key];
                    curOption[key] = value;
                } else {
                    if (1 === arguments.length) return this.options[key] === undefined ? null : this.options[key];
                    options[key] = value;
                }
            }
            this._setOptions(options);
            return this;
        },
        "_setOptions": function(options) {
            var key;
            for (key in options) this._setOption(key, options[key]);
            return this;
        },
        "_setOption": function(key, value) {
            this.options[key] = value;
            if ("disabled" === key) {
                this.widget().toggleClass(this.widgetFullName + "-disabled ui-state-disabled", !!value).attr("aria-disabled", value);
                this.hoverable.removeClass("ui-state-hover");
                this.focusable.removeClass("ui-state-focus");
            }
            return this;
        },
        "enable": function() {
            return this._setOption("disabled", false);
        },
        "disable": function() {
            return this._setOption("disabled", true);
        },
        "_on": function(suppressDisabledCheck, element, handlers) {
            var delegateElement, instance = this;
            if ("boolean" !== typeof suppressDisabledCheck) {
                handlers = element;
                element = suppressDisabledCheck;
                suppressDisabledCheck = false;
            }
            if (!handlers) {
                handlers = element;
                element = this.element;
                delegateElement = this.widget();
            } else {
                element = delegateElement = $(element);
                this.bindings = this.bindings.add(element);
            }
            $.each(handlers, function(event, handler) {
                function handlerProxy() {
                    if (!suppressDisabledCheck && (true === instance.options.disabled || $(this).hasClass("ui-state-disabled"))) return;
                    return ("string" === typeof handler ? instance[handler] : handler).apply(instance, arguments);
                }
                if ("string" !== typeof handler) handlerProxy.guid = handler.guid = handler.guid || handlerProxy.guid || $.guid++;
                var match = event.match(/^(\w+)\s*(.*)$/), eventName = match[1] + instance.eventNamespace, selector = match[2];
                if (selector) delegateElement.delegate(selector, eventName, handlerProxy); else element.bind(eventName, handlerProxy);
            });
        },
        "_off": function(element, eventName) {
            eventName = (eventName || "").split(" ").join(this.eventNamespace + " ") + this.eventNamespace;
            element.unbind(eventName).undelegate(eventName);
        },
        "_delay": function(handler, delay) {
            function handlerProxy() {
                return ("string" === typeof handler ? instance[handler] : handler).apply(instance, arguments);
            }
            var instance = this;
            return setTimeout(handlerProxy, delay || 0);
        },
        "_hoverable": function(element) {
            this.hoverable = this.hoverable.add(element);
            this._on(element, {
                "mouseenter": function(event) {
                    $(event.currentTarget).addClass("ui-state-hover");
                },
                "mouseleave": function(event) {
                    $(event.currentTarget).removeClass("ui-state-hover");
                }
            });
        },
        "_focusable": function(element) {
            this.focusable = this.focusable.add(element);
            this._on(element, {
                "focusin": function(event) {
                    $(event.currentTarget).addClass("ui-state-focus");
                },
                "focusout": function(event) {
                    $(event.currentTarget).removeClass("ui-state-focus");
                }
            });
        },
        "_trigger": function(type, event, data) {
            var prop, orig, callback = this.options[type];
            data = data || {};
            event = $.Event(event);
            event.type = (type === this.widgetEventPrefix ? type : this.widgetEventPrefix + type).toLowerCase();
            event.target = this.element[0];
            orig = event.originalEvent;
            if (orig) for (prop in orig) if (!(prop in event)) event[prop] = orig[prop];
            this.element.trigger(event, data);
            return !($.isFunction(callback) && false === callback.apply(this.element[0], [ event ].concat(data)) || event.isDefaultPrevented());
        }
    };
    $.each({
        "show": "fadeIn",
        "hide": "fadeOut"
    }, function(method, defaultEffect) {
        $.Widget.prototype["_" + method] = function(element, options, callback) {
            if ("string" === typeof options) options = {
                "effect": options
            };
            var hasOptions, effectName = !options ? method : true === options || "number" === typeof options ? defaultEffect : options.effect || defaultEffect;
            options = options || {};
            if ("number" === typeof options) options = {
                "duration": options
            };
            hasOptions = !$.isEmptyObject(options);
            options.complete = callback;
            if (options.delay) element.delay(options.delay);
            if (hasOptions && $.effects && $.effects.effect[effectName]) element[method](options); else if (effectName !== method && element[effectName]) element[effectName](options.duration, options.easing, callback); else element.queue(function(next) {
                $(this)[method]();
                if (callback) callback.call(element[0]);
                next();
            });
        };
    });
}(jQuery);

!function($, undefined) {
    $.effects.effect.highlight = function(o, done) {
        var elem = $(this), props = [ "backgroundImage", "backgroundColor", "opacity" ], mode = $.effects.setMode(elem, o.mode || "show"), animation = {
            "backgroundColor": elem.css("backgroundColor")
        };
        if ("hide" === mode) animation.opacity = 0;
        $.effects.save(elem, props);
        elem.show().css({
            "backgroundImage": "none",
            "backgroundColor": o.color || "#ffff99"
        }).animate(animation, {
            "queue": false,
            "duration": o.duration,
            "easing": o.easing,
            "complete": function() {
                if ("hide" === mode) elem.hide();
                $.effects.restore(elem, props);
                done();
            }
        });
    };
}(jQuery);

!function($, undefined) {
    var mouseHandled = false;
    $(document).mouseup(function() {
        mouseHandled = false;
    });
    $.widget("ui.mouse", {
        "version": "@VERSION",
        "options": {
            "cancel": "input,textarea,button,select,option",
            "distance": 1,
            "delay": 0
        },
        "_mouseInit": function() {
            var that = this;
            this.element.bind("mousedown." + this.widgetName, function(event) {
                return that._mouseDown(event);
            }).bind("click." + this.widgetName, function(event) {
                if (true === $.data(event.target, that.widgetName + ".preventClickEvent")) {
                    $.removeData(event.target, that.widgetName + ".preventClickEvent");
                    event.stopImmediatePropagation();
                    return false;
                }
            });
            this.started = false;
        },
        "_mouseDestroy": function() {
            this.element.unbind("." + this.widgetName);
            if (this._mouseMoveDelegate) $(document).unbind("mousemove." + this.widgetName, this._mouseMoveDelegate).unbind("mouseup." + this.widgetName, this._mouseUpDelegate);
        },
        "_mouseDown": function(event) {
            if (mouseHandled) return;
            this._mouseStarted && this._mouseUp(event);
            this._mouseDownEvent = event;
            var that = this, btnIsLeft = 1 === event.which, elIsCancel = "string" === typeof this.options.cancel && event.target.nodeName ? $(event.target).closest(this.options.cancel).length : false;
            if (!btnIsLeft || elIsCancel || !this._mouseCapture(event)) return true;
            this.mouseDelayMet = !this.options.delay;
            if (!this.mouseDelayMet) this._mouseDelayTimer = setTimeout(function() {
                that.mouseDelayMet = true;
            }, this.options.delay);
            if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
                this._mouseStarted = false !== this._mouseStart(event);
                if (!this._mouseStarted) {
                    event.preventDefault();
                    return true;
                }
            }
            if (true === $.data(event.target, this.widgetName + ".preventClickEvent")) $.removeData(event.target, this.widgetName + ".preventClickEvent");
            this._mouseMoveDelegate = function(event) {
                return that._mouseMove(event);
            };
            this._mouseUpDelegate = function(event) {
                return that._mouseUp(event);
            };
            $(document).bind("mousemove." + this.widgetName, this._mouseMoveDelegate).bind("mouseup." + this.widgetName, this._mouseUpDelegate);
            event.preventDefault();
            mouseHandled = true;
            return true;
        },
        "_mouseMove": function(event) {
            if ($.ui.ie && (!document.documentMode || document.documentMode < 9) && !event.button) return this._mouseUp(event);
            if (this._mouseStarted) {
                this._mouseDrag(event);
                return event.preventDefault();
            }
            if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
                this._mouseStarted = false !== this._mouseStart(this._mouseDownEvent, event);
                this._mouseStarted ? this._mouseDrag(event) : this._mouseUp(event);
            }
            return !this._mouseStarted;
        },
        "_mouseUp": function(event) {
            $(document).unbind("mousemove." + this.widgetName, this._mouseMoveDelegate).unbind("mouseup." + this.widgetName, this._mouseUpDelegate);
            if (this._mouseStarted) {
                this._mouseStarted = false;
                if (event.target === this._mouseDownEvent.target) $.data(event.target, this.widgetName + ".preventClickEvent", true);
                this._mouseStop(event);
            }
            return false;
        },
        "_mouseDistanceMet": function(event) {
            return Math.max(Math.abs(this._mouseDownEvent.pageX - event.pageX), Math.abs(this._mouseDownEvent.pageY - event.pageY)) >= this.options.distance;
        },
        "_mouseDelayMet": function() {
            return this.mouseDelayMet;
        },
        "_mouseStart": function() {},
        "_mouseDrag": function() {},
        "_mouseStop": function() {},
        "_mouseCapture": function() {
            return true;
        }
    });
}(jQuery);

!function($, undefined) {
    $.effects.effect.transfer = function(o, done) {
        var elem = $(this), target = $(o.to), targetFixed = "fixed" === target.css("position"), body = $("body"), fixTop = targetFixed ? body.scrollTop() : 0, fixLeft = targetFixed ? body.scrollLeft() : 0, endPosition = target.offset(), animation = {
            "top": endPosition.top - fixTop,
            "left": endPosition.left - fixLeft,
            "height": target.innerHeight(),
            "width": target.innerWidth()
        }, startPosition = elem.offset(), transfer = $("<div class='ui-effects-transfer'></div>").appendTo(document.body).addClass(o.className).css({
            "top": startPosition.top - fixTop,
            "left": startPosition.left - fixLeft,
            "height": elem.innerHeight(),
            "width": elem.innerWidth(),
            "position": targetFixed ? "fixed" : "absolute"
        }).animate(animation, o.duration, o.easing, function() {
            transfer.remove();
            done();
        });
    };
}(jQuery);

!function($, undefined) {
    var lastActive, baseClasses = "ui-button ui-widget ui-state-default ui-corner-all", typeClasses = "ui-button-icons-only ui-button-icon-only ui-button-text-icons ui-button-text-icon-primary ui-button-text-icon-secondary ui-button-text-only", formResetHandler = function() {
        var form = $(this);
        setTimeout(function() {
            form.find(":ui-button").button("refresh");
        }, 1);
    }, radioGroup = function(radio) {
        var name = radio.name, form = radio.form, radios = $([]);
        if (name) {
            name = name.replace(/'/g, "\\'");
            if (form) radios = $(form).find("[name='" + name + "']"); else radios = $("[name='" + name + "']", radio.ownerDocument).filter(function() {
                return !this.form;
            });
        }
        return radios;
    };
    $.widget("ui.button", {
        "version": "@VERSION",
        "defaultElement": "<button>",
        "options": {
            "disabled": null,
            "text": true,
            "label": null,
            "icons": {
                "primary": null,
                "secondary": null
            }
        },
        "_create": function() {
            this.element.closest("form").unbind("reset" + this.eventNamespace).bind("reset" + this.eventNamespace, formResetHandler);
            if ("boolean" !== typeof this.options.disabled) this.options.disabled = !!this.element.prop("disabled"); else this.element.prop("disabled", this.options.disabled);
            this._determineButtonType();
            this.hasTitle = !!this.buttonElement.attr("title");
            var that = this, options = this.options, toggleButton = "checkbox" === this.type || "radio" === this.type, activeClass = !toggleButton ? "ui-state-active" : "";
            if (null === options.label) options.label = "input" === this.type ? this.buttonElement.val() : this.buttonElement.html();
            this._hoverable(this.buttonElement);
            this.buttonElement.addClass(baseClasses).attr("role", "button").bind("mouseenter" + this.eventNamespace, function() {
                if (options.disabled) return;
                if (this === lastActive) $(this).addClass("ui-state-active");
            }).bind("mouseleave" + this.eventNamespace, function() {
                if (options.disabled) return;
                $(this).removeClass(activeClass);
            }).bind("click" + this.eventNamespace, function(event) {
                if (options.disabled) {
                    event.preventDefault();
                    event.stopImmediatePropagation();
                }
            });
            this._on({
                "focus": function() {
                    this.buttonElement.addClass("ui-state-focus");
                },
                "blur": function() {
                    this.buttonElement.removeClass("ui-state-focus");
                }
            });
            if (toggleButton) this.element.bind("change" + this.eventNamespace, function() {
                that.refresh();
            });
            if ("checkbox" === this.type) this.buttonElement.bind("click" + this.eventNamespace, function() {
                if (options.disabled) return false;
            }); else if ("radio" === this.type) this.buttonElement.bind("click" + this.eventNamespace, function() {
                if (options.disabled) return false;
                $(this).addClass("ui-state-active");
                that.buttonElement.attr("aria-pressed", "true");
                var radio = that.element[0];
                radioGroup(radio).not(radio).map(function() {
                    return $(this).button("widget")[0];
                }).removeClass("ui-state-active").attr("aria-pressed", "false");
            }); else {
                this.buttonElement.bind("mousedown" + this.eventNamespace, function() {
                    if (options.disabled) return false;
                    $(this).addClass("ui-state-active");
                    lastActive = this;
                    that.document.one("mouseup", function() {
                        lastActive = null;
                    });
                }).bind("mouseup" + this.eventNamespace, function() {
                    if (options.disabled) return false;
                    $(this).removeClass("ui-state-active");
                }).bind("keydown" + this.eventNamespace, function(event) {
                    if (options.disabled) return false;
                    if (event.keyCode === $.ui.keyCode.SPACE || event.keyCode === $.ui.keyCode.ENTER) $(this).addClass("ui-state-active");
                }).bind("keyup" + this.eventNamespace + " blur" + this.eventNamespace, function() {
                    $(this).removeClass("ui-state-active");
                });
                if (this.buttonElement.is("a")) this.buttonElement.keyup(function(event) {
                    if (event.keyCode === $.ui.keyCode.SPACE) $(this).click();
                });
            }
            this._setOption("disabled", options.disabled);
            this._resetButton();
        },
        "_determineButtonType": function() {
            var ancestor, labelSelector, checked;
            if (this.element.is("[type=checkbox]")) this.type = "checkbox"; else if (this.element.is("[type=radio]")) this.type = "radio"; else if (this.element.is("input")) this.type = "input"; else this.type = "button";
            if ("checkbox" === this.type || "radio" === this.type) {
                ancestor = this.element.parents().last();
                labelSelector = "label[for='" + this.element.attr("id") + "']";
                this.buttonElement = ancestor.find(labelSelector);
                if (!this.buttonElement.length) {
                    ancestor = ancestor.length ? ancestor.siblings() : this.element.siblings();
                    this.buttonElement = ancestor.filter(labelSelector);
                    if (!this.buttonElement.length) this.buttonElement = ancestor.find(labelSelector);
                }
                this.element.addClass("ui-helper-hidden-accessible");
                checked = this.element.is(":checked");
                if (checked) this.buttonElement.addClass("ui-state-active");
                this.buttonElement.prop("aria-pressed", checked);
            } else this.buttonElement = this.element;
        },
        "widget": function() {
            return this.buttonElement;
        },
        "_destroy": function() {
            this.element.removeClass("ui-helper-hidden-accessible");
            this.buttonElement.removeClass(baseClasses + " ui-state-active " + typeClasses).removeAttr("role").removeAttr("aria-pressed").html(this.buttonElement.find(".ui-button-text").html());
            if (!this.hasTitle) this.buttonElement.removeAttr("title");
        },
        "_setOption": function(key, value) {
            this._super(key, value);
            if ("disabled" === key) {
                this.element.prop("disabled", !!value);
                if (value) this.buttonElement.removeClass("ui-state-focus");
                return;
            }
            this._resetButton();
        },
        "refresh": function() {
            var isDisabled = this.element.is("input, button") ? this.element.is(":disabled") : this.element.hasClass("ui-button-disabled");
            if (isDisabled !== this.options.disabled) this._setOption("disabled", isDisabled);
            if ("radio" === this.type) radioGroup(this.element[0]).each(function() {
                if ($(this).is(":checked")) $(this).button("widget").addClass("ui-state-active").attr("aria-pressed", "true"); else $(this).button("widget").removeClass("ui-state-active").attr("aria-pressed", "false");
            }); else if ("checkbox" === this.type) if (this.element.is(":checked")) this.buttonElement.addClass("ui-state-active").attr("aria-pressed", "true"); else this.buttonElement.removeClass("ui-state-active").attr("aria-pressed", "false");
        },
        "_resetButton": function() {
            if ("input" === this.type) {
                if (this.options.label) this.element.val(this.options.label);
                return;
            }
            var buttonElement = this.buttonElement.removeClass(typeClasses), buttonText = $("<span></span>", this.document[0]).addClass("ui-button-text").html(this.options.label).appendTo(buttonElement.empty()).text(), icons = this.options.icons, multipleIcons = icons.primary && icons.secondary, buttonClasses = [];
            if (icons.primary || icons.secondary) {
                if (this.options.text) buttonClasses.push("ui-button-text-icon" + (multipleIcons ? "s" : icons.primary ? "-primary" : "-secondary"));
                if (icons.primary) buttonElement.prepend("<span class='ui-button-icon-primary ui-icon " + icons.primary + "'></span>");
                if (icons.secondary) buttonElement.append("<span class='ui-button-icon-secondary ui-icon " + icons.secondary + "'></span>");
                if (!this.options.text) {
                    buttonClasses.push(multipleIcons ? "ui-button-icons-only" : "ui-button-icon-only");
                    if (!this.hasTitle) buttonElement.attr("title", $.trim(buttonText));
                }
            } else buttonClasses.push("ui-button-text-only");
            buttonElement.addClass(buttonClasses.join(" "));
        }
    });
    $.widget("ui.buttonset", {
        "version": "@VERSION",
        "options": {
            "items": "button, input[type=button], input[type=submit], input[type=reset], input[type=checkbox], input[type=radio], a, :data(ui-button)"
        },
        "_create": function() {
            this.element.addClass("ui-buttonset");
        },
        "_init": function() {
            this.refresh();
        },
        "_setOption": function(key, value) {
            if ("disabled" === key) this.buttons.button("option", key, value);
            this._super(key, value);
        },
        "refresh": function() {
            var rtl = "rtl" === this.element.css("direction");
            this.buttons = this.element.find(this.options.items).filter(":ui-button").button("refresh").end().not(":ui-button").button().end().map(function() {
                return $(this).button("widget")[0];
            }).removeClass("ui-corner-all ui-corner-left ui-corner-right").filter(":first").addClass(rtl ? "ui-corner-right" : "ui-corner-left").end().filter(":last").addClass(rtl ? "ui-corner-left" : "ui-corner-right").end().end();
        },
        "_destroy": function() {
            this.element.removeClass("ui-buttonset");
            this.buttons.map(function() {
                return $(this).button("widget")[0];
            }).removeClass("ui-corner-left ui-corner-right").end().button("destroy");
        }
    });
}(jQuery);

!function($, undefined) {
    var sizeRelatedOptions = {
        "buttons": true,
        "height": true,
        "maxHeight": true,
        "maxWidth": true,
        "minHeight": true,
        "minWidth": true,
        "width": true
    }, resizableRelatedOptions = {
        "maxHeight": true,
        "maxWidth": true,
        "minHeight": true,
        "minWidth": true
    };
    $.widget("ui.dialog", {
        "version": "@VERSION",
        "options": {
            "appendTo": "body",
            "autoOpen": true,
            "buttons": [],
            "closeOnEscape": true,
            "closeText": "close",
            "dialogClass": "",
            "draggable": true,
            "hide": null,
            "height": "auto",
            "maxHeight": null,
            "maxWidth": null,
            "minHeight": 150,
            "minWidth": 150,
            "modal": false,
            "position": {
                "my": "center",
                "at": "center",
                "of": window,
                "collision": "fit",
                "using": function(pos) {
                    var topOffset = $(this).css(pos).offset().top;
                    if (topOffset < 0) $(this).css("top", pos.top - topOffset);
                }
            },
            "resizable": true,
            "show": null,
            "title": null,
            "width": 300,
            "beforeClose": null,
            "close": null,
            "drag": null,
            "dragStart": null,
            "dragStop": null,
            "focus": null,
            "open": null,
            "resize": null,
            "resizeStart": null,
            "resizeStop": null
        },
        "_create": function() {
            this.originalCss = {
                "display": this.element[0].style.display,
                "width": this.element[0].style.width,
                "minHeight": this.element[0].style.minHeight,
                "maxHeight": this.element[0].style.maxHeight,
                "height": this.element[0].style.height
            };
            this.originalPosition = {
                "parent": this.element.parent(),
                "index": this.element.parent().children().index(this.element)
            };
            this.originalTitle = this.element.attr("title");
            this.options.title = this.options.title || this.originalTitle;
            this._createWrapper();
            this.element.show().removeAttr("title").addClass("ui-dialog-content ui-widget-content").appendTo(this.uiDialog);
            this._createTitlebar();
            this._createButtonPane();
            if (this.options.draggable && $.fn.draggable) this._makeDraggable();
            if (this.options.resizable && $.fn.resizable) this._makeResizable();
            this._isOpen = false;
        },
        "_init": function() {
            if (this.options.autoOpen) this.open();
        },
        "_appendTo": function() {
            var element = this.options.appendTo;
            if (element && (element.jquery || element.nodeType)) return $(element);
            return this.document.find(element || "body").eq(0);
        },
        "_destroy": function() {
            var next, originalPosition = this.originalPosition;
            this._destroyOverlay();
            this.element.removeUniqueId().removeClass("ui-dialog-content ui-widget-content").css(this.originalCss).detach();
            this.uiDialog.stop(true, true).remove();
            if (this.originalTitle) this.element.attr("title", this.originalTitle);
            next = originalPosition.parent.children().eq(originalPosition.index);
            if (next.length && next[0] !== this.element[0]) next.before(this.element); else originalPosition.parent.append(this.element);
        },
        "widget": function() {
            return this.uiDialog;
        },
        "disable": $.noop,
        "enable": $.noop,
        "close": function(event) {
            var activeElement, that = this;
            if (!this._isOpen || false === this._trigger("beforeClose", event)) return;
            this._isOpen = false;
            this._destroyOverlay();
            if (!this.opener.filter(":focusable").focus().length) try {
                activeElement = this.document[0].activeElement;
                if (activeElement && "body" !== activeElement.nodeName.toLowerCase()) $(activeElement).blur();
            } catch (error) {}
            this._hide(this.uiDialog, this.options.hide, function() {
                that._trigger("close", event);
            });
        },
        "isOpen": function() {
            return this._isOpen;
        },
        "moveToTop": function() {
            this._moveToTop();
        },
        "_moveToTop": function(event, silent) {
            var moved = !!this.uiDialog.nextAll(":visible").insertBefore(this.uiDialog).length;
            if (moved && !silent) this._trigger("focus", event);
            return moved;
        },
        "open": function() {
            var that = this;
            if (this._isOpen) {
                if (this._moveToTop()) this._focusTabbable();
                return;
            }
            this._isOpen = true;
            this.opener = $(this.document[0].activeElement);
            this._size();
            this._position();
            this._createOverlay();
            this._moveToTop(null, true);
            this._show(this.uiDialog, this.options.show, function() {
                that._focusTabbable();
                that._trigger("focus");
            });
            this._trigger("open");
        },
        "_focusTabbable": function() {
            var hasFocus = this.element.find("[autofocus]");
            if (!hasFocus.length) hasFocus = this.element.find(":tabbable");
            if (!hasFocus.length) hasFocus = this.uiDialogButtonPane.find(":tabbable");
            if (!hasFocus.length) hasFocus = this.uiDialogTitlebarClose.filter(":tabbable");
            if (!hasFocus.length) hasFocus = this.uiDialog;
            hasFocus.eq(0).focus();
        },
        "_keepFocus": function(event) {
            function checkFocus() {
                var activeElement = this.document[0].activeElement, isActive = this.uiDialog[0] === activeElement || $.contains(this.uiDialog[0], activeElement);
                if (!isActive) this._focusTabbable();
            }
            event.preventDefault();
            checkFocus.call(this);
            this._delay(checkFocus);
        },
        "_createWrapper": function() {
            this.uiDialog = $("<div>").addClass("ui-dialog ui-widget ui-widget-content ui-corner-all ui-front " + this.options.dialogClass).hide().attr({
                "tabIndex": -1,
                "role": "dialog"
            }).appendTo(this._appendTo());
            this._on(this.uiDialog, {
                "keydown": function(event) {
                    if (this.options.closeOnEscape && !event.isDefaultPrevented() && event.keyCode && event.keyCode === $.ui.keyCode.ESCAPE) {
                        event.preventDefault();
                        this.close(event);
                        return;
                    }
                    if (event.keyCode !== $.ui.keyCode.TAB) return;
                    var tabbables = this.uiDialog.find(":tabbable"), first = tabbables.filter(":first"), last = tabbables.filter(":last");
                    if ((event.target === last[0] || event.target === this.uiDialog[0]) && !event.shiftKey) {
                        first.focus(1);
                        event.preventDefault();
                    } else if ((event.target === first[0] || event.target === this.uiDialog[0]) && event.shiftKey) {
                        last.focus(1);
                        event.preventDefault();
                    }
                },
                "mousedown": function(event) {
                    if (this._moveToTop(event)) this._focusTabbable();
                }
            });
            if (!this.element.find("[aria-describedby]").length) this.uiDialog.attr({
                "aria-describedby": this.element.uniqueId().attr("id")
            });
        },
        "_createTitlebar": function() {
            var uiDialogTitle;
            this.uiDialogTitlebar = $("<div>").addClass("ui-dialog-titlebar ui-widget-header ui-corner-all ui-helper-clearfix").prependTo(this.uiDialog);
            this._on(this.uiDialogTitlebar, {
                "mousedown": function(event) {
                    if (!$(event.target).closest(".ui-dialog-titlebar-close")) this.uiDialog.focus();
                }
            });
            this.uiDialogTitlebarClose = $("<button type='button'></button>").button({
                "label": this.options.closeText,
                "icons": {
                    "primary": "ui-icon-closethick"
                },
                "text": false
            }).addClass("ui-dialog-titlebar-close").appendTo(this.uiDialogTitlebar);
            this._on(this.uiDialogTitlebarClose, {
                "click": function(event) {
                    event.preventDefault();
                    this.close(event);
                }
            });
            uiDialogTitle = $("<span>").uniqueId().addClass("ui-dialog-title").prependTo(this.uiDialogTitlebar);
            this._title(uiDialogTitle);
            this.uiDialog.attr({
                "aria-labelledby": uiDialogTitle.attr("id")
            });
        },
        "_title": function(title) {
            if (!this.options.title) title.html("&#160;");
            title.text(this.options.title);
        },
        "_createButtonPane": function() {
            this.uiDialogButtonPane = $("<div>").addClass("ui-dialog-buttonpane ui-widget-content ui-helper-clearfix");
            this.uiButtonSet = $("<div>").addClass("ui-dialog-buttonset").appendTo(this.uiDialogButtonPane);
            this._createButtons();
        },
        "_createButtons": function() {
            var that = this, buttons = this.options.buttons;
            this.uiDialogButtonPane.remove();
            this.uiButtonSet.empty();
            if ($.isEmptyObject(buttons) || $.isArray(buttons) && !buttons.length) {
                this.uiDialog.removeClass("ui-dialog-buttons");
                return;
            }
            $.each(buttons, function(name, props) {
                var click, buttonOptions;
                props = $.isFunction(props) ? {
                    "click": props,
                    "text": name
                } : props;
                props = $.extend({
                    "type": "button"
                }, props);
                click = props.click;
                props.click = function() {
                    click.apply(that.element[0], arguments);
                };
                buttonOptions = {
                    "icons": props.icons,
                    "text": props.showText
                };
                delete props.icons;
                delete props.showText;
                $("<button></button>", props).button(buttonOptions).appendTo(that.uiButtonSet);
            });
            this.uiDialog.addClass("ui-dialog-buttons");
            this.uiDialogButtonPane.appendTo(this.uiDialog);
        },
        "_makeDraggable": function() {
            var that = this, options = this.options;
            function filteredUi(ui) {
                return {
                    "position": ui.position,
                    "offset": ui.offset
                };
            }
            this.uiDialog.draggable({
                "cancel": ".ui-dialog-content, .ui-dialog-titlebar-close",
                "handle": ".ui-dialog-titlebar",
                "containment": "document",
                "start": function(event, ui) {
                    $(this).addClass("ui-dialog-dragging");
                    that._blockFrames();
                    that._trigger("dragStart", event, filteredUi(ui));
                },
                "drag": function(event, ui) {
                    that._trigger("drag", event, filteredUi(ui));
                },
                "stop": function(event, ui) {
                    options.position = [ ui.position.left - that.document.scrollLeft(), ui.position.top - that.document.scrollTop() ];
                    $(this).removeClass("ui-dialog-dragging");
                    that._unblockFrames();
                    that._trigger("dragStop", event, filteredUi(ui));
                }
            });
        },
        "_makeResizable": function() {
            var that = this, options = this.options, handles = options.resizable, position = this.uiDialog.css("position"), resizeHandles = "string" === typeof handles ? handles : "n,e,s,w,se,sw,ne,nw";
            function filteredUi(ui) {
                return {
                    "originalPosition": ui.originalPosition,
                    "originalSize": ui.originalSize,
                    "position": ui.position,
                    "size": ui.size
                };
            }
            this.uiDialog.resizable({
                "cancel": ".ui-dialog-content",
                "containment": "document",
                "alsoResize": this.element,
                "maxWidth": options.maxWidth,
                "maxHeight": options.maxHeight,
                "minWidth": options.minWidth,
                "minHeight": this._minHeight(),
                "handles": resizeHandles,
                "start": function(event, ui) {
                    $(this).addClass("ui-dialog-resizing");
                    that._blockFrames();
                    that._trigger("resizeStart", event, filteredUi(ui));
                },
                "resize": function(event, ui) {
                    that._trigger("resize", event, filteredUi(ui));
                },
                "stop": function(event, ui) {
                    options.height = $(this).height();
                    options.width = $(this).width();
                    $(this).removeClass("ui-dialog-resizing");
                    that._unblockFrames();
                    that._trigger("resizeStop", event, filteredUi(ui));
                }
            }).css("position", position);
        },
        "_minHeight": function() {
            var options = this.options;
            return "auto" === options.height ? options.minHeight : Math.min(options.minHeight, options.height);
        },
        "_position": function() {
            var isVisible = this.uiDialog.is(":visible");
            if (!isVisible) this.uiDialog.show();
            this.uiDialog.position(this.options.position);
            if (!isVisible) this.uiDialog.hide();
        },
        "_setOptions": function(options) {
            var that = this, resize = false, resizableOptions = {};
            $.each(options, function(key, value) {
                that._setOption(key, value);
                if (key in sizeRelatedOptions) resize = true;
                if (key in resizableRelatedOptions) resizableOptions[key] = value;
            });
            if (resize) {
                this._size();
                this._position();
            }
            if (this.uiDialog.is(":data(ui-resizable)")) this.uiDialog.resizable("option", resizableOptions);
        },
        "_setOption": function(key, value) {
            var isDraggable, isResizable, uiDialog = this.uiDialog;
            if ("dialogClass" === key) uiDialog.removeClass(this.options.dialogClass).addClass(value);
            if ("disabled" === key) return;
            this._super(key, value);
            if ("appendTo" === key) this.uiDialog.appendTo(this._appendTo());
            if ("buttons" === key) this._createButtons();
            if ("closeText" === key) this.uiDialogTitlebarClose.button({
                "label": "" + value
            });
            if ("draggable" === key) {
                isDraggable = uiDialog.is(":data(ui-draggable)");
                if (isDraggable && !value) uiDialog.draggable("destroy");
                if (!isDraggable && value) this._makeDraggable();
            }
            if ("position" === key) this._position();
            if ("resizable" === key) {
                isResizable = uiDialog.is(":data(ui-resizable)");
                if (isResizable && !value) uiDialog.resizable("destroy");
                if (isResizable && "string" === typeof value) uiDialog.resizable("option", "handles", value);
                if (!isResizable && false !== value) this._makeResizable();
            }
            if ("title" === key) this._title(this.uiDialogTitlebar.find(".ui-dialog-title"));
        },
        "_size": function() {
            var nonContentHeight, minContentHeight, maxContentHeight, options = this.options;
            this.element.show().css({
                "width": "auto",
                "minHeight": 0,
                "maxHeight": "none",
                "height": 0
            });
            if (options.minWidth > options.width) options.width = options.minWidth;
            nonContentHeight = this.uiDialog.css({
                "height": "auto",
                "width": options.width
            }).outerHeight();
            minContentHeight = Math.max(0, options.minHeight - nonContentHeight);
            maxContentHeight = "number" === typeof options.maxHeight ? Math.max(0, options.maxHeight - nonContentHeight) : "none";
            if ("auto" === options.height) this.element.css({
                "minHeight": minContentHeight,
                "maxHeight": maxContentHeight,
                "height": "auto"
            }); else this.element.height(Math.max(0, options.height - nonContentHeight));
            if (this.uiDialog.is(":data(ui-resizable)")) this.uiDialog.resizable("option", "minHeight", this._minHeight());
        },
        "_blockFrames": function() {
            this.iframeBlocks = this.document.find("iframe").map(function() {
                var iframe = $(this);
                return $("<div>").css({
                    "position": "absolute",
                    "width": iframe.outerWidth(),
                    "height": iframe.outerHeight()
                }).appendTo(iframe.parent()).offset(iframe.offset())[0];
            });
        },
        "_unblockFrames": function() {
            if (this.iframeBlocks) {
                this.iframeBlocks.remove();
                delete this.iframeBlocks;
            }
        },
        "_allowInteraction": function(event) {
            if ($(event.target).closest(".ui-dialog").length) return true;
            return !!$(event.target).closest(".ui-datepicker").length;
        },
        "_createOverlay": function() {
            if (!this.options.modal) return;
            var that = this, widgetFullName = this.widgetFullName;
            if (!$.ui.dialog.overlayInstances) this._delay(function() {
                if ($.ui.dialog.overlayInstances) this.document.bind("focusin.dialog", function(event) {
                    if (!that._allowInteraction(event)) {
                        event.preventDefault();
                        $(".ui-dialog:visible:last .ui-dialog-content").data(widgetFullName)._focusTabbable();
                    }
                });
            });
            this.overlay = $("<div>").addClass("ui-widget-overlay ui-front").appendTo(this._appendTo());
            this._on(this.overlay, {
                "mousedown": "_keepFocus"
            });
            $.ui.dialog.overlayInstances++;
        },
        "_destroyOverlay": function() {
            if (!this.options.modal) return;
            if (this.overlay) {
                $.ui.dialog.overlayInstances--;
                if (!$.ui.dialog.overlayInstances) this.document.unbind("focusin.dialog");
                this.overlay.remove();
                this.overlay = null;
            }
        }
    });
    $.ui.dialog.overlayInstances = 0;
    if (false !== $.uiBackCompat) $.widget("ui.dialog", $.ui.dialog, {
        "_position": function() {
            var position = this.options.position, myAt = [], offset = [ 0, 0 ], isVisible;
            if (position) {
                if ("string" === typeof position || "object" === typeof position && "0" in position) {
                    myAt = position.split ? position.split(" ") : [ position[0], position[1] ];
                    if (1 === myAt.length) myAt[1] = myAt[0];
                    $.each([ "left", "top" ], function(i, offsetPosition) {
                        if (+myAt[i] === myAt[i]) {
                            offset[i] = myAt[i];
                            myAt[i] = offsetPosition;
                        }
                    });
                    position = {
                        "my": myAt[0] + (offset[0] < 0 ? offset[0] : "+" + offset[0]) + " " + myAt[1] + (offset[1] < 0 ? offset[1] : "+" + offset[1]),
                        "at": myAt.join(" ")
                    };
                }
                position = $.extend({}, $.ui.dialog.prototype.options.position, position);
            } else position = $.ui.dialog.prototype.options.position;
            isVisible = this.uiDialog.is(":visible");
            if (!isVisible) this.uiDialog.show();
            this.uiDialog.position(position);
            if (!isVisible) this.uiDialog.hide();
        }
    });
}(jQuery);

!function($, undefined) {
    $.widget("ui.draggable", $.ui.mouse, {
        "version": "@VERSION",
        "widgetEventPrefix": "drag",
        "options": {
            "addClasses": true,
            "appendTo": "parent",
            "axis": false,
            "connectToSortable": false,
            "containment": false,
            "cursor": "auto",
            "cursorAt": false,
            "grid": false,
            "handle": false,
            "helper": "original",
            "iframeFix": false,
            "opacity": false,
            "refreshPositions": false,
            "revert": false,
            "revertDuration": 500,
            "scope": "default",
            "scroll": true,
            "scrollSensitivity": 20,
            "scrollSpeed": 20,
            "snap": false,
            "snapMode": "both",
            "snapTolerance": 20,
            "stack": false,
            "zIndex": false,
            "drag": null,
            "start": null,
            "stop": null
        },
        "_create": function() {
            if ("original" === this.options.helper && !/^(?:r|a|f)/.test(this.element.css("position"))) this.element[0].style.position = "relative";
            if (this.options.addClasses) this.element.addClass("ui-draggable");
            if (this.options.disabled) this.element.addClass("ui-draggable-disabled");
            this._mouseInit();
        },
        "_destroy": function() {
            this.element.removeClass("ui-draggable ui-draggable-dragging ui-draggable-disabled");
            this._mouseDestroy();
        },
        "_mouseCapture": function(event) {
            var o = this.options;
            if (this.helper || o.disabled || $(event.target).closest(".ui-resizable-handle").length > 0) return false;
            this.handle = this._getHandle(event);
            if (!this.handle) return false;
            $(true === o.iframeFix ? "iframe" : o.iframeFix).each(function() {
                $("<div class='ui-draggable-iframeFix' style='background: #fff;'></div>").css({
                    "width": this.offsetWidth + "px",
                    "height": this.offsetHeight + "px",
                    "position": "absolute",
                    "opacity": "0.001",
                    "zIndex": 1e3
                }).css($(this).offset()).appendTo("body");
            });
            return true;
        },
        "_mouseStart": function(event) {
            var o = this.options;
            this.helper = this._createHelper(event);
            this.helper.addClass("ui-draggable-dragging");
            this._cacheHelperProportions();
            if ($.ui.ddmanager) $.ui.ddmanager.current = this;
            this._cacheMargins();
            this.cssPosition = this.helper.css("position");
            this.scrollParent = this.helper.scrollParent();
            this.offsetParent = this.helper.offsetParent();
            this.offsetParentCssPosition = this.offsetParent.css("position");
            this.offset = this.positionAbs = this.element.offset();
            this.offset = {
                "top": this.offset.top - this.margins.top,
                "left": this.offset.left - this.margins.left
            };
            this.offset.scroll = false;
            $.extend(this.offset, {
                "click": {
                    "left": event.pageX - this.offset.left,
                    "top": event.pageY - this.offset.top
                },
                "parent": this._getParentOffset(),
                "relative": this._getRelativeOffset()
            });
            this.originalPosition = this.position = this._generatePosition(event);
            this.originalPageX = event.pageX;
            this.originalPageY = event.pageY;
            o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt);
            this._setContainment();
            if (false === this._trigger("start", event)) {
                this._clear();
                return false;
            }
            this._cacheHelperProportions();
            if ($.ui.ddmanager && !o.dropBehaviour) $.ui.ddmanager.prepareOffsets(this, event);
            this._mouseDrag(event, true);
            if ($.ui.ddmanager) $.ui.ddmanager.dragStart(this, event);
            return true;
        },
        "_mouseDrag": function(event, noPropagation) {
            if ("fixed" === this.offsetParentCssPosition) this.offset.parent = this._getParentOffset();
            this.position = this._generatePosition(event);
            this.positionAbs = this._convertPositionTo("absolute");
            if (!noPropagation) {
                var ui = this._uiHash();
                if (false === this._trigger("drag", event, ui)) {
                    this._mouseUp({});
                    return false;
                }
                this.position = ui.position;
            }
            if (!this.options.axis || "y" !== this.options.axis) this.helper[0].style.left = this.position.left + "px";
            if (!this.options.axis || "x" !== this.options.axis) this.helper[0].style.top = this.position.top + "px";
            if ($.ui.ddmanager) $.ui.ddmanager.drag(this, event);
            return false;
        },
        "_mouseStop": function(event) {
            var that = this, dropped = false;
            if ($.ui.ddmanager && !this.options.dropBehaviour) dropped = $.ui.ddmanager.drop(this, event);
            if (this.dropped) {
                dropped = this.dropped;
                this.dropped = false;
            }
            if ("original" === this.options.helper && !$.contains(this.element[0].ownerDocument, this.element[0])) return false;
            if ("invalid" === this.options.revert && !dropped || "valid" === this.options.revert && dropped || true === this.options.revert || $.isFunction(this.options.revert) && this.options.revert.call(this.element, dropped)) $(this.helper).animate(this.originalPosition, parseInt(this.options.revertDuration, 10), function() {
                if (false !== that._trigger("stop", event)) that._clear();
            }); else if (false !== this._trigger("stop", event)) this._clear();
            return false;
        },
        "_mouseUp": function(event) {
            $("div.ui-draggable-iframeFix").each(function() {
                this.parentNode.removeChild(this);
            });
            if ($.ui.ddmanager) $.ui.ddmanager.dragStop(this, event);
            return $.ui.mouse.prototype._mouseUp.call(this, event);
        },
        "cancel": function() {
            if (this.helper.is(".ui-draggable-dragging")) this._mouseUp({}); else this._clear();
            return this;
        },
        "_getHandle": function(event) {
            return this.options.handle ? !!$(event.target).closest(this.element.find(this.options.handle)).length : true;
        },
        "_createHelper": function(event) {
            var o = this.options, helper = $.isFunction(o.helper) ? $(o.helper.apply(this.element[0], [ event ])) : "clone" === o.helper ? this.element.clone().removeAttr("id") : this.element;
            if (!helper.parents("body").length) helper.appendTo("parent" === o.appendTo ? this.element[0].parentNode : o.appendTo);
            if (helper[0] !== this.element[0] && !/(fixed|absolute)/.test(helper.css("position"))) helper.css("position", "absolute");
            return helper;
        },
        "_adjustOffsetFromHelper": function(obj) {
            if ("string" === typeof obj) obj = obj.split(" ");
            if ($.isArray(obj)) obj = {
                "left": +obj[0],
                "top": +obj[1] || 0
            };
            if ("left" in obj) this.offset.click.left = obj.left + this.margins.left;
            if ("right" in obj) this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;
            if ("top" in obj) this.offset.click.top = obj.top + this.margins.top;
            if ("bottom" in obj) this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;
        },
        "_getParentOffset": function() {
            var po = this.offsetParent.offset();
            if ("absolute" === this.cssPosition && this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) {
                po.left += this.scrollParent.scrollLeft();
                po.top += this.scrollParent.scrollTop();
            }
            if (this.offsetParent[0] === document.body || this.offsetParent[0].tagName && "html" === this.offsetParent[0].tagName.toLowerCase() && $.ui.ie) po = {
                "top": 0,
                "left": 0
            };
            return {
                "top": po.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0),
                "left": po.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0)
            };
        },
        "_getRelativeOffset": function() {
            if ("relative" === this.cssPosition) {
                var p = this.element.position();
                return {
                    "top": p.top - (parseInt(this.helper.css("top"), 10) || 0) + this.scrollParent.scrollTop(),
                    "left": p.left - (parseInt(this.helper.css("left"), 10) || 0) + this.scrollParent.scrollLeft()
                };
            } else return {
                "top": 0,
                "left": 0
            };
        },
        "_cacheMargins": function() {
            this.margins = {
                "left": parseInt(this.element.css("marginLeft"), 10) || 0,
                "top": parseInt(this.element.css("marginTop"), 10) || 0,
                "right": parseInt(this.element.css("marginRight"), 10) || 0,
                "bottom": parseInt(this.element.css("marginBottom"), 10) || 0
            };
        },
        "_cacheHelperProportions": function() {
            this.helperProportions = {
                "width": this.helper.outerWidth(),
                "height": this.helper.outerHeight()
            };
        },
        "_setContainment": function() {
            var over, c, ce, o = this.options;
            if (!o.containment) {
                this.containment = null;
                return;
            }
            if ("window" === o.containment) {
                this.containment = [ $(window).scrollLeft() - this.offset.relative.left - this.offset.parent.left, $(window).scrollTop() - this.offset.relative.top - this.offset.parent.top, $(window).scrollLeft() + $(window).width() - this.helperProportions.width - this.margins.left, $(window).scrollTop() + ($(window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top ];
                return;
            }
            if ("document" === o.containment) {
                this.containment = [ 0, 0, $(document).width() - this.helperProportions.width - this.margins.left, ($(document).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top ];
                return;
            }
            if (o.containment.constructor === Array) {
                this.containment = o.containment;
                return;
            }
            if ("parent" === o.containment) o.containment = this.helper[0].parentNode;
            c = $(o.containment);
            ce = c[0];
            if (!ce) return;
            over = "hidden" !== c.css("overflow");
            this.containment = [ (parseInt(c.css("borderLeftWidth"), 10) || 0) + (parseInt(c.css("paddingLeft"), 10) || 0), (parseInt(c.css("borderTopWidth"), 10) || 0) + (parseInt(c.css("paddingTop"), 10) || 0), (over ? Math.max(ce.scrollWidth, ce.offsetWidth) : ce.offsetWidth) - (parseInt(c.css("borderRightWidth"), 10) || 0) - (parseInt(c.css("paddingRight"), 10) || 0) - this.helperProportions.width - this.margins.left - this.margins.right, (over ? Math.max(ce.scrollHeight, ce.offsetHeight) : ce.offsetHeight) - (parseInt(c.css("borderBottomWidth"), 10) || 0) - (parseInt(c.css("paddingBottom"), 10) || 0) - this.helperProportions.height - this.margins.top - this.margins.bottom ];
            this.relative_container = c;
        },
        "_convertPositionTo": function(d, pos) {
            if (!pos) pos = this.position;
            var mod = "absolute" === d ? 1 : -1, scroll = "absolute" === this.cssPosition && !(this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent;
            if (!this.offset.scroll) this.offset.scroll = {
                "top": scroll.scrollTop(),
                "left": scroll.scrollLeft()
            };
            return {
                "top": pos.top + this.offset.relative.top * mod + this.offset.parent.top * mod - ("fixed" === this.cssPosition ? -this.scrollParent.scrollTop() : this.offset.scroll.top) * mod,
                "left": pos.left + this.offset.relative.left * mod + this.offset.parent.left * mod - ("fixed" === this.cssPosition ? -this.scrollParent.scrollLeft() : this.offset.scroll.left) * mod
            };
        },
        "_generatePosition": function(event) {
            var containment, co, top, left, o = this.options, scroll = "absolute" === this.cssPosition && !(this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent, pageX = event.pageX, pageY = event.pageY;
            if (!this.offset.scroll) this.offset.scroll = {
                "top": scroll.scrollTop(),
                "left": scroll.scrollLeft()
            };
            if (this.originalPosition) {
                if (this.containment) {
                    if (this.relative_container) {
                        co = this.relative_container.offset();
                        containment = [ this.containment[0] + co.left, this.containment[1] + co.top, this.containment[2] + co.left, this.containment[3] + co.top ];
                    } else containment = this.containment;
                    if (event.pageX - this.offset.click.left < containment[0]) pageX = containment[0] + this.offset.click.left;
                    if (event.pageY - this.offset.click.top < containment[1]) pageY = containment[1] + this.offset.click.top;
                    if (event.pageX - this.offset.click.left > containment[2]) pageX = containment[2] + this.offset.click.left;
                    if (event.pageY - this.offset.click.top > containment[3]) pageY = containment[3] + this.offset.click.top;
                }
                if (o.grid) {
                    top = o.grid[1] ? this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1] : this.originalPageY;
                    pageY = containment ? top - this.offset.click.top >= containment[1] || top - this.offset.click.top > containment[3] ? top : top - this.offset.click.top >= containment[1] ? top - o.grid[1] : top + o.grid[1] : top;
                    left = o.grid[0] ? this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0] : this.originalPageX;
                    pageX = containment ? left - this.offset.click.left >= containment[0] || left - this.offset.click.left > containment[2] ? left : left - this.offset.click.left >= containment[0] ? left - o.grid[0] : left + o.grid[0] : left;
                }
            }
            return {
                "top": pageY - this.offset.click.top - this.offset.relative.top - this.offset.parent.top + ("fixed" === this.cssPosition ? -this.scrollParent.scrollTop() : this.offset.scroll.top),
                "left": pageX - this.offset.click.left - this.offset.relative.left - this.offset.parent.left + ("fixed" === this.cssPosition ? -this.scrollParent.scrollLeft() : this.offset.scroll.left)
            };
        },
        "_clear": function() {
            this.helper.removeClass("ui-draggable-dragging");
            if (this.helper[0] !== this.element[0] && !this.cancelHelperRemoval) this.helper.remove();
            this.helper = null;
            this.cancelHelperRemoval = false;
        },
        "_trigger": function(type, event, ui) {
            ui = ui || this._uiHash();
            $.ui.plugin.call(this, type, [ event, ui ]);
            if ("drag" === type) this.positionAbs = this._convertPositionTo("absolute");
            return $.Widget.prototype._trigger.call(this, type, event, ui);
        },
        "plugins": {},
        "_uiHash": function() {
            return {
                "helper": this.helper,
                "position": this.position,
                "originalPosition": this.originalPosition,
                "offset": this.positionAbs
            };
        }
    });
    $.ui.plugin.add("draggable", "connectToSortable", {
        "start": function(event, ui) {
            var inst = $(this).data("ui-draggable"), o = inst.options, uiSortable = $.extend({}, ui, {
                "item": inst.element
            });
            inst.sortables = [];
            $(o.connectToSortable).each(function() {
                var sortable = $.data(this, "ui-sortable");
                if (sortable && !sortable.options.disabled) {
                    inst.sortables.push({
                        "instance": sortable,
                        "shouldRevert": sortable.options.revert
                    });
                    sortable.refreshPositions();
                    sortable._trigger("activate", event, uiSortable);
                }
            });
        },
        "stop": function(event, ui) {
            var inst = $(this).data("ui-draggable"), uiSortable = $.extend({}, ui, {
                "item": inst.element
            });
            $.each(inst.sortables, function() {
                if (this.instance.isOver) {
                    this.instance.isOver = 0;
                    inst.cancelHelperRemoval = true;
                    this.instance.cancelHelperRemoval = false;
                    if (this.shouldRevert) this.instance.options.revert = this.shouldRevert;
                    this.instance._mouseStop(event);
                    this.instance.options.helper = this.instance.options._helper;
                    if ("original" === inst.options.helper) this.instance.currentItem.css({
                        "top": "auto",
                        "left": "auto"
                    });
                } else {
                    this.instance.cancelHelperRemoval = false;
                    this.instance._trigger("deactivate", event, uiSortable);
                }
            });
        },
        "drag": function(event, ui) {
            var inst = $(this).data("ui-draggable"), that = this;
            $.each(inst.sortables, function() {
                var innermostIntersecting = false, thisSortable = this;
                this.instance.positionAbs = inst.positionAbs;
                this.instance.helperProportions = inst.helperProportions;
                this.instance.offset.click = inst.offset.click;
                if (this.instance._intersectsWith(this.instance.containerCache)) {
                    innermostIntersecting = true;
                    $.each(inst.sortables, function() {
                        this.instance.positionAbs = inst.positionAbs;
                        this.instance.helperProportions = inst.helperProportions;
                        this.instance.offset.click = inst.offset.click;
                        if (this !== thisSortable && this.instance._intersectsWith(this.instance.containerCache) && $.contains(thisSortable.instance.element[0], this.instance.element[0])) innermostIntersecting = false;
                        return innermostIntersecting;
                    });
                }
                if (innermostIntersecting) {
                    if (!this.instance.isOver) {
                        this.instance.isOver = 1;
                        this.instance.currentItem = $(that).clone().removeAttr("id").appendTo(this.instance.element).data("ui-sortable-item", true);
                        this.instance.options._helper = this.instance.options.helper;
                        this.instance.options.helper = function() {
                            return ui.helper[0];
                        };
                        event.target = this.instance.currentItem[0];
                        this.instance._mouseCapture(event, true);
                        this.instance._mouseStart(event, true, true);
                        this.instance.offset.click.top = inst.offset.click.top;
                        this.instance.offset.click.left = inst.offset.click.left;
                        this.instance.offset.parent.left -= inst.offset.parent.left - this.instance.offset.parent.left;
                        this.instance.offset.parent.top -= inst.offset.parent.top - this.instance.offset.parent.top;
                        inst._trigger("toSortable", event);
                        inst.dropped = this.instance.element;
                        inst.currentItem = inst.element;
                        this.instance.fromOutside = inst;
                    }
                    if (this.instance.currentItem) this.instance._mouseDrag(event);
                } else if (this.instance.isOver) {
                    this.instance.isOver = 0;
                    this.instance.cancelHelperRemoval = true;
                    this.instance.options.revert = false;
                    this.instance._trigger("out", event, this.instance._uiHash(this.instance));
                    this.instance._mouseStop(event, true);
                    this.instance.options.helper = this.instance.options._helper;
                    this.instance.currentItem.remove();
                    if (this.instance.placeholder) this.instance.placeholder.remove();
                    inst._trigger("fromSortable", event);
                    inst.dropped = false;
                }
            });
        }
    });
    $.ui.plugin.add("draggable", "cursor", {
        "start": function() {
            var t = $("body"), o = $(this).data("ui-draggable").options;
            if (t.css("cursor")) o._cursor = t.css("cursor");
            t.css("cursor", o.cursor);
        },
        "stop": function() {
            var o = $(this).data("ui-draggable").options;
            if (o._cursor) $("body").css("cursor", o._cursor);
        }
    });
    $.ui.plugin.add("draggable", "opacity", {
        "start": function(event, ui) {
            var t = $(ui.helper), o = $(this).data("ui-draggable").options;
            if (t.css("opacity")) o._opacity = t.css("opacity");
            t.css("opacity", o.opacity);
        },
        "stop": function(event, ui) {
            var o = $(this).data("ui-draggable").options;
            if (o._opacity) $(ui.helper).css("opacity", o._opacity);
        }
    });
    $.ui.plugin.add("draggable", "scroll", {
        "start": function() {
            var i = $(this).data("ui-draggable");
            if (i.scrollParent[0] !== document && "HTML" !== i.scrollParent[0].tagName) i.overflowOffset = i.scrollParent.offset();
        },
        "drag": function(event) {
            var i = $(this).data("ui-draggable"), o = i.options, scrolled = false;
            if (i.scrollParent[0] !== document && "HTML" !== i.scrollParent[0].tagName) {
                if (!o.axis || "x" !== o.axis) if (i.overflowOffset.top + i.scrollParent[0].offsetHeight - event.pageY < o.scrollSensitivity) i.scrollParent[0].scrollTop = scrolled = i.scrollParent[0].scrollTop + o.scrollSpeed; else if (event.pageY - i.overflowOffset.top < o.scrollSensitivity) i.scrollParent[0].scrollTop = scrolled = i.scrollParent[0].scrollTop - o.scrollSpeed;
                if (!o.axis || "y" !== o.axis) if (i.overflowOffset.left + i.scrollParent[0].offsetWidth - event.pageX < o.scrollSensitivity) i.scrollParent[0].scrollLeft = scrolled = i.scrollParent[0].scrollLeft + o.scrollSpeed; else if (event.pageX - i.overflowOffset.left < o.scrollSensitivity) i.scrollParent[0].scrollLeft = scrolled = i.scrollParent[0].scrollLeft - o.scrollSpeed;
            } else {
                if (!o.axis || "x" !== o.axis) if (event.pageY - $(document).scrollTop() < o.scrollSensitivity) scrolled = $(document).scrollTop($(document).scrollTop() - o.scrollSpeed); else if ($(window).height() - (event.pageY - $(document).scrollTop()) < o.scrollSensitivity) scrolled = $(document).scrollTop($(document).scrollTop() + o.scrollSpeed);
                if (!o.axis || "y" !== o.axis) if (event.pageX - $(document).scrollLeft() < o.scrollSensitivity) scrolled = $(document).scrollLeft($(document).scrollLeft() - o.scrollSpeed); else if ($(window).width() - (event.pageX - $(document).scrollLeft()) < o.scrollSensitivity) scrolled = $(document).scrollLeft($(document).scrollLeft() + o.scrollSpeed);
            }
            if (false !== scrolled && $.ui.ddmanager && !o.dropBehaviour) $.ui.ddmanager.prepareOffsets(i, event);
        }
    });
    $.ui.plugin.add("draggable", "snap", {
        "start": function() {
            var i = $(this).data("ui-draggable"), o = i.options;
            i.snapElements = [];
            $(o.snap.constructor !== String ? o.snap.items || ":data(ui-draggable)" : o.snap).each(function() {
                var $t = $(this), $o = $t.offset();
                if (this !== i.element[0]) i.snapElements.push({
                    "item": this,
                    "width": $t.outerWidth(),
                    "height": $t.outerHeight(),
                    "top": $o.top,
                    "left": $o.left
                });
            });
        },
        "drag": function(event, ui) {
            var ts, bs, ls, rs, l, r, t, b, i, first, inst = $(this).data("ui-draggable"), o = inst.options, d = o.snapTolerance, x1 = ui.offset.left, x2 = x1 + inst.helperProportions.width, y1 = ui.offset.top, y2 = y1 + inst.helperProportions.height;
            for (i = inst.snapElements.length - 1; i >= 0; i--) {
                l = inst.snapElements[i].left;
                r = l + inst.snapElements[i].width;
                t = inst.snapElements[i].top;
                b = t + inst.snapElements[i].height;
                if (x2 < l - d || x1 > r + d || y2 < t - d || y1 > b + d || !$.contains(inst.snapElements[i].item.ownerDocument, inst.snapElements[i].item)) {
                    if (inst.snapElements[i].snapping) inst.options.snap.release && inst.options.snap.release.call(inst.element, event, $.extend(inst._uiHash(), {
                        "snapItem": inst.snapElements[i].item
                    }));
                    inst.snapElements[i].snapping = false;
                    continue;
                }
                if ("inner" !== o.snapMode) {
                    ts = Math.abs(t - y2) <= d;
                    bs = Math.abs(b - y1) <= d;
                    ls = Math.abs(l - x2) <= d;
                    rs = Math.abs(r - x1) <= d;
                    if (ts) ui.position.top = inst._convertPositionTo("relative", {
                        "top": t - inst.helperProportions.height,
                        "left": 0
                    }).top - inst.margins.top;
                    if (bs) ui.position.top = inst._convertPositionTo("relative", {
                        "top": b,
                        "left": 0
                    }).top - inst.margins.top;
                    if (ls) ui.position.left = inst._convertPositionTo("relative", {
                        "top": 0,
                        "left": l - inst.helperProportions.width
                    }).left - inst.margins.left;
                    if (rs) ui.position.left = inst._convertPositionTo("relative", {
                        "top": 0,
                        "left": r
                    }).left - inst.margins.left;
                }
                first = ts || bs || ls || rs;
                if ("outer" !== o.snapMode) {
                    ts = Math.abs(t - y1) <= d;
                    bs = Math.abs(b - y2) <= d;
                    ls = Math.abs(l - x1) <= d;
                    rs = Math.abs(r - x2) <= d;
                    if (ts) ui.position.top = inst._convertPositionTo("relative", {
                        "top": t,
                        "left": 0
                    }).top - inst.margins.top;
                    if (bs) ui.position.top = inst._convertPositionTo("relative", {
                        "top": b - inst.helperProportions.height,
                        "left": 0
                    }).top - inst.margins.top;
                    if (ls) ui.position.left = inst._convertPositionTo("relative", {
                        "top": 0,
                        "left": l
                    }).left - inst.margins.left;
                    if (rs) ui.position.left = inst._convertPositionTo("relative", {
                        "top": 0,
                        "left": r - inst.helperProportions.width
                    }).left - inst.margins.left;
                }
                if (!inst.snapElements[i].snapping && (ts || bs || ls || rs || first)) inst.options.snap.snap && inst.options.snap.snap.call(inst.element, event, $.extend(inst._uiHash(), {
                    "snapItem": inst.snapElements[i].item
                }));
                inst.snapElements[i].snapping = ts || bs || ls || rs || first;
            }
        }
    });
    $.ui.plugin.add("draggable", "stack", {
        "start": function() {
            var min, o = this.data("ui-draggable").options, group = $.makeArray($(o.stack)).sort(function(a, b) {
                return (parseInt($(a).css("zIndex"), 10) || 0) - (parseInt($(b).css("zIndex"), 10) || 0);
            });
            if (!group.length) return;
            min = parseInt($(group[0]).css("zIndex"), 10) || 0;
            $(group).each(function(i) {
                $(this).css("zIndex", min + i);
            });
            this.css("zIndex", min + group.length);
        }
    });
    $.ui.plugin.add("draggable", "zIndex", {
        "start": function(event, ui) {
            var t = $(ui.helper), o = $(this).data("ui-draggable").options;
            if (t.css("zIndex")) o._zIndex = t.css("zIndex");
            t.css("zIndex", o.zIndex);
        },
        "stop": function(event, ui) {
            var o = $(this).data("ui-draggable").options;
            if (o._zIndex) $(ui.helper).css("zIndex", o._zIndex);
        }
    });
}(jQuery);

!function($, undefined) {
    $.ui = $.ui || {};
    var cachedScrollbarWidth, max = Math.max, abs = Math.abs, round = Math.round, rhorizontal = /left|center|right/, rvertical = /top|center|bottom/, roffset = /[\+\-]\d+(\.[\d]+)?%?/, rposition = /^\w+/, rpercent = /%$/, _position = $.fn.position;
    function getOffsets(offsets, width, height) {
        return [ parseFloat(offsets[0]) * (rpercent.test(offsets[0]) ? width / 100 : 1), parseFloat(offsets[1]) * (rpercent.test(offsets[1]) ? height / 100 : 1) ];
    }
    function parseCss(element, property) {
        return parseInt($.css(element, property), 10) || 0;
    }
    function getDimensions(elem) {
        var raw = elem[0];
        if (9 === raw.nodeType) return {
            "width": elem.width(),
            "height": elem.height(),
            "offset": {
                "top": 0,
                "left": 0
            }
        };
        if ($.isWindow(raw)) return {
            "width": elem.width(),
            "height": elem.height(),
            "offset": {
                "top": elem.scrollTop(),
                "left": elem.scrollLeft()
            }
        };
        if (raw.preventDefault) return {
            "width": 0,
            "height": 0,
            "offset": {
                "top": raw.pageY,
                "left": raw.pageX
            }
        };
        return {
            "width": elem.outerWidth(),
            "height": elem.outerHeight(),
            "offset": elem.offset()
        };
    }
    $.position = {
        "scrollbarWidth": function() {
            if (cachedScrollbarWidth !== undefined) return cachedScrollbarWidth;
            var w1, w2, div = $("<div style='display:block;position:absolute;width:50px;height:50px;overflow:hidden;'><div style='height:100px;width:auto;'></div></div>"), innerDiv = div.children()[0];
            $("body").append(div);
            w1 = innerDiv.offsetWidth;
            div.css("overflow", "scroll");
            w2 = innerDiv.offsetWidth;
            if (w1 === w2) w2 = div[0].clientWidth;
            div.remove();
            return cachedScrollbarWidth = w1 - w2;
        },
        "getScrollInfo": function(within) {
            var overflowX = within.isWindow || within.isDocument ? "" : within.element.css("overflow-x"), overflowY = within.isWindow || within.isDocument ? "" : within.element.css("overflow-y"), hasOverflowX = "scroll" === overflowX || "auto" === overflowX && within.width < within.element[0].scrollWidth, hasOverflowY = "scroll" === overflowY || "auto" === overflowY && within.height < within.element[0].scrollHeight;
            return {
                "width": hasOverflowY ? $.position.scrollbarWidth() : 0,
                "height": hasOverflowX ? $.position.scrollbarWidth() : 0
            };
        },
        "getWithinInfo": function(element) {
            var withinElement = $(element || window), isWindow = $.isWindow(withinElement[0]), isDocument = !!withinElement[0] && 9 === withinElement[0].nodeType;
            return {
                "element": withinElement,
                "isWindow": isWindow,
                "isDocument": isDocument,
                "offset": withinElement.offset() || {
                    "left": 0,
                    "top": 0
                },
                "scrollLeft": withinElement.scrollLeft(),
                "scrollTop": withinElement.scrollTop(),
                "width": isWindow ? withinElement.width() : withinElement.outerWidth(),
                "height": isWindow ? withinElement.height() : withinElement.outerHeight()
            };
        }
    };
    $.fn.position = function(options) {
        if (!options || !options.of) return _position.apply(this, arguments);
        options = $.extend({}, options);
        var atOffset, targetWidth, targetHeight, targetOffset, basePosition, dimensions, target = $(options.of), within = $.position.getWithinInfo(options.within), scrollInfo = $.position.getScrollInfo(within), collision = (options.collision || "flip").split(" "), offsets = {};
        dimensions = getDimensions(target);
        if (target[0].preventDefault) options.at = "left top";
        targetWidth = dimensions.width;
        targetHeight = dimensions.height;
        targetOffset = dimensions.offset;
        basePosition = $.extend({}, targetOffset);
        $.each([ "my", "at" ], function() {
            var pos = (options[this] || "").split(" "), horizontalOffset, verticalOffset;
            if (1 === pos.length) pos = rhorizontal.test(pos[0]) ? pos.concat([ "center" ]) : rvertical.test(pos[0]) ? [ "center" ].concat(pos) : [ "center", "center" ];
            pos[0] = rhorizontal.test(pos[0]) ? pos[0] : "center";
            pos[1] = rvertical.test(pos[1]) ? pos[1] : "center";
            horizontalOffset = roffset.exec(pos[0]);
            verticalOffset = roffset.exec(pos[1]);
            offsets[this] = [ horizontalOffset ? horizontalOffset[0] : 0, verticalOffset ? verticalOffset[0] : 0 ];
            options[this] = [ rposition.exec(pos[0])[0], rposition.exec(pos[1])[0] ];
        });
        if (1 === collision.length) collision[1] = collision[0];
        if ("right" === options.at[0]) basePosition.left += targetWidth; else if ("center" === options.at[0]) basePosition.left += targetWidth / 2;
        if ("bottom" === options.at[1]) basePosition.top += targetHeight; else if ("center" === options.at[1]) basePosition.top += targetHeight / 2;
        atOffset = getOffsets(offsets.at, targetWidth, targetHeight);
        basePosition.left += atOffset[0];
        basePosition.top += atOffset[1];
        return this.each(function() {
            var collisionPosition, using, elem = $(this), elemWidth = elem.outerWidth(), elemHeight = elem.outerHeight(), marginLeft = parseCss(this, "marginLeft"), marginTop = parseCss(this, "marginTop"), collisionWidth = elemWidth + marginLeft + parseCss(this, "marginRight") + scrollInfo.width, collisionHeight = elemHeight + marginTop + parseCss(this, "marginBottom") + scrollInfo.height, position = $.extend({}, basePosition), myOffset = getOffsets(offsets.my, elem.outerWidth(), elem.outerHeight());
            if ("right" === options.my[0]) position.left -= elemWidth; else if ("center" === options.my[0]) position.left -= elemWidth / 2;
            if ("bottom" === options.my[1]) position.top -= elemHeight; else if ("center" === options.my[1]) position.top -= elemHeight / 2;
            position.left += myOffset[0];
            position.top += myOffset[1];
            if (!$.support.offsetFractions) {
                position.left = round(position.left);
                position.top = round(position.top);
            }
            collisionPosition = {
                "marginLeft": marginLeft,
                "marginTop": marginTop
            };
            $.each([ "left", "top" ], function(i, dir) {
                if ($.ui.position[collision[i]]) $.ui.position[collision[i]][dir](position, {
                    "targetWidth": targetWidth,
                    "targetHeight": targetHeight,
                    "elemWidth": elemWidth,
                    "elemHeight": elemHeight,
                    "collisionPosition": collisionPosition,
                    "collisionWidth": collisionWidth,
                    "collisionHeight": collisionHeight,
                    "offset": [ atOffset[0] + myOffset[0], atOffset[1] + myOffset[1] ],
                    "my": options.my,
                    "at": options.at,
                    "within": within,
                    "elem": elem
                });
            });
            if (options.using) using = function(props) {
                var left = targetOffset.left - position.left, right = left + targetWidth - elemWidth, top = targetOffset.top - position.top, bottom = top + targetHeight - elemHeight, feedback = {
                    "target": {
                        "element": target,
                        "left": targetOffset.left,
                        "top": targetOffset.top,
                        "width": targetWidth,
                        "height": targetHeight
                    },
                    "element": {
                        "element": elem,
                        "left": position.left,
                        "top": position.top,
                        "width": elemWidth,
                        "height": elemHeight
                    },
                    "horizontal": right < 0 ? "left" : left > 0 ? "right" : "center",
                    "vertical": bottom < 0 ? "top" : top > 0 ? "bottom" : "middle"
                };
                if (targetWidth < elemWidth && abs(left + right) < targetWidth) feedback.horizontal = "center";
                if (targetHeight < elemHeight && abs(top + bottom) < targetHeight) feedback.vertical = "middle";
                if (max(abs(left), abs(right)) > max(abs(top), abs(bottom))) feedback.important = "horizontal"; else feedback.important = "vertical";
                options.using.call(this, props, feedback);
            };
            elem.offset($.extend(position, {
                "using": using
            }));
        });
    };
    $.ui.position = {
        "fit": {
            "left": function(position, data) {
                var within = data.within, withinOffset = within.isWindow ? within.scrollLeft : within.offset.left, outerWidth = within.width, collisionPosLeft = position.left - data.collisionPosition.marginLeft, overLeft = withinOffset - collisionPosLeft, overRight = collisionPosLeft + data.collisionWidth - outerWidth - withinOffset, newOverRight;
                if (data.collisionWidth > outerWidth) if (overLeft > 0 && overRight <= 0) {
                    newOverRight = position.left + overLeft + data.collisionWidth - outerWidth - withinOffset;
                    position.left += overLeft - newOverRight;
                } else if (overRight > 0 && overLeft <= 0) position.left = withinOffset; else if (overLeft > overRight) position.left = withinOffset + outerWidth - data.collisionWidth; else position.left = withinOffset; else if (overLeft > 0) position.left += overLeft; else if (overRight > 0) position.left -= overRight; else position.left = max(position.left - collisionPosLeft, position.left);
            },
            "top": function(position, data) {
                var within = data.within, withinOffset = within.isWindow ? within.scrollTop : within.offset.top, outerHeight = data.within.height, collisionPosTop = position.top - data.collisionPosition.marginTop, overTop = withinOffset - collisionPosTop, overBottom = collisionPosTop + data.collisionHeight - outerHeight - withinOffset, newOverBottom;
                if (data.collisionHeight > outerHeight) if (overTop > 0 && overBottom <= 0) {
                    newOverBottom = position.top + overTop + data.collisionHeight - outerHeight - withinOffset;
                    position.top += overTop - newOverBottom;
                } else if (overBottom > 0 && overTop <= 0) position.top = withinOffset; else if (overTop > overBottom) position.top = withinOffset + outerHeight - data.collisionHeight; else position.top = withinOffset; else if (overTop > 0) position.top += overTop; else if (overBottom > 0) position.top -= overBottom; else position.top = max(position.top - collisionPosTop, position.top);
            }
        },
        "flip": {
            "left": function(position, data) {
                var within = data.within, withinOffset = within.offset.left + within.scrollLeft, outerWidth = within.width, offsetLeft = within.isWindow ? within.scrollLeft : within.offset.left, collisionPosLeft = position.left - data.collisionPosition.marginLeft, overLeft = collisionPosLeft - offsetLeft, overRight = collisionPosLeft + data.collisionWidth - outerWidth - offsetLeft, myOffset = "left" === data.my[0] ? -data.elemWidth : "right" === data.my[0] ? data.elemWidth : 0, atOffset = "left" === data.at[0] ? data.targetWidth : "right" === data.at[0] ? -data.targetWidth : 0, offset = -2 * data.offset[0], newOverRight, newOverLeft;
                if (overLeft < 0) {
                    newOverRight = position.left + myOffset + atOffset + offset + data.collisionWidth - outerWidth - withinOffset;
                    if (newOverRight < 0 || newOverRight < abs(overLeft)) position.left += myOffset + atOffset + offset;
                } else if (overRight > 0) {
                    newOverLeft = position.left - data.collisionPosition.marginLeft + myOffset + atOffset + offset - offsetLeft;
                    if (newOverLeft > 0 || abs(newOverLeft) < overRight) position.left += myOffset + atOffset + offset;
                }
            },
            "top": function(position, data) {
                var within = data.within, withinOffset = within.offset.top + within.scrollTop, outerHeight = within.height, offsetTop = within.isWindow ? within.scrollTop : within.offset.top, collisionPosTop = position.top - data.collisionPosition.marginTop, overTop = collisionPosTop - offsetTop, overBottom = collisionPosTop + data.collisionHeight - outerHeight - offsetTop, top = "top" === data.my[1], myOffset = top ? -data.elemHeight : "bottom" === data.my[1] ? data.elemHeight : 0, atOffset = "top" === data.at[1] ? data.targetHeight : "bottom" === data.at[1] ? -data.targetHeight : 0, offset = -2 * data.offset[1], newOverTop, newOverBottom;
                if (overTop < 0) {
                    newOverBottom = position.top + myOffset + atOffset + offset + data.collisionHeight - outerHeight - withinOffset;
                    if (position.top + myOffset + atOffset + offset > overTop && (newOverBottom < 0 || newOverBottom < abs(overTop))) position.top += myOffset + atOffset + offset;
                } else if (overBottom > 0) {
                    newOverTop = position.top - data.collisionPosition.marginTop + myOffset + atOffset + offset - offsetTop;
                    if (position.top + myOffset + atOffset + offset > overBottom && (newOverTop > 0 || abs(newOverTop) < overBottom)) position.top += myOffset + atOffset + offset;
                }
            }
        },
        "flipfit": {
            "left": function() {
                $.ui.position.flip.left.apply(this, arguments);
                $.ui.position.fit.left.apply(this, arguments);
            },
            "top": function() {
                $.ui.position.flip.top.apply(this, arguments);
                $.ui.position.fit.top.apply(this, arguments);
            }
        }
    };
    !function() {
        var testElement, testElementParent, testElementStyle, offsetLeft, i, body = document.getElementsByTagName("body")[0], div = document.createElement("div");
        testElement = document.createElement(body ? "div" : "body");
        testElementStyle = {
            "visibility": "hidden",
            "width": 0,
            "height": 0,
            "border": 0,
            "margin": 0,
            "background": "none"
        };
        if (body) $.extend(testElementStyle, {
            "position": "absolute",
            "left": "-1000px",
            "top": "-1000px"
        });
        for (i in testElementStyle) testElement.style[i] = testElementStyle[i];
        testElement.appendChild(div);
        testElementParent = body || document.documentElement;
        testElementParent.insertBefore(testElement, testElementParent.firstChild);
        div.style.cssText = "position: absolute; left: 10.7432222px;";
        offsetLeft = $(div).offset().left;
        $.support.offsetFractions = offsetLeft > 10 && offsetLeft < 11;
        testElement.innerHTML = "";
        testElementParent.removeChild(testElement);
    }();
}(jQuery);

!function($, undefined) {
    $.widget("ui.progressbar", {
        "version": "@VERSION",
        "options": {
            "max": 100,
            "value": 0,
            "change": null,
            "complete": null
        },
        "min": 0,
        "_create": function() {
            this.oldValue = this.options.value = this._constrainedValue();
            this.element.addClass("ui-progressbar ui-widget ui-widget-content ui-corner-all").attr({
                "role": "progressbar",
                "aria-valuemin": this.min
            });
            this.valueDiv = $("<div class='ui-progressbar-value ui-widget-header ui-corner-left'></div>").appendTo(this.element);
            this._refreshValue();
        },
        "_destroy": function() {
            this.element.removeClass("ui-progressbar ui-widget ui-widget-content ui-corner-all").removeAttr("role").removeAttr("aria-valuemin").removeAttr("aria-valuemax").removeAttr("aria-valuenow");
            this.valueDiv.remove();
        },
        "value": function(newValue) {
            if (newValue === undefined) return this.options.value;
            this.options.value = this._constrainedValue(newValue);
            this._refreshValue();
        },
        "_constrainedValue": function(newValue) {
            if (newValue === undefined) newValue = this.options.value;
            this.indeterminate = false === newValue;
            if ("number" !== typeof newValue) newValue = 0;
            return this.indeterminate ? false : Math.min(this.options.max, Math.max(this.min, newValue));
        },
        "_setOptions": function(options) {
            var value = options.value;
            delete options.value;
            this._super(options);
            this.options.value = this._constrainedValue(value);
            this._refreshValue();
        },
        "_setOption": function(key, value) {
            if ("max" === key) value = Math.max(this.min, value);
            this._super(key, value);
        },
        "_percentage": function() {
            return this.indeterminate ? 100 : 100 * (this.options.value - this.min) / (this.options.max - this.min);
        },
        "_refreshValue": function() {
            var value = this.options.value, percentage = this._percentage();
            this.valueDiv.toggle(this.indeterminate || value > this.min).toggleClass("ui-corner-right", value === this.options.max).width(percentage.toFixed(0) + "%");
            this.element.toggleClass("ui-progressbar-indeterminate", this.indeterminate);
            if (this.indeterminate) {
                this.element.removeAttr("aria-valuenow");
                if (!this.overlayDiv) this.overlayDiv = $("<div class='ui-progressbar-overlay'></div>").appendTo(this.valueDiv);
            } else {
                this.element.attr({
                    "aria-valuemax": this.options.max,
                    "aria-valuenow": value
                });
                if (this.overlayDiv) {
                    this.overlayDiv.remove();
                    this.overlayDiv = null;
                }
            }
            if (this.oldValue !== value) {
                this.oldValue = value;
                this._trigger("change");
            }
            if (value === this.options.max) this._trigger("complete");
        }
    });
}(jQuery);

!function($, undefined) {
    function num(v) {
        return parseInt(v, 10) || 0;
    }
    function isNumber(value) {
        return !isNaN(parseInt(value, 10));
    }
    $.widget("ui.resizable", $.ui.mouse, {
        "version": "@VERSION",
        "widgetEventPrefix": "resize",
        "options": {
            "alsoResize": false,
            "animate": false,
            "animateDuration": "slow",
            "animateEasing": "swing",
            "aspectRatio": false,
            "autoHide": false,
            "containment": false,
            "ghost": false,
            "grid": false,
            "handles": "e,s,se",
            "helper": false,
            "maxHeight": null,
            "maxWidth": null,
            "minHeight": 10,
            "minWidth": 10,
            "zIndex": 90,
            "resize": null,
            "start": null,
            "stop": null
        },
        "_create": function() {
            var n, i, handle, axis, hname, that = this, o = this.options;
            this.element.addClass("ui-resizable");
            $.extend(this, {
                "_aspectRatio": !!o.aspectRatio,
                "aspectRatio": o.aspectRatio,
                "originalElement": this.element,
                "_proportionallyResizeElements": [],
                "_helper": o.helper || o.ghost || o.animate ? o.helper || "ui-resizable-helper" : null
            });
            if (this.element[0].nodeName.match(/canvas|textarea|input|select|button|img/i)) {
                this.element.wrap($("<div class='ui-wrapper' style='overflow: hidden;'></div>").css({
                    "position": this.element.css("position"),
                    "width": this.element.outerWidth(),
                    "height": this.element.outerHeight(),
                    "top": this.element.css("top"),
                    "left": this.element.css("left")
                }));
                this.element = this.element.parent().data("ui-resizable", this.element.data("ui-resizable"));
                this.elementIsWrapper = true;
                this.element.css({
                    "marginLeft": this.originalElement.css("marginLeft"),
                    "marginTop": this.originalElement.css("marginTop"),
                    "marginRight": this.originalElement.css("marginRight"),
                    "marginBottom": this.originalElement.css("marginBottom")
                });
                this.originalElement.css({
                    "marginLeft": 0,
                    "marginTop": 0,
                    "marginRight": 0,
                    "marginBottom": 0
                });
                this.originalResizeStyle = this.originalElement.css("resize");
                this.originalElement.css("resize", "none");
                this._proportionallyResizeElements.push(this.originalElement.css({
                    "position": "static",
                    "zoom": 1,
                    "display": "block"
                }));
                this.originalElement.css({
                    "margin": this.originalElement.css("margin")
                });
                this._proportionallyResize();
            }
            this.handles = o.handles || (!$(".ui-resizable-handle", this.element).length ? "e,s,se" : {
                "n": ".ui-resizable-n",
                "e": ".ui-resizable-e",
                "s": ".ui-resizable-s",
                "w": ".ui-resizable-w",
                "se": ".ui-resizable-se",
                "sw": ".ui-resizable-sw",
                "ne": ".ui-resizable-ne",
                "nw": ".ui-resizable-nw"
            });
            if (this.handles.constructor === String) {
                if ("all" === this.handles) this.handles = "n,e,s,w,se,sw,ne,nw";
                n = this.handles.split(",");
                this.handles = {};
                for (i = 0; i < n.length; i++) {
                    handle = $.trim(n[i]);
                    hname = "ui-resizable-" + handle;
                    axis = $("<div class='ui-resizable-handle " + hname + "'></div>");
                    axis.css({
                        "zIndex": o.zIndex
                    });
                    if ("se" === handle) axis.addClass("ui-icon ui-icon-gripsmall-diagonal-se");
                    this.handles[handle] = ".ui-resizable-" + handle;
                    this.element.append(axis);
                }
            }
            this._renderAxis = function(target) {
                var i, axis, padPos, padWrapper;
                target = target || this.element;
                for (i in this.handles) {
                    if (this.handles[i].constructor === String) this.handles[i] = $(this.handles[i], this.element).show();
                    if (this.elementIsWrapper && this.originalElement[0].nodeName.match(/textarea|input|select|button/i)) {
                        axis = $(this.handles[i], this.element);
                        padWrapper = /sw|ne|nw|se|n|s/.test(i) ? axis.outerHeight() : axis.outerWidth();
                        padPos = [ "padding", /ne|nw|n/.test(i) ? "Top" : /se|sw|s/.test(i) ? "Bottom" : /^e$/.test(i) ? "Right" : "Left" ].join("");
                        target.css(padPos, padWrapper);
                        this._proportionallyResize();
                    }
                    if (!$(this.handles[i]).length) continue;
                }
            };
            this._renderAxis(this.element);
            this._handles = $(".ui-resizable-handle", this.element).disableSelection();
            this._handles.mouseover(function() {
                if (!that.resizing) {
                    if (this.className) axis = this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i);
                    that.axis = axis && axis[1] ? axis[1] : "se";
                }
            });
            if (o.autoHide) {
                this._handles.hide();
                $(this.element).addClass("ui-resizable-autohide").mouseenter(function() {
                    if (o.disabled) return;
                    $(this).removeClass("ui-resizable-autohide");
                    that._handles.show();
                }).mouseleave(function() {
                    if (o.disabled) return;
                    if (!that.resizing) {
                        $(this).addClass("ui-resizable-autohide");
                        that._handles.hide();
                    }
                });
            }
            this._mouseInit();
        },
        "_destroy": function() {
            this._mouseDestroy();
            var wrapper, _destroy = function(exp) {
                $(exp).removeClass("ui-resizable ui-resizable-disabled ui-resizable-resizing").removeData("resizable").removeData("ui-resizable").unbind(".resizable").find(".ui-resizable-handle").remove();
            };
            if (this.elementIsWrapper) {
                _destroy(this.element);
                wrapper = this.element;
                this.originalElement.css({
                    "position": wrapper.css("position"),
                    "width": wrapper.outerWidth(),
                    "height": wrapper.outerHeight(),
                    "top": wrapper.css("top"),
                    "left": wrapper.css("left")
                }).insertAfter(wrapper);
                wrapper.remove();
            }
            this.originalElement.css("resize", this.originalResizeStyle);
            _destroy(this.originalElement);
            return this;
        },
        "_mouseCapture": function(event) {
            var i, handle, capture = false;
            for (i in this.handles) {
                handle = $(this.handles[i])[0];
                if (handle === event.target || $.contains(handle, event.target)) capture = true;
            }
            return !this.options.disabled && capture;
        },
        "_mouseStart": function(event) {
            var curleft, curtop, cursor, o = this.options, iniPos = this.element.position(), el = this.element;
            this.resizing = true;
            if (/absolute/.test(el.css("position"))) el.css({
                "position": "absolute",
                "top": el.css("top"),
                "left": el.css("left")
            }); else if (el.is(".ui-draggable")) el.css({
                "position": "absolute",
                "top": iniPos.top,
                "left": iniPos.left
            });
            this._renderProxy();
            curleft = num(this.helper.css("left"));
            curtop = num(this.helper.css("top"));
            if (o.containment) {
                curleft += $(o.containment).scrollLeft() || 0;
                curtop += $(o.containment).scrollTop() || 0;
            }
            this.offset = this.helper.offset();
            this.position = {
                "left": curleft,
                "top": curtop
            };
            this.size = this._helper ? {
                "width": this.helper.width(),
                "height": this.helper.height()
            } : {
                "width": el.width(),
                "height": el.height()
            };
            this.originalSize = this._helper ? {
                "width": el.outerWidth(),
                "height": el.outerHeight()
            } : {
                "width": el.width(),
                "height": el.height()
            };
            this.originalPosition = {
                "left": curleft,
                "top": curtop
            };
            this.sizeDiff = {
                "width": el.outerWidth() - el.width(),
                "height": el.outerHeight() - el.height()
            };
            this.originalMousePosition = {
                "left": event.pageX,
                "top": event.pageY
            };
            this.aspectRatio = "number" === typeof o.aspectRatio ? o.aspectRatio : this.originalSize.width / this.originalSize.height || 1;
            cursor = $(".ui-resizable-" + this.axis).css("cursor");
            $("body").css("cursor", "auto" === cursor ? this.axis + "-resize" : cursor);
            el.addClass("ui-resizable-resizing");
            this._propagate("start", event);
            return true;
        },
        "_mouseDrag": function(event) {
            var data, el = this.helper, props = {}, smp = this.originalMousePosition, a = this.axis, prevTop = this.position.top, prevLeft = this.position.left, prevWidth = this.size.width, prevHeight = this.size.height, dx = event.pageX - smp.left || 0, dy = event.pageY - smp.top || 0, trigger = this._change[a];
            if (!trigger) return false;
            data = trigger.apply(this, [ event, dx, dy ]);
            this._updateVirtualBoundaries(event.shiftKey);
            if (this._aspectRatio || event.shiftKey) data = this._updateRatio(data, event);
            data = this._respectSize(data, event);
            this._updateCache(data);
            this._propagate("resize", event);
            if (this.position.top !== prevTop) props.top = this.position.top + "px";
            if (this.position.left !== prevLeft) props.left = this.position.left + "px";
            if (this.size.width !== prevWidth) props.width = this.size.width + "px";
            if (this.size.height !== prevHeight) props.height = this.size.height + "px";
            el.css(props);
            if (!this._helper && this._proportionallyResizeElements.length) this._proportionallyResize();
            if (!$.isEmptyObject(props)) this._trigger("resize", event, this.ui());
            return false;
        },
        "_mouseStop": function(event) {
            this.resizing = false;
            var pr, ista, soffseth, soffsetw, s, left, top, o = this.options, that = this;
            if (this._helper) {
                pr = this._proportionallyResizeElements;
                ista = pr.length && /textarea/i.test(pr[0].nodeName);
                soffseth = ista && $.ui.hasScroll(pr[0], "left") ? 0 : that.sizeDiff.height;
                soffsetw = ista ? 0 : that.sizeDiff.width;
                s = {
                    "width": that.helper.width() - soffsetw,
                    "height": that.helper.height() - soffseth
                };
                left = parseInt(that.element.css("left"), 10) + (that.position.left - that.originalPosition.left) || null;
                top = parseInt(that.element.css("top"), 10) + (that.position.top - that.originalPosition.top) || null;
                if (!o.animate) this.element.css($.extend(s, {
                    "top": top,
                    "left": left
                }));
                that.helper.height(that.size.height);
                that.helper.width(that.size.width);
                if (this._helper && !o.animate) this._proportionallyResize();
            }
            $("body").css("cursor", "auto");
            this.element.removeClass("ui-resizable-resizing");
            this._propagate("stop", event);
            if (this._helper) this.helper.remove();
            return false;
        },
        "_updateVirtualBoundaries": function(forceAspectRatio) {
            var pMinWidth, pMaxWidth, pMinHeight, pMaxHeight, b, o = this.options;
            b = {
                "minWidth": isNumber(o.minWidth) ? o.minWidth : 0,
                "maxWidth": isNumber(o.maxWidth) ? o.maxWidth : 1/0,
                "minHeight": isNumber(o.minHeight) ? o.minHeight : 0,
                "maxHeight": isNumber(o.maxHeight) ? o.maxHeight : 1/0
            };
            if (this._aspectRatio || forceAspectRatio) {
                pMinWidth = b.minHeight * this.aspectRatio;
                pMinHeight = b.minWidth / this.aspectRatio;
                pMaxWidth = b.maxHeight * this.aspectRatio;
                pMaxHeight = b.maxWidth / this.aspectRatio;
                if (pMinWidth > b.minWidth) b.minWidth = pMinWidth;
                if (pMinHeight > b.minHeight) b.minHeight = pMinHeight;
                if (pMaxWidth < b.maxWidth) b.maxWidth = pMaxWidth;
                if (pMaxHeight < b.maxHeight) b.maxHeight = pMaxHeight;
            }
            this._vBoundaries = b;
        },
        "_updateCache": function(data) {
            this.offset = this.helper.offset();
            if (isNumber(data.left)) this.position.left = data.left;
            if (isNumber(data.top)) this.position.top = data.top;
            if (isNumber(data.height)) this.size.height = data.height;
            if (isNumber(data.width)) this.size.width = data.width;
        },
        "_updateRatio": function(data) {
            var cpos = this.position, csize = this.size, a = this.axis;
            if (isNumber(data.height)) data.width = data.height * this.aspectRatio; else if (isNumber(data.width)) data.height = data.width / this.aspectRatio;
            if ("sw" === a) {
                data.left = cpos.left + (csize.width - data.width);
                data.top = null;
            }
            if ("nw" === a) {
                data.top = cpos.top + (csize.height - data.height);
                data.left = cpos.left + (csize.width - data.width);
            }
            return data;
        },
        "_respectSize": function(data) {
            var o = this._vBoundaries, a = this.axis, ismaxw = isNumber(data.width) && o.maxWidth && o.maxWidth < data.width, ismaxh = isNumber(data.height) && o.maxHeight && o.maxHeight < data.height, isminw = isNumber(data.width) && o.minWidth && o.minWidth > data.width, isminh = isNumber(data.height) && o.minHeight && o.minHeight > data.height, dw = this.originalPosition.left + this.originalSize.width, dh = this.position.top + this.size.height, cw = /sw|nw|w/.test(a), ch = /nw|ne|n/.test(a);
            if (isminw) data.width = o.minWidth;
            if (isminh) data.height = o.minHeight;
            if (ismaxw) data.width = o.maxWidth;
            if (ismaxh) data.height = o.maxHeight;
            if (isminw && cw) data.left = dw - o.minWidth;
            if (ismaxw && cw) data.left = dw - o.maxWidth;
            if (isminh && ch) data.top = dh - o.minHeight;
            if (ismaxh && ch) data.top = dh - o.maxHeight;
            if (!data.width && !data.height && !data.left && data.top) data.top = null; else if (!data.width && !data.height && !data.top && data.left) data.left = null;
            return data;
        },
        "_proportionallyResize": function() {
            if (!this._proportionallyResizeElements.length) return;
            var i, j, borders, paddings, prel, element = this.helper || this.element;
            for (i = 0; i < this._proportionallyResizeElements.length; i++) {
                prel = this._proportionallyResizeElements[i];
                if (!this.borderDif) {
                    this.borderDif = [];
                    borders = [ prel.css("borderTopWidth"), prel.css("borderRightWidth"), prel.css("borderBottomWidth"), prel.css("borderLeftWidth") ];
                    paddings = [ prel.css("paddingTop"), prel.css("paddingRight"), prel.css("paddingBottom"), prel.css("paddingLeft") ];
                    for (j = 0; j < borders.length; j++) this.borderDif[j] = (parseInt(borders[j], 10) || 0) + (parseInt(paddings[j], 10) || 0);
                }
                prel.css({
                    "height": element.height() - this.borderDif[0] - this.borderDif[2] || 0,
                    "width": element.width() - this.borderDif[1] - this.borderDif[3] || 0
                });
            }
        },
        "_renderProxy": function() {
            var el = this.element, o = this.options;
            this.elementOffset = el.offset();
            if (this._helper) {
                this.helper = this.helper || $("<div style='overflow:hidden;'></div>");
                this.helper.addClass(this._helper).css({
                    "width": this.element.outerWidth() - 1,
                    "height": this.element.outerHeight() - 1,
                    "position": "absolute",
                    "left": this.elementOffset.left + "px",
                    "top": this.elementOffset.top + "px",
                    "zIndex": ++o.zIndex
                });
                this.helper.appendTo("body").disableSelection();
            } else this.helper = this.element;
        },
        "_change": {
            "e": function(event, dx) {
                return {
                    "width": this.originalSize.width + dx
                };
            },
            "w": function(event, dx) {
                var cs = this.originalSize, sp = this.originalPosition;
                return {
                    "left": sp.left + dx,
                    "width": cs.width - dx
                };
            },
            "n": function(event, dx, dy) {
                var cs = this.originalSize, sp = this.originalPosition;
                return {
                    "top": sp.top + dy,
                    "height": cs.height - dy
                };
            },
            "s": function(event, dx, dy) {
                return {
                    "height": this.originalSize.height + dy
                };
            },
            "se": function(event, dx, dy) {
                return $.extend(this._change.s.apply(this, arguments), this._change.e.apply(this, [ event, dx, dy ]));
            },
            "sw": function(event, dx, dy) {
                return $.extend(this._change.s.apply(this, arguments), this._change.w.apply(this, [ event, dx, dy ]));
            },
            "ne": function(event, dx, dy) {
                return $.extend(this._change.n.apply(this, arguments), this._change.e.apply(this, [ event, dx, dy ]));
            },
            "nw": function(event, dx, dy) {
                return $.extend(this._change.n.apply(this, arguments), this._change.w.apply(this, [ event, dx, dy ]));
            }
        },
        "_propagate": function(n, event) {
            $.ui.plugin.call(this, n, [ event, this.ui() ]);
            "resize" !== n && this._trigger(n, event, this.ui());
        },
        "plugins": {},
        "ui": function() {
            return {
                "originalElement": this.originalElement,
                "element": this.element,
                "helper": this.helper,
                "position": this.position,
                "size": this.size,
                "originalSize": this.originalSize,
                "originalPosition": this.originalPosition
            };
        }
    });
    $.ui.plugin.add("resizable", "animate", {
        "stop": function(event) {
            var that = $(this).data("ui-resizable"), o = that.options, pr = that._proportionallyResizeElements, ista = pr.length && /textarea/i.test(pr[0].nodeName), soffseth = ista && $.ui.hasScroll(pr[0], "left") ? 0 : that.sizeDiff.height, soffsetw = ista ? 0 : that.sizeDiff.width, style = {
                "width": that.size.width - soffsetw,
                "height": that.size.height - soffseth
            }, left = parseInt(that.element.css("left"), 10) + (that.position.left - that.originalPosition.left) || null, top = parseInt(that.element.css("top"), 10) + (that.position.top - that.originalPosition.top) || null;
            that.element.animate($.extend(style, top && left ? {
                "top": top,
                "left": left
            } : {}), {
                "duration": o.animateDuration,
                "easing": o.animateEasing,
                "step": function() {
                    var data = {
                        "width": parseInt(that.element.css("width"), 10),
                        "height": parseInt(that.element.css("height"), 10),
                        "top": parseInt(that.element.css("top"), 10),
                        "left": parseInt(that.element.css("left"), 10)
                    };
                    if (pr && pr.length) $(pr[0]).css({
                        "width": data.width,
                        "height": data.height
                    });
                    that._updateCache(data);
                    that._propagate("resize", event);
                }
            });
        }
    });
    $.ui.plugin.add("resizable", "containment", {
        "start": function() {
            var element, p, co, ch, cw, width, height, that = $(this).data("ui-resizable"), o = that.options, el = that.element, oc = o.containment, ce = oc instanceof $ ? oc.get(0) : /parent/.test(oc) ? el.parent().get(0) : oc;
            if (!ce) return;
            that.containerElement = $(ce);
            if (/document/.test(oc) || oc === document) {
                that.containerOffset = {
                    "left": 0,
                    "top": 0
                };
                that.containerPosition = {
                    "left": 0,
                    "top": 0
                };
                that.parentData = {
                    "element": $(document),
                    "left": 0,
                    "top": 0,
                    "width": $(document).width(),
                    "height": $(document).height() || document.body.parentNode.scrollHeight
                };
            } else {
                element = $(ce);
                p = [];
                $([ "Top", "Right", "Left", "Bottom" ]).each(function(i, name) {
                    p[i] = num(element.css("padding" + name));
                });
                that.containerOffset = element.offset();
                that.containerPosition = element.position();
                that.containerSize = {
                    "height": element.innerHeight() - p[3],
                    "width": element.innerWidth() - p[1]
                };
                co = that.containerOffset;
                ch = that.containerSize.height;
                cw = that.containerSize.width;
                width = $.ui.hasScroll(ce, "left") ? ce.scrollWidth : cw;
                height = $.ui.hasScroll(ce) ? ce.scrollHeight : ch;
                that.parentData = {
                    "element": ce,
                    "left": co.left,
                    "top": co.top,
                    "width": width,
                    "height": height
                };
            }
        },
        "resize": function(event) {
            var woset, hoset, isParent, isOffsetRelative, that = $(this).data("ui-resizable"), o = that.options, co = that.containerOffset, cp = that.position, pRatio = that._aspectRatio || event.shiftKey, cop = {
                "top": 0,
                "left": 0
            }, ce = that.containerElement;
            if (ce[0] !== document && /static/.test(ce.css("position"))) cop = co;
            if (cp.left < (that._helper ? co.left : 0)) {
                that.size.width = that.size.width + (that._helper ? that.position.left - co.left : that.position.left - cop.left);
                if (pRatio) that.size.height = that.size.width / that.aspectRatio;
                that.position.left = o.helper ? co.left : 0;
            }
            if (cp.top < (that._helper ? co.top : 0)) {
                that.size.height = that.size.height + (that._helper ? that.position.top - co.top : that.position.top);
                if (pRatio) that.size.width = that.size.height * that.aspectRatio;
                that.position.top = that._helper ? co.top : 0;
            }
            that.offset.left = that.parentData.left + that.position.left;
            that.offset.top = that.parentData.top + that.position.top;
            woset = Math.abs((that._helper ? that.offset.left - cop.left : that.offset.left - cop.left) + that.sizeDiff.width);
            hoset = Math.abs((that._helper ? that.offset.top - cop.top : that.offset.top - co.top) + that.sizeDiff.height);
            isParent = that.containerElement.get(0) === that.element.parent().get(0);
            isOffsetRelative = /relative|absolute/.test(that.containerElement.css("position"));
            if (isParent && isOffsetRelative) woset -= Math.abs(that.parentData.left);
            if (woset + that.size.width >= that.parentData.width) {
                that.size.width = that.parentData.width - woset;
                if (pRatio) that.size.height = that.size.width / that.aspectRatio;
            }
            if (hoset + that.size.height >= that.parentData.height) {
                that.size.height = that.parentData.height - hoset;
                if (pRatio) that.size.width = that.size.height * that.aspectRatio;
            }
        },
        "stop": function() {
            var that = $(this).data("ui-resizable"), o = that.options, co = that.containerOffset, cop = that.containerPosition, ce = that.containerElement, helper = $(that.helper), ho = helper.offset(), w = helper.outerWidth() - that.sizeDiff.width, h = helper.outerHeight() - that.sizeDiff.height;
            if (that._helper && !o.animate && /relative/.test(ce.css("position"))) $(this).css({
                "left": ho.left - cop.left - co.left,
                "width": w,
                "height": h
            });
            if (that._helper && !o.animate && /static/.test(ce.css("position"))) $(this).css({
                "left": ho.left - cop.left - co.left,
                "width": w,
                "height": h
            });
        }
    });
    $.ui.plugin.add("resizable", "alsoResize", {
        "start": function() {
            var that = $(this).data("ui-resizable"), o = that.options, _store = function(exp) {
                $(exp).each(function() {
                    var el = $(this);
                    el.data("ui-resizable-alsoresize", {
                        "width": parseInt(el.width(), 10),
                        "height": parseInt(el.height(), 10),
                        "left": parseInt(el.css("left"), 10),
                        "top": parseInt(el.css("top"), 10)
                    });
                });
            };
            if ("object" === typeof o.alsoResize && !o.alsoResize.parentNode) if (o.alsoResize.length) {
                o.alsoResize = o.alsoResize[0];
                _store(o.alsoResize);
            } else $.each(o.alsoResize, function(exp) {
                _store(exp);
            }); else _store(o.alsoResize);
        },
        "resize": function(event, ui) {
            var that = $(this).data("ui-resizable"), o = that.options, os = that.originalSize, op = that.originalPosition, delta = {
                "height": that.size.height - os.height || 0,
                "width": that.size.width - os.width || 0,
                "top": that.position.top - op.top || 0,
                "left": that.position.left - op.left || 0
            }, _alsoResize = function(exp, c) {
                $(exp).each(function() {
                    var el = $(this), start = $(this).data("ui-resizable-alsoresize"), style = {}, css = c && c.length ? c : el.parents(ui.originalElement[0]).length ? [ "width", "height" ] : [ "width", "height", "top", "left" ];
                    $.each(css, function(i, prop) {
                        var sum = (start[prop] || 0) + (delta[prop] || 0);
                        if (sum && sum >= 0) style[prop] = sum || null;
                    });
                    el.css(style);
                });
            };
            if ("object" === typeof o.alsoResize && !o.alsoResize.nodeType) $.each(o.alsoResize, function(exp, c) {
                _alsoResize(exp, c);
            }); else _alsoResize(o.alsoResize);
        },
        "stop": function() {
            $(this).removeData("resizable-alsoresize");
        }
    });
    $.ui.plugin.add("resizable", "ghost", {
        "start": function() {
            var that = $(this).data("ui-resizable"), o = that.options, cs = that.size;
            that.ghost = that.originalElement.clone();
            that.ghost.css({
                "opacity": .25,
                "display": "block",
                "position": "relative",
                "height": cs.height,
                "width": cs.width,
                "margin": 0,
                "left": 0,
                "top": 0
            }).addClass("ui-resizable-ghost").addClass("string" === typeof o.ghost ? o.ghost : "");
            that.ghost.appendTo(that.helper);
        },
        "resize": function() {
            var that = $(this).data("ui-resizable");
            if (that.ghost) that.ghost.css({
                "position": "relative",
                "height": that.size.height,
                "width": that.size.width
            });
        },
        "stop": function() {
            var that = $(this).data("ui-resizable");
            if (that.ghost && that.helper) that.helper.get(0).removeChild(that.ghost.get(0));
        }
    });
    $.ui.plugin.add("resizable", "grid", {
        "resize": function() {
            var that = $(this).data("ui-resizable"), o = that.options, cs = that.size, os = that.originalSize, op = that.originalPosition, a = that.axis, grid = "number" === typeof o.grid ? [ o.grid, o.grid ] : o.grid, gridX = grid[0] || 1, gridY = grid[1] || 1, ox = Math.round((cs.width - os.width) / gridX) * gridX, oy = Math.round((cs.height - os.height) / gridY) * gridY, newWidth = os.width + ox, newHeight = os.height + oy, isMaxWidth = o.maxWidth && o.maxWidth < newWidth, isMaxHeight = o.maxHeight && o.maxHeight < newHeight, isMinWidth = o.minWidth && o.minWidth > newWidth, isMinHeight = o.minHeight && o.minHeight > newHeight;
            o.grid = grid;
            if (isMinWidth) newWidth += gridX;
            if (isMinHeight) newHeight += gridY;
            if (isMaxWidth) newWidth -= gridX;
            if (isMaxHeight) newHeight -= gridY;
            if (/^(se|s|e)$/.test(a)) {
                that.size.width = newWidth;
                that.size.height = newHeight;
            } else if (/^(ne)$/.test(a)) {
                that.size.width = newWidth;
                that.size.height = newHeight;
                that.position.top = op.top - oy;
            } else if (/^(sw)$/.test(a)) {
                that.size.width = newWidth;
                that.size.height = newHeight;
                that.position.left = op.left - ox;
            } else {
                if (newHeight - gridY > 0) {
                    that.size.height = newHeight;
                    that.position.top = op.top - oy;
                } else {
                    that.size.height = gridY;
                    that.position.top = op.top + os.height - gridY;
                }
                if (newWidth - gridX > 0) {
                    that.size.width = newWidth;
                    that.position.left = op.left - ox;
                } else {
                    that.size.width = gridX;
                    that.position.left = op.left + os.width - gridX;
                }
            }
        }
    });
}(jQuery);

!function($, undefined) {
    var tabId = 0, rhash = /#.*$/;
    function getNextTabId() {
        return ++tabId;
    }
    function isLocal(anchor) {
        anchor = anchor.cloneNode(false);
        return anchor.hash.length > 1 && decodeURIComponent(anchor.href.replace(rhash, "")) === decodeURIComponent(location.href.replace(rhash, ""));
    }
    $.widget("ui.tabs", {
        "version": "@VERSION",
        "delay": 300,
        "options": {
            "active": null,
            "collapsible": false,
            "event": "click",
            "heightStyle": "content",
            "hide": null,
            "show": null,
            "activate": null,
            "beforeActivate": null,
            "beforeLoad": null,
            "load": null
        },
        "_create": function() {
            var that = this, options = this.options;
            this.running = false;
            this.element.addClass("ui-tabs ui-widget ui-widget-content ui-corner-all").toggleClass("ui-tabs-collapsible", options.collapsible).delegate(".ui-tabs-nav > li", "mousedown" + this.eventNamespace, function(event) {
                if ($(this).is(".ui-state-disabled")) event.preventDefault();
            }).delegate(".ui-tabs-anchor", "focus" + this.eventNamespace, function() {
                if ($(this).closest("li").is(".ui-state-disabled")) this.blur();
            });
            this._processTabs();
            options.active = this._initialActive();
            if ($.isArray(options.disabled)) options.disabled = $.unique(options.disabled.concat($.map(this.tabs.filter(".ui-state-disabled"), function(li) {
                return that.tabs.index(li);
            }))).sort();
            if (false !== this.options.active && this.anchors.length) this.active = this._findActive(options.active); else this.active = $();
            this._refresh();
            if (this.active.length) this.load(options.active);
        },
        "_initialActive": function() {
            var active = this.options.active, collapsible = this.options.collapsible, locationHash = location.hash.substring(1);
            if (null === active) {
                if (locationHash) this.tabs.each(function(i, tab) {
                    if ($(tab).attr("aria-controls") === locationHash) {
                        active = i;
                        return false;
                    }
                });
                if (null === active) active = this.tabs.index(this.tabs.filter(".ui-tabs-active"));
                if (null === active || active === -1) active = this.tabs.length ? 0 : false;
            }
            if (false !== active) {
                active = this.tabs.index(this.tabs.eq(active));
                if (active === -1) active = collapsible ? false : 0;
            }
            if (!collapsible && false === active && this.anchors.length) active = 0;
            return active;
        },
        "_getCreateEventData": function() {
            return {
                "tab": this.active,
                "panel": !this.active.length ? $() : this._getPanelForTab(this.active)
            };
        },
        "_tabKeydown": function(event) {
            var focusedTab = $(this.document[0].activeElement).closest("li"), selectedIndex = this.tabs.index(focusedTab), goingForward = true;
            if (this._handlePageNav(event)) return;
            switch (event.keyCode) {
              case $.ui.keyCode.RIGHT:
              case $.ui.keyCode.DOWN:
                selectedIndex++;
                break;

              case $.ui.keyCode.UP:
              case $.ui.keyCode.LEFT:
                goingForward = false;
                selectedIndex--;
                break;

              case $.ui.keyCode.END:
                selectedIndex = this.anchors.length - 1;
                break;

              case $.ui.keyCode.HOME:
                selectedIndex = 0;
                break;

              case $.ui.keyCode.SPACE:
                event.preventDefault();
                clearTimeout(this.activating);
                this._activate(selectedIndex);
                return;

              case $.ui.keyCode.ENTER:
                event.preventDefault();
                clearTimeout(this.activating);
                this._activate(selectedIndex === this.options.active ? false : selectedIndex);
                return;

              default:
                return;
            }
            event.preventDefault();
            clearTimeout(this.activating);
            selectedIndex = this._focusNextTab(selectedIndex, goingForward);
            if (!event.ctrlKey) {
                focusedTab.attr("aria-selected", "false");
                this.tabs.eq(selectedIndex).attr("aria-selected", "true");
                this.activating = this._delay(function() {
                    this.option("active", selectedIndex);
                }, this.delay);
            }
        },
        "_panelKeydown": function(event) {
            if (this._handlePageNav(event)) return;
            if (event.ctrlKey && event.keyCode === $.ui.keyCode.UP) {
                event.preventDefault();
                this.active.focus();
            }
        },
        "_handlePageNav": function(event) {
            if (event.altKey && event.keyCode === $.ui.keyCode.PAGE_UP) {
                this._activate(this._focusNextTab(this.options.active - 1, false));
                return true;
            }
            if (event.altKey && event.keyCode === $.ui.keyCode.PAGE_DOWN) {
                this._activate(this._focusNextTab(this.options.active + 1, true));
                return true;
            }
        },
        "_findNextTab": function(index, goingForward) {
            var lastTabIndex = this.tabs.length - 1;
            function constrain() {
                if (index > lastTabIndex) index = 0;
                if (index < 0) index = lastTabIndex;
                return index;
            }
            while ($.inArray(constrain(), this.options.disabled) !== -1) index = goingForward ? index + 1 : index - 1;
            return index;
        },
        "_focusNextTab": function(index, goingForward) {
            index = this._findNextTab(index, goingForward);
            this.tabs.eq(index).focus();
            return index;
        },
        "_setOption": function(key, value) {
            if ("active" === key) {
                this._activate(value);
                return;
            }
            if ("disabled" === key) {
                this._setupDisabled(value);
                return;
            }
            this._super(key, value);
            if ("collapsible" === key) {
                this.element.toggleClass("ui-tabs-collapsible", value);
                if (!value && false === this.options.active) this._activate(0);
            }
            if ("event" === key) this._setupEvents(value);
            if ("heightStyle" === key) this._setupHeightStyle(value);
        },
        "_tabId": function(tab) {
            return tab.attr("aria-controls") || "ui-tabs-" + getNextTabId();
        },
        "_sanitizeSelector": function(hash) {
            return hash ? hash.replace(/[!"$%&'()*+,.\/:;<=>?@\[\]\^`{|}~]/g, "\\$&") : "";
        },
        "refresh": function() {
            var options = this.options, lis = this.tablist.children(":has(a[href])");
            options.disabled = $.map(lis.filter(".ui-state-disabled"), function(tab) {
                return lis.index(tab);
            });
            this._processTabs();
            if (false === options.active || !this.anchors.length) {
                options.active = false;
                this.active = $();
            } else if (this.active.length && !$.contains(this.tablist[0], this.active[0])) if (this.tabs.length === options.disabled.length) {
                options.active = false;
                this.active = $();
            } else this._activate(this._findNextTab(Math.max(0, options.active - 1), false)); else options.active = this.tabs.index(this.active);
            this._refresh();
        },
        "_refresh": function() {
            this._setupDisabled(this.options.disabled);
            this._setupEvents(this.options.event);
            this._setupHeightStyle(this.options.heightStyle);
            this.tabs.not(this.active).attr({
                "aria-selected": "false",
                "tabIndex": -1
            });
            this.panels.not(this._getPanelForTab(this.active)).hide().attr({
                "aria-expanded": "false",
                "aria-hidden": "true"
            });
            if (!this.active.length) this.tabs.eq(0).attr("tabIndex", 0); else {
                this.active.addClass("ui-tabs-active ui-state-active").attr({
                    "aria-selected": "true",
                    "tabIndex": 0
                });
                this._getPanelForTab(this.active).show().attr({
                    "aria-expanded": "true",
                    "aria-hidden": "false"
                });
            }
        },
        "_processTabs": function() {
            var that = this;
            this.tablist = this._getList().addClass("ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all").attr("role", "tablist");
            this.tabs = this.tablist.find("> li:has(a[href])").addClass("ui-state-default ui-corner-top").attr({
                "role": "tab",
                "tabIndex": -1
            });
            this.anchors = this.tabs.map(function() {
                return $("a", this)[0];
            }).addClass("ui-tabs-anchor").attr({
                "role": "presentation",
                "tabIndex": -1
            });
            this.panels = $();
            this.anchors.each(function(i, anchor) {
                var selector, panel, panelId, anchorId = $(anchor).uniqueId().attr("id"), tab = $(anchor).closest("li"), originalAriaControls = tab.attr("aria-controls");
                if (isLocal(anchor)) {
                    selector = anchor.hash;
                    panel = that.element.find(that._sanitizeSelector(selector));
                } else {
                    panelId = that._tabId(tab);
                    selector = "#" + panelId;
                    panel = that.element.find(selector);
                    if (!panel.length) {
                        panel = that._createPanel(panelId);
                        panel.insertAfter(that.panels[i - 1] || that.tablist);
                    }
                    panel.attr("aria-live", "polite");
                }
                if (panel.length) that.panels = that.panels.add(panel);
                if (originalAriaControls) tab.data("ui-tabs-aria-controls", originalAriaControls);
                tab.attr({
                    "aria-controls": selector.substring(1),
                    "aria-labelledby": anchorId
                });
                panel.attr("aria-labelledby", anchorId);
            });
            this.panels.addClass("ui-tabs-panel ui-widget-content ui-corner-bottom").attr("role", "tabpanel");
        },
        "_getList": function() {
            return this.tablist || this.element.find("ol,ul").eq(0);
        },
        "_createPanel": function(id) {
            return $("<div>").attr("id", id).addClass("ui-tabs-panel ui-widget-content ui-corner-bottom").data("ui-tabs-destroy", true);
        },
        "_setupDisabled": function(disabled) {
            if ($.isArray(disabled)) if (!disabled.length) disabled = false; else if (disabled.length === this.anchors.length) disabled = true;
            for (var i = 0, li; li = this.tabs[i]; i++) if (true === disabled || $.inArray(i, disabled) !== -1) $(li).addClass("ui-state-disabled").attr("aria-disabled", "true"); else $(li).removeClass("ui-state-disabled").removeAttr("aria-disabled");
            this.options.disabled = disabled;
        },
        "_setupEvents": function(event) {
            var events = {
                "click": function(event) {
                    event.preventDefault();
                }
            };
            if (event) $.each(event.split(" "), function(index, eventName) {
                events[eventName] = "_eventHandler";
            });
            this._off(this.anchors.add(this.tabs).add(this.panels));
            this._on(this.anchors, events);
            this._on(this.tabs, {
                "keydown": "_tabKeydown"
            });
            this._on(this.panels, {
                "keydown": "_panelKeydown"
            });
            this._focusable(this.tabs);
            this._hoverable(this.tabs);
        },
        "_setupHeightStyle": function(heightStyle) {
            var maxHeight, parent = this.element.parent();
            if ("fill" === heightStyle) {
                maxHeight = parent.height();
                maxHeight -= this.element.outerHeight() - this.element.height();
                this.element.siblings(":visible").each(function() {
                    var elem = $(this), position = elem.css("position");
                    if ("absolute" === position || "fixed" === position) return;
                    maxHeight -= elem.outerHeight(true);
                });
                this.element.children().not(this.panels).each(function() {
                    maxHeight -= $(this).outerHeight(true);
                });
                this.panels.each(function() {
                    $(this).height(Math.max(0, maxHeight - $(this).innerHeight() + $(this).height()));
                }).css("overflow", "auto");
            } else if ("auto" === heightStyle) {
                maxHeight = 0;
                this.panels.each(function() {
                    maxHeight = Math.max(maxHeight, $(this).height("").height());
                }).height(maxHeight);
            }
        },
        "_eventHandler": function(event) {
            var options = this.options, active = this.active, anchor = $(event.currentTarget), tab = anchor.closest("li"), clickedIsActive = tab[0] === active[0], collapsing = clickedIsActive && options.collapsible, toShow = collapsing ? $() : this._getPanelForTab(tab), toHide = !active.length ? $() : this._getPanelForTab(active), eventData = {
                "oldTab": active,
                "oldPanel": toHide,
                "newTab": collapsing ? $() : tab,
                "newPanel": toShow
            };
            event.preventDefault();
            if (tab.hasClass("ui-state-disabled") || tab.hasClass("ui-tabs-loading") || this.running || clickedIsActive && !options.collapsible || false === this._trigger("beforeActivate", event, eventData)) return;
            options.active = collapsing ? false : this.tabs.index(tab);
            this.active = clickedIsActive ? $() : tab;
            if (this.xhr) this.xhr.abort();
            if (!toHide.length && !toShow.length) $.error("jQuery UI Tabs: Mismatching fragment identifier.");
            if (toShow.length) this.load(this.tabs.index(tab), event);
            this._toggle(event, eventData);
        },
        "_toggle": function(event, eventData) {
            var that = this, toShow = eventData.newPanel, toHide = eventData.oldPanel;
            this.running = true;
            function complete() {
                that.running = false;
                that._trigger("activate", event, eventData);
            }
            function show() {
                eventData.newTab.closest("li").addClass("ui-tabs-active ui-state-active");
                if (toShow.length && that.options.show) that._show(toShow, that.options.show, complete); else {
                    toShow.show();
                    complete();
                }
            }
            if (toHide.length && this.options.hide) this._hide(toHide, this.options.hide, function() {
                eventData.oldTab.closest("li").removeClass("ui-tabs-active ui-state-active");
                show();
            }); else {
                eventData.oldTab.closest("li").removeClass("ui-tabs-active ui-state-active");
                toHide.hide();
                show();
            }
            toHide.attr({
                "aria-expanded": "false",
                "aria-hidden": "true"
            });
            eventData.oldTab.attr("aria-selected", "false");
            if (toShow.length && toHide.length) eventData.oldTab.attr("tabIndex", -1); else if (toShow.length) this.tabs.filter(function() {
                return 0 === $(this).attr("tabIndex");
            }).attr("tabIndex", -1);
            toShow.attr({
                "aria-expanded": "true",
                "aria-hidden": "false"
            });
            eventData.newTab.attr({
                "aria-selected": "true",
                "tabIndex": 0
            });
        },
        "_activate": function(index) {
            var anchor, active = this._findActive(index);
            if (active[0] === this.active[0]) return;
            if (!active.length) active = this.active;
            anchor = active.find(".ui-tabs-anchor")[0];
            this._eventHandler({
                "target": anchor,
                "currentTarget": anchor,
                "preventDefault": $.noop
            });
        },
        "_findActive": function(index) {
            return false === index ? $() : this.tabs.eq(index);
        },
        "_getIndex": function(index) {
            if ("string" === typeof index) index = this.anchors.index(this.anchors.filter("[href$='" + index + "']"));
            return index;
        },
        "_destroy": function() {
            if (this.xhr) this.xhr.abort();
            this.element.removeClass("ui-tabs ui-widget ui-widget-content ui-corner-all ui-tabs-collapsible");
            this.tablist.removeClass("ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all").removeAttr("role");
            this.anchors.removeClass("ui-tabs-anchor").removeAttr("role").removeAttr("tabIndex").removeUniqueId();
            this.tabs.add(this.panels).each(function() {
                if ($.data(this, "ui-tabs-destroy")) $(this).remove(); else $(this).removeClass("ui-state-default ui-state-active ui-state-disabled " + "ui-corner-top ui-corner-bottom ui-widget-content ui-tabs-active ui-tabs-panel").removeAttr("tabIndex").removeAttr("aria-live").removeAttr("aria-busy").removeAttr("aria-selected").removeAttr("aria-labelledby").removeAttr("aria-hidden").removeAttr("aria-expanded").removeAttr("role");
            });
            this.tabs.each(function() {
                var li = $(this), prev = li.data("ui-tabs-aria-controls");
                if (prev) li.attr("aria-controls", prev).removeData("ui-tabs-aria-controls"); else li.removeAttr("aria-controls");
            });
            this.panels.show();
            if ("content" !== this.options.heightStyle) this.panels.css("height", "");
        },
        "enable": function(index) {
            var disabled = this.options.disabled;
            if (false === disabled) return;
            if (index === undefined) disabled = false; else {
                index = this._getIndex(index);
                if ($.isArray(disabled)) disabled = $.map(disabled, function(num) {
                    return num !== index ? num : null;
                }); else disabled = $.map(this.tabs, function(li, num) {
                    return num !== index ? num : null;
                });
            }
            this._setupDisabled(disabled);
        },
        "disable": function(index) {
            var disabled = this.options.disabled;
            if (true === disabled) return;
            if (index === undefined) disabled = true; else {
                index = this._getIndex(index);
                if ($.inArray(index, disabled) !== -1) return;
                if ($.isArray(disabled)) disabled = $.merge([ index ], disabled).sort(); else disabled = [ index ];
            }
            this._setupDisabled(disabled);
        },
        "load": function(index, event) {
            index = this._getIndex(index);
            var that = this, tab = this.tabs.eq(index), anchor = tab.find(".ui-tabs-anchor"), panel = this._getPanelForTab(tab), eventData = {
                "tab": tab,
                "panel": panel
            };
            if (isLocal(anchor[0])) return;
            this.xhr = $.ajax(this._ajaxSettings(anchor, event, eventData));
            if (this.xhr && "canceled" !== this.xhr.statusText) {
                tab.addClass("ui-tabs-loading");
                panel.attr("aria-busy", "true");
                this.xhr.success(function(response) {
                    setTimeout(function() {
                        panel.html(response);
                        that._trigger("load", event, eventData);
                    }, 1);
                }).complete(function(jqXHR, status) {
                    setTimeout(function() {
                        if ("abort" === status) that.panels.stop(false, true);
                        tab.removeClass("ui-tabs-loading");
                        panel.removeAttr("aria-busy");
                        if (jqXHR === that.xhr) delete that.xhr;
                    }, 1);
                });
            }
        },
        "_ajaxSettings": function(anchor, event, eventData) {
            var that = this;
            return {
                "url": anchor.attr("href"),
                "beforeSend": function(jqXHR, settings) {
                    return that._trigger("beforeLoad", event, $.extend({
                        "jqXHR": jqXHR,
                        "ajaxSettings": settings
                    }, eventData));
                }
            };
        },
        "_getPanelForTab": function(tab) {
            var id = $(tab).attr("aria-controls");
            return this.element.find(this._sanitizeSelector("#" + id));
        }
    });
}(jQuery);

!function($, undefined) {
    function isOverAxis(x, reference, size) {
        return x > reference && x < reference + size;
    }
    function isFloating(item) {
        return /left|right/.test(item.css("float")) || /inline|table-cell/.test(item.css("display"));
    }
    $.widget("ui.sortable", $.ui.mouse, {
        "version": "@VERSION",
        "widgetEventPrefix": "sort",
        "ready": false,
        "options": {
            "appendTo": "parent",
            "axis": false,
            "connectWith": false,
            "containment": false,
            "cursor": "auto",
            "cursorAt": false,
            "dropOnEmpty": true,
            "forcePlaceholderSize": false,
            "forceHelperSize": false,
            "grid": false,
            "handle": false,
            "helper": "original",
            "items": "> *",
            "opacity": false,
            "placeholder": false,
            "revert": false,
            "scroll": true,
            "scrollSensitivity": 20,
            "scrollSpeed": 20,
            "scope": "default",
            "tolerance": "intersect",
            "zIndex": 1e3,
            "activate": null,
            "beforeStop": null,
            "change": null,
            "deactivate": null,
            "out": null,
            "over": null,
            "receive": null,
            "remove": null,
            "sort": null,
            "start": null,
            "stop": null,
            "update": null
        },
        "_create": function() {
            var o = this.options;
            this.containerCache = {};
            this.element.addClass("ui-sortable");
            this.refresh();
            this.floating = this.items.length ? "x" === o.axis || isFloating(this.items[0].item) : false;
            this.offset = this.element.offset();
            this._mouseInit();
            this.ready = true;
        },
        "_destroy": function() {
            this.element.removeClass("ui-sortable ui-sortable-disabled");
            this._mouseDestroy();
            for (var i = this.items.length - 1; i >= 0; i--) this.items[i].item.removeData(this.widgetName + "-item");
            return this;
        },
        "_setOption": function(key, value) {
            if ("disabled" === key) {
                this.options[key] = value;
                this.widget().toggleClass("ui-sortable-disabled", !!value);
            } else $.Widget.prototype._setOption.apply(this, arguments);
        },
        "_mouseCapture": function(event, overrideHandle) {
            var currentItem = null, validHandle = false, that = this;
            if (this.reverting) return false;
            if (this.options.disabled || "static" === this.options.type) return false;
            this._refreshItems(event);
            $(event.target).parents().each(function() {
                if ($.data(this, that.widgetName + "-item") === that) {
                    currentItem = $(this);
                    return false;
                }
            });
            if ($.data(event.target, that.widgetName + "-item") === that) currentItem = $(event.target);
            if (!currentItem) return false;
            if (this.options.handle && !overrideHandle) {
                $(this.options.handle, currentItem).find("*").addBack().each(function() {
                    if (this === event.target) validHandle = true;
                });
                if (!validHandle) return false;
            }
            this.currentItem = currentItem;
            this._removeCurrentsFromItems();
            return true;
        },
        "_mouseStart": function(event, overrideHandle, noActivation) {
            var i, body, o = this.options;
            this.currentContainer = this;
            this.refreshPositions();
            this.helper = this._createHelper(event);
            this._cacheHelperProportions();
            this._cacheMargins();
            this.scrollParent = this.helper.scrollParent();
            this.offset = this.currentItem.offset();
            this.offset = {
                "top": this.offset.top - this.margins.top,
                "left": this.offset.left - this.margins.left
            };
            $.extend(this.offset, {
                "click": {
                    "left": event.pageX - this.offset.left,
                    "top": event.pageY - this.offset.top
                },
                "parent": this._getParentOffset(),
                "relative": this._getRelativeOffset()
            });
            this.helper.css("position", "absolute");
            this.cssPosition = this.helper.css("position");
            this.originalPosition = this._generatePosition(event);
            this.originalPageX = event.pageX;
            this.originalPageY = event.pageY;
            o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt);
            this.domPosition = {
                "prev": this.currentItem.prev()[0],
                "parent": this.currentItem.parent()[0]
            };
            if (this.helper[0] !== this.currentItem[0]) this.currentItem.hide();
            this._createPlaceholder();
            if (o.containment) this._setContainment();
            if (o.cursor && "auto" !== o.cursor) {
                body = this.document.find("body");
                this.storedCursor = body.css("cursor");
                body.css("cursor", o.cursor);
                this.storedStylesheet = $("<style>*{ cursor: " + o.cursor + " !important; }</style>").appendTo(body);
            }
            if (o.opacity) {
                if (this.helper.css("opacity")) this._storedOpacity = this.helper.css("opacity");
                this.helper.css("opacity", o.opacity);
            }
            if (o.zIndex) {
                if (this.helper.css("zIndex")) this._storedZIndex = this.helper.css("zIndex");
                this.helper.css("zIndex", o.zIndex);
            }
            if (this.scrollParent[0] !== document && "HTML" !== this.scrollParent[0].tagName) this.overflowOffset = this.scrollParent.offset();
            this._trigger("start", event, this._uiHash());
            if (!this._preserveHelperProportions) this._cacheHelperProportions();
            if (!noActivation) for (i = this.containers.length - 1; i >= 0; i--) this.containers[i]._trigger("activate", event, this._uiHash(this));
            if ($.ui.ddmanager) $.ui.ddmanager.current = this;
            if ($.ui.ddmanager && !o.dropBehaviour) $.ui.ddmanager.prepareOffsets(this, event);
            this.dragging = true;
            this.helper.addClass("ui-sortable-helper");
            this._mouseDrag(event);
            return true;
        },
        "_mouseDrag": function(event) {
            var i, item, itemElement, intersection, o = this.options, scrolled = false;
            this.position = this._generatePosition(event);
            this.positionAbs = this._convertPositionTo("absolute");
            if (!this.lastPositionAbs) this.lastPositionAbs = this.positionAbs;
            if (this.options.scroll) {
                if (this.scrollParent[0] !== document && "HTML" !== this.scrollParent[0].tagName) {
                    if (this.overflowOffset.top + this.scrollParent[0].offsetHeight - event.pageY < o.scrollSensitivity) this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop + o.scrollSpeed; else if (event.pageY - this.overflowOffset.top < o.scrollSensitivity) this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop - o.scrollSpeed;
                    if (this.overflowOffset.left + this.scrollParent[0].offsetWidth - event.pageX < o.scrollSensitivity) this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft + o.scrollSpeed; else if (event.pageX - this.overflowOffset.left < o.scrollSensitivity) this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft - o.scrollSpeed;
                } else {
                    if (event.pageY - $(document).scrollTop() < o.scrollSensitivity) scrolled = $(document).scrollTop($(document).scrollTop() - o.scrollSpeed); else if ($(window).height() - (event.pageY - $(document).scrollTop()) < o.scrollSensitivity) scrolled = $(document).scrollTop($(document).scrollTop() + o.scrollSpeed);
                    if (event.pageX - $(document).scrollLeft() < o.scrollSensitivity) scrolled = $(document).scrollLeft($(document).scrollLeft() - o.scrollSpeed); else if ($(window).width() - (event.pageX - $(document).scrollLeft()) < o.scrollSensitivity) scrolled = $(document).scrollLeft($(document).scrollLeft() + o.scrollSpeed);
                }
                if (false !== scrolled && $.ui.ddmanager && !o.dropBehaviour) $.ui.ddmanager.prepareOffsets(this, event);
            }
            this.positionAbs = this._convertPositionTo("absolute");
            if (!this.options.axis || "y" !== this.options.axis) this.helper[0].style.left = this.position.left + "px";
            if (!this.options.axis || "x" !== this.options.axis) this.helper[0].style.top = this.position.top + "px";
            for (i = this.items.length - 1; i >= 0; i--) {
                item = this.items[i];
                itemElement = item.item[0];
                intersection = this._intersectsWithPointer(item);
                if (!intersection) continue;
                if (item.instance !== this.currentContainer) continue;
                if (itemElement !== this.currentItem[0] && this.placeholder[1 === intersection ? "next" : "prev"]()[0] !== itemElement && !$.contains(this.placeholder[0], itemElement) && ("semi-dynamic" === this.options.type ? !$.contains(this.element[0], itemElement) : true)) {
                    this.direction = 1 === intersection ? "down" : "up";
                    if ("pointer" === this.options.tolerance || this._intersectsWithSides(item)) this._rearrange(event, item); else break;
                    this._trigger("change", event, this._uiHash());
                    break;
                }
            }
            this._contactContainers(event);
            if ($.ui.ddmanager) $.ui.ddmanager.drag(this, event);
            this._trigger("sort", event, this._uiHash());
            this.lastPositionAbs = this.positionAbs;
            return false;
        },
        "_mouseStop": function(event, noPropagation) {
            if (!event) return;
            if ($.ui.ddmanager && !this.options.dropBehaviour) $.ui.ddmanager.drop(this, event);
            if (this.options.revert) {
                var that = this, cur = this.placeholder.offset(), axis = this.options.axis, animation = {};
                if (!axis || "x" === axis) animation.left = cur.left - this.offset.parent.left - this.margins.left + (this.offsetParent[0] === document.body ? 0 : this.offsetParent[0].scrollLeft);
                if (!axis || "y" === axis) animation.top = cur.top - this.offset.parent.top - this.margins.top + (this.offsetParent[0] === document.body ? 0 : this.offsetParent[0].scrollTop);
                this.reverting = true;
                $(this.helper).animate(animation, parseInt(this.options.revert, 10) || 500, function() {
                    that._clear(event);
                });
            } else this._clear(event, noPropagation);
            return false;
        },
        "cancel": function() {
            if (this.dragging) {
                this._mouseUp({
                    "target": null
                });
                if ("original" === this.options.helper) this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper"); else this.currentItem.show();
                for (var i = this.containers.length - 1; i >= 0; i--) {
                    this.containers[i]._trigger("deactivate", null, this._uiHash(this));
                    if (this.containers[i].containerCache.over) {
                        this.containers[i]._trigger("out", null, this._uiHash(this));
                        this.containers[i].containerCache.over = 0;
                    }
                }
            }
            if (this.placeholder) {
                if (this.placeholder[0].parentNode) this.placeholder[0].parentNode.removeChild(this.placeholder[0]);
                if ("original" !== this.options.helper && this.helper && this.helper[0].parentNode) this.helper.remove();
                $.extend(this, {
                    "helper": null,
                    "dragging": false,
                    "reverting": false,
                    "_noFinalSort": null
                });
                if (this.domPosition.prev) $(this.domPosition.prev).after(this.currentItem); else $(this.domPosition.parent).prepend(this.currentItem);
            }
            return this;
        },
        "serialize": function(o) {
            var items = this._getItemsAsjQuery(o && o.connected), str = [];
            o = o || {};
            $(items).each(function() {
                var res = ($(o.item || this).attr(o.attribute || "id") || "").match(o.expression || /(.+)[\-=_](.+)/);
                if (res) str.push((o.key || res[1] + "[]") + "=" + (o.key && o.expression ? res[1] : res[2]));
            });
            if (!str.length && o.key) str.push(o.key + "=");
            return str.join("&");
        },
        "toArray": function(o) {
            var items = this._getItemsAsjQuery(o && o.connected), ret = [];
            o = o || {};
            items.each(function() {
                ret.push($(o.item || this).attr(o.attribute || "id") || "");
            });
            return ret;
        },
        "_intersectsWith": function(item) {
            var x1 = this.positionAbs.left, x2 = x1 + this.helperProportions.width, y1 = this.positionAbs.top, y2 = y1 + this.helperProportions.height, l = item.left, r = l + item.width, t = item.top, b = t + item.height, dyClick = this.offset.click.top, dxClick = this.offset.click.left, isOverElementHeight = "x" === this.options.axis || y1 + dyClick > t && y1 + dyClick < b, isOverElementWidth = "y" === this.options.axis || x1 + dxClick > l && x1 + dxClick < r, isOverElement = isOverElementHeight && isOverElementWidth;
            if ("pointer" === this.options.tolerance || this.options.forcePointerForContainers || "pointer" !== this.options.tolerance && this.helperProportions[this.floating ? "width" : "height"] > item[this.floating ? "width" : "height"]) return isOverElement; else return l < x1 + this.helperProportions.width / 2 && x2 - this.helperProportions.width / 2 < r && t < y1 + this.helperProportions.height / 2 && y2 - this.helperProportions.height / 2 < b;
        },
        "_intersectsWithPointer": function(item) {
            var isOverElementHeight = "x" === this.options.axis || isOverAxis(this.positionAbs.top + this.offset.click.top, item.top, item.height), isOverElementWidth = "y" === this.options.axis || isOverAxis(this.positionAbs.left + this.offset.click.left, item.left, item.width), isOverElement = isOverElementHeight && isOverElementWidth, verticalDirection = this._getDragVerticalDirection(), horizontalDirection = this._getDragHorizontalDirection();
            if (!isOverElement) return false;
            return this.floating ? horizontalDirection && "right" === horizontalDirection || "down" === verticalDirection ? 2 : 1 : verticalDirection && ("down" === verticalDirection ? 2 : 1);
        },
        "_intersectsWithSides": function(item) {
            var isOverBottomHalf = isOverAxis(this.positionAbs.top + this.offset.click.top, item.top + item.height / 2, item.height), isOverRightHalf = isOverAxis(this.positionAbs.left + this.offset.click.left, item.left + item.width / 2, item.width), verticalDirection = this._getDragVerticalDirection(), horizontalDirection = this._getDragHorizontalDirection();
            if (this.floating && horizontalDirection) return "right" === horizontalDirection && isOverRightHalf || "left" === horizontalDirection && !isOverRightHalf; else return verticalDirection && ("down" === verticalDirection && isOverBottomHalf || "up" === verticalDirection && !isOverBottomHalf);
        },
        "_getDragVerticalDirection": function() {
            var delta = this.positionAbs.top - this.lastPositionAbs.top;
            return 0 !== delta && (delta > 0 ? "down" : "up");
        },
        "_getDragHorizontalDirection": function() {
            var delta = this.positionAbs.left - this.lastPositionAbs.left;
            return 0 !== delta && (delta > 0 ? "right" : "left");
        },
        "refresh": function(event) {
            this._refreshItems(event);
            this.refreshPositions();
            return this;
        },
        "_connectWith": function() {
            var options = this.options;
            return options.connectWith.constructor === String ? [ options.connectWith ] : options.connectWith;
        },
        "_getItemsAsjQuery": function(connected) {
            var i, j, cur, inst, items = [], queries = [], connectWith = this._connectWith();
            if (connectWith && connected) for (i = connectWith.length - 1; i >= 0; i--) {
                cur = $(connectWith[i]);
                for (j = cur.length - 1; j >= 0; j--) {
                    inst = $.data(cur[j], this.widgetFullName);
                    if (inst && inst !== this && !inst.options.disabled) queries.push([ $.isFunction(inst.options.items) ? inst.options.items.call(inst.element) : $(inst.options.items, inst.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), inst ]);
                }
            }
            queries.push([ $.isFunction(this.options.items) ? this.options.items.call(this.element, null, {
                "options": this.options,
                "item": this.currentItem
            }) : $(this.options.items, this.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), this ]);
            function addItems() {
                items.push(this);
            }
            for (i = queries.length - 1; i >= 0; i--) queries[i][0].each(addItems);
            return $(items);
        },
        "_removeCurrentsFromItems": function() {
            var list = this.currentItem.find(":data(" + this.widgetName + "-item)");
            this.items = $.grep(this.items, function(item) {
                for (var j = 0; j < list.length; j++) if (list[j] === item.item[0]) return false;
                return true;
            });
        },
        "_refreshItems": function(event) {
            this.items = [];
            this.containers = [ this ];
            var i, j, cur, inst, targetData, _queries, item, queriesLength, items = this.items, queries = [ [ $.isFunction(this.options.items) ? this.options.items.call(this.element[0], event, {
                "item": this.currentItem
            }) : $(this.options.items, this.element), this ] ], connectWith = this._connectWith();
            if (connectWith && this.ready) for (i = connectWith.length - 1; i >= 0; i--) {
                cur = $(connectWith[i]);
                for (j = cur.length - 1; j >= 0; j--) {
                    inst = $.data(cur[j], this.widgetFullName);
                    if (inst && inst !== this && !inst.options.disabled) {
                        queries.push([ $.isFunction(inst.options.items) ? inst.options.items.call(inst.element[0], event, {
                            "item": this.currentItem
                        }) : $(inst.options.items, inst.element), inst ]);
                        this.containers.push(inst);
                    }
                }
            }
            for (i = queries.length - 1; i >= 0; i--) {
                targetData = queries[i][1];
                _queries = queries[i][0];
                for (j = 0, queriesLength = _queries.length; j < queriesLength; j++) {
                    item = $(_queries[j]);
                    item.data(this.widgetName + "-item", targetData);
                    items.push({
                        "item": item,
                        "instance": targetData,
                        "width": 0,
                        "height": 0,
                        "left": 0,
                        "top": 0
                    });
                }
            }
        },
        "refreshPositions": function(fast) {
            if (this.offsetParent && this.helper) this.offset.parent = this._getParentOffset();
            var i, item, t, p;
            for (i = this.items.length - 1; i >= 0; i--) {
                item = this.items[i];
                if (item.instance !== this.currentContainer && this.currentContainer && item.item[0] !== this.currentItem[0]) continue;
                t = this.options.toleranceElement ? $(this.options.toleranceElement, item.item) : item.item;
                if (!fast) {
                    item.width = t.outerWidth();
                    item.height = t.outerHeight();
                }
                p = t.offset();
                item.left = p.left;
                item.top = p.top;
            }
            if (this.options.custom && this.options.custom.refreshContainers) this.options.custom.refreshContainers.call(this); else for (i = this.containers.length - 1; i >= 0; i--) {
                p = this.containers[i].element.offset();
                this.containers[i].containerCache.left = p.left;
                this.containers[i].containerCache.top = p.top;
                this.containers[i].containerCache.width = this.containers[i].element.outerWidth();
                this.containers[i].containerCache.height = this.containers[i].element.outerHeight();
            }
            return this;
        },
        "_createPlaceholder": function(that) {
            that = that || this;
            var className, o = that.options;
            if (!o.placeholder || o.placeholder.constructor === String) {
                className = o.placeholder;
                o.placeholder = {
                    "element": function() {
                        var nodeName = that.currentItem[0].nodeName.toLowerCase(), element = $("<" + nodeName + ">", that.document[0]).addClass(className || that.currentItem[0].className + " ui-sortable-placeholder").removeClass("ui-sortable-helper");
                        if ("tr" === nodeName) that.currentItem.children().each(function() {
                            $("<td>&#160;</td>", that.document[0]).attr("colspan", $(this).attr("colspan") || 1).appendTo(element);
                        }); else if ("img" === nodeName) element.attr("src", that.currentItem.attr("src"));
                        if (!className) element.css("visibility", "hidden");
                        return element;
                    },
                    "update": function(container, p) {
                        if (className && !o.forcePlaceholderSize) return;
                        if (!p.height()) p.height(that.currentItem.innerHeight() - parseInt(that.currentItem.css("paddingTop") || 0, 10) - parseInt(that.currentItem.css("paddingBottom") || 0, 10));
                        if (!p.width()) p.width(that.currentItem.innerWidth() - parseInt(that.currentItem.css("paddingLeft") || 0, 10) - parseInt(that.currentItem.css("paddingRight") || 0, 10));
                    }
                };
            }
            that.placeholder = $(o.placeholder.element.call(that.element, that.currentItem));
            that.currentItem.after(that.placeholder);
            o.placeholder.update(that, that.placeholder);
        },
        "_contactContainers": function(event) {
            var i, j, dist, itemWithLeastDistance, posProperty, sizeProperty, base, cur, nearBottom, floating, innermostContainer = null, innermostIndex = null;
            for (i = this.containers.length - 1; i >= 0; i--) {
                if ($.contains(this.currentItem[0], this.containers[i].element[0])) continue;
                if (this._intersectsWith(this.containers[i].containerCache)) {
                    if (innermostContainer && $.contains(this.containers[i].element[0], innermostContainer.element[0])) continue;
                    innermostContainer = this.containers[i];
                    innermostIndex = i;
                } else if (this.containers[i].containerCache.over) {
                    this.containers[i]._trigger("out", event, this._uiHash(this));
                    this.containers[i].containerCache.over = 0;
                }
            }
            if (!innermostContainer) return;
            if (1 === this.containers.length) {
                if (!this.containers[innermostIndex].containerCache.over) {
                    this.containers[innermostIndex]._trigger("over", event, this._uiHash(this));
                    this.containers[innermostIndex].containerCache.over = 1;
                }
            } else {
                dist = 1e4;
                itemWithLeastDistance = null;
                floating = innermostContainer.floating || isFloating(this.currentItem);
                posProperty = floating ? "left" : "top";
                sizeProperty = floating ? "width" : "height";
                base = this.positionAbs[posProperty] + this.offset.click[posProperty];
                for (j = this.items.length - 1; j >= 0; j--) {
                    if (!$.contains(this.containers[innermostIndex].element[0], this.items[j].item[0])) continue;
                    if (this.items[j].item[0] === this.currentItem[0]) continue;
                    if (floating && !isOverAxis(this.positionAbs.top + this.offset.click.top, this.items[j].top, this.items[j].height)) continue;
                    cur = this.items[j].item.offset()[posProperty];
                    nearBottom = false;
                    if (Math.abs(cur - base) > Math.abs(cur + this.items[j][sizeProperty] - base)) {
                        nearBottom = true;
                        cur += this.items[j][sizeProperty];
                    }
                    if (Math.abs(cur - base) < dist) {
                        dist = Math.abs(cur - base);
                        itemWithLeastDistance = this.items[j];
                        this.direction = nearBottom ? "up" : "down";
                    }
                }
                if (!itemWithLeastDistance && !this.options.dropOnEmpty) return;
                if (this.currentContainer === this.containers[innermostIndex]) return;
                itemWithLeastDistance ? this._rearrange(event, itemWithLeastDistance, null, true) : this._rearrange(event, null, this.containers[innermostIndex].element, true);
                this._trigger("change", event, this._uiHash());
                this.containers[innermostIndex]._trigger("change", event, this._uiHash(this));
                this.currentContainer = this.containers[innermostIndex];
                this.options.placeholder.update(this.currentContainer, this.placeholder);
                this.containers[innermostIndex]._trigger("over", event, this._uiHash(this));
                this.containers[innermostIndex].containerCache.over = 1;
            }
        },
        "_createHelper": function(event) {
            var o = this.options, helper = $.isFunction(o.helper) ? $(o.helper.apply(this.element[0], [ event, this.currentItem ])) : "clone" === o.helper ? this.currentItem.clone() : this.currentItem;
            if (!helper.parents("body").length) $("parent" !== o.appendTo ? o.appendTo : this.currentItem[0].parentNode)[0].appendChild(helper[0]);
            if (helper[0] === this.currentItem[0]) this._storedCSS = {
                "width": this.currentItem[0].style.width,
                "height": this.currentItem[0].style.height,
                "position": this.currentItem.css("position"),
                "top": this.currentItem.css("top"),
                "left": this.currentItem.css("left")
            };
            if (!helper[0].style.width || o.forceHelperSize) helper.width(this.currentItem.width());
            if (!helper[0].style.height || o.forceHelperSize) helper.height(this.currentItem.height());
            return helper;
        },
        "_adjustOffsetFromHelper": function(obj) {
            if ("string" === typeof obj) obj = obj.split(" ");
            if ($.isArray(obj)) obj = {
                "left": +obj[0],
                "top": +obj[1] || 0
            };
            if ("left" in obj) this.offset.click.left = obj.left + this.margins.left;
            if ("right" in obj) this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;
            if ("top" in obj) this.offset.click.top = obj.top + this.margins.top;
            if ("bottom" in obj) this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;
        },
        "_getParentOffset": function() {
            this.offsetParent = this.helper.offsetParent();
            var po = this.offsetParent.offset();
            if ("absolute" === this.cssPosition && this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) {
                po.left += this.scrollParent.scrollLeft();
                po.top += this.scrollParent.scrollTop();
            }
            if (this.offsetParent[0] === document.body || this.offsetParent[0].tagName && "html" === this.offsetParent[0].tagName.toLowerCase() && $.ui.ie) po = {
                "top": 0,
                "left": 0
            };
            return {
                "top": po.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0),
                "left": po.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0)
            };
        },
        "_getRelativeOffset": function() {
            if ("relative" === this.cssPosition) {
                var p = this.currentItem.position();
                return {
                    "top": p.top - (parseInt(this.helper.css("top"), 10) || 0) + this.scrollParent.scrollTop(),
                    "left": p.left - (parseInt(this.helper.css("left"), 10) || 0) + this.scrollParent.scrollLeft()
                };
            } else return {
                "top": 0,
                "left": 0
            };
        },
        "_cacheMargins": function() {
            this.margins = {
                "left": parseInt(this.currentItem.css("marginLeft"), 10) || 0,
                "top": parseInt(this.currentItem.css("marginTop"), 10) || 0
            };
        },
        "_cacheHelperProportions": function() {
            this.helperProportions = {
                "width": this.helper.outerWidth(),
                "height": this.helper.outerHeight()
            };
        },
        "_setContainment": function() {
            var ce, co, over, o = this.options;
            if ("parent" === o.containment) o.containment = this.helper[0].parentNode;
            if ("document" === o.containment || "window" === o.containment) this.containment = [ 0 - this.offset.relative.left - this.offset.parent.left, 0 - this.offset.relative.top - this.offset.parent.top, $("document" === o.containment ? document : window).width() - this.helperProportions.width - this.margins.left, ($("document" === o.containment ? document : window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top ];
            if (!/^(document|window|parent)$/.test(o.containment)) {
                ce = $(o.containment)[0];
                co = $(o.containment).offset();
                over = "hidden" !== $(ce).css("overflow");
                this.containment = [ co.left + (parseInt($(ce).css("borderLeftWidth"), 10) || 0) + (parseInt($(ce).css("paddingLeft"), 10) || 0) - this.margins.left, co.top + (parseInt($(ce).css("borderTopWidth"), 10) || 0) + (parseInt($(ce).css("paddingTop"), 10) || 0) - this.margins.top, co.left + (over ? Math.max(ce.scrollWidth, ce.offsetWidth) : ce.offsetWidth) - (parseInt($(ce).css("borderLeftWidth"), 10) || 0) - (parseInt($(ce).css("paddingRight"), 10) || 0) - this.helperProportions.width - this.margins.left, co.top + (over ? Math.max(ce.scrollHeight, ce.offsetHeight) : ce.offsetHeight) - (parseInt($(ce).css("borderTopWidth"), 10) || 0) - (parseInt($(ce).css("paddingBottom"), 10) || 0) - this.helperProportions.height - this.margins.top ];
            }
        },
        "_convertPositionTo": function(d, pos) {
            if (!pos) pos = this.position;
            var mod = "absolute" === d ? 1 : -1, scroll = "absolute" === this.cssPosition && !(this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent, scrollIsRootNode = /(html|body)/i.test(scroll[0].tagName);
            return {
                "top": pos.top + this.offset.relative.top * mod + this.offset.parent.top * mod - ("fixed" === this.cssPosition ? -this.scrollParent.scrollTop() : scrollIsRootNode ? 0 : scroll.scrollTop()) * mod,
                "left": pos.left + this.offset.relative.left * mod + this.offset.parent.left * mod - ("fixed" === this.cssPosition ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft()) * mod
            };
        },
        "_generatePosition": function(event) {
            var top, left, o = this.options, pageX = event.pageX, pageY = event.pageY, scroll = "absolute" === this.cssPosition && !(this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent, scrollIsRootNode = /(html|body)/i.test(scroll[0].tagName);
            if ("relative" === this.cssPosition && !(this.scrollParent[0] !== document && this.scrollParent[0] !== this.offsetParent[0])) this.offset.relative = this._getRelativeOffset();
            if (this.originalPosition) {
                if (this.containment) {
                    if (event.pageX - this.offset.click.left < this.containment[0]) pageX = this.containment[0] + this.offset.click.left;
                    if (event.pageY - this.offset.click.top < this.containment[1]) pageY = this.containment[1] + this.offset.click.top;
                    if (event.pageX - this.offset.click.left > this.containment[2]) pageX = this.containment[2] + this.offset.click.left;
                    if (event.pageY - this.offset.click.top > this.containment[3]) pageY = this.containment[3] + this.offset.click.top;
                }
                if (o.grid) {
                    top = this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1];
                    pageY = this.containment ? top - this.offset.click.top >= this.containment[1] && top - this.offset.click.top <= this.containment[3] ? top : top - this.offset.click.top >= this.containment[1] ? top - o.grid[1] : top + o.grid[1] : top;
                    left = this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0];
                    pageX = this.containment ? left - this.offset.click.left >= this.containment[0] && left - this.offset.click.left <= this.containment[2] ? left : left - this.offset.click.left >= this.containment[0] ? left - o.grid[0] : left + o.grid[0] : left;
                }
            }
            return {
                "top": pageY - this.offset.click.top - this.offset.relative.top - this.offset.parent.top + ("fixed" === this.cssPosition ? -this.scrollParent.scrollTop() : scrollIsRootNode ? 0 : scroll.scrollTop()),
                "left": pageX - this.offset.click.left - this.offset.relative.left - this.offset.parent.left + ("fixed" === this.cssPosition ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft())
            };
        },
        "_rearrange": function(event, i, a, hardRefresh) {
            a ? a[0].appendChild(this.placeholder[0]) : i.item[0].parentNode.insertBefore(this.placeholder[0], "down" === this.direction ? i.item[0] : i.item[0].nextSibling);
            this.counter = this.counter ? ++this.counter : 1;
            var counter = this.counter;
            this._delay(function() {
                if (counter === this.counter) this.refreshPositions(!hardRefresh);
            });
        },
        "_clear": function(event, noPropagation) {
            this.reverting = false;
            var i, delayedTriggers = [];
            if (!this._noFinalSort && this.currentItem.parent().length) this.placeholder.before(this.currentItem);
            this._noFinalSort = null;
            if (this.helper[0] === this.currentItem[0]) {
                for (i in this._storedCSS) if ("auto" === this._storedCSS[i] || "static" === this._storedCSS[i]) this._storedCSS[i] = "";
                this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper");
            } else this.currentItem.show();
            if (this.fromOutside && !noPropagation) delayedTriggers.push(function(event) {
                this._trigger("receive", event, this._uiHash(this.fromOutside));
            });
            if ((this.fromOutside || this.domPosition.prev !== this.currentItem.prev().not(".ui-sortable-helper")[0] || this.domPosition.parent !== this.currentItem.parent()[0]) && !noPropagation) delayedTriggers.push(function(event) {
                this._trigger("update", event, this._uiHash());
            });
            if (this !== this.currentContainer) if (!noPropagation) {
                delayedTriggers.push(function(event) {
                    this._trigger("remove", event, this._uiHash());
                });
                delayedTriggers.push(function(c) {
                    return function(event) {
                        c._trigger("receive", event, this._uiHash(this));
                    };
                }.call(this, this.currentContainer));
                delayedTriggers.push(function(c) {
                    return function(event) {
                        c._trigger("update", event, this._uiHash(this));
                    };
                }.call(this, this.currentContainer));
            }
            function delayEvent(type, instance, container) {
                return function(event) {
                    container._trigger(type, event, instance._uiHash(instance));
                };
            }
            for (i = this.containers.length - 1; i >= 0; i--) {
                if (!noPropagation) delayedTriggers.push(delayEvent("deactivate", this, this.containers[i]));
                if (this.containers[i].containerCache.over) {
                    delayedTriggers.push(delayEvent("out", this, this.containers[i]));
                    this.containers[i].containerCache.over = 0;
                }
            }
            if (this.storedCursor) {
                this.document.find("body").css("cursor", this.storedCursor);
                this.storedStylesheet.remove();
            }
            if (this._storedOpacity) this.helper.css("opacity", this._storedOpacity);
            if (this._storedZIndex) this.helper.css("zIndex", "auto" === this._storedZIndex ? "" : this._storedZIndex);
            this.dragging = false;
            if (this.cancelHelperRemoval) {
                if (!noPropagation) {
                    this._trigger("beforeStop", event, this._uiHash());
                    for (i = 0; i < delayedTriggers.length; i++) delayedTriggers[i].call(this, event);
                    this._trigger("stop", event, this._uiHash());
                }
                this.fromOutside = false;
                return false;
            }
            if (!noPropagation) this._trigger("beforeStop", event, this._uiHash());
            this.placeholder[0].parentNode.removeChild(this.placeholder[0]);
            if (this.helper[0] !== this.currentItem[0]) this.helper.remove();
            this.helper = null;
            if (!noPropagation) {
                for (i = 0; i < delayedTriggers.length; i++) delayedTriggers[i].call(this, event);
                this._trigger("stop", event, this._uiHash());
            }
            this.fromOutside = false;
            return true;
        },
        "_trigger": function() {
            if (false === $.Widget.prototype._trigger.apply(this, arguments)) this.cancel();
        },
        "_uiHash": function(_inst) {
            var inst = _inst || this;
            return {
                "helper": inst.helper,
                "placeholder": inst.placeholder || $([]),
                "position": inst.position,
                "originalPosition": inst.originalPosition,
                "offset": inst.positionAbs,
                "item": inst.currentItem,
                "sender": _inst ? _inst.element : null
            };
        }
    });
}(jQuery);

!function($) {
    function maybeCall(thing, ctx) {
        return "function" == typeof thing ? thing.call(ctx) : thing;
    }
    function isElementInDOM(ele) {
        while (ele = ele.parentNode) if (ele == document) return true;
        return false;
    }
    function Tipsy(element, options) {
        this.$element = $(element);
        this.options = options;
        this.enabled = true;
        this.fixTitle();
    }
    Tipsy.prototype = {
        "show": function() {
            var title = this.getTitle();
            if (title && this.enabled) {
                var $tip = this.tip();
                $tip.find(".tipsy-inner")[this.options.html ? "html" : "text"](title);
                $tip[0].className = "tipsy";
                $tip.remove().css({
                    "top": 0,
                    "left": 0,
                    "visibility": "hidden",
                    "display": "block"
                }).prependTo(document.body);
                var pos = $.extend({}, this.$element.offset(), {
                    "width": this.$element[0].offsetWidth,
                    "height": this.$element[0].offsetHeight
                });
                var actualWidth = $tip[0].offsetWidth, actualHeight = $tip[0].offsetHeight, gravity = maybeCall(this.options.gravity, this.$element[0]);
                var tp;
                switch (gravity.charAt(0)) {
                  case "n":
                    tp = {
                        "top": pos.top + pos.height + this.options.offset,
                        "left": pos.left + pos.width / 2 - actualWidth / 2
                    };
                    break;

                  case "s":
                    tp = {
                        "top": pos.top - actualHeight - this.options.offset,
                        "left": pos.left + pos.width / 2 - actualWidth / 2
                    };
                    break;

                  case "e":
                    tp = {
                        "top": pos.top + pos.height / 2 - actualHeight / 2,
                        "left": pos.left - actualWidth - this.options.offset
                    };
                    break;

                  case "w":
                    tp = {
                        "top": pos.top + pos.height / 2 - actualHeight / 2,
                        "left": pos.left + pos.width + this.options.offset
                    };
                }
                if (2 == gravity.length) if ("w" == gravity.charAt(1)) tp.left = pos.left + pos.width / 2 - 15; else tp.left = pos.left + pos.width / 2 - actualWidth + 15;
                $tip.css(tp).addClass("tipsy-" + gravity);
                $tip.find(".tipsy-arrow")[0].className = "tipsy-arrow tipsy-arrow-" + gravity.charAt(0);
                if (this.options.className) $tip.addClass(maybeCall(this.options.className, this.$element[0]));
                if (this.options.fade) $tip.stop().css({
                    "opacity": 0,
                    "display": "block",
                    "visibility": "visible"
                }).animate({
                    "opacity": this.options.opacity
                }); else $tip.css({
                    "visibility": "visible",
                    "opacity": this.options.opacity
                });
            }
        },
        "hide": function() {
            if (this.options.fade) this.tip().stop().fadeOut(function() {
                $(this).remove();
            }); else this.tip().remove();
        },
        "fixTitle": function() {
            var $e = this.$element;
            if ($e.attr("title") || "string" != typeof $e.attr("original-title")) $e.attr("original-title", $e.attr("title") || "").removeAttr("title");
        },
        "getTitle": function() {
            var title, $e = this.$element, o = this.options;
            this.fixTitle();
            var title, o = this.options;
            if ("string" == typeof o.title) title = $e.attr("title" == o.title ? "original-title" : o.title); else if ("function" == typeof o.title) title = o.title.call($e[0]);
            title = ("" + title).replace(/(^\s*|\s*$)/, "");
            return title || o.fallback;
        },
        "tip": function() {
            if (!this.$tip) {
                this.$tip = $('<div class="tipsy"></div>').html('<div class="tipsy-arrow"></div><div class="tipsy-inner"></div>');
                this.$tip.data("tipsy-pointee", this.$element[0]);
            }
            return this.$tip;
        },
        "validate": function() {
            if (!this.$element[0].parentNode) {
                this.hide();
                this.$element = null;
                this.options = null;
            }
        },
        "enable": function() {
            this.enabled = true;
        },
        "disable": function() {
            this.enabled = false;
        },
        "toggleEnabled": function() {
            this.enabled = !this.enabled;
        }
    };
    $.fn.tipsy = function(options) {
        if (true === options) return this.data("tipsy"); else if ("string" == typeof options) {
            var tipsy = this.data("tipsy");
            if (tipsy) tipsy[options]();
            return this;
        }
        options = $.extend({}, $.fn.tipsy.defaults, options);
        function get(ele) {
            var tipsy = $.data(ele, "tipsy");
            if (!tipsy) {
                tipsy = new Tipsy(ele, $.fn.tipsy.elementOptions(ele, options));
                $.data(ele, "tipsy", tipsy);
            }
            return tipsy;
        }
        function enter() {
            var tipsy = get(this);
            tipsy.hoverState = "in";
            if (0 == options.delayIn) tipsy.show(); else {
                tipsy.fixTitle();
                setTimeout(function() {
                    if ("in" == tipsy.hoverState) tipsy.show();
                }, options.delayIn);
            }
        }
        function leave() {
            var tipsy = get(this);
            tipsy.hoverState = "out";
            if (0 == options.delayOut) tipsy.hide(); else setTimeout(function() {
                if ("out" == tipsy.hoverState) tipsy.hide();
            }, options.delayOut);
        }
        if (!options.live) this.each(function() {
            get(this);
        });
        if ("manual" != options.trigger) {
            var binder = options.live ? "live" : "bind", eventIn = "hover" == options.trigger ? "mouseenter" : "focus", eventOut = "hover" == options.trigger ? "mouseleave" : "blur";
            this[binder](eventIn, enter)[binder](eventOut, leave);
        }
        return this;
    };
    $.fn.tipsy.defaults = {
        "className": null,
        "delayIn": 0,
        "delayOut": 0,
        "fade": false,
        "fallback": "",
        "gravity": "n",
        "html": false,
        "live": false,
        "offset": 0,
        "opacity": .8,
        "title": "title",
        "trigger": "hover"
    };
    $.fn.tipsy.revalidate = function() {
        $(".tipsy").each(function() {
            var pointee = $.data(this, "tipsy-pointee");
            if (!pointee || !isElementInDOM(pointee)) $(this).remove();
        });
    };
    $.fn.tipsy.elementOptions = function(ele, options) {
        return $.metadata ? $.extend({}, options, $(ele).metadata()) : options;
    };
    $.fn.tipsy.autoNS = function() {
        return $(this).offset().top > $(document).scrollTop() + $(window).height() / 2 ? "s" : "n";
    };
    $.fn.tipsy.autoWE = function() {
        return $(this).offset().left > $(document).scrollLeft() + $(window).width() / 2 ? "e" : "w";
    };
    $.fn.tipsy.autoBounds = function(margin, prefer) {
        return function() {
            var dir = {
                "ns": prefer[0],
                "ew": prefer.length > 1 ? prefer[1] : false
            }, boundTop = $(document).scrollTop() + margin, boundLeft = $(document).scrollLeft() + margin, $this = $(this);
            if ($this.offset().top < boundTop) dir.ns = "n";
            if ($this.offset().left < boundLeft) dir.ew = "w";
            if ($(window).width() + $(document).scrollLeft() - $this.offset().left < margin) dir.ew = "e";
            if ($(window).height() + $(document).scrollTop() - $this.offset().top < margin) dir.ns = "s";
            return dir.ns + (dir.ew ? dir.ew : "");
        };
    };
}(jQuery);

!function(define) {
    "use strict";
    define([ "jquery" ], function($) {
        var $scrollTo = $.scrollTo = function(target, duration, settings) {
            return $(window).scrollTo(target, duration, settings);
        };
        $scrollTo.defaults = {
            "axis": "xy",
            "duration": parseFloat($.fn.jquery) >= 1.3 ? 0 : 1,
            "limit": true
        };
        $scrollTo.window = function(scope) {
            return $(window)._scrollable();
        };
        $.fn._scrollable = function() {
            return this.map(function() {
                var elem = this, isWin = !elem.nodeName || $.inArray(elem.nodeName.toLowerCase(), [ "iframe", "#document", "html", "body" ]) != -1;
                if (!isWin) return elem;
                var doc = (elem.contentWindow || elem).document || elem.ownerDocument || elem;
                return /webkit/i.test(navigator.userAgent) || "BackCompat" == doc.compatMode ? doc.body : doc.documentElement;
            });
        };
        $.fn.scrollTo = function(target, duration, settings) {
            if ("object" == typeof duration) {
                settings = duration;
                duration = 0;
            }
            if ("function" == typeof settings) settings = {
                "onAfter": settings
            };
            if ("max" == target) target = 9e9;
            settings = $.extend({}, $scrollTo.defaults, settings);
            duration = duration || settings.duration;
            settings.queue = settings.queue && settings.axis.length > 1;
            if (settings.queue) duration /= 2;
            settings.offset = both(settings.offset);
            settings.over = both(settings.over);
            return this._scrollable().each(function() {
                if (null == target) return;
                var elem = this, $elem = $(elem), targ = target, toff, attr = {}, win = $elem.is("html,body");
                switch (typeof targ) {
                  case "number":
                  case "string":
                    if (/^([+-]=?)?\d+(\.\d+)?(px|%)?$/.test(targ)) {
                        targ = both(targ);
                        break;
                    }
                    targ = win ? $(targ) : $(targ, this);
                    if (!targ.length) return;

                  case "object":
                    if (targ.is || targ.style) toff = (targ = $(targ)).offset();
                }
                var offset = $.isFunction(settings.offset) && settings.offset(elem, targ) || settings.offset;
                $.each(settings.axis.split(""), function(i, axis) {
                    var Pos = "x" == axis ? "Left" : "Top", pos = Pos.toLowerCase(), key = "scroll" + Pos, old = elem[key], max = $scrollTo.max(elem, axis);
                    if (toff) {
                        attr[key] = toff[pos] + (win ? 0 : old - $elem.offset()[pos]);
                        if (settings.margin) {
                            attr[key] -= parseInt(targ.css("margin" + Pos)) || 0;
                            attr[key] -= parseInt(targ.css("border" + Pos + "Width")) || 0;
                        }
                        attr[key] += offset[pos] || 0;
                        if (settings.over[pos]) attr[key] += targ["x" == axis ? "width" : "height"]() * settings.over[pos];
                    } else {
                        var val = targ[pos];
                        attr[key] = val.slice && "%" == val.slice(-1) ? parseFloat(val) / 100 * max : val;
                    }
                    if (settings.limit && /^\d+$/.test(attr[key])) attr[key] = attr[key] <= 0 ? 0 : Math.min(attr[key], max);
                    if (!i && settings.queue) {
                        if (old != attr[key]) animate(settings.onAfterFirst);
                        delete attr[key];
                    }
                });
                animate(settings.onAfter);
                function animate(callback) {
                    $elem.animate(attr, duration, settings.easing, callback && function() {
                        callback.call(this, targ, settings);
                    });
                }
            }).end();
        };
        $scrollTo.max = function(elem, axis) {
            var Dim = "x" == axis ? "Width" : "Height", scroll = "scroll" + Dim;
            if (!$(elem).is("html,body")) return elem[scroll] - $(elem)[Dim.toLowerCase()]();
            var size = "client" + Dim, html = elem.ownerDocument.documentElement, body = elem.ownerDocument.body;
            return Math.max(html[scroll], body[scroll]) - Math.min(html[size], body[size]);
        };
        function both(val) {
            return $.isFunction(val) || "object" == typeof val ? val : {
                "top": val,
                "left": val
            };
        }
        return $scrollTo;
    });
}("function" === typeof define && define.amd ? define : function(deps, factory) {
    if ("undefined" !== typeof module && module.exports) module.exports = factory(require("jquery")); else factory(jQuery);
});

!function($) {
    $.fn.hoverIntent = function(handlerIn, handlerOut, selector) {
        var cfg = {
            "interval": 100,
            "sensitivity": 7,
            "timeout": 0
        };
        if ("object" === typeof handlerIn) cfg = $.extend(cfg, handlerIn); else if ($.isFunction(handlerOut)) cfg = $.extend(cfg, {
            "over": handlerIn,
            "out": handlerOut,
            "selector": selector
        }); else cfg = $.extend(cfg, {
            "over": handlerIn,
            "out": handlerIn,
            "selector": handlerOut
        });
        var cX, cY, pX, pY;
        var track = function(ev) {
            cX = ev.pageX;
            cY = ev.pageY;
        };
        var compare = function(ev, ob) {
            ob.hoverIntent_t = clearTimeout(ob.hoverIntent_t);
            if (Math.abs(pX - cX) + Math.abs(pY - cY) < cfg.sensitivity) {
                $(ob).off("mousemove.hoverIntent", track);
                ob.hoverIntent_s = 1;
                return cfg.over.apply(ob, [ ev ]);
            } else {
                pX = cX;
                pY = cY;
                ob.hoverIntent_t = setTimeout(function() {
                    compare(ev, ob);
                }, cfg.interval);
            }
        };
        var delay = function(ev, ob) {
            ob.hoverIntent_t = clearTimeout(ob.hoverIntent_t);
            ob.hoverIntent_s = 0;
            return cfg.out.apply(ob, [ ev ]);
        };
        var handleHover = function(e) {
            var ev = jQuery.extend({}, e);
            var ob = this;
            if (ob.hoverIntent_t) ob.hoverIntent_t = clearTimeout(ob.hoverIntent_t);
            if ("mouseenter" == e.type) {
                pX = ev.pageX;
                pY = ev.pageY;
                $(ob).on("mousemove.hoverIntent", track);
                if (1 != ob.hoverIntent_s) ob.hoverIntent_t = setTimeout(function() {
                    compare(ev, ob);
                }, cfg.interval);
            } else {
                $(ob).off("mousemove.hoverIntent", track);
                if (1 == ob.hoverIntent_s) ob.hoverIntent_t = setTimeout(function() {
                    delay(ev, ob);
                }, cfg.timeout);
            }
        };
        return this.on({
            "mouseenter.hoverIntent": handleHover,
            "mouseleave.hoverIntent": handleHover
        }, cfg.selector);
    };
}(jQuery);

!function($) {
    var scrollbarWidth = 0;
    $.getScrollbarWidth = function() {
        if (!scrollbarWidth) if ($.browser.msie) {
            var $textarea1 = $('<textarea cols="10" rows="2"></textarea>').css({
                "position": "absolute",
                "top": -1e3,
                "left": -1e3
            }).appendTo("body"), $textarea2 = $('<textarea cols="10" rows="2" style="overflow: hidden;"></textarea>').css({
                "position": "absolute",
                "top": -1e3,
                "left": -1e3
            }).appendTo("body");
            scrollbarWidth = $textarea1.width() - $textarea2.width();
            $textarea1.add($textarea2).remove();
        } else {
            var $div = $("<div />").css({
                "width": 100,
                "height": 100,
                "overflow": "auto",
                "position": "absolute",
                "top": -1e3,
                "left": -1e3
            }).prependTo("body").append("<div />").find("div").css({
                "width": "100%",
                "height": 200
            });
            scrollbarWidth = 100 - $div.width();
            $div.parent().remove();
        }
        return scrollbarWidth;
    };
}(jQuery);

!function($) {
    "$:nomunge";
    var interval_id, last_hash, cache_bust = 1, rm_callback, window = this, FALSE = !1, postMessage = "postMessage", addEventListener = "addEventListener", p_receiveMessage, has_postMessage = window[postMessage] && !$.browser.opera;
    $[postMessage] = function(message, target_url, target) {
        if (!target_url) return;
        message = "string" === typeof message ? message : $.param(message);
        target = target || parent;
        if (has_postMessage) target[postMessage](message, target_url.replace(/([^:]+:\/\/[^\/]+).*/, "$1")); else if (target_url) target.location = target_url.replace(/#.*$/, "") + "#" + +new Date() + cache_bust++ + "&" + message;
    };
    $.receiveMessage = p_receiveMessage = function(callback, source_origin, delay) {
        if (has_postMessage) {
            if (callback) {
                rm_callback && p_receiveMessage();
                rm_callback = function(e) {
                    if ("string" === typeof source_origin && e.origin !== source_origin || $.isFunction(source_origin) && source_origin(e.origin) === FALSE) return FALSE;
                    callback(e);
                };
            }
            if (window[addEventListener]) window[callback ? addEventListener : "removeEventListener"]("message", rm_callback, FALSE); else window[callback ? "attachEvent" : "detachEvent"]("onmessage", rm_callback);
        } else {
            interval_id && clearInterval(interval_id);
            interval_id = null;
            if (callback) {
                delay = "number" === typeof source_origin ? source_origin : "number" === typeof delay ? delay : 100;
                interval_id = setInterval(function() {
                    var hash = document.location.hash, re = /^#?\d+&/;
                    if (hash !== last_hash && re.test(hash)) {
                        last_hash = hash;
                        callback({
                            "data": hash.replace(re, "")
                        });
                    }
                }, delay);
            }
        }
    };
}(jQuery);

!function($, undefined) {
    "use strict";
    $.ajaxPrefilter(function(options, origOptions, jqXHR) {
        if (options.iframe) {
            if (/^(?:GET|HEAD)$/.test(options.type)) options.type = "IFRAME" + options.type;
            options.data = origOptions.data;
            return "iframe";
        }
    });
    var incr = 0;
    $.ajaxTransport("iframe", function(options, origOptions, jqXHR) {
        var form = $(), iframe = $(), name = "iframe-" + $.now() + "-" + incr++, files = $(options.files).filter(":file:enabled"), markers = $(), requestType = options.type, accepts = null;
        function cleanUp() {
            markers.replaceWith(function(idx) {
                return files.get(idx);
            });
            form.remove();
            iframe.off("load").one("load", function() {
                iframe.remove();
            });
            iframe.attr("src", "javascript:false;");
        }
        if (/^IFRAME(?:GET|HEAD)$/.test(requestType)) requestType = requestType.replace("IFRAME", "");
        options.dataTypes.shift();
        if (true || files.length) {
            form = $("<form enctype='multipart/form-data' method='" + requestType + "'></form>").hide().attr({
                "action": options.url,
                "target": name
            });
            if ("string" === typeof options.data && options.data.length > 0) $.error("data must not be serialized");
            $.each(options.data || {}, function(name, value) {
                if (value && value.nodeType) {
                    if (!$(value).is(":input:not(:disabled)")) return;
                    name = $(value).attr("name");
                    value = $(value).val();
                }
                if ($.isPlainObject(value)) {
                    name = value.name;
                    value = value.value;
                }
                $("<input type='hidden' />").attr({
                    "name": name,
                    "value": value
                }).appendTo(form);
            });
            $("<input type='hidden' value='IFrame' name='X-Requested-With' />").appendTo(form);
            if (options.dataTypes[0] && options.accepts[options.dataTypes[0]]) accepts = options.accepts[options.dataTypes[0]] + ("*" !== options.dataTypes[0] ? ", */*; q=0.01" : ""); else accepts = options.accepts["*"];
            $("<input type='hidden' name='X-HTTP-Accept'>").attr("value", accepts).appendTo(form);
            if (false === options.cache && /^(?:GET|HEAD)$/.test(requestType)) $("<input>").attr({
                "type": "hidden",
                "name": "_",
                "value": $.now()
            }).appendTo(form);
            markers = files.after(function(idx) {
                return $(this).clone().prop("disabled", true);
            }).next();
            files.appendTo(form);
            return {
                "send": function(headers, completeCallback) {
                    iframe = $("<iframe src='javascript:false;' name='" + name + "' id='" + name + "' style='display:none'></iframe>");
                    iframe.one("load", function() {
                        iframe.one("load", function() {
                            var doc = this.contentWindow ? this.contentWindow.document : this.contentDocument ? this.contentDocument : this.document, root = doc.documentElement ? doc.documentElement : doc.body, textarea = root.getElementsByTagName("textarea")[0], type = textarea && textarea.getAttribute("data-type") || null, status = textarea && textarea.getAttribute("data-status") || 200, statusText = textarea && textarea.getAttribute("data-statusText") || "OK", content = {
                                "html": root.innerHTML,
                                "text": type ? textarea.value : root ? root.textContent || root.innerText : null
                            };
                            cleanUp();
                            completeCallback(status, statusText, content, type ? "Content-Type: " + type : null);
                        });
                        form[0].submit();
                    });
                    $("body").append(form, iframe);
                },
                "abort": cleanUp
            };
        }
    });
}(jQuery);

!function($) {
    $.fn.autogrow = function(options) {
        this.filter("textarea").each(function() {
            var $this = $(this), minHeight = $this.height(), lineHeight = $this.css("lineHeight");
            var shadow = $("<div></div>").css({
                "position": "absolute",
                "top": -1e4,
                "left": -1e4,
                "width": $(this).width(),
                "fontSize": $this.css("fontSize"),
                "fontFamily": $this.css("fontFamily"),
                "lineHeight": $this.css("lineHeight"),
                "resize": "none"
            }).appendTo(document.body);
            var update = _.throttle(function() {
                var val = this.value.replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/&/g, "&amp;").replace(/\n/g, "<br/>");
                shadow.html(val);
                $(this).css("height", Math.max(shadow.height() + 20, minHeight));
            }, 200);
            $(this).focus(update).change(update).keyup(update).keydown(update);
            update.apply(this);
        });
        return this;
    };
}(jQuery);

!function($, window) {
    var decode = decodeURIComponent;
    $.deparam = function(params, coerce) {
        var obj = {}, coerce_types = {
            "true": !0,
            "false": !1,
            "null": null
        };
        $.each(params.replace(/\+/g, " ").split("&"), function(j, v) {
            var param = v.split("="), key = decode(param[0]), val, cur = obj, i = 0, keys = key.split("]["), keys_last = keys.length - 1;
            if (/\[/.test(keys[0]) && /\]$/.test(keys[keys_last])) {
                keys[keys_last] = keys[keys_last].replace(/\]$/, "");
                keys = keys.shift().split("[").concat(keys);
                keys_last = keys.length - 1;
            } else keys_last = 0;
            if (2 === param.length) {
                val = decode(param[1]);
                if (coerce) val = val && !isNaN(val) ? +val : "undefined" === val ? void 0 : void 0 !== coerce_types[val] ? coerce_types[val] : val;
                if (keys_last) for (;i <= keys_last; i++) {
                    key = "" === keys[i] ? cur.length : keys[i];
                    cur = cur[key] = i < keys_last ? cur[key] || (keys[i + 1] && isNaN(keys[i + 1]) ? {} : []) : val;
                } else if ($.isArray(obj[key])) obj[key].push(val); else if (void 0 !== obj[key]) obj[key] = [ obj[key], val ]; else obj[key] = val;
            } else if (key) obj[key] = coerce ? void 0 : "";
        });
        return obj;
    };
}(jQuery, this);

var guiders = function($) {
    var guiders = $.guiders = {};
    guiders.version = "2.0.0";
    guiders._defaultSettings = {
        "attachTo": null,
        "autoFocus": false,
        "buttons": [ {
            "name": "Close"
        } ],
        "buttonCustomHTML": "",
        "classString": null,
        "closeOnEscape": false,
        "description": "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
        "highlight": null,
        "isHashable": true,
        "maxWidth": null,
        "offset": {
            "top": null,
            "left": null
        },
        "onClose": null,
        "onHide": null,
        "onShow": null,
        "overlay": false,
        "position": 0,
        "shouldSkip": function() {},
        "title": "Sample title goes here",
        "width": 400,
        "xButton": false
    };
    guiders._htmlSkeleton = [ "<div class='guider'>", "  <div class='guiders_content'>", "    <h1 class='guiders_title'></h1>", "    <div class='guiders_close'></div>", "    <p class='guiders_description'></p>", "    <div class='guiders_buttons_container'>", "    </div>", "  </div>", "  <div class='guiders_arrow'>", "  </div>", "</div>" ].join("");
    guiders._arrowSize = 42;
    guiders._backButtonTitle = "Back";
    guiders._buttonAttributes = {
        "href": "javascript:void(0);"
    };
    guiders._buttonClassName = "guiders_button";
    guiders._buttonClickEvent = "click touch";
    guiders._buttonElement = "<a></a>";
    guiders._closeButtonTitle = "Close";
    guiders._currentGuiderID = null;
    guiders._fixedOrAbsolute = "fixed";
    guiders._guiders = {};
    guiders._lastCreatedGuiderID = null;
    guiders._nextButtonTitle = "Next";
    guiders._offsetNameMapping = {
        "topLeft": 11,
        "top": 12,
        "topRight": 1,
        "rightTop": 2,
        "right": 3,
        "rightBottom": 4,
        "bottomRight": 5,
        "bottom": 6,
        "bottomLeft": 7,
        "leftBottom": 8,
        "left": 9,
        "leftTop": 10
    };
    guiders._windowHeight = 0;
    var ieBrowserMatch = navigator.userAgent.match(/MSIE\s([\d.]+)/);
    guiders._isIE = ieBrowserMatch && ieBrowserMatch.length > 1;
    guiders._ieVersion = ieBrowserMatch && ieBrowserMatch.length > 1 ? Number(ieBrowserMatch[1]) : -1;
    guiders._addButtons = function(myGuider) {
        var guiderButtonsContainer = myGuider.elem.find(".guiders_buttons_container");
        if (null === myGuider.buttons || 0 === myGuider.buttons.length) {
            guiderButtonsContainer.remove();
            return;
        }
        for (var i = myGuider.buttons.length - 1; i >= 0; i--) {
            var thisButton = myGuider.buttons[i];
            var thisButtonElem = $(guiders._buttonElement, $.extend({
                "class": guiders._buttonClassName,
                "html": thisButton.name
            }, guiders._buttonAttributes, thisButton.html || {}));
            if ("undefined" !== typeof thisButton.classString && null !== thisButton.classString) thisButtonElem.addClass(thisButton.classString);
            guiderButtonsContainer.append(thisButtonElem);
            var thisButtonName = thisButton.name.toLowerCase();
            if (thisButton.onclick) thisButtonElem.bind(guiders._buttonClickEvent, thisButton.onclick); else switch (thisButtonName) {
              case guiders._closeButtonTitle.toLowerCase():
                thisButtonElem.bind(guiders._buttonClickEvent, function() {
                    guiders.hideAll();
                    if (myGuider.onClose) myGuider.onClose(myGuider, false);
                    $("body").trigger("guidersClose");
                });
                break;

              case guiders._nextButtonTitle.toLowerCase():
                thisButtonElem.bind(guiders._buttonClickEvent, function() {
                    !myGuider.elem.data("locked") && guiders.next();
                });
                break;

              case guiders._backButtonTitle.toLowerCase():
                thisButtonElem.bind(guiders._buttonClickEvent, function() {
                    !myGuider.elem.data("locked") && guiders.prev();
                });
            }
        }
        if ("" !== myGuider.buttonCustomHTML) {
            var myCustomHTML = $(myGuider.buttonCustomHTML);
            myGuider.elem.find(".guiders_buttons_container").append(myCustomHTML);
        }
        if (0 === myGuider.buttons.length) guiderButtonsContainer.remove();
    };
    guiders._addXButton = function(myGuider) {
        var xButtonContainer = myGuider.elem.find(".guiders_close");
        var xButton = $("<div></div>", {
            "class": "guiders_x_button",
            "role": "button"
        });
        xButtonContainer.append(xButton);
        xButton.click(function() {
            guiders.hideAll();
            if (myGuider.onClose) myGuider.onClose(myGuider, true);
            $("body").trigger("guidersClose");
        });
    };
    guiders._attach = function(myGuider) {
        if ("object" !== typeof myGuider) return;
        var attachTo = $(myGuider.attachTo);
        var myHeight = myGuider.elem.innerHeight();
        var myWidth = myGuider.elem.innerWidth();
        if (0 === myGuider.position || 0 === attachTo.length) {
            var fixedOrAbsolute = "fixed";
            if (guiders._isIE && guiders._ieVersion < 9) fixedOrAbsolute = "absolute";
            myGuider.elem.css("position", fixedOrAbsolute);
            myGuider.elem.css("top", ($(window).height() - myHeight) / 3 + "px");
            myGuider.elem.css("left", ($(window).width() - myWidth) / 2 + "px");
            return;
        }
        var base = attachTo.offset();
        var top = base.top;
        var left = base.left;
        var topMarginOfBody = $("body").outerHeight(true) - $("body").outerHeight(false);
        if (guiders._offsetNameMapping[myGuider.position]) myGuider.position = guiders._offsetNameMapping[myGuider.position];
        var attachToHeight = attachTo.innerHeight();
        var attachToWidth = attachTo.innerWidth();
        var bufferOffset = .9 * guiders._arrowSize;
        var offsetMap = {
            "1": [ -bufferOffset - myHeight, attachToWidth - myWidth ],
            "2": [ 0, bufferOffset + attachToWidth ],
            "3": [ attachToHeight / 2 - myHeight / 2, bufferOffset + attachToWidth ],
            "4": [ attachToHeight - myHeight, bufferOffset + attachToWidth ],
            "5": [ bufferOffset + attachToHeight, attachToWidth - myWidth ],
            "6": [ bufferOffset + attachToHeight, attachToWidth / 2 - myWidth / 2 ],
            "7": [ bufferOffset + attachToHeight, 0 ],
            "8": [ attachToHeight - myHeight, -myWidth - bufferOffset ],
            "9": [ attachToHeight / 2 - myHeight / 2, -myWidth - bufferOffset ],
            "10": [ 0, -myWidth - bufferOffset ],
            "11": [ -bufferOffset - myHeight, 0 ],
            "12": [ -bufferOffset - myHeight, attachToWidth / 2 - myWidth / 2 ]
        };
        var offset = offsetMap[myGuider.position];
        top += offset[0];
        left += offset[1];
        var positionType = "absolute";
        if ("fixed" === attachTo.css("position") && "fixed" === guiders._fixedOrAbsolute) {
            positionType = "fixed";
            top -= $(window).scrollTop();
            left -= $(window).scrollLeft();
        }
        if (null !== myGuider.offset.top) top += myGuider.offset.top;
        if (null !== myGuider.offset.left) left += myGuider.offset.left;
        guiders._styleArrow(myGuider);
        myGuider.elem.css({
            "position": positionType,
            "top": top,
            "left": left
        });
        return myGuider;
    };
    guiders._dehighlightElement = function(selector) {
        $(selector).removeClass("guiders_highlight");
    };
    guiders._hideOverlay = function() {
        $("#guiders_overlay").fadeOut("fast");
    };
    guiders._highlightElement = function(selector) {
        $(selector).addClass("guiders_highlight");
    };
    guiders._initializeOverlay = function() {
        if (0 === $("#guiders_overlay").length) $("<div id='guiders_overlay'></div>").hide().appendTo("body");
    };
    guiders._showOverlay = function(myGuider) {
        $("#guiders_overlay").fadeIn("fast", function() {
            if (this.style.removeAttribute) this.style.removeAttribute("filter");
        });
        if (guiders._isIE) $("#guiders_overlay").css("position", "absolute");
    };
    guiders._styleArrow = function(myGuider) {
        var position = myGuider.position || 0;
        if (!position) return;
        var myGuiderArrow = $(myGuider.elem.find(".guiders_arrow"));
        var newClass = {
            "1": "guiders_arrow_down",
            "2": "guiders_arrow_left",
            "3": "guiders_arrow_left",
            "4": "guiders_arrow_left",
            "5": "guiders_arrow_up",
            "6": "guiders_arrow_up",
            "7": "guiders_arrow_up",
            "8": "guiders_arrow_right",
            "9": "guiders_arrow_right",
            "10": "guiders_arrow_right",
            "11": "guiders_arrow_down",
            "12": "guiders_arrow_down"
        };
        myGuiderArrow.addClass(newClass[position]);
        var myHeight = myGuider.elem.innerHeight();
        var myWidth = myGuider.elem.innerWidth();
        var arrowOffset = guiders._arrowSize / 2;
        var positionMap = {
            "1": [ "right", arrowOffset ],
            "2": [ "top", arrowOffset ],
            "3": [ "top", myHeight / 2 - arrowOffset ],
            "4": [ "bottom", arrowOffset ],
            "5": [ "right", arrowOffset ],
            "6": [ "left", myWidth / 2 - arrowOffset ],
            "7": [ "left", arrowOffset ],
            "8": [ "bottom", arrowOffset ],
            "9": [ "top", myHeight / 2 - arrowOffset ],
            "10": [ "top", arrowOffset ],
            "11": [ "left", arrowOffset ],
            "12": [ "left", myWidth / 2 - arrowOffset ]
        };
        var position = positionMap[myGuider.position];
        myGuiderArrow.css(position[0], position[1] + "px");
    };
    guiders._showIfHashed = function(myGuider) {
        var GUIDER_HASH_TAG = "guider=";
        var hashIndex = window.location.hash.indexOf(GUIDER_HASH_TAG);
        if (hashIndex !== -1) {
            var hashGuiderId = window.location.hash.substr(hashIndex + GUIDER_HASH_TAG.length);
            if (myGuider.id.toLowerCase() === hashGuiderId.toLowerCase()) guiders.show(myGuider.id);
        }
    };
    guiders._updatePositionOnResize = function() {
        var _resizing = void 0;
        $(window).resize(function() {
            if ("undefined" !== typeof _resizing) clearTimeout(_resizing);
            _resizing = setTimeout(function() {
                _resizing = void 0;
                if ("undefined" !== typeof guiders) guiders.reposition();
            }, 20);
        });
    };
    guiders._updatePositionOnResize();
    guiders._unwireEscape = function(myGuider) {
        $(document).unbind("keydown");
    };
    guiders._wireEscape = function(myGuider) {
        $(document).keydown(function(event) {
            if (27 == event.keyCode || 27 == event.which) {
                guiders.hideAll();
                if (myGuider.onClose) myGuider.onClose(myGuider, true);
                $("body").trigger("guidersClose");
                return false;
            }
        });
    };
    guiders.createGuider = function(passedSettings) {
        if (null === passedSettings || void 0 === passedSettings) passedSettings = {};
        myGuider = $.extend({}, guiders._defaultSettings, passedSettings);
        myGuider.id = myGuider.id || "guider_random_" + String(Math.floor(1e3 * Math.random()));
        var guiderElement = $("#" + myGuider.id);
        if (!guiderElement.length) guiderElement = $(guiders._htmlSkeleton);
        myGuider.elem = guiderElement;
        if ("undefined" !== typeof myGuider.classString && null !== myGuider.classString) myGuider.elem.addClass(myGuider.classString);
        if (Number(myGuider.width) === myGuider.width) myGuider.width = String(myGuider.width) + "px";
        if (Number(myGuider.maxWidth) === myGuider.maxWidth) myGuider.maxWidth = String(myGuider.maxWidth) + "px";
        myGuider.elem.css("width", myGuider.width);
        myGuider.elem.css("maxWidth", myGuider.maxWidth);
        var guiderTitleContainer = guiderElement.find(".guiders_title");
        guiderTitleContainer.html(myGuider.title);
        guiderElement.find(".guiders_description").html(myGuider.description);
        guiders._addButtons(myGuider);
        if (myGuider.xButton) guiders._addXButton(myGuider);
        guiderElement.hide();
        guiderElement.appendTo("body");
        guiderElement.attr("id", myGuider.id);
        if ("undefined" !== typeof myGuider.attachTo && null !== myGuider) guiders._attach(myGuider);
        guiders._initializeOverlay();
        guiders._guiders[myGuider.id] = myGuider;
        if (null != guiders._lastCreatedGuiderID) myGuider.prev = guiders._lastCreatedGuiderID;
        guiders._lastCreatedGuiderID = myGuider.id;
        if (myGuider.isHashable) guiders._showIfHashed(myGuider);
        return guiders;
    };
    guiders.get = function(id) {
        if ("undefined" === typeof guiders._guiders[id]) return null;
        return guiders._guiders[id] || null;
    };
    guiders.getCurrentGuider = function() {
        return guiders._guiders[guiders._currentGuiderID] || null;
    };
    guiders.hideAll = function(omitHidingOverlay, next) {
        next = next || false;
        $(".guider:visible").each(function(index, elem) {
            var myGuider = guiders.get($(elem).attr("id"));
            if (myGuider.onHide) myGuider.onHide(myGuider, next);
        });
        $(".guider").fadeOut("fast");
        var currentGuider = guiders._guiders[guiders._currentGuiderID];
        if (currentGuider && currentGuider.highlight) guiders._dehighlightElement(currentGuider.highlight);
        if ("undefined" !== typeof omitHidingOverlay && true === omitHidingOverlay) ; else guiders._hideOverlay();
        return guiders;
    };
    guiders.next = function() {
        var currentGuider = guiders._guiders[guiders._currentGuiderID];
        if ("undefined" === typeof currentGuider) return null;
        currentGuider.elem.data("locked", true);
        var nextGuiderId = currentGuider.next || null;
        if (null !== nextGuiderId && "" !== nextGuiderId) {
            var nextGuider = guiders.get(nextGuiderId);
            var omitHidingOverlay = nextGuider.overlay ? true : false;
            guiders.hideAll(omitHidingOverlay, true);
            if (currentGuider && currentGuider.highlight) guiders._dehighlightElement(currentGuider.highlight);
            if (nextGuider.shouldSkip && nextGuider.shouldSkip()) {
                guiders._currentGuiderID = nextGuider.id;
                guiders.next();
                return guiders.getCurrentGuider();
            } else {
                guiders.show(nextGuiderId);
                return guiders.getCurrentGuider();
            }
        }
    };
    guiders.prev = function() {
        var currentGuider = guiders._guiders[guiders._currentGuiderID];
        if ("undefined" === typeof currentGuider) return null;
        if (null === currentGuider.prev) return null;
        var prevGuider = guiders._guiders[currentGuider.prev];
        prevGuider.elem.data("locked", true);
        var prevGuiderId = prevGuider.id || null;
        if (null !== prevGuiderId && "" !== prevGuiderId) {
            var myGuider = guiders.get(prevGuiderId);
            var omitHidingOverlay = myGuider.overlay ? true : false;
            guiders.hideAll(omitHidingOverlay, true);
            if (prevGuider && prevGuider.highlight) guiders._dehighlightElement(prevGuider.highlight);
            guiders.show(prevGuiderId);
            return myGuider;
        }
    };
    guiders.reposition = function() {
        var currentGuider = guiders._guiders[guiders._currentGuiderID];
        guiders._attach(currentGuider);
    };
    guiders.scrollToCurrent = function() {
        var currentGuider = guiders._guiders[guiders._currentGuiderID];
        if ("undefined" === typeof currentGuider) return;
        var windowHeight = guiders._windowHeight;
        var scrollHeight = $(window).scrollTop();
        var guiderOffset = currentGuider.elem.offset();
        var guiderElemHeight = currentGuider.elem.height();
        var scrollToHeight = Math.round(Math.max(guiderOffset.top + guiderElemHeight / 2 - windowHeight / 2, 0));
        window.scrollTo(0, scrollToHeight);
    };
    guiders.show = function(id) {
        if (!id && guiders._lastCreatedGuiderID) id = guiders._lastCreatedGuiderID;
        var myGuider = guiders.get(id);
        if (myGuider.overlay) {
            guiders._showOverlay(myGuider);
            if (myGuider.highlight && myGuider.attachTo) guiders._highlightElement(myGuider.attachTo);
        }
        if (myGuider.closeOnEscape) guiders._wireEscape(myGuider); else guiders._unwireEscape(myGuider);
        if (myGuider.onShow) myGuider.onShow(myGuider);
        guiders._attach(myGuider);
        myGuider.elem.fadeIn("fast").data("locked", false);
        guiders._currentGuiderID = id;
        var windowHeight = guiders._windowHeight = $(window).height();
        var scrollHeight = $(window).scrollTop();
        var guiderOffset = myGuider.elem.offset();
        var guiderElemHeight = myGuider.elem.height();
        var isGuiderBelow = scrollHeight + windowHeight < guiderOffset.top + guiderElemHeight;
        var isGuiderAbove = guiderOffset.top < scrollHeight;
        if (myGuider.autoFocus && (isGuiderBelow || isGuiderAbove)) setTimeout(guiders.scrollToCurrent, 10);
        $(myGuider.elem).trigger("guiders.show");
        return guiders;
    };
    $.fn.guider = function(passedOptions) {
        passedOptions = passedOptions || {};
        var options = $.extend({}, passedOptions);
        options.id = $(this).attr("id");
        var buttons = [];
        $(this).find(".guiders_buttons_container").children().each(function() {
            var buttonOptions = {
                "name": $(this).html(),
                "classString": $(this).attr("class")
            };
            if ($(this).attr("data-onclick")) {
                var functionName = $(this).attr("data-onclick");
                buttonOptions.onclick = function() {
                    window[functionName]();
                };
            }
            $(this).remove();
            buttons.push(buttonOptions);
        });
        options.buttons = buttons;
        title = $(this).find(".guiders_title").html();
        if (title) options.title = title;
        description = $(this).find(".guiders_description").html();
        if (description) options.description = description;
        for (var optionName in guiders._defaultSettings) {
            if (!guiders._defaultSettings.hasOwnProperty(optionName)) continue;
            var optionValue = $(this).attr("data-" + optionName);
            if (void 0 === optionValue || null === optionValue) continue;
            if ("true" == optionValue) optionValue = true; else if ("false" == optionValue) optionValue = false;
            options[optionName] = optionValue;
        }
        guiders.createGuider(options);
        return this;
    };
    return guiders;
}.call(this, jQuery);

!function(window, undefined) {
    "use strict";
    var History = window.History = window.History || {}, jQuery = window.jQuery;
    if ("undefined" !== typeof History.Adapter) throw new Error("History.js Adapter has already been loaded...");
    History.Adapter = {
        "bind": function(el, event, callback) {
            jQuery(el).bind(event, callback);
        },
        "trigger": function(el, event, extra) {
            jQuery(el).trigger(event, extra);
        },
        "extractEventData": function(key, event, extra) {
            var result = event && event.originalEvent && event.originalEvent[key] || extra && extra[key] || undefined;
            return result;
        },
        "onDomLoad": function(callback) {
            jQuery(callback);
        }
    };
    if ("undefined" !== typeof History.init) History.init();
}(window);

!function(window, undefined) {
    "use strict";
    var document = window.document, setTimeout = window.setTimeout || setTimeout, clearTimeout = window.clearTimeout || clearTimeout, setInterval = window.setInterval || setInterval, History = window.History = window.History || {};
    if ("undefined" !== typeof History.initHtml4) throw new Error("History.js HTML4 Support has already been loaded...");
    History.initHtml4 = function() {
        if ("undefined" !== typeof History.initHtml4.initialized) return false; else History.initHtml4.initialized = true;
        History.enabled = true;
        History.savedHashes = [];
        History.isLastHash = function(newHash) {
            var oldHash = History.getHashByIndex(), isLast;
            isLast = newHash === oldHash;
            return isLast;
        };
        History.isHashEqual = function(newHash, oldHash) {
            newHash = encodeURIComponent(newHash).replace(/%25/g, "%");
            oldHash = encodeURIComponent(oldHash).replace(/%25/g, "%");
            return newHash === oldHash;
        };
        History.saveHash = function(newHash) {
            if (History.isLastHash(newHash)) return false;
            History.savedHashes.push(newHash);
            return true;
        };
        History.getHashByIndex = function(index) {
            var hash = null;
            if ("undefined" === typeof index) hash = History.savedHashes[History.savedHashes.length - 1]; else if (index < 0) hash = History.savedHashes[History.savedHashes.length + index]; else hash = History.savedHashes[index];
            return hash;
        };
        History.discardedHashes = {};
        History.discardedStates = {};
        History.discardState = function(discardedState, forwardState, backState) {
            var discardedStateHash = History.getHashByState(discardedState), discardObject;
            discardObject = {
                "discardedState": discardedState,
                "backState": backState,
                "forwardState": forwardState
            };
            History.discardedStates[discardedStateHash] = discardObject;
            return true;
        };
        History.discardHash = function(discardedHash, forwardState, backState) {
            var discardObject = {
                "discardedHash": discardedHash,
                "backState": backState,
                "forwardState": forwardState
            };
            History.discardedHashes[discardedHash] = discardObject;
            return true;
        };
        History.discardedState = function(State) {
            var StateHash = History.getHashByState(State), discarded;
            discarded = History.discardedStates[StateHash] || false;
            return discarded;
        };
        History.discardedHash = function(hash) {
            var discarded = History.discardedHashes[hash] || false;
            return discarded;
        };
        History.recycleState = function(State) {
            var StateHash = History.getHashByState(State);
            if (History.discardedState(State)) delete History.discardedStates[StateHash];
            return true;
        };
        if (History.emulated.hashChange) {
            History.hashChangeInit = function() {
                History.checkerFunction = null;
                var lastDocumentHash = "", iframeId, iframe, lastIframeHash, checkerRunning, startedWithHash = Boolean(History.getHash());
                if (History.isInternetExplorer()) {
                    iframeId = "historyjs-iframe";
                    iframe = document.createElement("iframe");
                    iframe.setAttribute("id", iframeId);
                    iframe.setAttribute("src", "#");
                    iframe.style.display = "none";
                    document.body.appendChild(iframe);
                    iframe.contentWindow.document.open();
                    iframe.contentWindow.document.close();
                    lastIframeHash = "";
                    checkerRunning = false;
                    History.checkerFunction = function() {
                        if (checkerRunning) return false;
                        checkerRunning = true;
                        var documentHash = History.getHash(), iframeHash = History.getHash(iframe.contentWindow.document);
                        if (documentHash !== lastDocumentHash) {
                            lastDocumentHash = documentHash;
                            if (iframeHash !== documentHash) {
                                lastIframeHash = iframeHash = documentHash;
                                iframe.contentWindow.document.open();
                                iframe.contentWindow.document.close();
                                iframe.contentWindow.document.location.hash = History.escapeHash(documentHash);
                            }
                            History.Adapter.trigger(window, "hashchange");
                        } else if (iframeHash !== lastIframeHash) {
                            lastIframeHash = iframeHash;
                            if (startedWithHash && "" === iframeHash) History.back(); else History.setHash(iframeHash, false);
                        }
                        checkerRunning = false;
                        return true;
                    };
                } else History.checkerFunction = function() {
                    var documentHash = History.getHash() || "";
                    if (documentHash !== lastDocumentHash) {
                        lastDocumentHash = documentHash;
                        History.Adapter.trigger(window, "hashchange");
                    }
                    return true;
                };
                History.intervalList.push(setInterval(History.checkerFunction, History.options.hashChangeInterval));
                return true;
            };
            History.Adapter.onDomLoad(History.hashChangeInit);
        }
        if (History.emulated.pushState) {
            History.onHashChange = function(event) {
                var currentUrl = event && event.newURL || History.getLocationHref(), currentHash = History.getHashByUrl(currentUrl), currentState = null, currentStateHash = null, currentStateHashExits = null, discardObject;
                if (History.isLastHash(currentHash)) {
                    History.busy(false);
                    return false;
                }
                History.doubleCheckComplete();
                History.saveHash(currentHash);
                if (currentHash && History.isTraditionalAnchor(currentHash)) {
                    History.Adapter.trigger(window, "anchorchange");
                    History.busy(false);
                    return false;
                }
                currentState = History.extractState(History.getFullUrl(currentHash || History.getLocationHref()), true);
                if (History.isLastSavedState(currentState)) {
                    History.busy(false);
                    return false;
                }
                currentStateHash = History.getHashByState(currentState);
                discardObject = History.discardedState(currentState);
                if (discardObject) {
                    if (History.getHashByIndex(-2) === History.getHashByState(discardObject.forwardState)) History.back(false); else History.forward(false);
                    return false;
                }
                History.pushState(currentState.data, currentState.title, encodeURI(currentState.url), false);
                return true;
            };
            History.Adapter.bind(window, "hashchange", History.onHashChange);
            History.pushState = function(data, title, url, queue) {
                url = encodeURI(url).replace(/%25/g, "%");
                if (History.getHashByUrl(url)) throw new Error("History.js does not support states with fragment-identifiers (hashes/anchors).");
                if (false !== queue && History.busy()) {
                    History.pushQueue({
                        "scope": History,
                        "callback": History.pushState,
                        "args": arguments,
                        "queue": queue
                    });
                    return false;
                }
                History.busy(true);
                var newState = History.createStateObject(data, title, url), newStateHash = History.getHashByState(newState), oldState = History.getState(false), oldStateHash = History.getHashByState(oldState), html4Hash = History.getHash(), wasExpected = History.expectedStateId == newState.id;
                History.storeState(newState);
                History.expectedStateId = newState.id;
                History.recycleState(newState);
                History.setTitle(newState);
                if (newStateHash === oldStateHash) {
                    History.busy(false);
                    return false;
                }
                History.saveState(newState);
                if (!wasExpected) History.Adapter.trigger(window, "statechange");
                if (!History.isHashEqual(newStateHash, html4Hash) && !History.isHashEqual(newStateHash, History.getShortUrl(History.getLocationHref()))) History.setHash(newStateHash, false);
                History.busy(false);
                return true;
            };
            History.replaceState = function(data, title, url, queue) {
                url = encodeURI(url).replace(/%25/g, "%");
                if (History.getHashByUrl(url)) throw new Error("History.js does not support states with fragment-identifiers (hashes/anchors).");
                if (false !== queue && History.busy()) {
                    History.pushQueue({
                        "scope": History,
                        "callback": History.replaceState,
                        "args": arguments,
                        "queue": queue
                    });
                    return false;
                }
                History.busy(true);
                var newState = History.createStateObject(data, title, url), newStateHash = History.getHashByState(newState), oldState = History.getState(false), oldStateHash = History.getHashByState(oldState), previousState = History.getStateByIndex(-2);
                History.discardState(oldState, newState, previousState);
                if (newStateHash === oldStateHash) {
                    History.storeState(newState);
                    History.expectedStateId = newState.id;
                    History.recycleState(newState);
                    History.setTitle(newState);
                    History.saveState(newState);
                    History.Adapter.trigger(window, "statechange");
                    History.busy(false);
                } else History.pushState(newState.data, newState.title, newState.url, false);
                return true;
            };
        }
        if (History.emulated.pushState) if (History.getHash() && !History.emulated.hashChange) History.Adapter.onDomLoad(function() {
            History.Adapter.trigger(window, "hashchange");
        });
    };
    if ("undefined" !== typeof History.init) History.init();
}(window);

!function(window, undefined) {
    "use strict";
    var console = window.console || undefined, document = window.document, navigator = window.navigator, sessionStorage = window.sessionStorage || false, setTimeout = window.setTimeout, clearTimeout = window.clearTimeout, setInterval = window.setInterval, clearInterval = window.clearInterval, JSON = window.JSON, alert = window.alert, History = window.History = window.History || {}, history = window.history;
    try {
        sessionStorage.setItem("TEST", "1");
        sessionStorage.removeItem("TEST");
    } catch (e) {
        sessionStorage = false;
    }
    JSON.stringify = JSON.stringify || JSON.encode;
    JSON.parse = JSON.parse || JSON.decode;
    if ("undefined" !== typeof History.init) throw new Error("History.js Core has already been loaded...");
    History.init = function(options) {
        if ("undefined" === typeof History.Adapter) return false;
        if ("undefined" !== typeof History.initCore) History.initCore();
        if ("undefined" !== typeof History.initHtml4) History.initHtml4();
        return true;
    };
    History.initCore = function(options) {
        if ("undefined" !== typeof History.initCore.initialized) return false; else History.initCore.initialized = true;
        History.options = History.options || {};
        History.options.hashChangeInterval = History.options.hashChangeInterval || 100;
        History.options.safariPollInterval = History.options.safariPollInterval || 500;
        History.options.doubleCheckInterval = History.options.doubleCheckInterval || 500;
        History.options.disableSuid = History.options.disableSuid || false;
        History.options.storeInterval = History.options.storeInterval || 1e3;
        History.options.busyDelay = History.options.busyDelay || 250;
        History.options.debug = History.options.debug || false;
        History.options.initialTitle = History.options.initialTitle || document.title;
        History.options.html4Mode = History.options.html4Mode || false;
        History.options.delayInit = History.options.delayInit || false;
        History.intervalList = [];
        History.clearAllIntervals = function() {
            var i, il = History.intervalList;
            if ("undefined" !== typeof il && null !== il) {
                for (i = 0; i < il.length; i++) clearInterval(il[i]);
                History.intervalList = null;
            }
        };
        History.debug = function() {
            if (History.options.debug || false) History.log.apply(History, arguments);
        };
        History.log = function() {
            var consoleExists = !("undefined" === typeof console || "undefined" === typeof console.log || "undefined" === typeof console.log.apply), textarea = document.getElementById("log"), message, i, n, args, arg;
            if (consoleExists) {
                args = Array.prototype.slice.call(arguments);
                message = args.shift();
                if ("undefined" !== typeof console.debug) console.debug.apply(console, [ message, args ]); else console.log.apply(console, [ message, args ]);
            } else message = "\n" + arguments[0] + "\n";
            for (i = 1, n = arguments.length; i < n; ++i) {
                arg = arguments[i];
                if ("object" === typeof arg && "undefined" !== typeof JSON) try {
                    arg = JSON.stringify(arg);
                } catch (Exception) {}
                message += "\n" + arg + "\n";
            }
            if (textarea) {
                textarea.value += message + "\n-----\n";
                textarea.scrollTop = textarea.scrollHeight - textarea.clientHeight;
            } else if (!consoleExists) alert(message);
            return true;
        };
        History.getInternetExplorerMajorVersion = function() {
            var result = History.getInternetExplorerMajorVersion.cached = "undefined" !== typeof History.getInternetExplorerMajorVersion.cached ? History.getInternetExplorerMajorVersion.cached : function() {
                var v = 3, div = document.createElement("div"), all = div.getElementsByTagName("i");
                while ((div.innerHTML = "<!--[if gt IE " + ++v + "]><i></i><![endif]-->") && all[0]) ;
                return v > 4 ? v : false;
            }();
            return result;
        };
        History.isInternetExplorer = function() {
            var result = History.isInternetExplorer.cached = "undefined" !== typeof History.isInternetExplorer.cached ? History.isInternetExplorer.cached : Boolean(History.getInternetExplorerMajorVersion());
            return result;
        };
        if (History.options.html4Mode) History.emulated = {
            "pushState": true,
            "hashChange": true
        }; else History.emulated = {
            "pushState": !Boolean(window.history && window.history.pushState && window.history.replaceState && !(/ Mobile\/([1-7][a-z]|(8([abcde]|f(1[0-8]))))/i.test(navigator.userAgent) || /AppleWebKit\/5([0-2]|3[0-2])/i.test(navigator.userAgent))),
            "hashChange": Boolean(!("onhashchange" in window || "onhashchange" in document) || History.isInternetExplorer() && History.getInternetExplorerMajorVersion() < 8)
        };
        History.enabled = !History.emulated.pushState;
        History.bugs = {
            "setHash": Boolean(!History.emulated.pushState && "Apple Computer, Inc." === navigator.vendor && /AppleWebKit\/5([0-2]|3[0-3])/.test(navigator.userAgent)),
            "safariPoll": Boolean(!History.emulated.pushState && "Apple Computer, Inc." === navigator.vendor && /AppleWebKit\/5([0-2]|3[0-3])/.test(navigator.userAgent)),
            "ieDoubleCheck": Boolean(History.isInternetExplorer() && History.getInternetExplorerMajorVersion() < 8),
            "hashEscape": Boolean(History.isInternetExplorer() && History.getInternetExplorerMajorVersion() < 7)
        };
        History.isEmptyObject = function(obj) {
            for (var name in obj) if (obj.hasOwnProperty(name)) return false;
            return true;
        };
        History.cloneObject = function(obj) {
            var hash, newObj;
            if (obj) {
                hash = JSON.stringify(obj);
                newObj = JSON.parse(hash);
            } else newObj = {};
            return newObj;
        };
        History.getRootUrl = function() {
            var rootUrl = document.location.protocol + "//" + (document.location.hostname || document.location.host);
            if (document.location.port || false) rootUrl += ":" + document.location.port;
            rootUrl += "/";
            return rootUrl;
        };
        History.getBaseHref = function() {
            var baseElements = document.getElementsByTagName("base"), baseElement = null, baseHref = "";
            if (1 === baseElements.length) {
                baseElement = baseElements[0];
                baseHref = baseElement.href.replace(/[^\/]+$/, "");
            }
            baseHref = baseHref.replace(/\/+$/, "");
            if (baseHref) baseHref += "/";
            return baseHref;
        };
        History.getBaseUrl = function() {
            var baseUrl = History.getBaseHref() || History.getBasePageUrl() || History.getRootUrl();
            return baseUrl;
        };
        History.getPageUrl = function() {
            var State = History.getState(false, false), stateUrl = (State || {}).url || History.getLocationHref(), pageUrl;
            pageUrl = stateUrl.replace(/\/+$/, "").replace(/[^\/]+$/, function(part, index, string) {
                return /\./.test(part) ? part : part + "/";
            });
            return pageUrl;
        };
        History.getBasePageUrl = function() {
            var basePageUrl = History.getLocationHref().replace(/[#\?].*/, "").replace(/[^\/]+$/, function(part, index, string) {
                return /[^\/]$/.test(part) ? "" : part;
            }).replace(/\/+$/, "") + "/";
            return basePageUrl;
        };
        History.getFullUrl = function(url, allowBaseHref) {
            var fullUrl = url, firstChar = url.substring(0, 1);
            allowBaseHref = "undefined" === typeof allowBaseHref ? true : allowBaseHref;
            if (/[a-z]+\:\/\//.test(url)) ; else if ("/" === firstChar) fullUrl = History.getRootUrl() + url.replace(/^\/+/, ""); else if ("#" === firstChar) fullUrl = History.getPageUrl().replace(/#.*/, "") + url; else if ("?" === firstChar) fullUrl = History.getPageUrl().replace(/[\?#].*/, "") + url; else if (allowBaseHref) fullUrl = History.getBaseUrl() + url.replace(/^(\.\/)+/, ""); else fullUrl = History.getBasePageUrl() + url.replace(/^(\.\/)+/, "");
            return fullUrl.replace(/\#$/, "");
        };
        History.getShortUrl = function(url) {
            var shortUrl = url, baseUrl = History.getBaseUrl(), rootUrl = History.getRootUrl();
            if (History.emulated.pushState) shortUrl = shortUrl.replace(baseUrl, "");
            shortUrl = shortUrl.replace(rootUrl, "/");
            shortUrl = shortUrl.replace(/^(\.\/)+/g, "./").replace(/\#$/, "");
            return shortUrl;
        };
        History.getLocationHref = function(doc) {
            doc = doc || document;
            if (doc.URL === doc.location.href) return doc.location.href;
            if (doc.location.href === decodeURIComponent(doc.URL)) return doc.URL;
            if (doc.location.hash && decodeURIComponent(doc.location.href.replace(/^[^#]+/, "")) === doc.location.hash) return doc.location.href;
            if (doc.URL.indexOf("#") == -1 && doc.location.href.indexOf("#") != -1) return doc.location.href;
            return doc.URL || doc.location.href;
        };
        History.store = {};
        History.idToState = History.idToState || {};
        History.stateToId = History.stateToId || {};
        History.urlToId = History.urlToId || {};
        History.storedStates = History.storedStates || [];
        History.savedStates = History.savedStates || [];
        History.normalizeStore = function() {
            History.store.idToState = History.store.idToState || {};
            History.store.urlToId = History.store.urlToId || {};
            History.store.stateToId = History.store.stateToId || {};
        };
        History.getState = function(friendly, create) {
            if ("undefined" === typeof friendly) friendly = true;
            if ("undefined" === typeof create) create = true;
            var State = History.getLastSavedState();
            if (!State && create) State = History.createStateObject();
            if (friendly) {
                State = History.cloneObject(State);
                State.url = State.cleanUrl || State.url;
            }
            return State;
        };
        History.getIdByState = function(newState) {
            var id = History.extractId(newState.url), str;
            if (!id) {
                str = History.getStateString(newState);
                if ("undefined" !== typeof History.stateToId[str]) id = History.stateToId[str]; else if ("undefined" !== typeof History.store.stateToId[str]) id = History.store.stateToId[str]; else {
                    while (true) {
                        id = new Date().getTime() + String(Math.random()).replace(/\D/g, "");
                        if ("undefined" === typeof History.idToState[id] && "undefined" === typeof History.store.idToState[id]) break;
                    }
                    History.stateToId[str] = id;
                    History.idToState[id] = newState;
                }
            }
            return id;
        };
        History.normalizeState = function(oldState) {
            var newState, dataNotEmpty;
            if (!oldState || "object" !== typeof oldState) oldState = {};
            if ("undefined" !== typeof oldState.normalized) return oldState;
            if (!oldState.data || "object" !== typeof oldState.data) oldState.data = {};
            newState = {};
            newState.normalized = true;
            newState.title = oldState.title || "";
            newState.url = History.getFullUrl(oldState.url ? oldState.url : History.getLocationHref());
            newState.hash = History.getShortUrl(newState.url);
            newState.data = History.cloneObject(oldState.data);
            newState.id = History.getIdByState(newState);
            newState.cleanUrl = newState.url.replace(/\??\&_suid.*/, "");
            newState.url = newState.cleanUrl;
            dataNotEmpty = !History.isEmptyObject(newState.data);
            if (true || (newState.title || dataNotEmpty) && true !== History.options.disableSuid) {
                newState.hash = History.getShortUrl(newState.url).replace(/\??\&_suid.*/, "");
                if (!/\?/.test(newState.hash)) newState.hash += "?";
                newState.hash += "&_suid=" + newState.id;
            }
            newState.hashedUrl = History.getFullUrl(newState.hash);
            if ((History.emulated.pushState || History.bugs.safariPoll) && History.hasUrlDuplicate(newState)) newState.url = newState.hashedUrl;
            return newState;
        };
        History.createStateObject = function(data, title, url) {
            var State = {
                "data": data,
                "title": title,
                "url": url
            };
            State = History.normalizeState(State);
            return State;
        };
        History.getStateById = function(id) {
            id = String(id);
            var State = History.idToState[id] || History.store.idToState[id] || undefined;
            return State;
        };
        History.getStateString = function(passedState) {
            var State, cleanedState, str;
            State = History.normalizeState(passedState);
            cleanedState = {
                "data": State.data,
                "title": passedState.title,
                "url": passedState.url
            };
            str = JSON.stringify(cleanedState);
            return str;
        };
        History.getStateId = function(passedState) {
            var State, id;
            State = History.normalizeState(passedState);
            id = State.id;
            return id;
        };
        History.getHashByState = function(passedState) {
            var State, hash;
            State = History.normalizeState(passedState);
            hash = State.hash;
            return hash;
        };
        History.extractId = function(url_or_hash) {
            var id, parts, url, tmp;
            if (url_or_hash.indexOf("#") != -1) tmp = url_or_hash.split("#")[0]; else tmp = url_or_hash;
            parts = /(.*)\&_suid=([0-9]+)$/.exec(tmp);
            url = parts ? parts[1] || url_or_hash : url_or_hash;
            id = parts ? String(parts[2] || "") : "";
            return id || false;
        };
        History.isTraditionalAnchor = function(url_or_hash) {
            return false === History.extractId(url_or_hash);
            var isTraditional = !/[\/\?\.]/.test(url_or_hash);
            return isTraditional;
        };
        History.extractState = function(url_or_hash, create) {
            var State = null, id, url;
            create = create || false;
            id = History.extractId(url_or_hash);
            if (id) State = History.getStateById(id);
            if (!State) {
                url = History.getFullUrl(url_or_hash);
                id = History.getIdByUrl(url) || false;
                if (id) State = History.getStateById(id);
                if (!State && create) State = History.createStateObject(null, null, url);
            }
            return State;
        };
        History.getIdByUrl = function(url) {
            var id = History.urlToId[url] || History.store.urlToId[url] || undefined;
            return id;
        };
        History.getLastSavedState = function() {
            return History.savedStates[History.savedStates.length - 1] || undefined;
        };
        History.getLastStoredState = function() {
            return History.storedStates[History.storedStates.length - 1] || undefined;
        };
        History.hasUrlDuplicate = function(newState) {
            var hasDuplicate = false, oldState;
            oldState = History.extractState(newState.url);
            hasDuplicate = oldState && oldState.id !== newState.id;
            return hasDuplicate;
        };
        History.storeState = function(newState) {
            History.urlToId[newState.url] = newState.id;
            History.storedStates.push(History.cloneObject(newState));
            return newState;
        };
        History.isLastSavedState = function(newState) {
            var isLast = false, newId, oldState, oldId;
            if (History.savedStates.length) {
                newId = newState.id;
                oldState = History.getLastSavedState();
                oldId = oldState.id;
                isLast = newId === oldId;
            }
            return isLast;
        };
        History.saveState = function(newState) {
            if (History.isLastSavedState(newState)) return false;
            History.savedStates.push(History.cloneObject(newState));
            return true;
        };
        History.getStateByIndex = function(index) {
            var State = null;
            if ("undefined" === typeof index) State = History.savedStates[History.savedStates.length - 1]; else if (index < 0) State = History.savedStates[History.savedStates.length + index]; else State = History.savedStates[index];
            return State;
        };
        History.getCurrentIndex = function() {
            var index = null;
            if (History.savedStates.length < 1) index = 0; else index = History.savedStates.length - 1;
            return index;
        };
        History.getHash = function(doc) {
            var url = History.getLocationHref(doc), hash;
            hash = History.getHashByUrl(url);
            return hash;
        };
        History.unescapeHash = function(hash) {
            var result = History.normalizeHash(hash);
            result = decodeURIComponent(result);
            return result;
        };
        History.normalizeHash = function(hash) {
            var result = hash.replace(/[^#]*#/, "").replace(/#.*/, "");
            return result;
        };
        History.setHash = function(hash, queue) {
            var State, pageUrl;
            if (false !== queue && History.busy()) {
                History.pushQueue({
                    "scope": History,
                    "callback": History.setHash,
                    "args": arguments,
                    "queue": queue
                });
                return false;
            }
            History.busy(true);
            State = History.extractState(hash, true);
            if (State && !History.emulated.pushState) History.pushState(State.data, State.title, State.url, false); else if (History.getHash() !== hash) if (History.bugs.setHash) {
                pageUrl = History.getPageUrl();
                History.pushState(null, null, pageUrl + "#" + hash, false);
            } else document.location.hash = hash;
            return History;
        };
        History.escapeHash = function(hash) {
            var result = History.normalizeHash(hash);
            result = window.encodeURIComponent(result);
            if (!History.bugs.hashEscape) result = result.replace(/\%21/g, "!").replace(/\%26/g, "&").replace(/\%3D/g, "=").replace(/\%3F/g, "?");
            return result;
        };
        History.getHashByUrl = function(url) {
            var hash = String(url).replace(/([^#]*)#?([^#]*)#?(.*)/, "$2");
            hash = History.unescapeHash(hash);
            return hash;
        };
        History.setTitle = function(newState) {
            var title = newState.title, firstState;
            if (!title) {
                firstState = History.getStateByIndex(0);
                if (firstState && firstState.url === newState.url) title = firstState.title || History.options.initialTitle;
            }
            try {
                document.getElementsByTagName("title")[0].innerHTML = title.replace("<", "&lt;").replace(">", "&gt;").replace(" & ", " &amp; ");
            } catch (Exception) {}
            document.title = title;
            return History;
        };
        History.queues = [];
        History.busy = function(value) {
            if ("undefined" !== typeof value) History.busy.flag = value; else if ("undefined" === typeof History.busy.flag) History.busy.flag = false;
            if (!History.busy.flag) {
                clearTimeout(History.busy.timeout);
                var fireNext = function() {
                    var i, queue, item;
                    if (History.busy.flag) return;
                    for (i = History.queues.length - 1; i >= 0; --i) {
                        queue = History.queues[i];
                        if (0 === queue.length) continue;
                        item = queue.shift();
                        History.fireQueueItem(item);
                        History.busy.timeout = setTimeout(fireNext, History.options.busyDelay);
                    }
                };
                History.busy.timeout = setTimeout(fireNext, History.options.busyDelay);
            }
            return History.busy.flag;
        };
        History.busy.flag = false;
        History.fireQueueItem = function(item) {
            return item.callback.apply(item.scope || History, item.args || []);
        };
        History.pushQueue = function(item) {
            History.queues[item.queue || 0] = History.queues[item.queue || 0] || [];
            History.queues[item.queue || 0].push(item);
            return History;
        };
        History.queue = function(item, queue) {
            if ("function" === typeof item) item = {
                "callback": item
            };
            if ("undefined" !== typeof queue) item.queue = queue;
            if (History.busy()) History.pushQueue(item); else History.fireQueueItem(item);
            return History;
        };
        History.clearQueue = function() {
            History.busy.flag = false;
            History.queues = [];
            return History;
        };
        History.stateChanged = false;
        History.doubleChecker = false;
        History.doubleCheckComplete = function() {
            History.stateChanged = true;
            History.doubleCheckClear();
            return History;
        };
        History.doubleCheckClear = function() {
            if (History.doubleChecker) {
                clearTimeout(History.doubleChecker);
                History.doubleChecker = false;
            }
            return History;
        };
        History.doubleCheck = function(tryAgain) {
            History.stateChanged = false;
            History.doubleCheckClear();
            if (History.bugs.ieDoubleCheck) History.doubleChecker = setTimeout(function() {
                History.doubleCheckClear();
                if (!History.stateChanged) tryAgain();
                return true;
            }, History.options.doubleCheckInterval);
            return History;
        };
        History.safariStatePoll = function() {
            var urlState = History.extractState(History.getLocationHref()), newState;
            if (!History.isLastSavedState(urlState)) newState = urlState; else return;
            if (!newState) newState = History.createStateObject();
            History.Adapter.trigger(window, "popstate");
            return History;
        };
        History.back = function(queue) {
            if (false !== queue && History.busy()) {
                History.pushQueue({
                    "scope": History,
                    "callback": History.back,
                    "args": arguments,
                    "queue": queue
                });
                return false;
            }
            History.busy(true);
            History.doubleCheck(function() {
                History.back(false);
            });
            history.go(-1);
            return true;
        };
        History.forward = function(queue) {
            if (false !== queue && History.busy()) {
                History.pushQueue({
                    "scope": History,
                    "callback": History.forward,
                    "args": arguments,
                    "queue": queue
                });
                return false;
            }
            History.busy(true);
            History.doubleCheck(function() {
                History.forward(false);
            });
            history.go(1);
            return true;
        };
        History.go = function(index, queue) {
            var i;
            if (index > 0) for (i = 1; i <= index; ++i) History.forward(queue); else if (index < 0) for (i = -1; i >= index; --i) History.back(queue); else throw new Error("History.go: History.go requires a positive or negative integer passed.");
            return History;
        };
        if (History.emulated.pushState) {
            var emptyFunction = function() {};
            History.pushState = History.pushState || emptyFunction;
            History.replaceState = History.replaceState || emptyFunction;
        } else {
            History.onPopState = function(event, extra) {
                var stateId = false, newState = false, currentHash, currentState;
                History.doubleCheckComplete();
                currentHash = History.getHash();
                if (currentHash) {
                    if (!History.isTraditionalAnchor(currentHash)) currentState = History.extractState(currentHash, true);
                    if (currentState) History.replaceState(currentState.data, currentState.title, currentState.url, false); else {
                        History.Adapter.trigger(window, "anchorchange");
                        History.busy(false);
                    }
                    History.expectedStateId = false;
                    return false;
                }
                stateId = History.Adapter.extractEventData("state", event, extra) || false;
                if (stateId) newState = History.getStateById(stateId); else if (History.expectedStateId) newState = History.getStateById(History.expectedStateId); else newState = History.extractState(History.getLocationHref());
                if (!newState) newState = History.createStateObject(null, null, History.getLocationHref());
                History.expectedStateId = false;
                if (History.isLastSavedState(newState)) {
                    History.busy(false);
                    return false;
                }
                History.storeState(newState);
                History.saveState(newState);
                History.setTitle(newState);
                History.Adapter.trigger(window, "statechange");
                History.busy(false);
                return true;
            };
            History.Adapter.bind(window, "popstate", History.onPopState);
            History.pushState = function(data, title, url, queue) {
                if (History.getHashByUrl(url) && History.emulated.pushState) throw new Error("History.js does not support states with fragement-identifiers (hashes/anchors).");
                if (false !== queue && History.busy()) {
                    History.pushQueue({
                        "scope": History,
                        "callback": History.pushState,
                        "args": arguments,
                        "queue": queue
                    });
                    return false;
                }
                History.busy(true);
                var newState = History.createStateObject(data, title, url);
                if (History.isLastSavedState(newState)) History.busy(false); else {
                    History.storeState(newState);
                    History.expectedStateId = newState.id;
                    history.pushState(newState.id, newState.title, newState.url);
                    History.Adapter.trigger(window, "popstate");
                }
                return true;
            };
            History.replaceState = function(data, title, url, queue) {
                if (History.getHashByUrl(url) && History.emulated.pushState) throw new Error("History.js does not support states with fragement-identifiers (hashes/anchors).");
                if (false !== queue && History.busy()) {
                    History.pushQueue({
                        "scope": History,
                        "callback": History.replaceState,
                        "args": arguments,
                        "queue": queue
                    });
                    return false;
                }
                History.busy(true);
                var newState = History.createStateObject(data, title, url);
                if (History.isLastSavedState(newState)) History.busy(false); else {
                    History.storeState(newState);
                    History.expectedStateId = newState.id;
                    history.replaceState(newState.id, newState.title, newState.url);
                    History.Adapter.trigger(window, "popstate");
                }
                return true;
            };
        }
        if (sessionStorage) {
            try {
                History.store = JSON.parse(sessionStorage.getItem("History.store")) || {};
            } catch (err) {
                History.store = {};
            }
            History.normalizeStore();
        } else {
            History.store = {};
            History.normalizeStore();
        }
        History.Adapter.bind(window, "unload", History.clearAllIntervals);
        History.saveState(History.storeState(History.extractState(History.getLocationHref(), true)));
        if (sessionStorage) {
            History.onUnload = function() {
                var currentStore, item, currentStoreString;
                try {
                    currentStore = JSON.parse(sessionStorage.getItem("History.store")) || {};
                } catch (err) {
                    currentStore = {};
                }
                currentStore.idToState = currentStore.idToState || {};
                currentStore.urlToId = currentStore.urlToId || {};
                currentStore.stateToId = currentStore.stateToId || {};
                for (item in History.idToState) {
                    if (!History.idToState.hasOwnProperty(item)) continue;
                    currentStore.idToState[item] = History.idToState[item];
                }
                for (item in History.urlToId) {
                    if (!History.urlToId.hasOwnProperty(item)) continue;
                    currentStore.urlToId[item] = History.urlToId[item];
                }
                for (item in History.stateToId) {
                    if (!History.stateToId.hasOwnProperty(item)) continue;
                    currentStore.stateToId[item] = History.stateToId[item];
                }
                History.store = currentStore;
                History.normalizeStore();
                currentStoreString = JSON.stringify(currentStore);
                try {
                    sessionStorage.setItem("History.store", currentStoreString);
                } catch (e) {
                    if (e.code === DOMException.QUOTA_EXCEEDED_ERR) if (sessionStorage.length) {
                        sessionStorage.removeItem("History.store");
                        sessionStorage.setItem("History.store", currentStoreString);
                    } else ; else throw e;
                }
            };
            History.intervalList.push(setInterval(History.onUnload, History.options.storeInterval));
            History.Adapter.bind(window, "beforeunload", History.onUnload);
            History.Adapter.bind(window, "unload", History.onUnload);
        }
        if (!History.emulated.pushState) {
            if (History.bugs.safariPoll) History.intervalList.push(setInterval(History.safariStatePoll, History.options.safariPollInterval));
            if ("Apple Computer, Inc." === navigator.vendor || "Mozilla" === (navigator.appCodeName || "")) {
                History.Adapter.bind(window, "hashchange", function() {
                    History.Adapter.trigger(window, "popstate");
                });
                if (History.getHash()) History.Adapter.onDomLoad(function() {
                    History.Adapter.trigger(window, "hashchange");
                });
            }
        }
    };
    if (!History.options || !History.options.delayInit) History.init();
}(window);

!function($) {
    $.fn.mask = function(elems) {
        var CLASS = "mask";
        $("." + CLASS).remove();
        if (false === elems) return this; else if ("string" !== typeof elems) elems = $(elems);
        return this.each(function() {
            var container = $(this), containerDims = $.mask.getDims(container), myElems = elems, maskDimsList = [ containerDims ], nextMaskDimsList = [];
            if ("string" === typeof myElems) myElems = container.find(myElems);
            myElems.each(function() {
                var dims = $.mask.getDims(this);
                $.each(maskDimsList, function() {
                    nextMaskDimsList = $.merge(nextMaskDimsList, $.mask.getMaskDimsList(this, dims));
                });
                maskDimsList = nextMaskDimsList;
                nextMaskDimsList = [];
            });
            $.each(maskDimsList, function() {
                $("<div>").css(this).addClass(CLASS).appendTo($("body"));
            });
        });
    };
    $.mask = {};
    $.mask.getDims = function(elem) {
        elem = $(elem);
        var dims = elem.offset();
        if (!dims) dims = {
            "top": 0,
            "left": 0
        };
        dims.height = elem.outerHeight();
        dims.width = elem.outerWidth();
        return dims;
    };
    $.mask.intersectDims = function(containerDims, elemDims) {
        var top = elemDims.top, left = elemDims.left, height = elemDims.height, width = elemDims.width, newObj = false;
        if (top < containerDims.top) {
            height -= containerDims.top - top;
            top = containerDims.top;
            newObj = true;
        }
        if (left < containerDims.left) {
            width -= containerDims.left - left;
            left = containerDims.left;
            newObj = true;
        }
        if (top + height > containerDims.top + containerDims.height) {
            height -= top + height - (containerDims.top + containerDims.height);
            newObj = true;
        }
        if (left + width > containerDims.left + containerDims.width) {
            width -= left + width - (containerDims.left + containerDims.width);
            newObj = true;
        }
        if (newObj) return {
            "top": top,
            "left": left,
            "height": height,
            "width": width
        };
        return elemDims;
    };
    $.mask.dimsOverlap = function(dims1, dims2) {
        return !(dims2.top + dims2.height <= dims1.top || dims1.top + dims1.height <= dims2.top || dims2.left + dims2.width <= dims1.left || dims1.left + dims1.width <= dims2.left);
    };
    $.mask.getMaskDimsList = function(containerDims, dims) {
        if (!$.mask.dimsOverlap(containerDims, dims)) return [ containerDims ];
        dims = $.mask.intersectDims(containerDims, dims);
        var maskDimsList = [ {
            "top": containerDims.top,
            "left": containerDims.left,
            "height": dims.top - containerDims.top,
            "width": dims.left + dims.width - containerDims.left
        }, {
            "top": containerDims.top,
            "left": dims.left + dims.width,
            "height": dims.top + dims.height - containerDims.top,
            "width": containerDims.left + containerDims.width - (dims.left + dims.width)
        }, {
            "top": dims.top + dims.height,
            "left": dims.left,
            "height": containerDims.top + containerDims.height - (dims.top + dims.height),
            "width": containerDims.left + containerDims.width - dims.left
        }, {
            "top": dims.top,
            "left": containerDims.left,
            "height": containerDims.top + containerDims.height - dims.top,
            "width": dims.left - containerDims.left
        } ];
        return $.grep(maskDimsList, function(d) {
            return d.height > 0 && d.width > 0;
        });
    };
}(jQuery);

!function(window, document, $) {
    var isInputSupported = "placeholder" in document.createElement("input"), isTextareaSupported = "placeholder" in document.createElement("textarea"), valHooks = $.valHooks, hooks, placeholder;
    if (isInputSupported && isTextareaSupported) {
        placeholder = $.fn.placeholder = function() {
            return this;
        };
        placeholder.input = placeholder.textarea = true;
    } else {
        placeholder = $.fn.placeholder = function() {
            var $this = this;
            $this.filter((isInputSupported ? "textarea" : ":input") + "[placeholder]").not(".placeholder").bind({
                "focus.placeholder": clearPlaceholder,
                "blur.placeholder": setPlaceholder
            }).data("placeholder-enabled", true).trigger("blur.placeholder");
            return $this;
        };
        placeholder.input = isInputSupported;
        placeholder.textarea = isTextareaSupported;
        hooks = {
            "get": function(element) {
                var $element = $(element);
                return $element.data("placeholder-enabled") && $element.hasClass("placeholder") ? "" : element.value;
            },
            "set": function(element, value) {
                var $element = $(element);
                if (!$element.data("placeholder-enabled")) return element.value = value;
                if ("" == value) {
                    element.value = value;
                    if (element != document.activeElement) setPlaceholder.call(element);
                } else if ($element.hasClass("placeholder")) clearPlaceholder.call(element, true, value) || (element.value = value); else element.value = value;
                return $element;
            }
        };
        isInputSupported || (valHooks.input = hooks);
        isTextareaSupported || (valHooks.textarea = hooks);
        $(function() {
            $(document).delegate("form", "submit.placeholder", function() {
                var $inputs = $(".placeholder", this).each(clearPlaceholder);
                setTimeout(function() {
                    $inputs.each(setPlaceholder);
                }, 10);
            });
        });
        $(window).bind("beforeunload.placeholder", function() {
            $(".placeholder").each(function() {
                this.value = "";
            });
        });
    }
    function args(elem) {
        var newAttrs = {}, rinlinejQuery = /^jQuery\d+$/;
        $.each(elem.attributes, function(i, attr) {
            if (attr.specified && !rinlinejQuery.test(attr.name)) newAttrs[attr.name] = attr.value;
        });
        return newAttrs;
    }
    function clearPlaceholder(event, value) {
        var input = this, $input = $(input);
        if (input.value == $input.attr("placeholder") && $input.hasClass("placeholder")) if ($input.data("placeholder-password")) {
            $input = $input.hide().next().show().attr("id", $input.removeAttr("id").data("placeholder-id"));
            if (true === event) return $input[0].value = value;
            $input.focus();
        } else {
            input.value = "";
            $input.removeClass("placeholder");
            input == document.activeElement && input.select();
        }
    }
    function setPlaceholder() {
        var $replacement, input = this, $input = $(input), $origInput = $input, id = this.id;
        if ("" == input.value) {
            if ("password" == input.type) {
                if (!$input.data("placeholder-textinput")) {
                    try {
                        $replacement = $input.clone().attr({
                            "type": "text"
                        });
                    } catch (e) {
                        $replacement = $("<input>").attr($.extend(args(this), {
                            "type": "text"
                        }));
                    }
                    $replacement.removeAttr("name").data({
                        "placeholder-password": true,
                        "placeholder-id": id
                    }).bind("focus.placeholder", clearPlaceholder);
                    $input.data({
                        "placeholder-textinput": $replacement,
                        "placeholder-id": id
                    }).before($replacement);
                }
                $input = $input.removeAttr("id").hide().prev().attr("id", id).show();
            }
            $input.addClass("placeholder");
            $input[0].value = $input.attr("placeholder");
        } else $input.removeClass("placeholder");
    }
}(this, document, jQuery);

!function($) {
    var history_handle_top, timer, body, jwindow = $(window), styling = {
        "jqueryui": {
            "container": "ui-widget ui-widget-content ui-corner-all",
            "notice": "ui-state-highlight",
            "notice_icon": "ui-icon ui-icon-info",
            "info": "",
            "info_icon": "ui-icon ui-icon-info",
            "success": "ui-state-default",
            "success_icon": "ui-icon ui-icon-circle-check",
            "error": "ui-state-error",
            "error_icon": "ui-icon ui-icon-alert",
            "closer": "ui-icon ui-icon-close",
            "pin_up": "ui-icon ui-icon-pin-w",
            "pin_down": "ui-icon ui-icon-pin-s",
            "hi_menu": "ui-state-default ui-corner-bottom",
            "hi_btn": "ui-state-default ui-corner-all",
            "hi_btnhov": "ui-state-hover",
            "hi_hnd": "ui-icon ui-icon-grip-dotted-horizontal"
        },
        "bootstrap": {
            "container": "alert",
            "notice": "",
            "notice_icon": "icon-exclamation-sign",
            "info": "alert-info",
            "info_icon": "icon-info-sign",
            "success": "alert-success",
            "success_icon": "icon-ok-sign",
            "error": "alert-error",
            "error_icon": "icon-warning-sign",
            "closer": "icon-remove",
            "pin_up": "icon-pause",
            "pin_down": "icon-play",
            "hi_menu": "well",
            "hi_btn": "btn",
            "hi_btnhov": "",
            "hi_hnd": "icon-chevron-down"
        }
    };
    var do_when_ready = function() {
        body = $("body");
        jwindow = $(window);
        jwindow.bind("resize", function() {
            if (timer) clearTimeout(timer);
            timer = setTimeout($.pnotify_position_all, 10);
        });
    };
    if (document.body) do_when_ready(); else $(do_when_ready);
    $.extend({
        "pnotify_remove_all": function() {
            var notices_data = jwindow.data("pnotify");
            if (notices_data && notices_data.length) $.each(notices_data, function() {
                if (this.pnotify_remove) this.pnotify_remove();
            });
        },
        "pnotify_position_all": function() {
            if (timer) clearTimeout(timer);
            timer = null;
            var notices_data = jwindow.data("pnotify");
            if (!notices_data || !notices_data.length) return;
            $.each(notices_data, function() {
                var s = this.opts.stack;
                if (!s) return;
                s.nextpos1 = s.firstpos1;
                s.nextpos2 = s.firstpos2;
                s.addpos2 = 0;
                s.animation = true;
            });
            $.each(notices_data, function() {
                this.pnotify_position();
            });
        },
        "pnotify": function(options) {
            var animating;
            var opts;
            if ("object" != typeof options) {
                opts = $.extend({}, $.pnotify.defaults);
                opts.text = options;
            } else opts = $.extend({}, $.pnotify.defaults, options);
            for (var i in opts) if ("string" == typeof i && i.match(/^pnotify_/)) opts[i.replace(/^pnotify_/, "")] = opts[i];
            if (opts.before_init) if (false === opts.before_init(opts)) return null;
            var nonblock_last_elem;
            var nonblock_pass = function(e, e_name) {
                pnotify.css("display", "none");
                var element_below = document.elementFromPoint(e.clientX, e.clientY);
                pnotify.css("display", "block");
                var jelement_below = $(element_below);
                var cursor_style = jelement_below.css("cursor");
                pnotify.css("cursor", "auto" != cursor_style ? cursor_style : "default");
                if (!nonblock_last_elem || nonblock_last_elem.get(0) != element_below) {
                    if (nonblock_last_elem) {
                        dom_event.call(nonblock_last_elem.get(0), "mouseleave", e.originalEvent);
                        dom_event.call(nonblock_last_elem.get(0), "mouseout", e.originalEvent);
                    }
                    dom_event.call(element_below, "mouseenter", e.originalEvent);
                    dom_event.call(element_below, "mouseover", e.originalEvent);
                }
                dom_event.call(element_below, e_name, e.originalEvent);
                nonblock_last_elem = jelement_below;
            };
            var styles;
            if ("object" == typeof opts.styling) styles = opts.styling; else styles = styling[opts.styling];
            var pnotify = $("<div />", {
                "class": "ui-pnotify " + opts.addclass,
                "css": {
                    "display": "none"
                },
                "mouseenter": function(e) {
                    if (opts.nonblock) e.stopPropagation();
                    if (opts.mouse_reset && "out" == animating) {
                        pnotify.stop(true);
                        animating = "in";
                        pnotify.css("height", "auto").animate({
                            "width": opts.width,
                            "opacity": opts.nonblock ? opts.nonblock_opacity : opts.opacity
                        }, "fast");
                    }
                    if (opts.nonblock) pnotify.stop().animate({
                        "opacity": opts.nonblock_opacity
                    }, "fast");
                    if (opts.hide && opts.mouse_reset) pnotify.pnotify_cancel_remove();
                    if (opts.sticker && !opts.nonblock) pnotify.sticker.trigger("pnotify_icon").css("visibility", "visible");
                    if (opts.closer && !opts.nonblock) pnotify.closer.css("visibility", "visible");
                },
                "mouseleave": function(e) {
                    if (opts.nonblock) e.stopPropagation();
                    nonblock_last_elem = null;
                    pnotify.css("cursor", "auto");
                    if (opts.nonblock && "out" != animating) pnotify.stop().animate({
                        "opacity": opts.opacity
                    }, "fast");
                    if (opts.hide && opts.mouse_reset) pnotify.pnotify_queue_remove();
                    if (opts.sticker_hover) pnotify.sticker.css("visibility", "hidden");
                    if (opts.closer_hover) pnotify.closer.css("visibility", "hidden");
                    $.pnotify_position_all();
                },
                "mouseover": function(e) {
                    if (opts.nonblock) e.stopPropagation();
                },
                "mouseout": function(e) {
                    if (opts.nonblock) e.stopPropagation();
                },
                "mousemove": function(e) {
                    if (opts.nonblock) {
                        e.stopPropagation();
                        nonblock_pass(e, "onmousemove");
                    }
                },
                "mousedown": function(e) {
                    if (opts.nonblock) {
                        e.stopPropagation();
                        e.preventDefault();
                        nonblock_pass(e, "onmousedown");
                    }
                },
                "mouseup": function(e) {
                    if (opts.nonblock) {
                        e.stopPropagation();
                        e.preventDefault();
                        nonblock_pass(e, "onmouseup");
                    }
                },
                "click": function(e) {
                    if (opts.nonblock) {
                        e.stopPropagation();
                        nonblock_pass(e, "onclick");
                    }
                },
                "dblclick": function(e) {
                    if (opts.nonblock) {
                        e.stopPropagation();
                        nonblock_pass(e, "ondblclick");
                    }
                }
            });
            pnotify.opts = opts;
            pnotify.container = $("<div />", {
                "class": styles.container + " ui-pnotify-container " + ("error" == opts.type ? styles.error : "info" == opts.type ? styles.info : "success" == opts.type ? styles.success : styles.notice)
            }).appendTo(pnotify);
            if ("" != opts.cornerclass) pnotify.container.removeClass("ui-corner-all").addClass(opts.cornerclass);
            if (opts.shadow) pnotify.container.addClass("ui-pnotify-shadow");
            pnotify.pnotify_version = "1.2.2";
            pnotify.pnotify = function(options) {
                var old_opts = opts;
                if ("string" == typeof options) opts.text = options; else opts = $.extend({}, opts, options);
                for (var i in opts) if ("string" == typeof i && i.match(/^pnotify_/)) opts[i.replace(/^pnotify_/, "")] = opts[i];
                pnotify.opts = opts;
                if (opts.cornerclass != old_opts.cornerclass) pnotify.container.removeClass("ui-corner-all").addClass(opts.cornerclass);
                if (opts.shadow != old_opts.shadow) if (opts.shadow) pnotify.container.addClass("ui-pnotify-shadow"); else pnotify.container.removeClass("ui-pnotify-shadow");
                if (false === opts.addclass) pnotify.removeClass(old_opts.addclass); else if (opts.addclass !== old_opts.addclass) pnotify.removeClass(old_opts.addclass).addClass(opts.addclass);
                if (false === opts.title) pnotify.title_container.slideUp("fast"); else if (opts.title !== old_opts.title) if (opts.title_escape) pnotify.title_container.text(opts.title).slideDown(200); else pnotify.title_container.html(opts.title).slideDown(200);
                if (false === opts.text) pnotify.text_container.slideUp("fast"); else if (opts.text !== old_opts.text) if (opts.text_escape) pnotify.text_container.text(opts.text).slideDown(200); else pnotify.text_container.html(opts.insert_brs ? String(opts.text).replace(/\n/g, "<br />") : opts.text).slideDown(200);
                pnotify.pnotify_history = opts.history;
                pnotify.pnotify_hide = opts.hide;
                if (opts.type != old_opts.type) pnotify.container.removeClass(styles.error + " " + styles.notice + " " + styles.success + " " + styles.info).addClass("error" == opts.type ? styles.error : "info" == opts.type ? styles.info : "success" == opts.type ? styles.success : styles.notice);
                if (opts.icon !== old_opts.icon || true === opts.icon && opts.type != old_opts.type) {
                    pnotify.container.find("div.ui-pnotify-icon").remove();
                    if (false !== opts.icon) $("<div />", {
                        "class": "ui-pnotify-icon"
                    }).append($("<span />", {
                        "class": true === opts.icon ? "error" == opts.type ? styles.error_icon : "info" == opts.type ? styles.info_icon : "success" == opts.type ? styles.success_icon : styles.notice_icon : opts.icon
                    })).prependTo(pnotify.container);
                }
                if (opts.width !== old_opts.width) pnotify.animate({
                    "width": opts.width
                });
                if (opts.min_height !== old_opts.min_height) pnotify.container.animate({
                    "minHeight": opts.min_height
                });
                if (opts.opacity !== old_opts.opacity) pnotify.fadeTo(opts.animate_speed, opts.opacity);
                if (!opts.closer || opts.nonblock) pnotify.closer.css("display", "none"); else pnotify.closer.css("display", "block");
                if (!opts.sticker || opts.nonblock) pnotify.sticker.css("display", "none"); else pnotify.sticker.css("display", "block");
                pnotify.sticker.trigger("pnotify_icon");
                if (opts.sticker_hover) pnotify.sticker.css("visibility", "hidden"); else if (!opts.nonblock) pnotify.sticker.css("visibility", "visible");
                if (opts.closer_hover) pnotify.closer.css("visibility", "hidden"); else if (!opts.nonblock) pnotify.closer.css("visibility", "visible");
                if (!opts.hide) pnotify.pnotify_cancel_remove(); else if (!old_opts.hide) pnotify.pnotify_queue_remove();
                pnotify.pnotify_queue_position();
                return pnotify;
            };
            pnotify.pnotify_position = function(dont_skip_hidden) {
                var s = pnotify.opts.stack;
                if (!s) return;
                if (!s.nextpos1) s.nextpos1 = s.firstpos1;
                if (!s.nextpos2) s.nextpos2 = s.firstpos2;
                if (!s.addpos2) s.addpos2 = 0;
                var hidden = "none" == pnotify.css("display");
                if (!hidden || dont_skip_hidden) {
                    var curpos1, curpos2;
                    var animate = {};
                    var csspos1;
                    switch (s.dir1) {
                      case "down":
                        csspos1 = "top";
                        break;

                      case "up":
                        csspos1 = "bottom";
                        break;

                      case "left":
                        csspos1 = "right";
                        break;

                      case "right":
                        csspos1 = "left";
                    }
                    curpos1 = parseInt(pnotify.css(csspos1));
                    if (isNaN(curpos1)) curpos1 = 0;
                    if ("undefined" == typeof s.firstpos1 && !hidden) {
                        s.firstpos1 = curpos1;
                        s.nextpos1 = s.firstpos1;
                    }
                    var csspos2;
                    switch (s.dir2) {
                      case "down":
                        csspos2 = "top";
                        break;

                      case "up":
                        csspos2 = "bottom";
                        break;

                      case "left":
                        csspos2 = "right";
                        break;

                      case "right":
                        csspos2 = "left";
                    }
                    curpos2 = parseInt(pnotify.css(csspos2));
                    if (isNaN(curpos2)) curpos2 = 0;
                    if ("undefined" == typeof s.firstpos2 && !hidden) {
                        s.firstpos2 = curpos2;
                        s.nextpos2 = s.firstpos2;
                    }
                    if ("down" == s.dir1 && s.nextpos1 + pnotify.height() > jwindow.height() || "up" == s.dir1 && s.nextpos1 + pnotify.height() > jwindow.height() || "left" == s.dir1 && s.nextpos1 + pnotify.width() > jwindow.width() || "right" == s.dir1 && s.nextpos1 + pnotify.width() > jwindow.width()) {
                        s.nextpos1 = s.firstpos1;
                        s.nextpos2 += s.addpos2 + ("undefined" == typeof s.spacing2 ? 25 : s.spacing2);
                        s.addpos2 = 0;
                    }
                    if (s.animation && s.nextpos2 < curpos2) switch (s.dir2) {
                      case "down":
                        animate.top = s.nextpos2 + "px";
                        break;

                      case "up":
                        animate.bottom = s.nextpos2 + "px";
                        break;

                      case "left":
                        animate.right = s.nextpos2 + "px";
                        break;

                      case "right":
                        animate.left = s.nextpos2 + "px";
                    } else if (s.nextpos2) pnotify.css(csspos2, s.nextpos2 + "px");
                    switch (s.dir2) {
                      case "down":
                      case "up":
                        if (pnotify.outerHeight(true) > s.addpos2) s.addpos2 = pnotify.height();
                        break;

                      case "left":
                      case "right":
                        if (pnotify.outerWidth(true) > s.addpos2) s.addpos2 = pnotify.width();
                    }
                    if (s.nextpos1) if (s.animation && (curpos1 > s.nextpos1 || animate.top || animate.bottom || animate.right || animate.left)) switch (s.dir1) {
                      case "down":
                        animate.top = s.nextpos1 + "px";
                        break;

                      case "up":
                        animate.bottom = s.nextpos1 + "px";
                        break;

                      case "left":
                        animate.right = s.nextpos1 + "px";
                        break;

                      case "right":
                        animate.left = s.nextpos1 + "px";
                    } else pnotify.css(csspos1, s.nextpos1 + "px");
                    if (animate.top || animate.bottom || animate.right || animate.left) pnotify.animate(animate, {
                        "duration": this.opts.position_animate_speed,
                        "queue": false
                    });
                    switch (s.dir1) {
                      case "down":
                      case "up":
                        s.nextpos1 += pnotify.height() + ("undefined" == typeof s.spacing1 ? 25 : s.spacing1);
                        break;

                      case "left":
                      case "right":
                        s.nextpos1 += pnotify.width() + ("undefined" == typeof s.spacing1 ? 25 : s.spacing1);
                    }
                }
            };
            pnotify.pnotify_queue_position = function(milliseconds) {
                if (timer) clearTimeout(timer);
                if (!milliseconds) milliseconds = 10;
                timer = setTimeout($.pnotify_position_all, milliseconds);
            };
            pnotify.pnotify_display = function() {
                notices_data = jwindow.data("pnotify");
                if (notices_data && notices_data.length > opts.maxonscreen) $.each(notices_data.slice(0, notices_data.length - opts.maxonscreen), function() {
                    if (this.pnotify_remove) this.pnotify_remove();
                });
                if (!pnotify.parent().length) pnotify.appendTo(body);
                if (opts.before_open) if (false === opts.before_open(pnotify)) return;
                if ("top" != opts.stack.push) pnotify.pnotify_position(true);
                if ("fade" == opts.animation || "fade" == opts.animation.effect_in) pnotify.show().fadeTo(0, 0).hide(); else if (1 != opts.opacity) pnotify.show().fadeTo(0, opts.opacity).hide();
                pnotify.animate_in(function() {
                    if (opts.after_open) opts.after_open(pnotify);
                    pnotify.pnotify_queue_position();
                    if (opts.hide) pnotify.pnotify_queue_remove();
                });
            };
            pnotify.pnotify_remove = function() {
                if (pnotify.timer) {
                    window.clearTimeout(pnotify.timer);
                    pnotify.timer = null;
                }
                if (opts.before_close) if (false === opts.before_close(pnotify)) return;
                pnotify.animate_out(function() {
                    if (opts.after_close) if (false === opts.after_close(pnotify)) return;
                    pnotify.pnotify_queue_position();
                    if (opts.remove) pnotify.detach();
                });
            };
            pnotify.animate_in = function(callback) {
                animating = "in";
                var animation;
                if ("undefined" != typeof opts.animation.effect_in) animation = opts.animation.effect_in; else animation = opts.animation;
                if ("none" == animation) {
                    pnotify.show();
                    callback();
                } else if ("show" == animation) pnotify.show(opts.animate_speed, callback); else if ("fade" == animation) pnotify.show().fadeTo(opts.animate_speed, opts.opacity, callback); else if ("slide" == animation) pnotify.slideDown(opts.animate_speed, callback); else if ("function" == typeof animation) animation("in", callback, pnotify); else pnotify.show(animation, "object" == typeof opts.animation.options_in ? opts.animation.options_in : {}, opts.animate_speed, callback);
            };
            pnotify.animate_out = function(callback) {
                animating = "out";
                var animation;
                if ("undefined" != typeof opts.animation.effect_out) animation = opts.animation.effect_out; else animation = opts.animation;
                if ("none" == animation) {
                    pnotify.hide();
                    callback();
                } else if ("show" == animation) pnotify.hide(opts.animate_speed, callback); else if ("fade" == animation) pnotify.fadeOut(opts.animate_speed, callback); else if ("slide" == animation) pnotify.slideUp(opts.animate_speed, callback); else if ("function" == typeof animation) animation("out", callback, pnotify); else pnotify.hide(animation, "object" == typeof opts.animation.options_out ? opts.animation.options_out : {}, opts.animate_speed, callback);
            };
            pnotify.pnotify_cancel_remove = function() {
                if (pnotify.timer) window.clearTimeout(pnotify.timer);
            };
            pnotify.pnotify_queue_remove = function() {
                pnotify.pnotify_cancel_remove();
                pnotify.timer = window.setTimeout(function() {
                    pnotify.pnotify_remove();
                }, isNaN(opts.delay) ? 0 : opts.delay);
            };
            pnotify.closer = $("<div />", {
                "class": "ui-pnotify-closer",
                "css": {
                    "cursor": "pointer",
                    "visibility": opts.closer_hover ? "hidden" : "visible"
                },
                "click": function() {
                    pnotify.pnotify_remove();
                    pnotify.sticker.css("visibility", "hidden");
                    pnotify.closer.css("visibility", "hidden");
                }
            }).append($("<span />", {
                "class": styles.closer,
                "title": opts.labels.close
            })).appendTo(pnotify.container);
            if (!opts.closer || opts.nonblock) pnotify.closer.css("display", "none");
            pnotify.sticker = $("<div />", {
                "class": "ui-pnotify-sticker",
                "css": {
                    "cursor": "pointer",
                    "visibility": opts.sticker_hover ? "hidden" : "visible"
                },
                "click": function() {
                    opts.hide = !opts.hide;
                    if (opts.hide) pnotify.pnotify_queue_remove(); else pnotify.pnotify_cancel_remove();
                    $(this).trigger("pnotify_icon");
                }
            }).bind("pnotify_icon", function() {
                $(this).children().removeClass(styles.pin_up + " " + styles.pin_down).addClass(opts.hide ? styles.pin_up : styles.pin_down);
            }).append($("<span />", {
                "class": styles.pin_up,
                "title": opts.labels.stick
            })).appendTo(pnotify.container);
            if (!opts.sticker || opts.nonblock) pnotify.sticker.css("display", "none");
            if (false !== opts.icon) $("<div />", {
                "class": "ui-pnotify-icon"
            }).append($("<span />", {
                "class": true === opts.icon ? "error" == opts.type ? styles.error_icon : "info" == opts.type ? styles.info_icon : "success" == opts.type ? styles.success_icon : styles.notice_icon : opts.icon
            })).prependTo(pnotify.container);
            pnotify.title_container = $("<h4 />", {
                "class": "ui-pnotify-title"
            }).appendTo(pnotify.container);
            if (false === opts.title) pnotify.title_container.hide(); else if (opts.title_escape) pnotify.title_container.text(opts.title); else pnotify.title_container.html(opts.title);
            pnotify.text_container = $("<div />", {
                "class": "ui-pnotify-text"
            }).appendTo(pnotify.container);
            if (false === opts.text) pnotify.text_container.hide(); else if (opts.text_escape) pnotify.text_container.text(opts.text); else pnotify.text_container.html(opts.insert_brs ? String(opts.text).replace(/\n/g, "<br />") : opts.text);
            if ("string" == typeof opts.width) pnotify.css("width", opts.width);
            if ("string" == typeof opts.min_height) pnotify.container.css("min-height", opts.min_height);
            pnotify.pnotify_history = opts.history;
            pnotify.pnotify_hide = opts.hide;
            var notices_data = jwindow.data("pnotify");
            if (null == notices_data || "object" != typeof notices_data) notices_data = [];
            if ("top" == opts.stack.push) notices_data = $.merge([ pnotify ], notices_data); else notices_data = $.merge(notices_data, [ pnotify ]);
            jwindow.data("pnotify", notices_data);
            if ("top" == opts.stack.push) pnotify.pnotify_queue_position(1);
            if (opts.after_init) opts.after_init(pnotify);
            if (opts.history) {
                var history_menu = jwindow.data("pnotify_history");
                if ("undefined" == typeof history_menu) {
                    history_menu = $("<div />", {
                        "class": "ui-pnotify-history-container " + styles.hi_menu,
                        "mouseleave": function() {
                            history_menu.animate({
                                "top": "-" + history_handle_top + "px"
                            }, {
                                "duration": 100,
                                "queue": false
                            });
                        }
                    }).append($("<div />", {
                        "class": "ui-pnotify-history-header",
                        "text": opts.labels.redisplay
                    })).append($("<button />", {
                        "class": "ui-pnotify-history-all " + styles.hi_btn,
                        "text": opts.labels.all,
                        "mouseenter": function() {
                            $(this).addClass(styles.hi_btnhov);
                        },
                        "mouseleave": function() {
                            $(this).removeClass(styles.hi_btnhov);
                        },
                        "click": function() {
                            $.each(notices_data, function() {
                                if (this.pnotify_history) if (this.is(":visible")) {
                                    if (this.pnotify_hide) this.pnotify_queue_remove();
                                } else if (this.pnotify_display) this.pnotify_display();
                            });
                            return false;
                        }
                    })).append($("<button />", {
                        "class": "ui-pnotify-history-last " + styles.hi_btn,
                        "text": opts.labels.last,
                        "mouseenter": function() {
                            $(this).addClass(styles.hi_btnhov);
                        },
                        "mouseleave": function() {
                            $(this).removeClass(styles.hi_btnhov);
                        },
                        "click": function() {
                            var i = -1;
                            var notice;
                            do {
                                if (i == -1) notice = notices_data.slice(i); else notice = notices_data.slice(i, i + 1);
                                if (!notice[0]) break;
                                i--;
                            } while (!notice[0].pnotify_history || notice[0].is(":visible"));
                            if (!notice[0]) return false;
                            if (notice[0].pnotify_display) notice[0].pnotify_display();
                            return false;
                        }
                    })).appendTo(body);
                    var handle = $("<span />", {
                        "class": "ui-pnotify-history-pulldown " + styles.hi_hnd,
                        "mouseenter": function() {
                            history_menu.animate({
                                "top": "0"
                            }, {
                                "duration": 100,
                                "queue": false
                            });
                        }
                    }).appendTo(history_menu);
                    history_handle_top = handle.offset().top + 2;
                    history_menu.css({
                        "top": "-" + history_handle_top + "px"
                    });
                    jwindow.data("pnotify_history", history_menu);
                }
            }
            opts.stack.animation = false;
            if (opts.auto_display) pnotify.pnotify_display();
            return pnotify;
        }
    });
    var re_on = /^on/, re_mouse_events = /^(dbl)?click$|^mouse(move|down|up|over|out|enter|leave)$|^contextmenu$/, re_ui_events = /^(focus|blur|select|change|reset)$|^key(press|down|up)$/, re_html_events = /^(scroll|resize|(un)?load|abort|error)$/;
    var dom_event = function(e, orig_e) {
        var event_object;
        e = e.toLowerCase();
        if (document.createEvent && this.dispatchEvent) {
            e = e.replace(re_on, "");
            if (e.match(re_mouse_events)) {
                $(this).offset();
                event_object = document.createEvent("MouseEvents");
                event_object.initMouseEvent(e, orig_e.bubbles, orig_e.cancelable, orig_e.view, orig_e.detail, orig_e.screenX, orig_e.screenY, orig_e.clientX, orig_e.clientY, orig_e.ctrlKey, orig_e.altKey, orig_e.shiftKey, orig_e.metaKey, orig_e.button, orig_e.relatedTarget);
            } else if (e.match(re_ui_events)) {
                event_object = document.createEvent("UIEvents");
                event_object.initUIEvent(e, orig_e.bubbles, orig_e.cancelable, orig_e.view, orig_e.detail);
            } else if (e.match(re_html_events)) {
                event_object = document.createEvent("HTMLEvents");
                event_object.initEvent(e, orig_e.bubbles, orig_e.cancelable);
            }
            if (!event_object) return;
            this.dispatchEvent(event_object);
        } else {
            if (!e.match(re_on)) e = "on" + e;
            event_object = document.createEventObject(orig_e);
            this.fireEvent(e, event_object);
        }
    };
    $.pnotify.defaults = {
        "title": false,
        "title_escape": false,
        "text": false,
        "text_escape": false,
        "styling": "bootstrap",
        "addclass": "",
        "cornerclass": "",
        "nonblock": false,
        "nonblock_opacity": .2,
        "history": true,
        "maxonscreen": 1/0,
        "auto_display": true,
        "width": "300px",
        "min_height": "16px",
        "type": "notice",
        "icon": true,
        "animation": "fade",
        "animate_speed": "slow",
        "position_animate_speed": 500,
        "opacity": 1,
        "shadow": true,
        "closer": true,
        "closer_hover": true,
        "sticker": true,
        "sticker_hover": true,
        "hide": true,
        "delay": 8e3,
        "mouse_reset": true,
        "remove": true,
        "insert_brs": true,
        "stack": {
            "dir1": "down",
            "dir2": "left",
            "push": "bottom",
            "spacing1": 25,
            "spacing2": 25
        },
        "labels": {
            "redisplay": "Redisplay",
            "all": "All",
            "last": "Last",
            "close": "Close",
            "stick": "Stick"
        }
    };
}(jQuery);

!function($) {
    $.timeago = function(timestamp) {
        if (timestamp instanceof Date) return inWords(timestamp); else if ("string" === typeof timestamp) return inWords($.timeago.parse(timestamp)); else if ("number" === typeof timestamp) return inWords(new Date(timestamp)); else return inWords($.timeago.datetime(timestamp));
    };
    var $t = $.timeago;
    $.extend($.timeago, {
        "settings": {
            "refreshMillis": 6e4,
            "allowFuture": false,
            "strings": {
                "prefixAgo": null,
                "prefixFromNow": null,
                "suffixAgo": "ago",
                "suffixFromNow": "from now",
                "seconds": "less than a minute",
                "minute": "about a minute",
                "minutes": "%d minutes",
                "hour": "about an hour",
                "hours": "about %d hours",
                "day": "a day",
                "days": "%d days",
                "month": "about a month",
                "months": "%d months",
                "year": "about a year",
                "years": "%d years",
                "wordSeparator": " ",
                "numbers": []
            }
        },
        "inWords": function(distanceMillis) {
            var $l = this.settings.strings;
            var prefix = $l.prefixAgo;
            var suffix = $l.suffixAgo;
            if (this.settings.allowFuture) if (distanceMillis < 0) {
                prefix = $l.prefixFromNow;
                suffix = $l.suffixFromNow;
            }
            var seconds = Math.abs(distanceMillis) / 1e3;
            var minutes = seconds / 60;
            var hours = minutes / 60;
            var days = hours / 24;
            var years = days / 365;
            function substitute(stringOrFunction, number) {
                var string = $.isFunction(stringOrFunction) ? stringOrFunction(number, distanceMillis) : stringOrFunction;
                var value = $l.numbers && $l.numbers[number] || number;
                return string.replace(/%d/i, value);
            }
            var words = seconds < 45 && substitute($l.seconds, Math.round(seconds)) || seconds < 90 && substitute($l.minute, 1) || minutes < 45 && substitute($l.minutes, Math.round(minutes)) || minutes < 90 && substitute($l.hour, 1) || hours < 24 && substitute($l.hours, Math.round(hours)) || hours < 42 && substitute($l.day, 1) || days < 30 && substitute($l.days, Math.round(days)) || days < 45 && substitute($l.month, 1) || days < 365 && substitute($l.months, Math.round(days / 30)) || years < 1.5 && substitute($l.year, 1) || substitute($l.years, Math.round(years));
            var separator = void 0 === $l.wordSeparator ? " " : $l.wordSeparator;
            return $.trim([ prefix, words, suffix ].join(separator));
        },
        "parse": function(iso8601) {
            var s = $.trim(iso8601);
            s = s.replace(/\.\d+/, "");
            s = s.replace(/-/, "/").replace(/-/, "/");
            s = s.replace(/T/, " ").replace(/Z/, " UTC");
            s = s.replace(/([\+\-]\d\d)\:?(\d\d)/, " $1$2");
            return new Date(s);
        },
        "datetime": function(elem) {
            var iso8601 = $t.isTime(elem) ? $(elem).attr("datetime") : $(elem).attr("title");
            return $t.parse(iso8601);
        },
        "isTime": function(elem) {
            return "time" === $(elem).get(0).tagName.toLowerCase();
        }
    });
    $.fn.timeago = function() {
        var self = this;
        self.each(refresh);
        var $s = $t.settings;
        if ($s.refreshMillis > 0) setInterval(function() {
            self.each(refresh);
        }, $s.refreshMillis);
        return self;
    };
    function refresh() {
        var data = prepareData(this);
        if (!isNaN(data.datetime)) $(this).text(inWords(data.datetime));
        return this;
    }
    function prepareData(element) {
        element = $(element);
        if (!element.data("timeago")) {
            element.data("timeago", {
                "datetime": $t.datetime(element)
            });
            var text = $.trim(element.text());
            if (text.length > 0 && !($t.isTime(element) && element.attr("title"))) element.attr("title", text);
        }
        return element.data("timeago");
    }
    function inWords(date) {
        return $t.inWords(distance(date));
    }
    function distance(date) {
        return new Date().getTime() - date.getTime();
    }
    document.createElement("abbr");
    document.createElement("time");
}(jQuery);

var Kicksend = {
    "mailcheck": {
        "threshold": 3,
        "defaultDomains": [ "yahoo.com", "google.com", "hotmail.com", "gmail.com", "me.com", "aol.com", "mac.com", "live.com", "comcast.net", "googlemail.com", "msn.com", "hotmail.co.uk", "yahoo.co.uk", "facebook.com", "verizon.net", "sbcglobal.net", "att.net", "gmx.com", "mail.com" ],
        "defaultTopLevelDomains": [ "co.uk", "com", "net", "org", "info", "edu", "gov", "mil" ],
        "run": function(opts) {
            opts.domains = opts.domains || Kicksend.mailcheck.defaultDomains;
            opts.topLevelDomains = opts.topLevelDomains || Kicksend.mailcheck.defaultTopLevelDomains;
            opts.distanceFunction = opts.distanceFunction || Kicksend.sift3Distance;
            var result = Kicksend.mailcheck.suggest(encodeURI(opts.email), opts.domains, opts.topLevelDomains, opts.distanceFunction);
            if (result) {
                if (opts.suggested) opts.suggested(result);
            } else if (opts.empty) opts.empty();
        },
        "suggest": function(email, domains, topLevelDomains, distanceFunction) {
            email = email.toLowerCase();
            var emailParts = this.splitEmail(email);
            var closestDomain = this.findClosestDomain(emailParts.domain, domains, distanceFunction);
            if (closestDomain) {
                if (closestDomain != emailParts.domain) return {
                    "address": emailParts.address,
                    "domain": closestDomain,
                    "full": emailParts.address + "@" + closestDomain
                };
            } else {
                var closestTopLevelDomain = this.findClosestDomain(emailParts.topLevelDomain, topLevelDomains);
                if (emailParts.domain && closestTopLevelDomain && closestTopLevelDomain != emailParts.topLevelDomain) {
                    var domain = emailParts.domain;
                    closestDomain = domain.substring(0, domain.lastIndexOf(emailParts.topLevelDomain)) + closestTopLevelDomain;
                    return {
                        "address": emailParts.address,
                        "domain": closestDomain,
                        "full": emailParts.address + "@" + closestDomain
                    };
                }
            }
            return false;
        },
        "findClosestDomain": function(domain, domains, distanceFunction) {
            var dist;
            var minDist = 99;
            var closestDomain = null;
            if (!domain || !domains) return false;
            if (!distanceFunction) distanceFunction = this.sift3Distance;
            for (var i = 0; i < domains.length; i++) {
                if (domain === domains[i]) return domain;
                dist = distanceFunction(domain, domains[i]);
                if (dist < minDist) {
                    minDist = dist;
                    closestDomain = domains[i];
                }
            }
            if (minDist <= this.threshold && null !== closestDomain) return closestDomain; else return false;
        },
        "sift3Distance": function(s1, s2) {
            if (null == s1 || 0 === s1.length) if (null == s2 || 0 === s2.length) return 0; else return s2.length;
            if (null == s2 || 0 === s2.length) return s1.length;
            var c = 0;
            var offset1 = 0;
            var offset2 = 0;
            var lcs = 0;
            var maxOffset = 5;
            while (c + offset1 < s1.length && c + offset2 < s2.length) {
                if (s1.charAt(c + offset1) == s2.charAt(c + offset2)) lcs++; else {
                    offset1 = 0;
                    offset2 = 0;
                    for (var i = 0; i < maxOffset; i++) {
                        if (c + i < s1.length && s1.charAt(c + i) == s2.charAt(c)) {
                            offset1 = i;
                            break;
                        }
                        if (c + i < s2.length && s1.charAt(c) == s2.charAt(c + i)) {
                            offset2 = i;
                            break;
                        }
                    }
                }
                c++;
            }
            return (s1.length + s2.length) / 2 - lcs;
        },
        "splitEmail": function(email) {
            var parts = email.split("@");
            if (parts.length < 2) return false;
            for (var i = 0; i < parts.length; i++) if ("" === parts[i]) return false;
            var domain = parts.pop();
            var domainParts = domain.split(".");
            var tld = "";
            if (0 == domainParts.length) return false; else if (1 == domainParts.length) tld = domainParts[0]; else {
                for (var i = 1; i < domainParts.length; i++) tld += domainParts[i] + ".";
                if (domainParts.length >= 2) tld = tld.substring(0, tld.length - 1);
            }
            return {
                "topLevelDomain": tld,
                "domain": domain,
                "address": parts.join("@")
            };
        }
    }
};

if (window.jQuery) !function($) {
    $.fn.mailcheck = function(opts) {
        var self = this;
        if (opts.suggested) {
            var oldSuggested = opts.suggested;
            opts.suggested = function(result) {
                oldSuggested(self, result);
            };
        }
        if (opts.empty) {
            var oldEmpty = opts.empty;
            opts.empty = function() {
                oldEmpty.call(null, self);
            };
        }
        opts.email = this.val();
        Kicksend.mailcheck.run(opts);
    };
}(jQuery);

var hexcase = 0;

var b64pad = "";

var chrsz = 8;

function hex_md5(s) {
    return binl2hex(core_md5(str2binl(s), s.length * chrsz));
}

function b64_md5(s) {
    return binl2b64(core_md5(str2binl(s), s.length * chrsz));
}

function str_md5(s) {
    return binl2str(core_md5(str2binl(s), s.length * chrsz));
}

function hex_hmac_md5(key, data) {
    return binl2hex(core_hmac_md5(key, data));
}

function b64_hmac_md5(key, data) {
    return binl2b64(core_hmac_md5(key, data));
}

function str_hmac_md5(key, data) {
    return binl2str(core_hmac_md5(key, data));
}

function md5_vm_test() {
    return "900150983cd24fb0d6963f7d28e17f72" == hex_md5("abc");
}

function core_md5(x, len) {
    x[len >> 5] |= 128 << len % 32;
    x[(len + 64 >>> 9 << 4) + 14] = len;
    var a = 1732584193;
    var b = -271733879;
    var c = -1732584194;
    var d = 271733878;
    for (var i = 0; i < x.length; i += 16) {
        var olda = a;
        var oldb = b;
        var oldc = c;
        var oldd = d;
        a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936);
        d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);
        c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);
        b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);
        a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);
        d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);
        c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);
        b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);
        a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);
        d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);
        c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);
        b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);
        a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);
        d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);
        c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);
        b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);
        a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);
        d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);
        c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);
        b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302);
        a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);
        d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);
        c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);
        b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);
        a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);
        d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);
        c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);
        b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);
        a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);
        d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);
        c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);
        b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);
        a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);
        d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);
        c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);
        b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);
        a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);
        d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);
        c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);
        b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);
        a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);
        d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222);
        c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);
        b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);
        a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);
        d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);
        c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);
        b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);
        a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844);
        d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);
        c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);
        b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);
        a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);
        d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);
        c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);
        b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);
        a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);
        d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);
        c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);
        b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);
        a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);
        d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);
        c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);
        b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);
        a = safe_add(a, olda);
        b = safe_add(b, oldb);
        c = safe_add(c, oldc);
        d = safe_add(d, oldd);
    }
    return Array(a, b, c, d);
}

function md5_cmn(q, a, b, x, s, t) {
    return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);
}

function md5_ff(a, b, c, d, x, s, t) {
    return md5_cmn(b & c | ~b & d, a, b, x, s, t);
}

function md5_gg(a, b, c, d, x, s, t) {
    return md5_cmn(b & d | c & ~d, a, b, x, s, t);
}

function md5_hh(a, b, c, d, x, s, t) {
    return md5_cmn(b ^ c ^ d, a, b, x, s, t);
}

function md5_ii(a, b, c, d, x, s, t) {
    return md5_cmn(c ^ (b | ~d), a, b, x, s, t);
}

function core_hmac_md5(key, data) {
    var bkey = str2binl(key);
    if (bkey.length > 16) bkey = core_md5(bkey, key.length * chrsz);
    var ipad = Array(16), opad = Array(16);
    for (var i = 0; i < 16; i++) {
        ipad[i] = 909522486 ^ bkey[i];
        opad[i] = 1549556828 ^ bkey[i];
    }
    var hash = core_md5(ipad.concat(str2binl(data)), 512 + data.length * chrsz);
    return core_md5(opad.concat(hash), 512 + 128);
}

function safe_add(x, y) {
    var lsw = (65535 & x) + (65535 & y);
    var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
    return msw << 16 | 65535 & lsw;
}

function bit_rol(num, cnt) {
    return num << cnt | num >>> 32 - cnt;
}

function str2binl(str) {
    var bin = Array();
    var mask = (1 << chrsz) - 1;
    for (var i = 0; i < str.length * chrsz; i += chrsz) bin[i >> 5] |= (str.charCodeAt(i / chrsz) & mask) << i % 32;
    return bin;
}

function binl2str(bin) {
    var str = "";
    var mask = (1 << chrsz) - 1;
    for (var i = 0; i < 32 * bin.length; i += chrsz) str += String.fromCharCode(bin[i >> 5] >>> i % 32 & mask);
    return str;
}

function binl2hex(binarray) {
    var hex_tab = hexcase ? "0123456789ABCDEF" : "0123456789abcdef";
    var str = "";
    for (var i = 0; i < 4 * binarray.length; i++) str += hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 + 4 & 15) + hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 & 15);
    return str;
}

function binl2b64(binarray) {
    var tab = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    var str = "";
    for (var i = 0; i < 4 * binarray.length; i += 3) {
        var triplet = (binarray[i >> 2] >> 8 * (i % 4) & 255) << 16 | (binarray[i + 1 >> 2] >> 8 * ((i + 1) % 4) & 255) << 8 | binarray[i + 2 >> 2] >> 8 * ((i + 2) % 4) & 255;
        for (var j = 0; j < 4; j++) if (8 * i + 6 * j > 32 * binarray.length) str += b64pad; else str += tab.charAt(triplet >> 6 * (3 - j) & 63);
    }
    return str;
}

!function(e) {
    if ("object" == typeof exports) module.exports = e(); else if ("function" == typeof define && define.amd) define(e); else {
        var f;
        "undefined" != typeof window ? f = window : "undefined" != typeof global ? f = global : "undefined" != typeof self && (f = self), 
        f.React = e();
    }
}(function() {
    var define, module, exports;
    return function e(t, n, r) {
        function s(o, u) {
            if (!n[o]) {
                if (!t[o]) {
                    var a = "function" == typeof require && require;
                    if (!u && a) return a(o, !0);
                    if (i) return i(o, !0);
                    throw new Error("Cannot find module '" + o + "'");
                }
                var f = n[o] = {
                    "exports": {}
                };
                t[o][0].call(f.exports, function(e) {
                    var n = t[o][1][e];
                    return s(n ? n : e);
                }, f, f.exports, e, t, n, r);
            }
            return n[o].exports;
        }
        var i = "function" == typeof require && require;
        for (var o = 0; o < r.length; o++) s(r[o]);
        return s;
    }({
        "1": [ function(_dereq_, module, exports) {
            "use strict";
            var focusNode = _dereq_("./focusNode");
            var AutoFocusMixin = {
                "componentDidMount": function() {
                    if (this.props.autoFocus) focusNode(this.getDOMNode());
                }
            };
            module.exports = AutoFocusMixin;
        }, {
            "./focusNode": 113
        } ],
        "2": [ function(_dereq_, module, exports) {
            var invariant = _dereq_("./invariant");
            var CSSCore = {
                "addClass": function(element, className) {
                    "production" !== "development" ? invariant(!/\s/.test(className), 'CSSCore.addClass takes only a single class name. "%s" contains ' + "multiple classes.", className) : invariant(!/\s/.test(className));
                    if (className) if (element.classList) element.classList.add(className); else if (!CSSCore.hasClass(element, className)) element.className = element.className + " " + className;
                    return element;
                },
                "removeClass": function(element, className) {
                    "production" !== "development" ? invariant(!/\s/.test(className), 'CSSCore.removeClass takes only a single class name. "%s" contains ' + "multiple classes.", className) : invariant(!/\s/.test(className));
                    if (className) if (element.classList) element.classList.remove(className); else if (CSSCore.hasClass(element, className)) element.className = element.className.replace(new RegExp("(^|\\s)" + className + "(?:\\s|$)", "g"), "$1").replace(/\s+/g, " ").replace(/^\s*|\s*$/g, "");
                    return element;
                },
                "conditionClass": function(element, className, bool) {
                    return (bool ? CSSCore.addClass : CSSCore.removeClass)(element, className);
                },
                "hasClass": function(element, className) {
                    "production" !== "development" ? invariant(!/\s/.test(className), "CSS.hasClass takes only a single class name.") : invariant(!/\s/.test(className));
                    if (element.classList) return !!className && element.classList.contains(className);
                    return (" " + element.className + " ").indexOf(" " + className + " ") > -1;
                }
            };
            module.exports = CSSCore;
        }, {
            "./invariant": 125
        } ],
        "3": [ function(_dereq_, module, exports) {
            "use strict";
            var isUnitlessNumber = {
                "columnCount": true,
                "fillOpacity": true,
                "flex": true,
                "flexGrow": true,
                "flexShrink": true,
                "fontWeight": true,
                "lineClamp": true,
                "lineHeight": true,
                "opacity": true,
                "order": true,
                "orphans": true,
                "widows": true,
                "zIndex": true,
                "zoom": true
            };
            function prefixKey(prefix, key) {
                return prefix + key.charAt(0).toUpperCase() + key.substring(1);
            }
            var prefixes = [ "Webkit", "ms", "Moz", "O" ];
            Object.keys(isUnitlessNumber).forEach(function(prop) {
                prefixes.forEach(function(prefix) {
                    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
                });
            });
            var shorthandPropertyExpansions = {
                "background": {
                    "backgroundImage": true,
                    "backgroundPosition": true,
                    "backgroundRepeat": true,
                    "backgroundColor": true
                },
                "border": {
                    "borderWidth": true,
                    "borderStyle": true,
                    "borderColor": true
                },
                "borderBottom": {
                    "borderBottomWidth": true,
                    "borderBottomStyle": true,
                    "borderBottomColor": true
                },
                "borderLeft": {
                    "borderLeftWidth": true,
                    "borderLeftStyle": true,
                    "borderLeftColor": true
                },
                "borderRight": {
                    "borderRightWidth": true,
                    "borderRightStyle": true,
                    "borderRightColor": true
                },
                "borderTop": {
                    "borderTopWidth": true,
                    "borderTopStyle": true,
                    "borderTopColor": true
                },
                "font": {
                    "fontStyle": true,
                    "fontVariant": true,
                    "fontWeight": true,
                    "fontSize": true,
                    "lineHeight": true,
                    "fontFamily": true
                }
            };
            var CSSProperty = {
                "isUnitlessNumber": isUnitlessNumber,
                "shorthandPropertyExpansions": shorthandPropertyExpansions
            };
            module.exports = CSSProperty;
        }, {} ],
        "4": [ function(_dereq_, module, exports) {
            "use strict";
            var CSSProperty = _dereq_("./CSSProperty");
            var dangerousStyleValue = _dereq_("./dangerousStyleValue");
            var escapeTextForBrowser = _dereq_("./escapeTextForBrowser");
            var hyphenate = _dereq_("./hyphenate");
            var memoizeStringOnly = _dereq_("./memoizeStringOnly");
            var processStyleName = memoizeStringOnly(function(styleName) {
                return escapeTextForBrowser(hyphenate(styleName));
            });
            var CSSPropertyOperations = {
                "createMarkupForStyles": function(styles) {
                    var serialized = "";
                    for (var styleName in styles) {
                        if (!styles.hasOwnProperty(styleName)) continue;
                        var styleValue = styles[styleName];
                        if (null != styleValue) {
                            serialized += processStyleName(styleName) + ":";
                            serialized += dangerousStyleValue(styleName, styleValue) + ";";
                        }
                    }
                    return serialized || null;
                },
                "setValueForStyles": function(node, styles) {
                    var style = node.style;
                    for (var styleName in styles) {
                        if (!styles.hasOwnProperty(styleName)) continue;
                        var styleValue = dangerousStyleValue(styleName, styles[styleName]);
                        if (styleValue) style[styleName] = styleValue; else {
                            var expansion = CSSProperty.shorthandPropertyExpansions[styleName];
                            if (expansion) for (var individualStyleName in expansion) style[individualStyleName] = ""; else style[styleName] = "";
                        }
                    }
                }
            };
            module.exports = CSSPropertyOperations;
        }, {
            "./CSSProperty": 3,
            "./dangerousStyleValue": 108,
            "./escapeTextForBrowser": 111,
            "./hyphenate": 123,
            "./memoizeStringOnly": 133
        } ],
        "5": [ function(_dereq_, module, exports) {
            "use strict";
            var EventConstants = _dereq_("./EventConstants");
            var EventPluginHub = _dereq_("./EventPluginHub");
            var EventPropagators = _dereq_("./EventPropagators");
            var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
            var ReactUpdates = _dereq_("./ReactUpdates");
            var SyntheticEvent = _dereq_("./SyntheticEvent");
            var isEventSupported = _dereq_("./isEventSupported");
            var isTextInputElement = _dereq_("./isTextInputElement");
            var keyOf = _dereq_("./keyOf");
            var topLevelTypes = EventConstants.topLevelTypes;
            var eventTypes = {
                "change": {
                    "phasedRegistrationNames": {
                        "bubbled": keyOf({
                            "onChange": null
                        }),
                        "captured": keyOf({
                            "onChangeCapture": null
                        })
                    },
                    "dependencies": [ topLevelTypes.topBlur, topLevelTypes.topChange, topLevelTypes.topClick, topLevelTypes.topFocus, topLevelTypes.topInput, topLevelTypes.topKeyDown, topLevelTypes.topKeyUp, topLevelTypes.topSelectionChange ]
                }
            };
            var activeElement = null;
            var activeElementID = null;
            var activeElementValue = null;
            var activeElementValueProp = null;
            function shouldUseChangeEvent(elem) {
                return "SELECT" === elem.nodeName || "INPUT" === elem.nodeName && "file" === elem.type;
            }
            var doesChangeEventBubble = false;
            if (ExecutionEnvironment.canUseDOM) doesChangeEventBubble = isEventSupported("change") && (!("documentMode" in document) || document.documentMode > 8);
            function manualDispatchChangeEvent(nativeEvent) {
                var event = SyntheticEvent.getPooled(eventTypes.change, activeElementID, nativeEvent);
                EventPropagators.accumulateTwoPhaseDispatches(event);
                ReactUpdates.batchedUpdates(runEventInBatch, event);
            }
            function runEventInBatch(event) {
                EventPluginHub.enqueueEvents(event);
                EventPluginHub.processEventQueue();
            }
            function startWatchingForChangeEventIE8(target, targetID) {
                activeElement = target;
                activeElementID = targetID;
                activeElement.attachEvent("onchange", manualDispatchChangeEvent);
            }
            function stopWatchingForChangeEventIE8() {
                if (!activeElement) return;
                activeElement.detachEvent("onchange", manualDispatchChangeEvent);
                activeElement = null;
                activeElementID = null;
            }
            function getTargetIDForChangeEvent(topLevelType, topLevelTarget, topLevelTargetID) {
                if (topLevelType === topLevelTypes.topChange) return topLevelTargetID;
            }
            function handleEventsForChangeEventIE8(topLevelType, topLevelTarget, topLevelTargetID) {
                if (topLevelType === topLevelTypes.topFocus) {
                    stopWatchingForChangeEventIE8();
                    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);
                } else if (topLevelType === topLevelTypes.topBlur) stopWatchingForChangeEventIE8();
            }
            var isInputEventSupported = false;
            if (ExecutionEnvironment.canUseDOM) isInputEventSupported = isEventSupported("input") && (!("documentMode" in document) || document.documentMode > 9);
            var newValueProp = {
                "get": function() {
                    return activeElementValueProp.get.call(this);
                },
                "set": function(val) {
                    activeElementValue = "" + val;
                    activeElementValueProp.set.call(this, val);
                }
            };
            function startWatchingForValueChange(target, targetID) {
                activeElement = target;
                activeElementID = targetID;
                activeElementValue = target.value;
                activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, "value");
                Object.defineProperty(activeElement, "value", newValueProp);
                activeElement.attachEvent("onpropertychange", handlePropertyChange);
            }
            function stopWatchingForValueChange() {
                if (!activeElement) return;
                delete activeElement.value;
                activeElement.detachEvent("onpropertychange", handlePropertyChange);
                activeElement = null;
                activeElementID = null;
                activeElementValue = null;
                activeElementValueProp = null;
            }
            function handlePropertyChange(nativeEvent) {
                if ("value" !== nativeEvent.propertyName) return;
                var value = nativeEvent.srcElement.value;
                if (value === activeElementValue) return;
                activeElementValue = value;
                manualDispatchChangeEvent(nativeEvent);
            }
            function getTargetIDForInputEvent(topLevelType, topLevelTarget, topLevelTargetID) {
                if (topLevelType === topLevelTypes.topInput) return topLevelTargetID;
            }
            function handleEventsForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {
                if (topLevelType === topLevelTypes.topFocus) {
                    stopWatchingForValueChange();
                    startWatchingForValueChange(topLevelTarget, topLevelTargetID);
                } else if (topLevelType === topLevelTypes.topBlur) stopWatchingForValueChange();
            }
            function getTargetIDForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {
                if (topLevelType === topLevelTypes.topSelectionChange || topLevelType === topLevelTypes.topKeyUp || topLevelType === topLevelTypes.topKeyDown) if (activeElement && activeElement.value !== activeElementValue) {
                    activeElementValue = activeElement.value;
                    return activeElementID;
                }
            }
            function shouldUseClickEvent(elem) {
                return "INPUT" === elem.nodeName && ("checkbox" === elem.type || "radio" === elem.type);
            }
            function getTargetIDForClickEvent(topLevelType, topLevelTarget, topLevelTargetID) {
                if (topLevelType === topLevelTypes.topClick) return topLevelTargetID;
            }
            var ChangeEventPlugin = {
                "eventTypes": eventTypes,
                "extractEvents": function(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent) {
                    var getTargetIDFunc, handleEventFunc;
                    if (shouldUseChangeEvent(topLevelTarget)) if (doesChangeEventBubble) getTargetIDFunc = getTargetIDForChangeEvent; else handleEventFunc = handleEventsForChangeEventIE8; else if (isTextInputElement(topLevelTarget)) if (isInputEventSupported) getTargetIDFunc = getTargetIDForInputEvent; else {
                        getTargetIDFunc = getTargetIDForInputEventIE;
                        handleEventFunc = handleEventsForInputEventIE;
                    } else if (shouldUseClickEvent(topLevelTarget)) getTargetIDFunc = getTargetIDForClickEvent;
                    if (getTargetIDFunc) {
                        var targetID = getTargetIDFunc(topLevelType, topLevelTarget, topLevelTargetID);
                        if (targetID) {
                            var event = SyntheticEvent.getPooled(eventTypes.change, targetID, nativeEvent);
                            EventPropagators.accumulateTwoPhaseDispatches(event);
                            return event;
                        }
                    }
                    if (handleEventFunc) handleEventFunc(topLevelType, topLevelTarget, topLevelTargetID);
                }
            };
            module.exports = ChangeEventPlugin;
        }, {
            "./EventConstants": 15,
            "./EventPluginHub": 17,
            "./EventPropagators": 20,
            "./ExecutionEnvironment": 21,
            "./ReactUpdates": 81,
            "./SyntheticEvent": 89,
            "./isEventSupported": 126,
            "./isTextInputElement": 128,
            "./keyOf": 132
        } ],
        "6": [ function(_dereq_, module, exports) {
            "use strict";
            var nextReactRootIndex = 0;
            var ClientReactRootIndex = {
                "createReactRootIndex": function() {
                    return nextReactRootIndex++;
                }
            };
            module.exports = ClientReactRootIndex;
        }, {} ],
        "7": [ function(_dereq_, module, exports) {
            "use strict";
            var EventConstants = _dereq_("./EventConstants");
            var EventPropagators = _dereq_("./EventPropagators");
            var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
            var ReactInputSelection = _dereq_("./ReactInputSelection");
            var SyntheticCompositionEvent = _dereq_("./SyntheticCompositionEvent");
            var getTextContentAccessor = _dereq_("./getTextContentAccessor");
            var keyOf = _dereq_("./keyOf");
            var END_KEYCODES = [ 9, 13, 27, 32 ];
            var START_KEYCODE = 229;
            var useCompositionEvent = ExecutionEnvironment.canUseDOM && "CompositionEvent" in window;
            var useFallbackData = !useCompositionEvent || "documentMode" in document && document.documentMode > 8;
            var topLevelTypes = EventConstants.topLevelTypes;
            var currentComposition = null;
            var eventTypes = {
                "compositionEnd": {
                    "phasedRegistrationNames": {
                        "bubbled": keyOf({
                            "onCompositionEnd": null
                        }),
                        "captured": keyOf({
                            "onCompositionEndCapture": null
                        })
                    },
                    "dependencies": [ topLevelTypes.topBlur, topLevelTypes.topCompositionEnd, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown ]
                },
                "compositionStart": {
                    "phasedRegistrationNames": {
                        "bubbled": keyOf({
                            "onCompositionStart": null
                        }),
                        "captured": keyOf({
                            "onCompositionStartCapture": null
                        })
                    },
                    "dependencies": [ topLevelTypes.topBlur, topLevelTypes.topCompositionStart, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown ]
                },
                "compositionUpdate": {
                    "phasedRegistrationNames": {
                        "bubbled": keyOf({
                            "onCompositionUpdate": null
                        }),
                        "captured": keyOf({
                            "onCompositionUpdateCapture": null
                        })
                    },
                    "dependencies": [ topLevelTypes.topBlur, topLevelTypes.topCompositionUpdate, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown ]
                }
            };
            function getCompositionEventType(topLevelType) {
                switch (topLevelType) {
                  case topLevelTypes.topCompositionStart:
                    return eventTypes.compositionStart;

                  case topLevelTypes.topCompositionEnd:
                    return eventTypes.compositionEnd;

                  case topLevelTypes.topCompositionUpdate:
                    return eventTypes.compositionUpdate;
                }
            }
            function isFallbackStart(topLevelType, nativeEvent) {
                return topLevelType === topLevelTypes.topKeyDown && nativeEvent.keyCode === START_KEYCODE;
            }
            function isFallbackEnd(topLevelType, nativeEvent) {
                switch (topLevelType) {
                  case topLevelTypes.topKeyUp:
                    return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;

                  case topLevelTypes.topKeyDown:
                    return nativeEvent.keyCode !== START_KEYCODE;

                  case topLevelTypes.topKeyPress:
                  case topLevelTypes.topMouseDown:
                  case topLevelTypes.topBlur:
                    return true;

                  default:
                    return false;
                }
            }
            function FallbackCompositionState(root) {
                this.root = root;
                this.startSelection = ReactInputSelection.getSelection(root);
                this.startValue = this.getText();
            }
            FallbackCompositionState.prototype.getText = function() {
                return this.root.value || this.root[getTextContentAccessor()];
            };
            FallbackCompositionState.prototype.getData = function() {
                var endValue = this.getText();
                var prefixLength = this.startSelection.start;
                var suffixLength = this.startValue.length - this.startSelection.end;
                return endValue.substr(prefixLength, endValue.length - suffixLength - prefixLength);
            };
            var CompositionEventPlugin = {
                "eventTypes": eventTypes,
                "extractEvents": function(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent) {
                    var eventType;
                    var data;
                    if (useCompositionEvent) eventType = getCompositionEventType(topLevelType); else if (!currentComposition) {
                        if (isFallbackStart(topLevelType, nativeEvent)) eventType = eventTypes.compositionStart;
                    } else if (isFallbackEnd(topLevelType, nativeEvent)) eventType = eventTypes.compositionEnd;
                    if (useFallbackData) if (!currentComposition && eventType === eventTypes.compositionStart) currentComposition = new FallbackCompositionState(topLevelTarget); else if (eventType === eventTypes.compositionEnd) if (currentComposition) {
                        data = currentComposition.getData();
                        currentComposition = null;
                    }
                    if (eventType) {
                        var event = SyntheticCompositionEvent.getPooled(eventType, topLevelTargetID, nativeEvent);
                        if (data) event.data = data;
                        EventPropagators.accumulateTwoPhaseDispatches(event);
                        return event;
                    }
                }
            };
            module.exports = CompositionEventPlugin;
        }, {
            "./EventConstants": 15,
            "./EventPropagators": 20,
            "./ExecutionEnvironment": 21,
            "./ReactInputSelection": 56,
            "./SyntheticCompositionEvent": 87,
            "./getTextContentAccessor": 121,
            "./keyOf": 132
        } ],
        "8": [ function(_dereq_, module, exports) {
            "use strict";
            var Danger = _dereq_("./Danger");
            var ReactMultiChildUpdateTypes = _dereq_("./ReactMultiChildUpdateTypes");
            var getTextContentAccessor = _dereq_("./getTextContentAccessor");
            var textContentAccessor = getTextContentAccessor();
            function insertChildAt(parentNode, childNode, index) {
                var childNodes = parentNode.childNodes;
                if (childNodes[index] === childNode) return;
                if (childNode.parentNode === parentNode) parentNode.removeChild(childNode);
                if (index >= childNodes.length) parentNode.appendChild(childNode); else parentNode.insertBefore(childNode, childNodes[index]);
            }
            var updateTextContent;
            if ("textContent" === textContentAccessor) updateTextContent = function(node, text) {
                node.textContent = text;
            }; else updateTextContent = function(node, text) {
                while (node.firstChild) node.removeChild(node.firstChild);
                if (text) {
                    var doc = node.ownerDocument || document;
                    node.appendChild(doc.createTextNode(text));
                }
            };
            var DOMChildrenOperations = {
                "dangerouslyReplaceNodeWithMarkup": Danger.dangerouslyReplaceNodeWithMarkup,
                "updateTextContent": updateTextContent,
                "processUpdates": function(updates, markupList) {
                    var update;
                    var initialChildren = null;
                    var updatedChildren = null;
                    for (var i = 0; update = updates[i]; i++) if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING || update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {
                        var updatedIndex = update.fromIndex;
                        var updatedChild = update.parentNode.childNodes[updatedIndex];
                        var parentID = update.parentID;
                        initialChildren = initialChildren || {};
                        initialChildren[parentID] = initialChildren[parentID] || [];
                        initialChildren[parentID][updatedIndex] = updatedChild;
                        updatedChildren = updatedChildren || [];
                        updatedChildren.push(updatedChild);
                    }
                    var renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);
                    if (updatedChildren) for (var j = 0; j < updatedChildren.length; j++) updatedChildren[j].parentNode.removeChild(updatedChildren[j]);
                    for (var k = 0; update = updates[k]; k++) switch (update.type) {
                      case ReactMultiChildUpdateTypes.INSERT_MARKUP:
                        insertChildAt(update.parentNode, renderedMarkup[update.markupIndex], update.toIndex);
                        break;

                      case ReactMultiChildUpdateTypes.MOVE_EXISTING:
                        insertChildAt(update.parentNode, initialChildren[update.parentID][update.fromIndex], update.toIndex);
                        break;

                      case ReactMultiChildUpdateTypes.TEXT_CONTENT:
                        updateTextContent(update.parentNode, update.textContent);
                        break;

                      case ReactMultiChildUpdateTypes.REMOVE_NODE:                    }
                }
            };
            module.exports = DOMChildrenOperations;
        }, {
            "./Danger": 11,
            "./ReactMultiChildUpdateTypes": 63,
            "./getTextContentAccessor": 121
        } ],
        "9": [ function(_dereq_, module, exports) {
            "use strict";
            var invariant = _dereq_("./invariant");
            var DOMPropertyInjection = {
                "MUST_USE_ATTRIBUTE": 1,
                "MUST_USE_PROPERTY": 2,
                "HAS_SIDE_EFFECTS": 4,
                "HAS_BOOLEAN_VALUE": 8,
                "HAS_POSITIVE_NUMERIC_VALUE": 16,
                "injectDOMPropertyConfig": function(domPropertyConfig) {
                    var Properties = domPropertyConfig.Properties || {};
                    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
                    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
                    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};
                    if (domPropertyConfig.isCustomAttribute) DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
                    for (var propName in Properties) {
                        "production" !== "development" ? invariant(!DOMProperty.isStandardName[propName], "injectDOMPropertyConfig(...): You're trying to inject DOM property " + "'%s' which has already been injected. You may be accidentally " + "injecting the same DOM property config twice, or you may be " + "injecting two configs that have conflicting property names.", propName) : invariant(!DOMProperty.isStandardName[propName]);
                        DOMProperty.isStandardName[propName] = true;
                        var lowerCased = propName.toLowerCase();
                        DOMProperty.getPossibleStandardName[lowerCased] = propName;
                        var attributeName = DOMAttributeNames[propName];
                        if (attributeName) DOMProperty.getPossibleStandardName[attributeName] = propName;
                        DOMProperty.getAttributeName[propName] = attributeName || lowerCased;
                        DOMProperty.getPropertyName[propName] = DOMPropertyNames[propName] || propName;
                        var mutationMethod = DOMMutationMethods[propName];
                        if (mutationMethod) DOMProperty.getMutationMethod[propName] = mutationMethod;
                        var propConfig = Properties[propName];
                        DOMProperty.mustUseAttribute[propName] = propConfig & DOMPropertyInjection.MUST_USE_ATTRIBUTE;
                        DOMProperty.mustUseProperty[propName] = propConfig & DOMPropertyInjection.MUST_USE_PROPERTY;
                        DOMProperty.hasSideEffects[propName] = propConfig & DOMPropertyInjection.HAS_SIDE_EFFECTS;
                        DOMProperty.hasBooleanValue[propName] = propConfig & DOMPropertyInjection.HAS_BOOLEAN_VALUE;
                        DOMProperty.hasPositiveNumericValue[propName] = propConfig & DOMPropertyInjection.HAS_POSITIVE_NUMERIC_VALUE;
                        "production" !== "development" ? invariant(!DOMProperty.mustUseAttribute[propName] || !DOMProperty.mustUseProperty[propName], "DOMProperty: Cannot require using both attribute and property: %s", propName) : invariant(!DOMProperty.mustUseAttribute[propName] || !DOMProperty.mustUseProperty[propName]);
                        "production" !== "development" ? invariant(DOMProperty.mustUseProperty[propName] || !DOMProperty.hasSideEffects[propName], "DOMProperty: Properties that have side effects must use property: %s", propName) : invariant(DOMProperty.mustUseProperty[propName] || !DOMProperty.hasSideEffects[propName]);
                        "production" !== "development" ? invariant(!DOMProperty.hasBooleanValue[propName] || !DOMProperty.hasPositiveNumericValue[propName], "DOMProperty: Cannot have both boolean and positive numeric value: %s", propName) : invariant(!DOMProperty.hasBooleanValue[propName] || !DOMProperty.hasPositiveNumericValue[propName]);
                    }
                }
            };
            var defaultValueCache = {};
            var DOMProperty = {
                "ID_ATTRIBUTE_NAME": "data-reactid",
                "isStandardName": {},
                "getPossibleStandardName": {},
                "getAttributeName": {},
                "getPropertyName": {},
                "getMutationMethod": {},
                "mustUseAttribute": {},
                "mustUseProperty": {},
                "hasSideEffects": {},
                "hasBooleanValue": {},
                "hasPositiveNumericValue": {},
                "_isCustomAttributeFunctions": [],
                "isCustomAttribute": function(attributeName) {
                    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
                        var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
                        if (isCustomAttributeFn(attributeName)) return true;
                    }
                    return false;
                },
                "getDefaultValueForProperty": function(nodeName, prop) {
                    var nodeDefaults = defaultValueCache[nodeName];
                    var testElement;
                    if (!nodeDefaults) defaultValueCache[nodeName] = nodeDefaults = {};
                    if (!(prop in nodeDefaults)) {
                        testElement = document.createElement(nodeName);
                        nodeDefaults[prop] = testElement[prop];
                    }
                    return nodeDefaults[prop];
                },
                "injection": DOMPropertyInjection
            };
            module.exports = DOMProperty;
        }, {
            "./invariant": 125
        } ],
        "10": [ function(_dereq_, module, exports) {
            "use strict";
            var DOMProperty = _dereq_("./DOMProperty");
            var escapeTextForBrowser = _dereq_("./escapeTextForBrowser");
            var memoizeStringOnly = _dereq_("./memoizeStringOnly");
            var warning = _dereq_("./warning");
            function shouldIgnoreValue(name, value) {
                return null == value || DOMProperty.hasBooleanValue[name] && !value || DOMProperty.hasPositiveNumericValue[name] && (isNaN(value) || value < 1);
            }
            var processAttributeNameAndPrefix = memoizeStringOnly(function(name) {
                return escapeTextForBrowser(name) + '="';
            });
            if ("production" !== "development") {
                var reactProps = {
                    "children": true,
                    "dangerouslySetInnerHTML": true,
                    "key": true,
                    "ref": true
                };
                var warnedProperties = {};
                var warnUnknownProperty = function(name) {
                    if (reactProps[name] || warnedProperties[name]) return;
                    warnedProperties[name] = true;
                    var lowerCasedName = name.toLowerCase();
                    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName[lowerCasedName];
                    "production" !== "development" ? warning(null == standardName, "Unknown DOM property " + name + ". Did you mean " + standardName + "?") : null;
                };
            }
            var DOMPropertyOperations = {
                "createMarkupForID": function(id) {
                    return processAttributeNameAndPrefix(DOMProperty.ID_ATTRIBUTE_NAME) + escapeTextForBrowser(id) + '"';
                },
                "createMarkupForProperty": function(name, value) {
                    if (DOMProperty.isStandardName[name]) {
                        if (shouldIgnoreValue(name, value)) return "";
                        var attributeName = DOMProperty.getAttributeName[name];
                        if (DOMProperty.hasBooleanValue[name]) return escapeTextForBrowser(attributeName);
                        return processAttributeNameAndPrefix(attributeName) + escapeTextForBrowser(value) + '"';
                    } else if (DOMProperty.isCustomAttribute(name)) {
                        if (null == value) return "";
                        return processAttributeNameAndPrefix(name) + escapeTextForBrowser(value) + '"';
                    } else if ("production" !== "development") warnUnknownProperty(name);
                    return null;
                },
                "setValueForProperty": function(node, name, value) {
                    if (DOMProperty.isStandardName[name]) {
                        var mutationMethod = DOMProperty.getMutationMethod[name];
                        if (mutationMethod) mutationMethod(node, value); else if (shouldIgnoreValue(name, value)) this.deleteValueForProperty(node, name); else if (DOMProperty.mustUseAttribute[name]) node.setAttribute(DOMProperty.getAttributeName[name], "" + value); else {
                            var propName = DOMProperty.getPropertyName[name];
                            if (!DOMProperty.hasSideEffects[name] || node[propName] !== value) node[propName] = value;
                        }
                    } else if (DOMProperty.isCustomAttribute(name)) if (null == value) node.removeAttribute(DOMProperty.getAttributeName[name]); else node.setAttribute(name, "" + value); else if ("production" !== "development") warnUnknownProperty(name);
                },
                "deleteValueForProperty": function(node, name) {
                    if (DOMProperty.isStandardName[name]) {
                        var mutationMethod = DOMProperty.getMutationMethod[name];
                        if (mutationMethod) mutationMethod(node, void 0); else if (DOMProperty.mustUseAttribute[name]) node.removeAttribute(DOMProperty.getAttributeName[name]); else {
                            var propName = DOMProperty.getPropertyName[name];
                            var defaultValue = DOMProperty.getDefaultValueForProperty(node.nodeName, propName);
                            if (!DOMProperty.hasSideEffects[name] || node[propName] !== defaultValue) node[propName] = defaultValue;
                        }
                    } else if (DOMProperty.isCustomAttribute(name)) node.removeAttribute(name); else if ("production" !== "development") warnUnknownProperty(name);
                }
            };
            module.exports = DOMPropertyOperations;
        }, {
            "./DOMProperty": 9,
            "./escapeTextForBrowser": 111,
            "./memoizeStringOnly": 133,
            "./warning": 148
        } ],
        "11": [ function(_dereq_, module, exports) {
            "use strict";
            var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
            var createNodesFromMarkup = _dereq_("./createNodesFromMarkup");
            var emptyFunction = _dereq_("./emptyFunction");
            var getMarkupWrap = _dereq_("./getMarkupWrap");
            var invariant = _dereq_("./invariant");
            var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
            var RESULT_INDEX_ATTR = "data-danger-index";
            function getNodeName(markup) {
                return markup.substring(1, markup.indexOf(" "));
            }
            var Danger = {
                "dangerouslyRenderMarkup": function(markupList) {
                    "production" !== "development" ? invariant(ExecutionEnvironment.canUseDOM, "dangerouslyRenderMarkup(...): Cannot render markup in a Worker " + "thread. This is likely a bug in the framework. Please report " + "immediately.") : invariant(ExecutionEnvironment.canUseDOM);
                    var nodeName;
                    var markupByNodeName = {};
                    for (var i = 0; i < markupList.length; i++) {
                        "production" !== "development" ? invariant(markupList[i], "dangerouslyRenderMarkup(...): Missing markup.") : invariant(markupList[i]);
                        nodeName = getNodeName(markupList[i]);
                        nodeName = getMarkupWrap(nodeName) ? nodeName : "*";
                        markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
                        markupByNodeName[nodeName][i] = markupList[i];
                    }
                    var resultList = [];
                    var resultListAssignmentCount = 0;
                    for (nodeName in markupByNodeName) {
                        if (!markupByNodeName.hasOwnProperty(nodeName)) continue;
                        var markupListByNodeName = markupByNodeName[nodeName];
                        for (var resultIndex in markupListByNodeName) if (markupListByNodeName.hasOwnProperty(resultIndex)) {
                            var markup = markupListByNodeName[resultIndex];
                            markupListByNodeName[resultIndex] = markup.replace(OPEN_TAG_NAME_EXP, "$1 " + RESULT_INDEX_ATTR + '="' + resultIndex + '" ');
                        }
                        var renderNodes = createNodesFromMarkup(markupListByNodeName.join(""), emptyFunction);
                        for (i = 0; i < renderNodes.length; ++i) {
                            var renderNode = renderNodes[i];
                            if (renderNode.hasAttribute && renderNode.hasAttribute(RESULT_INDEX_ATTR)) {
                                resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
                                renderNode.removeAttribute(RESULT_INDEX_ATTR);
                                "production" !== "development" ? invariant(!resultList.hasOwnProperty(resultIndex), "Danger: Assigning to an already-occupied result index.") : invariant(!resultList.hasOwnProperty(resultIndex));
                                resultList[resultIndex] = renderNode;
                                resultListAssignmentCount += 1;
                            } else if ("production" !== "development") console.error("Danger: Discarding unexpected node:", renderNode);
                        }
                    }
                    "production" !== "development" ? invariant(resultListAssignmentCount === resultList.length, "Danger: Did not assign to every index of resultList.") : invariant(resultListAssignmentCount === resultList.length);
                    "production" !== "development" ? invariant(resultList.length === markupList.length, "Danger: Expected markup to render %s nodes, but rendered %s.", markupList.length, resultList.length) : invariant(resultList.length === markupList.length);
                    return resultList;
                },
                "dangerouslyReplaceNodeWithMarkup": function(oldChild, markup) {
                    "production" !== "development" ? invariant(ExecutionEnvironment.canUseDOM, "dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a " + "worker thread. This is likely a bug in the framework. Please report " + "immediately.") : invariant(ExecutionEnvironment.canUseDOM);
                    "production" !== "development" ? invariant(markup, "dangerouslyReplaceNodeWithMarkup(...): Missing markup.") : invariant(markup);
                    "production" !== "development" ? invariant("html" !== oldChild.tagName.toLowerCase(), "dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the " + "<html> node. This is because browser quirks make this unreliable " + "and/or slow. If you want to render to the root you must use " + "server rendering. See renderComponentToString().") : invariant("html" !== oldChild.tagName.toLowerCase());
                    var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
                    oldChild.parentNode.replaceChild(newChild, oldChild);
                }
            };
            module.exports = Danger;
        }, {
            "./ExecutionEnvironment": 21,
            "./createNodesFromMarkup": 105,
            "./emptyFunction": 109,
            "./getMarkupWrap": 118,
            "./invariant": 125
        } ],
        "12": [ function(_dereq_, module, exports) {
            "use strict";
            var DOMProperty = _dereq_("./DOMProperty");
            var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
            var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
            var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
            var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
            var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
            var DefaultDOMPropertyConfig = {
                "isCustomAttribute": RegExp.prototype.test.bind(/^(data|aria)-[a-z_][a-z\d_.\-]*$/),
                "Properties": {
                    "accept": null,
                    "accessKey": null,
                    "action": null,
                    "allowFullScreen": MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
                    "allowTransparency": MUST_USE_ATTRIBUTE,
                    "alt": null,
                    "async": HAS_BOOLEAN_VALUE,
                    "autoComplete": null,
                    "autoPlay": HAS_BOOLEAN_VALUE,
                    "cellPadding": null,
                    "cellSpacing": null,
                    "charSet": MUST_USE_ATTRIBUTE,
                    "checked": MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
                    "className": MUST_USE_PROPERTY,
                    "cols": MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
                    "colSpan": null,
                    "content": null,
                    "contentEditable": null,
                    "contextMenu": MUST_USE_ATTRIBUTE,
                    "controls": MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
                    "crossOrigin": null,
                    "data": null,
                    "dateTime": MUST_USE_ATTRIBUTE,
                    "defer": HAS_BOOLEAN_VALUE,
                    "dir": null,
                    "disabled": MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
                    "download": null,
                    "draggable": null,
                    "encType": null,
                    "form": MUST_USE_ATTRIBUTE,
                    "formNoValidate": HAS_BOOLEAN_VALUE,
                    "frameBorder": MUST_USE_ATTRIBUTE,
                    "height": MUST_USE_ATTRIBUTE,
                    "hidden": MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
                    "href": null,
                    "hrefLang": null,
                    "htmlFor": null,
                    "httpEquiv": null,
                    "icon": null,
                    "id": MUST_USE_PROPERTY,
                    "label": null,
                    "lang": null,
                    "list": null,
                    "loop": MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
                    "max": null,
                    "maxLength": MUST_USE_ATTRIBUTE,
                    "mediaGroup": null,
                    "method": null,
                    "min": null,
                    "multiple": MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
                    "muted": MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
                    "name": null,
                    "noValidate": HAS_BOOLEAN_VALUE,
                    "pattern": null,
                    "placeholder": null,
                    "poster": null,
                    "preload": null,
                    "radioGroup": null,
                    "readOnly": MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
                    "rel": null,
                    "required": HAS_BOOLEAN_VALUE,
                    "role": MUST_USE_ATTRIBUTE,
                    "rows": MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
                    "rowSpan": null,
                    "sandbox": null,
                    "scope": null,
                    "scrollLeft": MUST_USE_PROPERTY,
                    "scrollTop": MUST_USE_PROPERTY,
                    "seamless": MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
                    "selected": MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
                    "size": MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
                    "span": HAS_POSITIVE_NUMERIC_VALUE,
                    "spellCheck": null,
                    "src": null,
                    "srcDoc": MUST_USE_PROPERTY,
                    "srcSet": null,
                    "step": null,
                    "style": null,
                    "tabIndex": null,
                    "target": null,
                    "title": null,
                    "type": null,
                    "value": MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
                    "width": MUST_USE_ATTRIBUTE,
                    "wmode": MUST_USE_ATTRIBUTE,
                    "autoCapitalize": null,
                    "autoCorrect": null,
                    "property": null,
                    "cx": MUST_USE_ATTRIBUTE,
                    "cy": MUST_USE_ATTRIBUTE,
                    "d": MUST_USE_ATTRIBUTE,
                    "fill": MUST_USE_ATTRIBUTE,
                    "fx": MUST_USE_ATTRIBUTE,
                    "fy": MUST_USE_ATTRIBUTE,
                    "gradientTransform": MUST_USE_ATTRIBUTE,
                    "gradientUnits": MUST_USE_ATTRIBUTE,
                    "offset": MUST_USE_ATTRIBUTE,
                    "points": MUST_USE_ATTRIBUTE,
                    "r": MUST_USE_ATTRIBUTE,
                    "rx": MUST_USE_ATTRIBUTE,
                    "ry": MUST_USE_ATTRIBUTE,
                    "spreadMethod": MUST_USE_ATTRIBUTE,
                    "stopColor": MUST_USE_ATTRIBUTE,
                    "stopOpacity": MUST_USE_ATTRIBUTE,
                    "stroke": MUST_USE_ATTRIBUTE,
                    "strokeLinecap": MUST_USE_ATTRIBUTE,
                    "strokeWidth": MUST_USE_ATTRIBUTE,
                    "textAnchor": MUST_USE_ATTRIBUTE,
                    "transform": MUST_USE_ATTRIBUTE,
                    "version": MUST_USE_ATTRIBUTE,
                    "viewBox": MUST_USE_ATTRIBUTE,
                    "x1": MUST_USE_ATTRIBUTE,
                    "x2": MUST_USE_ATTRIBUTE,
                    "x": MUST_USE_ATTRIBUTE,
                    "y1": MUST_USE_ATTRIBUTE,
                    "y2": MUST_USE_ATTRIBUTE,
                    "y": MUST_USE_ATTRIBUTE
                },
                "DOMAttributeNames": {
                    "className": "class",
                    "gradientTransform": "gradientTransform",
                    "gradientUnits": "gradientUnits",
                    "htmlFor": "for",
                    "spreadMethod": "spreadMethod",
                    "stopColor": "stop-color",
                    "stopOpacity": "stop-opacity",
                    "strokeLinecap": "stroke-linecap",
                    "strokeWidth": "stroke-width",
                    "textAnchor": "text-anchor",
                    "viewBox": "viewBox"
                },
                "DOMPropertyNames": {
                    "autoCapitalize": "autocapitalize",
                    "autoComplete": "autocomplete",
                    "autoCorrect": "autocorrect",
                    "autoFocus": "autofocus",
                    "autoPlay": "autoplay",
                    "encType": "enctype",
                    "hrefLang": "hreflang",
                    "radioGroup": "radiogroup",
                    "spellCheck": "spellcheck",
                    "srcDoc": "srcdoc",
                    "srcSet": "srcset"
                }
            };
            module.exports = DefaultDOMPropertyConfig;
        }, {
            "./DOMProperty": 9
        } ],
        "13": [ function(_dereq_, module, exports) {
            "use strict";
            var keyOf = _dereq_("./keyOf");
            var DefaultEventPluginOrder = [ keyOf({
                "ResponderEventPlugin": null
            }), keyOf({
                "SimpleEventPlugin": null
            }), keyOf({
                "TapEventPlugin": null
            }), keyOf({
                "EnterLeaveEventPlugin": null
            }), keyOf({
                "ChangeEventPlugin": null
            }), keyOf({
                "SelectEventPlugin": null
            }), keyOf({
                "CompositionEventPlugin": null
            }), keyOf({
                "AnalyticsEventPlugin": null
            }), keyOf({
                "MobileSafariClickEventPlugin": null
            }) ];
            module.exports = DefaultEventPluginOrder;
        }, {
            "./keyOf": 132
        } ],
        "14": [ function(_dereq_, module, exports) {
            "use strict";
            var EventConstants = _dereq_("./EventConstants");
            var EventPropagators = _dereq_("./EventPropagators");
            var SyntheticMouseEvent = _dereq_("./SyntheticMouseEvent");
            var ReactMount = _dereq_("./ReactMount");
            var keyOf = _dereq_("./keyOf");
            var topLevelTypes = EventConstants.topLevelTypes;
            var getFirstReactDOM = ReactMount.getFirstReactDOM;
            var eventTypes = {
                "mouseEnter": {
                    "registrationName": keyOf({
                        "onMouseEnter": null
                    }),
                    "dependencies": [ topLevelTypes.topMouseOut, topLevelTypes.topMouseOver ]
                },
                "mouseLeave": {
                    "registrationName": keyOf({
                        "onMouseLeave": null
                    }),
                    "dependencies": [ topLevelTypes.topMouseOut, topLevelTypes.topMouseOver ]
                }
            };
            var extractedEvents = [ null, null ];
            var EnterLeaveEventPlugin = {
                "eventTypes": eventTypes,
                "extractEvents": function(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent) {
                    if (topLevelType === topLevelTypes.topMouseOver && (nativeEvent.relatedTarget || nativeEvent.fromElement)) return null;
                    if (topLevelType !== topLevelTypes.topMouseOut && topLevelType !== topLevelTypes.topMouseOver) return null;
                    var win;
                    if (topLevelTarget.window === topLevelTarget) win = topLevelTarget; else {
                        var doc = topLevelTarget.ownerDocument;
                        if (doc) win = doc.defaultView || doc.parentWindow; else win = window;
                    }
                    var from, to;
                    if (topLevelType === topLevelTypes.topMouseOut) {
                        from = topLevelTarget;
                        to = getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement) || win;
                    } else {
                        from = win;
                        to = topLevelTarget;
                    }
                    if (from === to) return null;
                    var fromID = from ? ReactMount.getID(from) : "";
                    var toID = to ? ReactMount.getID(to) : "";
                    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, fromID, nativeEvent);
                    leave.type = "mouseleave";
                    leave.target = from;
                    leave.relatedTarget = to;
                    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, toID, nativeEvent);
                    enter.type = "mouseenter";
                    enter.target = to;
                    enter.relatedTarget = from;
                    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);
                    extractedEvents[0] = leave;
                    extractedEvents[1] = enter;
                    return extractedEvents;
                }
            };
            module.exports = EnterLeaveEventPlugin;
        }, {
            "./EventConstants": 15,
            "./EventPropagators": 20,
            "./ReactMount": 60,
            "./SyntheticMouseEvent": 92,
            "./keyOf": 132
        } ],
        "15": [ function(_dereq_, module, exports) {
            "use strict";
            var keyMirror = _dereq_("./keyMirror");
            var PropagationPhases = keyMirror({
                "bubbled": null,
                "captured": null
            });
            var topLevelTypes = keyMirror({
                "topBlur": null,
                "topChange": null,
                "topClick": null,
                "topCompositionEnd": null,
                "topCompositionStart": null,
                "topCompositionUpdate": null,
                "topContextMenu": null,
                "topCopy": null,
                "topCut": null,
                "topDoubleClick": null,
                "topDrag": null,
                "topDragEnd": null,
                "topDragEnter": null,
                "topDragExit": null,
                "topDragLeave": null,
                "topDragOver": null,
                "topDragStart": null,
                "topDrop": null,
                "topError": null,
                "topFocus": null,
                "topInput": null,
                "topKeyDown": null,
                "topKeyPress": null,
                "topKeyUp": null,
                "topLoad": null,
                "topMouseDown": null,
                "topMouseMove": null,
                "topMouseOut": null,
                "topMouseOver": null,
                "topMouseUp": null,
                "topPaste": null,
                "topReset": null,
                "topScroll": null,
                "topSelectionChange": null,
                "topSubmit": null,
                "topTouchCancel": null,
                "topTouchEnd": null,
                "topTouchMove": null,
                "topTouchStart": null,
                "topWheel": null
            });
            var EventConstants = {
                "topLevelTypes": topLevelTypes,
                "PropagationPhases": PropagationPhases
            };
            module.exports = EventConstants;
        }, {
            "./keyMirror": 131
        } ],
        "16": [ function(_dereq_, module, exports) {
            var emptyFunction = _dereq_("./emptyFunction");
            var EventListener = {
                "listen": function(target, eventType, callback) {
                    if (target.addEventListener) {
                        target.addEventListener(eventType, callback, false);
                        return {
                            "remove": function() {
                                target.removeEventListener(eventType, callback, false);
                            }
                        };
                    } else if (target.attachEvent) {
                        target.attachEvent("on" + eventType, callback);
                        return {
                            "remove": function() {
                                target.detachEvent(eventType, callback);
                            }
                        };
                    }
                },
                "capture": function(target, eventType, callback) {
                    if (!target.addEventListener) {
                        if ("production" !== "development") console.error("Attempted to listen to events during the capture phase on a " + "browser that does not support the capture phase. Your application " + "will not receive some events.");
                        return {
                            "remove": emptyFunction
                        };
                    } else {
                        target.addEventListener(eventType, callback, true);
                        return {
                            "remove": function() {
                                target.removeEventListener(eventType, callback, true);
                            }
                        };
                    }
                }
            };
            module.exports = EventListener;
        }, {
            "./emptyFunction": 109
        } ],
        "17": [ function(_dereq_, module, exports) {
            "use strict";
            var EventPluginRegistry = _dereq_("./EventPluginRegistry");
            var EventPluginUtils = _dereq_("./EventPluginUtils");
            var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
            var accumulate = _dereq_("./accumulate");
            var forEachAccumulated = _dereq_("./forEachAccumulated");
            var invariant = _dereq_("./invariant");
            var isEventSupported = _dereq_("./isEventSupported");
            var monitorCodeUse = _dereq_("./monitorCodeUse");
            var listenerBank = {};
            var eventQueue = null;
            var executeDispatchesAndRelease = function(event) {
                if (event) {
                    var executeDispatch = EventPluginUtils.executeDispatch;
                    var PluginModule = EventPluginRegistry.getPluginModuleForEvent(event);
                    if (PluginModule && PluginModule.executeDispatch) executeDispatch = PluginModule.executeDispatch;
                    EventPluginUtils.executeDispatchesInOrder(event, executeDispatch);
                    if (!event.isPersistent()) event.constructor.release(event);
                }
            };
            var InstanceHandle = null;
            function validateInstanceHandle() {
                var invalid = !InstanceHandle || !InstanceHandle.traverseTwoPhase || !InstanceHandle.traverseEnterLeave;
                if (invalid) throw new Error("InstanceHandle not injected before use!");
            }
            var EventPluginHub = {
                "injection": {
                    "injectMount": EventPluginUtils.injection.injectMount,
                    "injectInstanceHandle": function(InjectedInstanceHandle) {
                        InstanceHandle = InjectedInstanceHandle;
                        if ("production" !== "development") validateInstanceHandle();
                    },
                    "getInstanceHandle": function() {
                        if ("production" !== "development") validateInstanceHandle();
                        return InstanceHandle;
                    },
                    "injectEventPluginOrder": EventPluginRegistry.injectEventPluginOrder,
                    "injectEventPluginsByName": EventPluginRegistry.injectEventPluginsByName
                },
                "eventNameDispatchConfigs": EventPluginRegistry.eventNameDispatchConfigs,
                "registrationNameModules": EventPluginRegistry.registrationNameModules,
                "putListener": function(id, registrationName, listener) {
                    "production" !== "development" ? invariant(ExecutionEnvironment.canUseDOM, "Cannot call putListener() in a non-DOM environment.") : invariant(ExecutionEnvironment.canUseDOM);
                    "production" !== "development" ? invariant(!listener || "function" === typeof listener, "Expected %s listener to be a function, instead got type %s", registrationName, typeof listener) : invariant(!listener || "function" === typeof listener);
                    if ("production" !== "development") if ("onScroll" === registrationName && !isEventSupported("scroll", true)) {
                        monitorCodeUse("react_no_scroll_event");
                        console.warn("This browser doesn't support the `onScroll` event");
                    }
                    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
                    bankForRegistrationName[id] = listener;
                },
                "getListener": function(id, registrationName) {
                    var bankForRegistrationName = listenerBank[registrationName];
                    return bankForRegistrationName && bankForRegistrationName[id];
                },
                "deleteListener": function(id, registrationName) {
                    var bankForRegistrationName = listenerBank[registrationName];
                    if (bankForRegistrationName) delete bankForRegistrationName[id];
                },
                "deleteAllListeners": function(id) {
                    for (var registrationName in listenerBank) delete listenerBank[registrationName][id];
                },
                "extractEvents": function(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent) {
                    var events;
                    var plugins = EventPluginRegistry.plugins;
                    for (var i = 0, l = plugins.length; i < l; i++) {
                        var possiblePlugin = plugins[i];
                        if (possiblePlugin) {
                            var extractedEvents = possiblePlugin.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent);
                            if (extractedEvents) events = accumulate(events, extractedEvents);
                        }
                    }
                    return events;
                },
                "enqueueEvents": function(events) {
                    if (events) eventQueue = accumulate(eventQueue, events);
                },
                "processEventQueue": function() {
                    var processingEventQueue = eventQueue;
                    eventQueue = null;
                    forEachAccumulated(processingEventQueue, executeDispatchesAndRelease);
                    "production" !== "development" ? invariant(!eventQueue, "processEventQueue(): Additional events were enqueued while processing " + "an event queue. Support for this has not yet been implemented.") : invariant(!eventQueue);
                },
                "__purge": function() {
                    listenerBank = {};
                },
                "__getListenerBank": function() {
                    return listenerBank;
                }
            };
            module.exports = EventPluginHub;
        }, {
            "./EventPluginRegistry": 18,
            "./EventPluginUtils": 19,
            "./ExecutionEnvironment": 21,
            "./accumulate": 98,
            "./forEachAccumulated": 114,
            "./invariant": 125,
            "./isEventSupported": 126,
            "./monitorCodeUse": 138
        } ],
        "18": [ function(_dereq_, module, exports) {
            "use strict";
            var invariant = _dereq_("./invariant");
            var EventPluginOrder = null;
            var namesToPlugins = {};
            function recomputePluginOrdering() {
                if (!EventPluginOrder) return;
                for (var pluginName in namesToPlugins) {
                    var PluginModule = namesToPlugins[pluginName];
                    var pluginIndex = EventPluginOrder.indexOf(pluginName);
                    "production" !== "development" ? invariant(pluginIndex > -1, "EventPluginRegistry: Cannot inject event plugins that do not exist in " + "the plugin ordering, `%s`.", pluginName) : invariant(pluginIndex > -1);
                    if (EventPluginRegistry.plugins[pluginIndex]) continue;
                    "production" !== "development" ? invariant(PluginModule.extractEvents, "EventPluginRegistry: Event plugins must implement an `extractEvents` " + "method, but `%s` does not.", pluginName) : invariant(PluginModule.extractEvents);
                    EventPluginRegistry.plugins[pluginIndex] = PluginModule;
                    var publishedEvents = PluginModule.eventTypes;
                    for (var eventName in publishedEvents) "production" !== "development" ? invariant(publishEventForPlugin(publishedEvents[eventName], PluginModule, eventName), "EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.", eventName, pluginName) : invariant(publishEventForPlugin(publishedEvents[eventName], PluginModule, eventName));
                }
            }
            function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
                "production" !== "development" ? invariant(!EventPluginRegistry.eventNameDispatchConfigs[eventName], "EventPluginHub: More than one plugin attempted to publish the same " + "event name, `%s`.", eventName) : invariant(!EventPluginRegistry.eventNameDispatchConfigs[eventName]);
                EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;
                var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
                if (phasedRegistrationNames) {
                    for (var phaseName in phasedRegistrationNames) if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
                        var phasedRegistrationName = phasedRegistrationNames[phaseName];
                        publishRegistrationName(phasedRegistrationName, PluginModule, eventName);
                    }
                    return true;
                } else if (dispatchConfig.registrationName) {
                    publishRegistrationName(dispatchConfig.registrationName, PluginModule, eventName);
                    return true;
                }
                return false;
            }
            function publishRegistrationName(registrationName, PluginModule, eventName) {
                "production" !== "development" ? invariant(!EventPluginRegistry.registrationNameModules[registrationName], "EventPluginHub: More than one plugin attempted to publish the same " + "registration name, `%s`.", registrationName) : invariant(!EventPluginRegistry.registrationNameModules[registrationName]);
                EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
                EventPluginRegistry.registrationNameDependencies[registrationName] = PluginModule.eventTypes[eventName].dependencies;
            }
            var EventPluginRegistry = {
                "plugins": [],
                "eventNameDispatchConfigs": {},
                "registrationNameModules": {},
                "registrationNameDependencies": {},
                "injectEventPluginOrder": function(InjectedEventPluginOrder) {
                    "production" !== "development" ? invariant(!EventPluginOrder, "EventPluginRegistry: Cannot inject event plugin ordering more than once.") : invariant(!EventPluginOrder);
                    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
                    recomputePluginOrdering();
                },
                "injectEventPluginsByName": function(injectedNamesToPlugins) {
                    var isOrderingDirty = false;
                    for (var pluginName in injectedNamesToPlugins) {
                        if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) continue;
                        var PluginModule = injectedNamesToPlugins[pluginName];
                        if (namesToPlugins[pluginName] !== PluginModule) {
                            "production" !== "development" ? invariant(!namesToPlugins[pluginName], "EventPluginRegistry: Cannot inject two different event plugins " + "using the same name, `%s`.", pluginName) : invariant(!namesToPlugins[pluginName]);
                            namesToPlugins[pluginName] = PluginModule;
                            isOrderingDirty = true;
                        }
                    }
                    if (isOrderingDirty) recomputePluginOrdering();
                },
                "getPluginModuleForEvent": function(event) {
                    var dispatchConfig = event.dispatchConfig;
                    if (dispatchConfig.registrationName) return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
                    for (var phase in dispatchConfig.phasedRegistrationNames) {
                        if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) continue;
                        var PluginModule = EventPluginRegistry.registrationNameModules[dispatchConfig.phasedRegistrationNames[phase]];
                        if (PluginModule) return PluginModule;
                    }
                    return null;
                },
                "_resetEventPlugins": function() {
                    EventPluginOrder = null;
                    for (var pluginName in namesToPlugins) if (namesToPlugins.hasOwnProperty(pluginName)) delete namesToPlugins[pluginName];
                    EventPluginRegistry.plugins.length = 0;
                    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
                    for (var eventName in eventNameDispatchConfigs) if (eventNameDispatchConfigs.hasOwnProperty(eventName)) delete eventNameDispatchConfigs[eventName];
                    var registrationNameModules = EventPluginRegistry.registrationNameModules;
                    for (var registrationName in registrationNameModules) if (registrationNameModules.hasOwnProperty(registrationName)) delete registrationNameModules[registrationName];
                }
            };
            module.exports = EventPluginRegistry;
        }, {
            "./invariant": 125
        } ],
        "19": [ function(_dereq_, module, exports) {
            "use strict";
            var EventConstants = _dereq_("./EventConstants");
            var invariant = _dereq_("./invariant");
            var injection = {
                "Mount": null,
                "injectMount": function(InjectedMount) {
                    injection.Mount = InjectedMount;
                    if ("production" !== "development") "production" !== "development" ? invariant(InjectedMount && InjectedMount.getNode, "EventPluginUtils.injection.injectMount(...): Injected Mount module " + "is missing getNode.") : invariant(InjectedMount && InjectedMount.getNode);
                }
            };
            var topLevelTypes = EventConstants.topLevelTypes;
            function isEndish(topLevelType) {
                return topLevelType === topLevelTypes.topMouseUp || topLevelType === topLevelTypes.topTouchEnd || topLevelType === topLevelTypes.topTouchCancel;
            }
            function isMoveish(topLevelType) {
                return topLevelType === topLevelTypes.topMouseMove || topLevelType === topLevelTypes.topTouchMove;
            }
            function isStartish(topLevelType) {
                return topLevelType === topLevelTypes.topMouseDown || topLevelType === topLevelTypes.topTouchStart;
            }
            var validateEventDispatches;
            if ("production" !== "development") validateEventDispatches = function(event) {
                var dispatchListeners = event._dispatchListeners;
                var dispatchIDs = event._dispatchIDs;
                var listenersIsArr = Array.isArray(dispatchListeners);
                var idsIsArr = Array.isArray(dispatchIDs);
                var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
                var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;
                "production" !== "development" ? invariant(idsIsArr === listenersIsArr && IDsLen === listenersLen, "EventPluginUtils: Invalid `event`.") : invariant(idsIsArr === listenersIsArr && IDsLen === listenersLen);
            };
            function forEachEventDispatch(event, cb) {
                var dispatchListeners = event._dispatchListeners;
                var dispatchIDs = event._dispatchIDs;
                if ("production" !== "development") validateEventDispatches(event);
                if (Array.isArray(dispatchListeners)) for (var i = 0; i < dispatchListeners.length; i++) {
                    if (event.isPropagationStopped()) break;
                    cb(event, dispatchListeners[i], dispatchIDs[i]);
                } else if (dispatchListeners) cb(event, dispatchListeners, dispatchIDs);
            }
            function executeDispatch(event, listener, domID) {
                event.currentTarget = injection.Mount.getNode(domID);
                var returnValue = listener(event, domID);
                event.currentTarget = null;
                return returnValue;
            }
            function executeDispatchesInOrder(event, executeDispatch) {
                forEachEventDispatch(event, executeDispatch);
                event._dispatchListeners = null;
                event._dispatchIDs = null;
            }
            function executeDispatchesInOrderStopAtTrue(event) {
                var dispatchListeners = event._dispatchListeners;
                var dispatchIDs = event._dispatchIDs;
                if ("production" !== "development") validateEventDispatches(event);
                if (Array.isArray(dispatchListeners)) for (var i = 0; i < dispatchListeners.length; i++) {
                    if (event.isPropagationStopped()) break;
                    if (dispatchListeners[i](event, dispatchIDs[i])) return dispatchIDs[i];
                } else if (dispatchListeners) if (dispatchListeners(event, dispatchIDs)) return dispatchIDs;
                return null;
            }
            function executeDirectDispatch(event) {
                if ("production" !== "development") validateEventDispatches(event);
                var dispatchListener = event._dispatchListeners;
                var dispatchID = event._dispatchIDs;
                "production" !== "development" ? invariant(!Array.isArray(dispatchListener), "executeDirectDispatch(...): Invalid `event`.") : invariant(!Array.isArray(dispatchListener));
                var res = dispatchListener ? dispatchListener(event, dispatchID) : null;
                event._dispatchListeners = null;
                event._dispatchIDs = null;
                return res;
            }
            function hasDispatches(event) {
                return !!event._dispatchListeners;
            }
            var EventPluginUtils = {
                "isEndish": isEndish,
                "isMoveish": isMoveish,
                "isStartish": isStartish,
                "executeDirectDispatch": executeDirectDispatch,
                "executeDispatch": executeDispatch,
                "executeDispatchesInOrder": executeDispatchesInOrder,
                "executeDispatchesInOrderStopAtTrue": executeDispatchesInOrderStopAtTrue,
                "hasDispatches": hasDispatches,
                "injection": injection,
                "useTouchEvents": false
            };
            module.exports = EventPluginUtils;
        }, {
            "./EventConstants": 15,
            "./invariant": 125
        } ],
        "20": [ function(_dereq_, module, exports) {
            "use strict";
            var EventConstants = _dereq_("./EventConstants");
            var EventPluginHub = _dereq_("./EventPluginHub");
            var accumulate = _dereq_("./accumulate");
            var forEachAccumulated = _dereq_("./forEachAccumulated");
            var PropagationPhases = EventConstants.PropagationPhases;
            var getListener = EventPluginHub.getListener;
            function listenerAtPhase(id, event, propagationPhase) {
                var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
                return getListener(id, registrationName);
            }
            function accumulateDirectionalDispatches(domID, upwards, event) {
                if ("production" !== "development") if (!domID) throw new Error("Dispatching id must not be null");
                var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
                var listener = listenerAtPhase(domID, event, phase);
                if (listener) {
                    event._dispatchListeners = accumulate(event._dispatchListeners, listener);
                    event._dispatchIDs = accumulate(event._dispatchIDs, domID);
                }
            }
            function accumulateTwoPhaseDispatchesSingle(event) {
                if (event && event.dispatchConfig.phasedRegistrationNames) EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(event.dispatchMarker, accumulateDirectionalDispatches, event);
            }
            function accumulateDispatches(id, ignoredDirection, event) {
                if (event && event.dispatchConfig.registrationName) {
                    var registrationName = event.dispatchConfig.registrationName;
                    var listener = getListener(id, registrationName);
                    if (listener) {
                        event._dispatchListeners = accumulate(event._dispatchListeners, listener);
                        event._dispatchIDs = accumulate(event._dispatchIDs, id);
                    }
                }
            }
            function accumulateDirectDispatchesSingle(event) {
                if (event && event.dispatchConfig.registrationName) accumulateDispatches(event.dispatchMarker, null, event);
            }
            function accumulateTwoPhaseDispatches(events) {
                forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
            }
            function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {
                EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(fromID, toID, accumulateDispatches, leave, enter);
            }
            function accumulateDirectDispatches(events) {
                forEachAccumulated(events, accumulateDirectDispatchesSingle);
            }
            var EventPropagators = {
                "accumulateTwoPhaseDispatches": accumulateTwoPhaseDispatches,
                "accumulateDirectDispatches": accumulateDirectDispatches,
                "accumulateEnterLeaveDispatches": accumulateEnterLeaveDispatches
            };
            module.exports = EventPropagators;
        }, {
            "./EventConstants": 15,
            "./EventPluginHub": 17,
            "./accumulate": 98,
            "./forEachAccumulated": 114
        } ],
        "21": [ function(_dereq_, module, exports) {
            "use strict";
            var canUseDOM = "undefined" !== typeof window;
            var ExecutionEnvironment = {
                "canUseDOM": canUseDOM,
                "canUseWorkers": "undefined" !== typeof Worker,
                "canUseEventListeners": canUseDOM && (window.addEventListener || window.attachEvent),
                "isInWorker": !canUseDOM
            };
            module.exports = ExecutionEnvironment;
        }, {} ],
        "22": [ function(_dereq_, module, exports) {
            "use strict";
            var ReactLink = _dereq_("./ReactLink");
            var ReactStateSetters = _dereq_("./ReactStateSetters");
            var LinkedStateMixin = {
                "linkState": function(key) {
                    return new ReactLink(this.state[key], ReactStateSetters.createStateKeySetter(this, key));
                }
            };
            module.exports = LinkedStateMixin;
        }, {
            "./ReactLink": 58,
            "./ReactStateSetters": 75
        } ],
        "23": [ function(_dereq_, module, exports) {
            "use strict";
            var ReactPropTypes = _dereq_("./ReactPropTypes");
            var invariant = _dereq_("./invariant");
            var warning = _dereq_("./warning");
            var hasReadOnlyValue = {
                "button": true,
                "checkbox": true,
                "image": true,
                "hidden": true,
                "radio": true,
                "reset": true,
                "submit": true
            };
            function _assertSingleLink(input) {
                "production" !== "development" ? invariant(null == input.props.checkedLink || null == input.props.valueLink, "Cannot provide a checkedLink and a valueLink. If you want to use " + "checkedLink, you probably don't want to use valueLink and vice versa.") : invariant(null == input.props.checkedLink || null == input.props.valueLink);
            }
            function _assertValueLink(input) {
                _assertSingleLink(input);
                "production" !== "development" ? invariant(null == input.props.value && null == input.props.onChange, "Cannot provide a valueLink and a value or onChange event. If you want " + "to use value or onChange, you probably don't want to use valueLink.") : invariant(null == input.props.value && null == input.props.onChange);
            }
            function _assertCheckedLink(input) {
                _assertSingleLink(input);
                "production" !== "development" ? invariant(null == input.props.checked && null == input.props.onChange, "Cannot provide a checkedLink and a checked property or onChange event. " + "If you want to use checked or onChange, you probably don't want to " + "use checkedLink") : invariant(null == input.props.checked && null == input.props.onChange);
            }
            function _handleLinkedValueChange(e) {
                this.props.valueLink.requestChange(e.target.value);
            }
            function _handleLinkedCheckChange(e) {
                this.props.checkedLink.requestChange(e.target.checked);
            }
            var LinkedValueUtils = {
                "Mixin": {
                    "propTypes": {
                        "value": function(props, propName, componentName) {
                            if ("production" !== "development") "production" !== "development" ? warning(!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled, "You provided a `value` prop to a form field without an " + "`onChange` handler. This will render a read-only field. If " + "the field should be mutable use `defaultValue`. Otherwise, " + "set either `onChange` or `readOnly`.") : null;
                        },
                        "checked": function(props, propName, componentName) {
                            if ("production" !== "development") "production" !== "development" ? warning(!props[propName] || props.onChange || props.readOnly || props.disabled, "You provided a `checked` prop to a form field without an " + "`onChange` handler. This will render a read-only field. If " + "the field should be mutable use `defaultChecked`. Otherwise, " + "set either `onChange` or `readOnly`.") : null;
                        },
                        "onChange": ReactPropTypes.func
                    }
                },
                "getValue": function(input) {
                    if (input.props.valueLink) {
                        _assertValueLink(input);
                        return input.props.valueLink.value;
                    }
                    return input.props.value;
                },
                "getChecked": function(input) {
                    if (input.props.checkedLink) {
                        _assertCheckedLink(input);
                        return input.props.checkedLink.value;
                    }
                    return input.props.checked;
                },
                "getOnChange": function(input) {
                    if (input.props.valueLink) {
                        _assertValueLink(input);
                        return _handleLinkedValueChange;
                    } else if (input.props.checkedLink) {
                        _assertCheckedLink(input);
                        return _handleLinkedCheckChange;
                    }
                    return input.props.onChange;
                }
            };
            module.exports = LinkedValueUtils;
        }, {
            "./ReactPropTypes": 69,
            "./invariant": 125,
            "./warning": 148
        } ],
        "24": [ function(_dereq_, module, exports) {
            "use strict";
            var EventConstants = _dereq_("./EventConstants");
            var emptyFunction = _dereq_("./emptyFunction");
            var topLevelTypes = EventConstants.topLevelTypes;
            var MobileSafariClickEventPlugin = {
                "eventTypes": null,
                "extractEvents": function(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent) {
                    if (topLevelType === topLevelTypes.topTouchStart) {
                        var target = nativeEvent.target;
                        if (target && !target.onclick) target.onclick = emptyFunction;
                    }
                }
            };
            module.exports = MobileSafariClickEventPlugin;
        }, {
            "./EventConstants": 15,
            "./emptyFunction": 109
        } ],
        "25": [ function(_dereq_, module, exports) {
            "use strict";
            var invariant = _dereq_("./invariant");
            var oneArgumentPooler = function(copyFieldsFrom) {
                var Klass = this;
                if (Klass.instancePool.length) {
                    var instance = Klass.instancePool.pop();
                    Klass.call(instance, copyFieldsFrom);
                    return instance;
                } else return new Klass(copyFieldsFrom);
            };
            var twoArgumentPooler = function(a1, a2) {
                var Klass = this;
                if (Klass.instancePool.length) {
                    var instance = Klass.instancePool.pop();
                    Klass.call(instance, a1, a2);
                    return instance;
                } else return new Klass(a1, a2);
            };
            var threeArgumentPooler = function(a1, a2, a3) {
                var Klass = this;
                if (Klass.instancePool.length) {
                    var instance = Klass.instancePool.pop();
                    Klass.call(instance, a1, a2, a3);
                    return instance;
                } else return new Klass(a1, a2, a3);
            };
            var fiveArgumentPooler = function(a1, a2, a3, a4, a5) {
                var Klass = this;
                if (Klass.instancePool.length) {
                    var instance = Klass.instancePool.pop();
                    Klass.call(instance, a1, a2, a3, a4, a5);
                    return instance;
                } else return new Klass(a1, a2, a3, a4, a5);
            };
            var standardReleaser = function(instance) {
                var Klass = this;
                "production" !== "development" ? invariant(instance instanceof Klass, "Trying to release an instance into a pool of a different type.") : invariant(instance instanceof Klass);
                if (instance.destructor) instance.destructor();
                if (Klass.instancePool.length < Klass.poolSize) Klass.instancePool.push(instance);
            };
            var DEFAULT_POOL_SIZE = 10;
            var DEFAULT_POOLER = oneArgumentPooler;
            var addPoolingTo = function(CopyConstructor, pooler) {
                var NewKlass = CopyConstructor;
                NewKlass.instancePool = [];
                NewKlass.getPooled = pooler || DEFAULT_POOLER;
                if (!NewKlass.poolSize) NewKlass.poolSize = DEFAULT_POOL_SIZE;
                NewKlass.release = standardReleaser;
                return NewKlass;
            };
            var PooledClass = {
                "addPoolingTo": addPoolingTo,
                "oneArgumentPooler": oneArgumentPooler,
                "twoArgumentPooler": twoArgumentPooler,
                "threeArgumentPooler": threeArgumentPooler,
                "fiveArgumentPooler": fiveArgumentPooler
            };
            module.exports = PooledClass;
        }, {
            "./invariant": 125
        } ],
        "26": [ function(_dereq_, module, exports) {
            "use strict";
            var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
            var EventPluginUtils = _dereq_("./EventPluginUtils");
            var ReactChildren = _dereq_("./ReactChildren");
            var ReactComponent = _dereq_("./ReactComponent");
            var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
            var ReactContext = _dereq_("./ReactContext");
            var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");
            var ReactDOM = _dereq_("./ReactDOM");
            var ReactDOMComponent = _dereq_("./ReactDOMComponent");
            var ReactDefaultInjection = _dereq_("./ReactDefaultInjection");
            var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");
            var ReactMount = _dereq_("./ReactMount");
            var ReactMultiChild = _dereq_("./ReactMultiChild");
            var ReactPerf = _dereq_("./ReactPerf");
            var ReactPropTypes = _dereq_("./ReactPropTypes");
            var ReactServerRendering = _dereq_("./ReactServerRendering");
            var ReactTextComponent = _dereq_("./ReactTextComponent");
            var onlyChild = _dereq_("./onlyChild");
            ReactDefaultInjection.inject();
            var React = {
                "Children": {
                    "map": ReactChildren.map,
                    "forEach": ReactChildren.forEach,
                    "only": onlyChild
                },
                "DOM": ReactDOM,
                "PropTypes": ReactPropTypes,
                "initializeTouchEvents": function(shouldUseTouch) {
                    EventPluginUtils.useTouchEvents = shouldUseTouch;
                },
                "createClass": ReactCompositeComponent.createClass,
                "constructAndRenderComponent": ReactMount.constructAndRenderComponent,
                "constructAndRenderComponentByID": ReactMount.constructAndRenderComponentByID,
                "renderComponent": ReactPerf.measure("React", "renderComponent", ReactMount.renderComponent),
                "renderComponentToString": ReactServerRendering.renderComponentToString,
                "renderComponentToStaticMarkup": ReactServerRendering.renderComponentToStaticMarkup,
                "unmountComponentAtNode": ReactMount.unmountComponentAtNode,
                "isValidClass": ReactCompositeComponent.isValidClass,
                "isValidComponent": ReactComponent.isValidComponent,
                "withContext": ReactContext.withContext,
                "__internals": {
                    "Component": ReactComponent,
                    "CurrentOwner": ReactCurrentOwner,
                    "DOMComponent": ReactDOMComponent,
                    "DOMPropertyOperations": DOMPropertyOperations,
                    "InstanceHandles": ReactInstanceHandles,
                    "Mount": ReactMount,
                    "MultiChild": ReactMultiChild,
                    "TextComponent": ReactTextComponent
                }
            };
            if ("production" !== "development") {
                var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
                if (ExecutionEnvironment.canUseDOM && window.top === window.self && navigator.userAgent.indexOf("Chrome") > -1) console.debug("Download the React DevTools for a better development experience: " + "http://fb.me/react-devtools");
            }
            React.version = "0.10.0";
            module.exports = React;
        }, {
            "./DOMPropertyOperations": 10,
            "./EventPluginUtils": 19,
            "./ExecutionEnvironment": 21,
            "./ReactChildren": 30,
            "./ReactComponent": 31,
            "./ReactCompositeComponent": 33,
            "./ReactContext": 34,
            "./ReactCurrentOwner": 35,
            "./ReactDOM": 36,
            "./ReactDOMComponent": 38,
            "./ReactDefaultInjection": 48,
            "./ReactInstanceHandles": 57,
            "./ReactMount": 60,
            "./ReactMultiChild": 62,
            "./ReactPerf": 65,
            "./ReactPropTypes": 69,
            "./ReactServerRendering": 73,
            "./ReactTextComponent": 77,
            "./onlyChild": 141
        } ],
        "27": [ function(_dereq_, module, exports) {
            "use strict";
            var ReactMount = _dereq_("./ReactMount");
            var invariant = _dereq_("./invariant");
            var ReactBrowserComponentMixin = {
                "getDOMNode": function() {
                    "production" !== "development" ? invariant(this.isMounted(), "getDOMNode(): A component must be mounted to have a DOM node.") : invariant(this.isMounted());
                    return ReactMount.getNode(this._rootNodeID);
                }
            };
            module.exports = ReactBrowserComponentMixin;
        }, {
            "./ReactMount": 60,
            "./invariant": 125
        } ],
        "28": [ function(_dereq_, module, exports) {
            "use strict";
            var React = _dereq_("./React");
            var ReactTransitionGroup = _dereq_("./ReactTransitionGroup");
            var ReactCSSTransitionGroupChild = _dereq_("./ReactCSSTransitionGroupChild");
            var ReactCSSTransitionGroup = React.createClass({
                "propTypes": {
                    "transitionName": React.PropTypes.string.isRequired,
                    "transitionEnter": React.PropTypes.bool,
                    "transitionLeave": React.PropTypes.bool
                },
                "getDefaultProps": function() {
                    return {
                        "transitionEnter": true,
                        "transitionLeave": true
                    };
                },
                "_wrapChild": function(child) {
                    return ReactCSSTransitionGroupChild({
                        "name": this.props.transitionName,
                        "enter": this.props.transitionEnter,
                        "leave": this.props.transitionLeave
                    }, child);
                },
                "render": function() {
                    return this.transferPropsTo(ReactTransitionGroup({
                        "childFactory": this._wrapChild
                    }, this.props.children));
                }
            });
            module.exports = ReactCSSTransitionGroup;
        }, {
            "./React": 26,
            "./ReactCSSTransitionGroupChild": 29,
            "./ReactTransitionGroup": 80
        } ],
        "29": [ function(_dereq_, module, exports) {
            "use strict";
            var React = _dereq_("./React");
            var CSSCore = _dereq_("./CSSCore");
            var ReactTransitionEvents = _dereq_("./ReactTransitionEvents");
            var onlyChild = _dereq_("./onlyChild");
            var TICK = 17;
            var NO_EVENT_TIMEOUT = 5e3;
            var noEventListener = null;
            if ("production" !== "development") noEventListener = function() {
                console.warn("transition(): tried to perform an animation without " + "an animationend or transitionend event after timeout (" + NO_EVENT_TIMEOUT + "ms). You should either disable this " + "transition in JS or add a CSS animation/transition.");
            };
            var ReactCSSTransitionGroupChild = React.createClass({
                "transition": function(animationType, finishCallback) {
                    var node = this.getDOMNode();
                    var className = this.props.name + "-" + animationType;
                    var activeClassName = className + "-active";
                    var noEventTimeout = null;
                    var endListener = function() {
                        if ("production" !== "development") clearTimeout(noEventTimeout);
                        CSSCore.removeClass(node, className);
                        CSSCore.removeClass(node, activeClassName);
                        ReactTransitionEvents.removeEndEventListener(node, endListener);
                        finishCallback && finishCallback();
                    };
                    ReactTransitionEvents.addEndEventListener(node, endListener);
                    CSSCore.addClass(node, className);
                    this.queueClass(activeClassName);
                    if ("production" !== "development") noEventTimeout = setTimeout(noEventListener, NO_EVENT_TIMEOUT);
                },
                "queueClass": function(className) {
                    this.classNameQueue.push(className);
                    if (this.props.runNextTick) {
                        this.props.runNextTick(this.flushClassNameQueue);
                        return;
                    }
                    if (!this.timeout) this.timeout = setTimeout(this.flushClassNameQueue, TICK);
                },
                "flushClassNameQueue": function() {
                    if (this.isMounted()) this.classNameQueue.forEach(CSSCore.addClass.bind(CSSCore, this.getDOMNode()));
                    this.classNameQueue.length = 0;
                    this.timeout = null;
                },
                "componentWillMount": function() {
                    this.classNameQueue = [];
                },
                "componentWillUnmount": function() {
                    if (this.timeout) clearTimeout(this.timeout);
                },
                "componentWillEnter": function(done) {
                    if (this.props.enter) this.transition("enter", done); else done();
                },
                "componentWillLeave": function(done) {
                    if (this.props.leave) this.transition("leave", done); else done();
                },
                "render": function() {
                    return onlyChild(this.props.children);
                }
            });
            module.exports = ReactCSSTransitionGroupChild;
        }, {
            "./CSSCore": 2,
            "./React": 26,
            "./ReactTransitionEvents": 79,
            "./onlyChild": 141
        } ],
        "30": [ function(_dereq_, module, exports) {
            "use strict";
            var PooledClass = _dereq_("./PooledClass");
            var invariant = _dereq_("./invariant");
            var traverseAllChildren = _dereq_("./traverseAllChildren");
            var twoArgumentPooler = PooledClass.twoArgumentPooler;
            var threeArgumentPooler = PooledClass.threeArgumentPooler;
            function ForEachBookKeeping(forEachFunction, forEachContext) {
                this.forEachFunction = forEachFunction;
                this.forEachContext = forEachContext;
            }
            PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);
            function forEachSingleChild(traverseContext, child, name, i) {
                var forEachBookKeeping = traverseContext;
                forEachBookKeeping.forEachFunction.call(forEachBookKeeping.forEachContext, child, i);
            }
            function forEachChildren(children, forEachFunc, forEachContext) {
                if (null == children) return children;
                var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
                traverseAllChildren(children, forEachSingleChild, traverseContext);
                ForEachBookKeeping.release(traverseContext);
            }
            function MapBookKeeping(mapResult, mapFunction, mapContext) {
                this.mapResult = mapResult;
                this.mapFunction = mapFunction;
                this.mapContext = mapContext;
            }
            PooledClass.addPoolingTo(MapBookKeeping, threeArgumentPooler);
            function mapSingleChildIntoContext(traverseContext, child, name, i) {
                var mapBookKeeping = traverseContext;
                var mapResult = mapBookKeeping.mapResult;
                var mappedChild = mapBookKeeping.mapFunction.call(mapBookKeeping.mapContext, child, i);
                "production" !== "development" ? invariant(!mapResult.hasOwnProperty(name), "ReactChildren.map(...): Encountered two children with the same key, " + "`%s`. Children keys must be unique.", name) : invariant(!mapResult.hasOwnProperty(name));
                mapResult[name] = mappedChild;
            }
            function mapChildren(children, func, context) {
                if (null == children) return children;
                var mapResult = {};
                var traverseContext = MapBookKeeping.getPooled(mapResult, func, context);
                traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
                MapBookKeeping.release(traverseContext);
                return mapResult;
            }
            var ReactChildren = {
                "forEach": forEachChildren,
                "map": mapChildren
            };
            module.exports = ReactChildren;
        }, {
            "./PooledClass": 25,
            "./invariant": 125,
            "./traverseAllChildren": 146
        } ],
        "31": [ function(_dereq_, module, exports) {
            "use strict";
            var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");
            var ReactOwner = _dereq_("./ReactOwner");
            var ReactUpdates = _dereq_("./ReactUpdates");
            var invariant = _dereq_("./invariant");
            var keyMirror = _dereq_("./keyMirror");
            var merge = _dereq_("./merge");
            var monitorCodeUse = _dereq_("./monitorCodeUse");
            var ComponentLifeCycle = keyMirror({
                "MOUNTED": null,
                "UNMOUNTED": null
            });
            var ownerHasExplicitKeyWarning = {};
            var ownerHasPropertyWarning = {};
            var ownerHasMonitoredObjectMap = {};
            var NUMERIC_PROPERTY_REGEX = /^\d+$/;
            var injected = false;
            var unmountIDFromEnvironment = null;
            var mountImageIntoNode = null;
            function validateExplicitKey(component) {
                if (component.__keyValidated__ || null != component.props.key) return;
                component.__keyValidated__ = true;
                if (!ReactCurrentOwner.current) return;
                var currentName = ReactCurrentOwner.current.constructor.displayName;
                if (ownerHasExplicitKeyWarning.hasOwnProperty(currentName)) return;
                ownerHasExplicitKeyWarning[currentName] = true;
                var message = 'Each child in an array should have a unique "key" prop. ' + "Check the render method of " + currentName + ".";
                var childOwnerName = null;
                if (!component.isOwnedBy(ReactCurrentOwner.current)) {
                    childOwnerName = component._owner && component._owner.constructor.displayName;
                    message += " It was passed a child from " + childOwnerName + ".";
                }
                message += " See http://fb.me/react-warning-keys for more information.";
                monitorCodeUse("react_key_warning", {
                    "component": currentName,
                    "componentOwner": childOwnerName
                });
                console.warn(message);
            }
            function validatePropertyKey(name) {
                if (NUMERIC_PROPERTY_REGEX.test(name)) {
                    var currentName = ReactCurrentOwner.current.constructor.displayName;
                    if (ownerHasPropertyWarning.hasOwnProperty(currentName)) return;
                    ownerHasPropertyWarning[currentName] = true;
                    monitorCodeUse("react_numeric_key_warning");
                    console.warn("Child objects should have non-numeric keys so ordering is preserved. " + "Check the render method of " + currentName + ". " + "See http://fb.me/react-warning-keys for more information.");
                }
            }
            function monitorUseOfObjectMap() {
                var currentName = ReactCurrentOwner.current && ReactCurrentOwner.current.constructor.displayName || "";
                if (ownerHasMonitoredObjectMap.hasOwnProperty(currentName)) return;
                ownerHasMonitoredObjectMap[currentName] = true;
                monitorCodeUse("react_object_map_children");
            }
            function validateChildKeys(component) {
                if (Array.isArray(component)) for (var i = 0; i < component.length; i++) {
                    var child = component[i];
                    if (ReactComponent.isValidComponent(child)) validateExplicitKey(child);
                } else if (ReactComponent.isValidComponent(component)) component.__keyValidated__ = true; else if (component && "object" === typeof component) {
                    monitorUseOfObjectMap();
                    for (var name in component) validatePropertyKey(name, component);
                }
            }
            var ReactComponent = {
                "injection": {
                    "injectEnvironment": function(ReactComponentEnvironment) {
                        "production" !== "development" ? invariant(!injected, "ReactComponent: injectEnvironment() can only be called once.") : invariant(!injected);
                        mountImageIntoNode = ReactComponentEnvironment.mountImageIntoNode;
                        unmountIDFromEnvironment = ReactComponentEnvironment.unmountIDFromEnvironment;
                        ReactComponent.BackendIDOperations = ReactComponentEnvironment.BackendIDOperations;
                        ReactComponent.ReactReconcileTransaction = ReactComponentEnvironment.ReactReconcileTransaction;
                        injected = true;
                    }
                },
                "isValidComponent": function(object) {
                    if (!object || !object.type || !object.type.prototype) return false;
                    var prototype = object.type.prototype;
                    return "function" === typeof prototype.mountComponentIntoNode && "function" === typeof prototype.receiveComponent;
                },
                "LifeCycle": ComponentLifeCycle,
                "BackendIDOperations": null,
                "ReactReconcileTransaction": null,
                "Mixin": {
                    "isMounted": function() {
                        return this._lifeCycleState === ComponentLifeCycle.MOUNTED;
                    },
                    "setProps": function(partialProps, callback) {
                        this.replaceProps(merge(this._pendingProps || this.props, partialProps), callback);
                    },
                    "replaceProps": function(props, callback) {
                        "production" !== "development" ? invariant(this.isMounted(), "replaceProps(...): Can only update a mounted component.") : invariant(this.isMounted());
                        "production" !== "development" ? invariant(0 === this._mountDepth, "replaceProps(...): You called `setProps` or `replaceProps` on a " + "component with a parent. This is an anti-pattern since props will " + "get reactively updated when rendered. Instead, change the owner's " + "`render` method to pass the correct value as props to the component " + "where it is created.") : invariant(0 === this._mountDepth);
                        this._pendingProps = props;
                        ReactUpdates.enqueueUpdate(this, callback);
                    },
                    "construct": function(initialProps, children) {
                        this.props = initialProps || {};
                        this._owner = ReactCurrentOwner.current;
                        this._lifeCycleState = ComponentLifeCycle.UNMOUNTED;
                        this._pendingProps = null;
                        this._pendingCallbacks = null;
                        this._pendingOwner = this._owner;
                        var childrenLength = arguments.length - 1;
                        if (1 === childrenLength) {
                            if ("production" !== "development") validateChildKeys(children);
                            this.props.children = children;
                        } else if (childrenLength > 1) {
                            var childArray = Array(childrenLength);
                            for (var i = 0; i < childrenLength; i++) {
                                if ("production" !== "development") validateChildKeys(arguments[i + 1]);
                                childArray[i] = arguments[i + 1];
                            }
                            this.props.children = childArray;
                        }
                    },
                    "mountComponent": function(rootID, transaction, mountDepth) {
                        "production" !== "development" ? invariant(!this.isMounted(), "mountComponent(%s, ...): Can only mount an unmounted component. " + "Make sure to avoid storing components between renders or reusing a " + "single component instance in multiple places.", rootID) : invariant(!this.isMounted());
                        var props = this.props;
                        if (null != props.ref) ReactOwner.addComponentAsRefTo(this, props.ref, this._owner);
                        this._rootNodeID = rootID;
                        this._lifeCycleState = ComponentLifeCycle.MOUNTED;
                        this._mountDepth = mountDepth;
                    },
                    "unmountComponent": function() {
                        "production" !== "development" ? invariant(this.isMounted(), "unmountComponent(): Can only unmount a mounted component.") : invariant(this.isMounted());
                        var props = this.props;
                        if (null != props.ref) ReactOwner.removeComponentAsRefFrom(this, props.ref, this._owner);
                        unmountIDFromEnvironment(this._rootNodeID);
                        this._rootNodeID = null;
                        this._lifeCycleState = ComponentLifeCycle.UNMOUNTED;
                    },
                    "receiveComponent": function(nextComponent, transaction) {
                        "production" !== "development" ? invariant(this.isMounted(), "receiveComponent(...): Can only update a mounted component.") : invariant(this.isMounted());
                        this._pendingOwner = nextComponent._owner;
                        this._pendingProps = nextComponent.props;
                        this._performUpdateIfNecessary(transaction);
                    },
                    "performUpdateIfNecessary": function() {
                        var transaction = ReactComponent.ReactReconcileTransaction.getPooled();
                        transaction.perform(this._performUpdateIfNecessary, this, transaction);
                        ReactComponent.ReactReconcileTransaction.release(transaction);
                    },
                    "_performUpdateIfNecessary": function(transaction) {
                        if (null == this._pendingProps) return;
                        var prevProps = this.props;
                        var prevOwner = this._owner;
                        this.props = this._pendingProps;
                        this._owner = this._pendingOwner;
                        this._pendingProps = null;
                        this.updateComponent(transaction, prevProps, prevOwner);
                    },
                    "updateComponent": function(transaction, prevProps, prevOwner) {
                        var props = this.props;
                        if (this._owner !== prevOwner || props.ref !== prevProps.ref) {
                            if (null != prevProps.ref) ReactOwner.removeComponentAsRefFrom(this, prevProps.ref, prevOwner);
                            if (null != props.ref) ReactOwner.addComponentAsRefTo(this, props.ref, this._owner);
                        }
                    },
                    "mountComponentIntoNode": function(rootID, container, shouldReuseMarkup) {
                        var transaction = ReactComponent.ReactReconcileTransaction.getPooled();
                        transaction.perform(this._mountComponentIntoNode, this, rootID, container, transaction, shouldReuseMarkup);
                        ReactComponent.ReactReconcileTransaction.release(transaction);
                    },
                    "_mountComponentIntoNode": function(rootID, container, transaction, shouldReuseMarkup) {
                        var markup = this.mountComponent(rootID, transaction, 0);
                        mountImageIntoNode(markup, container, shouldReuseMarkup);
                    },
                    "isOwnedBy": function(owner) {
                        return this._owner === owner;
                    },
                    "getSiblingByRef": function(ref) {
                        var owner = this._owner;
                        if (!owner || !owner.refs) return null;
                        return owner.refs[ref];
                    }
                }
            };
            module.exports = ReactComponent;
        }, {
            "./ReactCurrentOwner": 35,
            "./ReactOwner": 64,
            "./ReactUpdates": 81,
            "./invariant": 125,
            "./keyMirror": 131,
            "./merge": 134,
            "./monitorCodeUse": 138
        } ],
        "32": [ function(_dereq_, module, exports) {
            "use strict";
            var ReactDOMIDOperations = _dereq_("./ReactDOMIDOperations");
            var ReactMarkupChecksum = _dereq_("./ReactMarkupChecksum");
            var ReactMount = _dereq_("./ReactMount");
            var ReactPerf = _dereq_("./ReactPerf");
            var ReactReconcileTransaction = _dereq_("./ReactReconcileTransaction");
            var getReactRootElementInContainer = _dereq_("./getReactRootElementInContainer");
            var invariant = _dereq_("./invariant");
            var ELEMENT_NODE_TYPE = 1;
            var DOC_NODE_TYPE = 9;
            var ReactComponentBrowserEnvironment = {
                "ReactReconcileTransaction": ReactReconcileTransaction,
                "BackendIDOperations": ReactDOMIDOperations,
                "unmountIDFromEnvironment": function(rootNodeID) {
                    ReactMount.purgeID(rootNodeID);
                },
                "mountImageIntoNode": ReactPerf.measure("ReactComponentBrowserEnvironment", "mountImageIntoNode", function(markup, container, shouldReuseMarkup) {
                    "production" !== "development" ? invariant(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE), "mountComponentIntoNode(...): Target container is not valid.") : invariant(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE));
                    if (shouldReuseMarkup) if (ReactMarkupChecksum.canReuseMarkup(markup, getReactRootElementInContainer(container))) return; else {
                        "production" !== "development" ? invariant(container.nodeType !== DOC_NODE_TYPE, "You're trying to render a component to the document using " + "server rendering but the checksum was invalid. This usually " + "means you rendered a different component type or props on " + "the client from the one on the server, or your render() " + "methods are impure. React cannot handle this case due to " + "cross-browser quirks by rendering at the document root. You " + "should look for environment dependent code in your components " + "and ensure the props are the same client and server side.") : invariant(container.nodeType !== DOC_NODE_TYPE);
                        if ("production" !== "development") console.warn("React attempted to use reuse markup in a container but the " + "checksum was invalid. This generally means that you are " + "using server rendering and the markup generated on the " + "server was not what the client was expecting. React injected" + "new markup to compensate which works but you have lost many " + "of the benefits of server rendering. Instead, figure out " + "why the markup being generated is different on the client " + "or server.");
                    }
                    "production" !== "development" ? invariant(container.nodeType !== DOC_NODE_TYPE, "You're trying to render a component to the document but " + "you didn't use server rendering. We can't do this " + "without using server rendering due to cross-browser quirks. " + "See renderComponentToString() for server rendering.") : invariant(container.nodeType !== DOC_NODE_TYPE);
                    container.innerHTML = markup;
                })
            };
            module.exports = ReactComponentBrowserEnvironment;
        }, {
            "./ReactDOMIDOperations": 40,
            "./ReactMarkupChecksum": 59,
            "./ReactMount": 60,
            "./ReactPerf": 65,
            "./ReactReconcileTransaction": 71,
            "./getReactRootElementInContainer": 120,
            "./invariant": 125
        } ],
        "33": [ function(_dereq_, module, exports) {
            "use strict";
            var ReactComponent = _dereq_("./ReactComponent");
            var ReactContext = _dereq_("./ReactContext");
            var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");
            var ReactErrorUtils = _dereq_("./ReactErrorUtils");
            var ReactOwner = _dereq_("./ReactOwner");
            var ReactPerf = _dereq_("./ReactPerf");
            var ReactPropTransferer = _dereq_("./ReactPropTransferer");
            var ReactPropTypeLocations = _dereq_("./ReactPropTypeLocations");
            var ReactPropTypeLocationNames = _dereq_("./ReactPropTypeLocationNames");
            var ReactUpdates = _dereq_("./ReactUpdates");
            var instantiateReactComponent = _dereq_("./instantiateReactComponent");
            var invariant = _dereq_("./invariant");
            var keyMirror = _dereq_("./keyMirror");
            var merge = _dereq_("./merge");
            var mixInto = _dereq_("./mixInto");
            var monitorCodeUse = _dereq_("./monitorCodeUse");
            var objMap = _dereq_("./objMap");
            var shouldUpdateReactComponent = _dereq_("./shouldUpdateReactComponent");
            var warning = _dereq_("./warning");
            var SpecPolicy = keyMirror({
                "DEFINE_ONCE": null,
                "DEFINE_MANY": null,
                "OVERRIDE_BASE": null,
                "DEFINE_MANY_MERGED": null
            });
            var injectedMixins = [];
            var ReactCompositeComponentInterface = {
                "mixins": SpecPolicy.DEFINE_MANY,
                "statics": SpecPolicy.DEFINE_MANY,
                "propTypes": SpecPolicy.DEFINE_MANY,
                "contextTypes": SpecPolicy.DEFINE_MANY,
                "childContextTypes": SpecPolicy.DEFINE_MANY,
                "getDefaultProps": SpecPolicy.DEFINE_MANY_MERGED,
                "getInitialState": SpecPolicy.DEFINE_MANY_MERGED,
                "getChildContext": SpecPolicy.DEFINE_MANY_MERGED,
                "render": SpecPolicy.DEFINE_ONCE,
                "componentWillMount": SpecPolicy.DEFINE_MANY,
                "componentDidMount": SpecPolicy.DEFINE_MANY,
                "componentWillReceiveProps": SpecPolicy.DEFINE_MANY,
                "shouldComponentUpdate": SpecPolicy.DEFINE_ONCE,
                "componentWillUpdate": SpecPolicy.DEFINE_MANY,
                "componentDidUpdate": SpecPolicy.DEFINE_MANY,
                "componentWillUnmount": SpecPolicy.DEFINE_MANY,
                "updateComponent": SpecPolicy.OVERRIDE_BASE
            };
            var RESERVED_SPEC_KEYS = {
                "displayName": function(ConvenienceConstructor, displayName) {
                    ConvenienceConstructor.componentConstructor.displayName = displayName;
                },
                "mixins": function(ConvenienceConstructor, mixins) {
                    if (mixins) for (var i = 0; i < mixins.length; i++) mixSpecIntoComponent(ConvenienceConstructor, mixins[i]);
                },
                "childContextTypes": function(ConvenienceConstructor, childContextTypes) {
                    var Constructor = ConvenienceConstructor.componentConstructor;
                    validateTypeDef(Constructor, childContextTypes, ReactPropTypeLocations.childContext);
                    Constructor.childContextTypes = merge(Constructor.childContextTypes, childContextTypes);
                },
                "contextTypes": function(ConvenienceConstructor, contextTypes) {
                    var Constructor = ConvenienceConstructor.componentConstructor;
                    validateTypeDef(Constructor, contextTypes, ReactPropTypeLocations.context);
                    Constructor.contextTypes = merge(Constructor.contextTypes, contextTypes);
                },
                "propTypes": function(ConvenienceConstructor, propTypes) {
                    var Constructor = ConvenienceConstructor.componentConstructor;
                    validateTypeDef(Constructor, propTypes, ReactPropTypeLocations.prop);
                    Constructor.propTypes = merge(Constructor.propTypes, propTypes);
                },
                "statics": function(ConvenienceConstructor, statics) {
                    mixStaticSpecIntoComponent(ConvenienceConstructor, statics);
                }
            };
            function validateTypeDef(Constructor, typeDef, location) {
                for (var propName in typeDef) if (typeDef.hasOwnProperty(propName)) "production" !== "development" ? invariant("function" == typeof typeDef[propName], "%s: %s type `%s` is invalid; it must be a function, usually from " + "React.PropTypes.", Constructor.displayName || "ReactCompositeComponent", ReactPropTypeLocationNames[location], propName) : invariant("function" == typeof typeDef[propName]);
            }
            function validateMethodOverride(proto, name) {
                var specPolicy = ReactCompositeComponentInterface[name];
                if (ReactCompositeComponentMixin.hasOwnProperty(name)) "production" !== "development" ? invariant(specPolicy === SpecPolicy.OVERRIDE_BASE, "ReactCompositeComponentInterface: You are attempting to override " + "`%s` from your class specification. Ensure that your method names " + "do not overlap with React methods.", name) : invariant(specPolicy === SpecPolicy.OVERRIDE_BASE);
                if (proto.hasOwnProperty(name)) "production" !== "development" ? invariant(specPolicy === SpecPolicy.DEFINE_MANY || specPolicy === SpecPolicy.DEFINE_MANY_MERGED, "ReactCompositeComponentInterface: You are attempting to define " + "`%s` on your component more than once. This conflict may be due " + "to a mixin.", name) : invariant(specPolicy === SpecPolicy.DEFINE_MANY || specPolicy === SpecPolicy.DEFINE_MANY_MERGED);
            }
            function validateLifeCycleOnReplaceState(instance) {
                var compositeLifeCycleState = instance._compositeLifeCycleState;
                "production" !== "development" ? invariant(instance.isMounted() || compositeLifeCycleState === CompositeLifeCycle.MOUNTING, "replaceState(...): Can only update a mounted or mounting component.") : invariant(instance.isMounted() || compositeLifeCycleState === CompositeLifeCycle.MOUNTING);
                "production" !== "development" ? invariant(compositeLifeCycleState !== CompositeLifeCycle.RECEIVING_STATE, "replaceState(...): Cannot update during an existing state transition " + "(such as within `render`). This could potentially cause an infinite " + "loop so it is forbidden.") : invariant(compositeLifeCycleState !== CompositeLifeCycle.RECEIVING_STATE);
                "production" !== "development" ? invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING, "replaceState(...): Cannot update while unmounting component. This " + "usually means you called setState() on an unmounted component.") : invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING);
            }
            function mixSpecIntoComponent(ConvenienceConstructor, spec) {
                "production" !== "development" ? invariant(!isValidClass(spec), "ReactCompositeComponent: You're attempting to " + "use a component class as a mixin. Instead, just use a regular object.") : invariant(!isValidClass(spec));
                "production" !== "development" ? invariant(!ReactComponent.isValidComponent(spec), "ReactCompositeComponent: You're attempting to " + "use a component as a mixin. Instead, just use a regular object.") : invariant(!ReactComponent.isValidComponent(spec));
                var Constructor = ConvenienceConstructor.componentConstructor;
                var proto = Constructor.prototype;
                for (var name in spec) {
                    var property = spec[name];
                    if (!spec.hasOwnProperty(name)) continue;
                    validateMethodOverride(proto, name);
                    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) RESERVED_SPEC_KEYS[name](ConvenienceConstructor, property); else {
                        var isCompositeComponentMethod = name in ReactCompositeComponentInterface;
                        var isInherited = name in proto;
                        var markedDontBind = property && property.__reactDontBind;
                        var isFunction = "function" === typeof property;
                        var shouldAutoBind = isFunction && !isCompositeComponentMethod && !isInherited && !markedDontBind;
                        if (shouldAutoBind) {
                            if (!proto.__reactAutoBindMap) proto.__reactAutoBindMap = {};
                            proto.__reactAutoBindMap[name] = property;
                            proto[name] = property;
                        } else if (isInherited) if (ReactCompositeComponentInterface[name] === SpecPolicy.DEFINE_MANY_MERGED) proto[name] = createMergedResultFunction(proto[name], property); else proto[name] = createChainedFunction(proto[name], property); else proto[name] = property;
                    }
                }
            }
            function mixStaticSpecIntoComponent(ConvenienceConstructor, statics) {
                if (!statics) return;
                for (var name in statics) {
                    var property = statics[name];
                    if (!statics.hasOwnProperty(name)) return;
                    var isInherited = name in ConvenienceConstructor;
                    var result = property;
                    if (isInherited) {
                        var existingProperty = ConvenienceConstructor[name];
                        var existingType = typeof existingProperty;
                        var propertyType = typeof property;
                        "production" !== "development" ? invariant("function" === existingType && "function" === propertyType, "ReactCompositeComponent: You are attempting to define " + "`%s` on your component more than once, but that is only supported " + "for functions, which are chained together. This conflict may be " + "due to a mixin.", name) : invariant("function" === existingType && "function" === propertyType);
                        result = createChainedFunction(existingProperty, property);
                    }
                    ConvenienceConstructor[name] = result;
                    ConvenienceConstructor.componentConstructor[name] = result;
                }
            }
            function mergeObjectsWithNoDuplicateKeys(one, two) {
                "production" !== "development" ? invariant(one && two && "object" === typeof one && "object" === typeof two, "mergeObjectsWithNoDuplicateKeys(): Cannot merge non-objects") : invariant(one && two && "object" === typeof one && "object" === typeof two);
                objMap(two, function(value, key) {
                    "production" !== "development" ? invariant(void 0 === one[key], "mergeObjectsWithNoDuplicateKeys(): " + "Tried to merge two objects with the same key: %s", key) : invariant(void 0 === one[key]);
                    one[key] = value;
                });
                return one;
            }
            function createMergedResultFunction(one, two) {
                return function mergedResult() {
                    var a = one.apply(this, arguments);
                    var b = two.apply(this, arguments);
                    if (null == a) return b; else if (null == b) return a;
                    return mergeObjectsWithNoDuplicateKeys(a, b);
                };
            }
            function createChainedFunction(one, two) {
                return function chainedFunction() {
                    one.apply(this, arguments);
                    two.apply(this, arguments);
                };
            }
            if ("production" !== "development") {
                var unmountedPropertyWhitelist = {
                    "constructor": true,
                    "construct": true,
                    "isOwnedBy": true,
                    "type": true,
                    "props": true,
                    "__keyValidated__": true,
                    "_owner": true,
                    "_currentContext": true
                };
                var componentInstanceProperties = {
                    "__keyValidated__": true,
                    "__keySetters": true,
                    "_compositeLifeCycleState": true,
                    "_currentContext": true,
                    "_defaultProps": true,
                    "_instance": true,
                    "_lifeCycleState": true,
                    "_mountDepth": true,
                    "_owner": true,
                    "_pendingCallbacks": true,
                    "_pendingContext": true,
                    "_pendingForceUpdate": true,
                    "_pendingOwner": true,
                    "_pendingProps": true,
                    "_pendingState": true,
                    "_renderedComponent": true,
                    "_rootNodeID": true,
                    "context": true,
                    "props": true,
                    "refs": true,
                    "state": true,
                    "_pendingQueries": true,
                    "_queryPropListeners": true,
                    "queryParams": true
                };
                var hasWarnedOnComponentType = {};
                var warningStackCounter = 0;
                var issueMembraneWarning = function(instance, key) {
                    var isWhitelisted = unmountedPropertyWhitelist.hasOwnProperty(key);
                    if (warningStackCounter > 0 || isWhitelisted) return;
                    var name = instance.constructor.displayName || "Unknown";
                    var owner = ReactCurrentOwner.current;
                    var ownerName = owner && owner.constructor.displayName || "Unknown";
                    var warningKey = key + "|" + name + "|" + ownerName;
                    if (hasWarnedOnComponentType.hasOwnProperty(warningKey)) return;
                    hasWarnedOnComponentType[warningKey] = true;
                    var context = owner ? " in " + ownerName + "." : " at the top level.";
                    var staticMethodExample = "<" + name + " />.type." + key + "(...)";
                    monitorCodeUse("react_descriptor_property_access", {
                        "component": name
                    });
                    console.warn('Invalid access to component property "' + key + '" on ' + name + context + " See http://fb.me/react-warning-descriptors ." + " Use a static method instead: " + staticMethodExample);
                };
                var wrapInMembraneFunction = function(fn, thisBinding) {
                    if (fn.__reactMembraneFunction && fn.__reactMembraneSelf === thisBinding) return fn.__reactMembraneFunction;
                    return fn.__reactMembraneFunction = function() {
                        warningStackCounter++;
                        try {
                            var self = this === thisBinding ? this.__realComponentInstance : this;
                            return fn.apply(self, arguments);
                        } finally {
                            warningStackCounter--;
                        }
                    };
                };
                var defineMembraneProperty = function(membrane, prototype, key) {
                    Object.defineProperty(membrane, key, {
                        "configurable": false,
                        "enumerable": true,
                        "get": function() {
                            if (this === membrane) return prototype[key];
                            issueMembraneWarning(this, key);
                            var realValue = this.__realComponentInstance[key];
                            if ("function" === typeof realValue && "type" !== key && "constructor" !== key) return wrapInMembraneFunction(realValue, this);
                            return realValue;
                        },
                        "set": function(value) {
                            if (this === membrane) {
                                prototype[key] = value;
                                return;
                            }
                            issueMembraneWarning(this, key);
                            this.__realComponentInstance[key] = value;
                        }
                    });
                };
                var createMountWarningMembrane = function(prototype) {
                    var membrane = {};
                    var key;
                    for (key in prototype) defineMembraneProperty(membrane, prototype, key);
                    for (key in componentInstanceProperties) if (componentInstanceProperties.hasOwnProperty(key) && !(key in prototype)) defineMembraneProperty(membrane, prototype, key);
                    return membrane;
                };
                var createDescriptorProxy = function(constructor) {
                    try {
                        var ProxyConstructor = function() {
                            this.__realComponentInstance = new constructor();
                            Object.freeze(this);
                        };
                        ProxyConstructor.prototype = createMountWarningMembrane(constructor.prototype);
                        return ProxyConstructor;
                    } catch (x) {
                        return constructor;
                    }
                };
            }
            var CompositeLifeCycle = keyMirror({
                "MOUNTING": null,
                "UNMOUNTING": null,
                "RECEIVING_PROPS": null,
                "RECEIVING_STATE": null
            });
            var ReactCompositeComponentMixin = {
                "construct": function(initialProps, children) {
                    ReactComponent.Mixin.construct.apply(this, arguments);
                    ReactOwner.Mixin.construct.apply(this, arguments);
                    this.state = null;
                    this._pendingState = null;
                    this.context = null;
                    this._currentContext = ReactContext.current;
                    this._pendingContext = null;
                    this._descriptor = null;
                    this._compositeLifeCycleState = null;
                },
                "toJSON": function() {
                    return {
                        "type": this.type,
                        "props": this.props
                    };
                },
                "isMounted": function() {
                    return ReactComponent.Mixin.isMounted.call(this) && this._compositeLifeCycleState !== CompositeLifeCycle.MOUNTING;
                },
                "mountComponent": ReactPerf.measure("ReactCompositeComponent", "mountComponent", function(rootID, transaction, mountDepth) {
                    ReactComponent.Mixin.mountComponent.call(this, rootID, transaction, mountDepth);
                    this._compositeLifeCycleState = CompositeLifeCycle.MOUNTING;
                    this.context = this._processContext(this._currentContext);
                    this._defaultProps = this.getDefaultProps ? this.getDefaultProps() : null;
                    this.props = this._processProps(this.props);
                    if (this.__reactAutoBindMap) this._bindAutoBindMethods();
                    this.state = this.getInitialState ? this.getInitialState() : null;
                    "production" !== "development" ? invariant("object" === typeof this.state && !Array.isArray(this.state), "%s.getInitialState(): must return an object or null", this.constructor.displayName || "ReactCompositeComponent") : invariant("object" === typeof this.state && !Array.isArray(this.state));
                    this._pendingState = null;
                    this._pendingForceUpdate = false;
                    if (this.componentWillMount) {
                        this.componentWillMount();
                        if (this._pendingState) {
                            this.state = this._pendingState;
                            this._pendingState = null;
                        }
                    }
                    this._renderedComponent = instantiateReactComponent(this._renderValidatedComponent());
                    this._compositeLifeCycleState = null;
                    var markup = this._renderedComponent.mountComponent(rootID, transaction, mountDepth + 1);
                    if (this.componentDidMount) transaction.getReactMountReady().enqueue(this, this.componentDidMount);
                    return markup;
                }),
                "unmountComponent": function() {
                    this._compositeLifeCycleState = CompositeLifeCycle.UNMOUNTING;
                    if (this.componentWillUnmount) this.componentWillUnmount();
                    this._compositeLifeCycleState = null;
                    this._defaultProps = null;
                    this._renderedComponent.unmountComponent();
                    this._renderedComponent = null;
                    ReactComponent.Mixin.unmountComponent.call(this);
                },
                "setState": function(partialState, callback) {
                    "production" !== "development" ? invariant("object" === typeof partialState || null == partialState, "setState(...): takes an object of state variables to update.") : invariant("object" === typeof partialState || null == partialState);
                    if ("production" !== "development") "production" !== "development" ? warning(null != partialState, "setState(...): You passed an undefined or null state object; " + "instead, use forceUpdate().") : null;
                    this.replaceState(merge(this._pendingState || this.state, partialState), callback);
                },
                "replaceState": function(completeState, callback) {
                    validateLifeCycleOnReplaceState(this);
                    this._pendingState = completeState;
                    ReactUpdates.enqueueUpdate(this, callback);
                },
                "_processContext": function(context) {
                    var maskedContext = null;
                    var contextTypes = this.constructor.contextTypes;
                    if (contextTypes) {
                        maskedContext = {};
                        for (var contextName in contextTypes) maskedContext[contextName] = context[contextName];
                        if ("production" !== "development") this._checkPropTypes(contextTypes, maskedContext, ReactPropTypeLocations.context);
                    }
                    return maskedContext;
                },
                "_processChildContext": function(currentContext) {
                    var childContext = this.getChildContext && this.getChildContext();
                    var displayName = this.constructor.displayName || "ReactCompositeComponent";
                    if (childContext) {
                        "production" !== "development" ? invariant("object" === typeof this.constructor.childContextTypes, "%s.getChildContext(): childContextTypes must be defined in order to " + "use getChildContext().", displayName) : invariant("object" === typeof this.constructor.childContextTypes);
                        if ("production" !== "development") this._checkPropTypes(this.constructor.childContextTypes, childContext, ReactPropTypeLocations.childContext);
                        for (var name in childContext) "production" !== "development" ? invariant(name in this.constructor.childContextTypes, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', displayName, name) : invariant(name in this.constructor.childContextTypes);
                        return merge(currentContext, childContext);
                    }
                    return currentContext;
                },
                "_processProps": function(newProps) {
                    var props = merge(newProps);
                    var defaultProps = this._defaultProps;
                    for (var propName in defaultProps) if ("undefined" === typeof props[propName]) props[propName] = defaultProps[propName];
                    if ("production" !== "development") {
                        var propTypes = this.constructor.propTypes;
                        if (propTypes) this._checkPropTypes(propTypes, props, ReactPropTypeLocations.prop);
                    }
                    return props;
                },
                "_checkPropTypes": function(propTypes, props, location) {
                    var componentName = this.constructor.displayName;
                    for (var propName in propTypes) if (propTypes.hasOwnProperty(propName)) propTypes[propName](props, propName, componentName, location);
                },
                "performUpdateIfNecessary": function() {
                    var compositeLifeCycleState = this._compositeLifeCycleState;
                    if (compositeLifeCycleState === CompositeLifeCycle.MOUNTING || compositeLifeCycleState === CompositeLifeCycle.RECEIVING_PROPS) return;
                    ReactComponent.Mixin.performUpdateIfNecessary.call(this);
                },
                "_performUpdateIfNecessary": function(transaction) {
                    if (null == this._pendingProps && null == this._pendingState && null == this._pendingContext && !this._pendingForceUpdate) return;
                    var nextFullContext = this._pendingContext || this._currentContext;
                    var nextContext = this._processContext(nextFullContext);
                    this._pendingContext = null;
                    var nextProps = this.props;
                    if (null != this._pendingProps) {
                        nextProps = this._processProps(this._pendingProps);
                        this._pendingProps = null;
                        this._compositeLifeCycleState = CompositeLifeCycle.RECEIVING_PROPS;
                        if (this.componentWillReceiveProps) this.componentWillReceiveProps(nextProps, nextContext);
                    }
                    this._compositeLifeCycleState = CompositeLifeCycle.RECEIVING_STATE;
                    var nextOwner = this._pendingOwner;
                    var nextState = this._pendingState || this.state;
                    this._pendingState = null;
                    try {
                        if (this._pendingForceUpdate || !this.shouldComponentUpdate || this.shouldComponentUpdate(nextProps, nextState, nextContext)) {
                            this._pendingForceUpdate = false;
                            this._performComponentUpdate(nextProps, nextOwner, nextState, nextFullContext, nextContext, transaction);
                        } else {
                            this.props = nextProps;
                            this._owner = nextOwner;
                            this.state = nextState;
                            this._currentContext = nextFullContext;
                            this.context = nextContext;
                        }
                    } finally {
                        this._compositeLifeCycleState = null;
                    }
                },
                "_performComponentUpdate": function(nextProps, nextOwner, nextState, nextFullContext, nextContext, transaction) {
                    var prevProps = this.props;
                    var prevOwner = this._owner;
                    var prevState = this.state;
                    var prevContext = this.context;
                    if (this.componentWillUpdate) this.componentWillUpdate(nextProps, nextState, nextContext);
                    this.props = nextProps;
                    this._owner = nextOwner;
                    this.state = nextState;
                    this._currentContext = nextFullContext;
                    this.context = nextContext;
                    this.updateComponent(transaction, prevProps, prevOwner, prevState, prevContext);
                    if (this.componentDidUpdate) transaction.getReactMountReady().enqueue(this, this.componentDidUpdate.bind(this, prevProps, prevState, prevContext));
                },
                "receiveComponent": function(nextComponent, transaction) {
                    if (nextComponent === this._descriptor) return;
                    this._descriptor = nextComponent;
                    this._pendingContext = nextComponent._currentContext;
                    ReactComponent.Mixin.receiveComponent.call(this, nextComponent, transaction);
                },
                "updateComponent": ReactPerf.measure("ReactCompositeComponent", "updateComponent", function(transaction, prevProps, prevOwner, prevState, prevContext) {
                    ReactComponent.Mixin.updateComponent.call(this, transaction, prevProps, prevOwner);
                    var prevComponentInstance = this._renderedComponent;
                    var nextComponent = this._renderValidatedComponent();
                    if (shouldUpdateReactComponent(prevComponentInstance, nextComponent)) prevComponentInstance.receiveComponent(nextComponent, transaction); else {
                        var thisID = this._rootNodeID;
                        var prevComponentID = prevComponentInstance._rootNodeID;
                        prevComponentInstance.unmountComponent();
                        this._renderedComponent = instantiateReactComponent(nextComponent);
                        var nextMarkup = this._renderedComponent.mountComponent(thisID, transaction, this._mountDepth + 1);
                        ReactComponent.BackendIDOperations.dangerouslyReplaceNodeWithMarkupByID(prevComponentID, nextMarkup);
                    }
                }),
                "forceUpdate": function(callback) {
                    var compositeLifeCycleState = this._compositeLifeCycleState;
                    "production" !== "development" ? invariant(this.isMounted() || compositeLifeCycleState === CompositeLifeCycle.MOUNTING, "forceUpdate(...): Can only force an update on mounted or mounting " + "components.") : invariant(this.isMounted() || compositeLifeCycleState === CompositeLifeCycle.MOUNTING);
                    "production" !== "development" ? invariant(compositeLifeCycleState !== CompositeLifeCycle.RECEIVING_STATE && compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING, "forceUpdate(...): Cannot force an update while unmounting component " + "or during an existing state transition (such as within `render`).") : invariant(compositeLifeCycleState !== CompositeLifeCycle.RECEIVING_STATE && compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING);
                    this._pendingForceUpdate = true;
                    ReactUpdates.enqueueUpdate(this, callback);
                },
                "_renderValidatedComponent": ReactPerf.measure("ReactCompositeComponent", "_renderValidatedComponent", function() {
                    var renderedComponent;
                    var previousContext = ReactContext.current;
                    ReactContext.current = this._processChildContext(this._currentContext);
                    ReactCurrentOwner.current = this;
                    try {
                        renderedComponent = this.render();
                    } finally {
                        ReactContext.current = previousContext;
                        ReactCurrentOwner.current = null;
                    }
                    "production" !== "development" ? invariant(ReactComponent.isValidComponent(renderedComponent), "%s.render(): A valid ReactComponent must be returned. You may have " + "returned null, undefined, an array, or some other invalid object.", this.constructor.displayName || "ReactCompositeComponent") : invariant(ReactComponent.isValidComponent(renderedComponent));
                    return renderedComponent;
                }),
                "_bindAutoBindMethods": function() {
                    for (var autoBindKey in this.__reactAutoBindMap) {
                        if (!this.__reactAutoBindMap.hasOwnProperty(autoBindKey)) continue;
                        var method = this.__reactAutoBindMap[autoBindKey];
                        this[autoBindKey] = this._bindAutoBindMethod(ReactErrorUtils.guard(method, this.constructor.displayName + "." + autoBindKey));
                    }
                },
                "_bindAutoBindMethod": function(method) {
                    var component = this;
                    var boundMethod = function() {
                        return method.apply(component, arguments);
                    };
                    if ("production" !== "development") {
                        boundMethod.__reactBoundContext = component;
                        boundMethod.__reactBoundMethod = method;
                        boundMethod.__reactBoundArguments = null;
                        var componentName = component.constructor.displayName;
                        var _bind = boundMethod.bind;
                        boundMethod.bind = function(newThis) {
                            var args = Array.prototype.slice.call(arguments, 1);
                            if (newThis !== component && null !== newThis) {
                                monitorCodeUse("react_bind_warning", {
                                    "component": componentName
                                });
                                console.warn("bind(): React component methods may only be bound to the " + "component instance. See " + componentName);
                            } else if (!args.length) {
                                monitorCodeUse("react_bind_warning", {
                                    "component": componentName
                                });
                                console.warn("bind(): You are binding a component method to the component. " + "React does this for you automatically in a high-performance " + "way, so you can safely remove this call. See " + componentName);
                                return boundMethod;
                            }
                            var reboundMethod = _bind.apply(boundMethod, arguments);
                            reboundMethod.__reactBoundContext = component;
                            reboundMethod.__reactBoundMethod = method;
                            reboundMethod.__reactBoundArguments = args;
                            return reboundMethod;
                        };
                    }
                    return boundMethod;
                }
            };
            var ReactCompositeComponentBase = function() {};
            mixInto(ReactCompositeComponentBase, ReactComponent.Mixin);
            mixInto(ReactCompositeComponentBase, ReactOwner.Mixin);
            mixInto(ReactCompositeComponentBase, ReactPropTransferer.Mixin);
            mixInto(ReactCompositeComponentBase, ReactCompositeComponentMixin);
            function isValidClass(componentClass) {
                return componentClass instanceof Function && "componentConstructor" in componentClass && componentClass.componentConstructor instanceof Function;
            }
            var ReactCompositeComponent = {
                "LifeCycle": CompositeLifeCycle,
                "Base": ReactCompositeComponentBase,
                "createClass": function(spec) {
                    var Constructor = function() {};
                    Constructor.prototype = new ReactCompositeComponentBase();
                    Constructor.prototype.constructor = Constructor;
                    var DescriptorConstructor = Constructor;
                    var ConvenienceConstructor = function(props, children) {
                        var descriptor = new DescriptorConstructor();
                        descriptor.construct.apply(descriptor, arguments);
                        return descriptor;
                    };
                    ConvenienceConstructor.componentConstructor = Constructor;
                    Constructor.ConvenienceConstructor = ConvenienceConstructor;
                    ConvenienceConstructor.originalSpec = spec;
                    injectedMixins.forEach(mixSpecIntoComponent.bind(null, ConvenienceConstructor));
                    mixSpecIntoComponent(ConvenienceConstructor, spec);
                    "production" !== "development" ? invariant(Constructor.prototype.render, "createClass(...): Class specification must implement a `render` method.") : invariant(Constructor.prototype.render);
                    if ("production" !== "development") if (Constructor.prototype.componentShouldUpdate) {
                        monitorCodeUse("react_component_should_update_warning", {
                            "component": spec.displayName
                        });
                        console.warn((spec.displayName || "A component") + " has a method called " + "componentShouldUpdate(). Did you mean shouldComponentUpdate()? " + "The name is phrased as a question because the function is " + "expected to return a value.");
                    }
                    ConvenienceConstructor.type = Constructor;
                    Constructor.prototype.type = Constructor;
                    for (var methodName in ReactCompositeComponentInterface) if (!Constructor.prototype[methodName]) Constructor.prototype[methodName] = null;
                    if ("production" !== "development") DescriptorConstructor = createDescriptorProxy(Constructor);
                    return ConvenienceConstructor;
                },
                "isValidClass": isValidClass,
                "injection": {
                    "injectMixin": function(mixin) {
                        injectedMixins.push(mixin);
                    }
                }
            };
            module.exports = ReactCompositeComponent;
        }, {
            "./ReactComponent": 31,
            "./ReactContext": 34,
            "./ReactCurrentOwner": 35,
            "./ReactErrorUtils": 51,
            "./ReactOwner": 64,
            "./ReactPerf": 65,
            "./ReactPropTransferer": 66,
            "./ReactPropTypeLocationNames": 67,
            "./ReactPropTypeLocations": 68,
            "./ReactUpdates": 81,
            "./instantiateReactComponent": 124,
            "./invariant": 125,
            "./keyMirror": 131,
            "./merge": 134,
            "./mixInto": 137,
            "./monitorCodeUse": 138,
            "./objMap": 139,
            "./shouldUpdateReactComponent": 144,
            "./warning": 148
        } ],
        "34": [ function(_dereq_, module, exports) {
            "use strict";
            var merge = _dereq_("./merge");
            var ReactContext = {
                "current": {},
                "withContext": function(newContext, scopedCallback) {
                    var result;
                    var previousContext = ReactContext.current;
                    ReactContext.current = merge(previousContext, newContext);
                    try {
                        result = scopedCallback();
                    } finally {
                        ReactContext.current = previousContext;
                    }
                    return result;
                }
            };
            module.exports = ReactContext;
        }, {
            "./merge": 134
        } ],
        "35": [ function(_dereq_, module, exports) {
            "use strict";
            var ReactCurrentOwner = {
                "current": null
            };
            module.exports = ReactCurrentOwner;
        }, {} ],
        "36": [ function(_dereq_, module, exports) {
            "use strict";
            var ReactDOMComponent = _dereq_("./ReactDOMComponent");
            var mergeInto = _dereq_("./mergeInto");
            var objMapKeyVal = _dereq_("./objMapKeyVal");
            function createDOMComponentClass(tag, omitClose) {
                var Constructor = function() {};
                Constructor.prototype = new ReactDOMComponent(tag, omitClose);
                Constructor.prototype.constructor = Constructor;
                Constructor.displayName = tag;
                var ConvenienceConstructor = function(props, children) {
                    var instance = new Constructor();
                    instance.construct.apply(instance, arguments);
                    return instance;
                };
                ConvenienceConstructor.type = Constructor;
                Constructor.prototype.type = Constructor;
                Constructor.ConvenienceConstructor = ConvenienceConstructor;
                ConvenienceConstructor.componentConstructor = Constructor;
                return ConvenienceConstructor;
            }
            var ReactDOM = objMapKeyVal({
                "a": false,
                "abbr": false,
                "address": false,
                "area": true,
                "article": false,
                "aside": false,
                "audio": false,
                "b": false,
                "base": true,
                "bdi": false,
                "bdo": false,
                "big": false,
                "blockquote": false,
                "body": false,
                "br": true,
                "button": false,
                "canvas": false,
                "caption": false,
                "cite": false,
                "code": false,
                "col": true,
                "colgroup": false,
                "data": false,
                "datalist": false,
                "dd": false,
                "del": false,
                "details": false,
                "dfn": false,
                "div": false,
                "dl": false,
                "dt": false,
                "em": false,
                "embed": true,
                "fieldset": false,
                "figcaption": false,
                "figure": false,
                "footer": false,
                "form": false,
                "h1": false,
                "h2": false,
                "h3": false,
                "h4": false,
                "h5": false,
                "h6": false,
                "head": false,
                "header": false,
                "hr": true,
                "html": false,
                "i": false,
                "iframe": false,
                "img": true,
                "input": true,
                "ins": false,
                "kbd": false,
                "keygen": true,
                "label": false,
                "legend": false,
                "li": false,
                "link": true,
                "main": false,
                "map": false,
                "mark": false,
                "menu": false,
                "menuitem": false,
                "meta": true,
                "meter": false,
                "nav": false,
                "noscript": false,
                "object": false,
                "ol": false,
                "optgroup": false,
                "option": false,
                "output": false,
                "p": false,
                "param": true,
                "pre": false,
                "progress": false,
                "q": false,
                "rp": false,
                "rt": false,
                "ruby": false,
                "s": false,
                "samp": false,
                "script": false,
                "section": false,
                "select": false,
                "small": false,
                "source": true,
                "span": false,
                "strong": false,
                "style": false,
                "sub": false,
                "summary": false,
                "sup": false,
                "table": false,
                "tbody": false,
                "td": false,
                "textarea": false,
                "tfoot": false,
                "th": false,
                "thead": false,
                "time": false,
                "title": false,
                "tr": false,
                "track": true,
                "u": false,
                "ul": false,
                "var": false,
                "video": false,
                "wbr": true,
                "circle": false,
                "defs": false,
                "g": false,
                "line": false,
                "linearGradient": false,
                "path": false,
                "polygon": false,
                "polyline": false,
                "radialGradient": false,
                "rect": false,
                "stop": false,
                "svg": false,
                "text": false
            }, createDOMComponentClass);
            var injection = {
                "injectComponentClasses": function(componentClasses) {
                    mergeInto(ReactDOM, componentClasses);
                }
            };
            ReactDOM.injection = injection;
            module.exports = ReactDOM;
        }, {
            "./ReactDOMComponent": 38,
            "./mergeInto": 136,
            "./objMapKeyVal": 140
        } ],
        "37": [ function(_dereq_, module, exports) {
            "use strict";
            var AutoFocusMixin = _dereq_("./AutoFocusMixin");
            var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
            var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
            var ReactDOM = _dereq_("./ReactDOM");
            var keyMirror = _dereq_("./keyMirror");
            var button = ReactDOM.button;
            var mouseListenerNames = keyMirror({
                "onClick": true,
                "onDoubleClick": true,
                "onMouseDown": true,
                "onMouseMove": true,
                "onMouseUp": true,
                "onClickCapture": true,
                "onDoubleClickCapture": true,
                "onMouseDownCapture": true,
                "onMouseMoveCapture": true,
                "onMouseUpCapture": true
            });
            var ReactDOMButton = ReactCompositeComponent.createClass({
                "displayName": "ReactDOMButton",
                "mixins": [ AutoFocusMixin, ReactBrowserComponentMixin ],
                "render": function() {
                    var props = {};
                    for (var key in this.props) if (this.props.hasOwnProperty(key) && (!this.props.disabled || !mouseListenerNames[key])) props[key] = this.props[key];
                    return button(props, this.props.children);
                }
            });
            module.exports = ReactDOMButton;
        }, {
            "./AutoFocusMixin": 1,
            "./ReactBrowserComponentMixin": 27,
            "./ReactCompositeComponent": 33,
            "./ReactDOM": 36,
            "./keyMirror": 131
        } ],
        "38": [ function(_dereq_, module, exports) {
            "use strict";
            var CSSPropertyOperations = _dereq_("./CSSPropertyOperations");
            var DOMProperty = _dereq_("./DOMProperty");
            var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
            var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
            var ReactComponent = _dereq_("./ReactComponent");
            var ReactEventEmitter = _dereq_("./ReactEventEmitter");
            var ReactMount = _dereq_("./ReactMount");
            var ReactMultiChild = _dereq_("./ReactMultiChild");
            var ReactPerf = _dereq_("./ReactPerf");
            var escapeTextForBrowser = _dereq_("./escapeTextForBrowser");
            var invariant = _dereq_("./invariant");
            var keyOf = _dereq_("./keyOf");
            var merge = _dereq_("./merge");
            var mixInto = _dereq_("./mixInto");
            var deleteListener = ReactEventEmitter.deleteListener;
            var listenTo = ReactEventEmitter.listenTo;
            var registrationNameModules = ReactEventEmitter.registrationNameModules;
            var CONTENT_TYPES = {
                "string": true,
                "number": true
            };
            var STYLE = keyOf({
                "style": null
            });
            var ELEMENT_NODE_TYPE = 1;
            function assertValidProps(props) {
                if (!props) return;
                "production" !== "development" ? invariant(null == props.children || null == props.dangerouslySetInnerHTML, "Can only set one of `children` or `props.dangerouslySetInnerHTML`.") : invariant(null == props.children || null == props.dangerouslySetInnerHTML);
                "production" !== "development" ? invariant(null == props.style || "object" === typeof props.style, "The `style` prop expects a mapping from style properties to values, " + "not a string.") : invariant(null == props.style || "object" === typeof props.style);
            }
            function putListener(id, registrationName, listener, transaction) {
                var container = ReactMount.findReactContainerForID(id);
                if (container) {
                    var doc = container.nodeType === ELEMENT_NODE_TYPE ? container.ownerDocument : container;
                    listenTo(registrationName, doc);
                }
                transaction.getPutListenerQueue().enqueuePutListener(id, registrationName, listener);
            }
            function ReactDOMComponent(tag, omitClose) {
                this._tagOpen = "<" + tag;
                this._tagClose = omitClose ? "" : "</" + tag + ">";
                this.tagName = tag.toUpperCase();
            }
            ReactDOMComponent.Mixin = {
                "mountComponent": ReactPerf.measure("ReactDOMComponent", "mountComponent", function(rootID, transaction, mountDepth) {
                    ReactComponent.Mixin.mountComponent.call(this, rootID, transaction, mountDepth);
                    assertValidProps(this.props);
                    return this._createOpenTagMarkupAndPutListeners(transaction) + this._createContentMarkup(transaction) + this._tagClose;
                }),
                "_createOpenTagMarkupAndPutListeners": function(transaction) {
                    var props = this.props;
                    var ret = this._tagOpen;
                    for (var propKey in props) {
                        if (!props.hasOwnProperty(propKey)) continue;
                        var propValue = props[propKey];
                        if (null == propValue) continue;
                        if (registrationNameModules[propKey]) putListener(this._rootNodeID, propKey, propValue, transaction); else {
                            if (propKey === STYLE) {
                                if (propValue) propValue = props.style = merge(props.style);
                                propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
                            }
                            var markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
                            if (markup) ret += " " + markup;
                        }
                    }
                    if (transaction.renderToStaticMarkup) return ret + ">";
                    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
                    return ret + " " + markupForID + ">";
                },
                "_createContentMarkup": function(transaction) {
                    var innerHTML = this.props.dangerouslySetInnerHTML;
                    if (null != innerHTML) {
                        if (null != innerHTML.__html) return innerHTML.__html;
                    } else {
                        var contentToUse = CONTENT_TYPES[typeof this.props.children] ? this.props.children : null;
                        var childrenToUse = null != contentToUse ? null : this.props.children;
                        if (null != contentToUse) return escapeTextForBrowser(contentToUse); else if (null != childrenToUse) {
                            var mountImages = this.mountChildren(childrenToUse, transaction);
                            return mountImages.join("");
                        }
                    }
                    return "";
                },
                "receiveComponent": function(nextComponent, transaction) {
                    if (nextComponent === this) return;
                    assertValidProps(nextComponent.props);
                    ReactComponent.Mixin.receiveComponent.call(this, nextComponent, transaction);
                },
                "updateComponent": ReactPerf.measure("ReactDOMComponent", "updateComponent", function(transaction, prevProps, prevOwner) {
                    ReactComponent.Mixin.updateComponent.call(this, transaction, prevProps, prevOwner);
                    this._updateDOMProperties(prevProps, transaction);
                    this._updateDOMChildren(prevProps, transaction);
                }),
                "_updateDOMProperties": function(lastProps, transaction) {
                    var nextProps = this.props;
                    var propKey;
                    var styleName;
                    var styleUpdates;
                    for (propKey in lastProps) {
                        if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey)) continue;
                        if (propKey === STYLE) {
                            var lastStyle = lastProps[propKey];
                            for (styleName in lastStyle) if (lastStyle.hasOwnProperty(styleName)) {
                                styleUpdates = styleUpdates || {};
                                styleUpdates[styleName] = "";
                            }
                        } else if (registrationNameModules[propKey]) deleteListener(this._rootNodeID, propKey); else if (DOMProperty.isStandardName[propKey] || DOMProperty.isCustomAttribute(propKey)) ReactComponent.BackendIDOperations.deletePropertyByID(this._rootNodeID, propKey);
                    }
                    for (propKey in nextProps) {
                        var nextProp = nextProps[propKey];
                        var lastProp = lastProps[propKey];
                        if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) continue;
                        if (propKey === STYLE) {
                            if (nextProp) nextProp = nextProps.style = merge(nextProp);
                            if (lastProp) {
                                for (styleName in lastProp) if (lastProp.hasOwnProperty(styleName) && !nextProp.hasOwnProperty(styleName)) {
                                    styleUpdates = styleUpdates || {};
                                    styleUpdates[styleName] = "";
                                }
                                for (styleName in nextProp) if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                                    styleUpdates = styleUpdates || {};
                                    styleUpdates[styleName] = nextProp[styleName];
                                }
                            } else styleUpdates = nextProp;
                        } else if (registrationNameModules[propKey]) putListener(this._rootNodeID, propKey, nextProp, transaction); else if (DOMProperty.isStandardName[propKey] || DOMProperty.isCustomAttribute(propKey)) ReactComponent.BackendIDOperations.updatePropertyByID(this._rootNodeID, propKey, nextProp);
                    }
                    if (styleUpdates) ReactComponent.BackendIDOperations.updateStylesByID(this._rootNodeID, styleUpdates);
                },
                "_updateDOMChildren": function(lastProps, transaction) {
                    var nextProps = this.props;
                    var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
                    var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;
                    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
                    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;
                    var lastChildren = null != lastContent ? null : lastProps.children;
                    var nextChildren = null != nextContent ? null : nextProps.children;
                    var lastHasContentOrHtml = null != lastContent || null != lastHtml;
                    var nextHasContentOrHtml = null != nextContent || null != nextHtml;
                    if (null != lastChildren && null == nextChildren) this.updateChildren(null, transaction); else if (lastHasContentOrHtml && !nextHasContentOrHtml) this.updateTextContent("");
                    if (null != nextContent) {
                        if (lastContent !== nextContent) this.updateTextContent("" + nextContent);
                    } else if (null != nextHtml) {
                        if (lastHtml !== nextHtml) ReactComponent.BackendIDOperations.updateInnerHTMLByID(this._rootNodeID, nextHtml);
                    } else if (null != nextChildren) this.updateChildren(nextChildren, transaction);
                },
                "unmountComponent": function() {
                    this.unmountChildren();
                    ReactEventEmitter.deleteAllListeners(this._rootNodeID);
                    ReactComponent.Mixin.unmountComponent.call(this);
                }
            };
            mixInto(ReactDOMComponent, ReactComponent.Mixin);
            mixInto(ReactDOMComponent, ReactDOMComponent.Mixin);
            mixInto(ReactDOMComponent, ReactMultiChild.Mixin);
            mixInto(ReactDOMComponent, ReactBrowserComponentMixin);
            module.exports = ReactDOMComponent;
        }, {
            "./CSSPropertyOperations": 4,
            "./DOMProperty": 9,
            "./DOMPropertyOperations": 10,
            "./ReactBrowserComponentMixin": 27,
            "./ReactComponent": 31,
            "./ReactEventEmitter": 52,
            "./ReactMount": 60,
            "./ReactMultiChild": 62,
            "./ReactPerf": 65,
            "./escapeTextForBrowser": 111,
            "./invariant": 125,
            "./keyOf": 132,
            "./merge": 134,
            "./mixInto": 137
        } ],
        "39": [ function(_dereq_, module, exports) {
            "use strict";
            var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
            var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
            var ReactDOM = _dereq_("./ReactDOM");
            var ReactEventEmitter = _dereq_("./ReactEventEmitter");
            var EventConstants = _dereq_("./EventConstants");
            var form = ReactDOM.form;
            var ReactDOMForm = ReactCompositeComponent.createClass({
                "displayName": "ReactDOMForm",
                "mixins": [ ReactBrowserComponentMixin ],
                "render": function() {
                    return this.transferPropsTo(form(null, this.props.children));
                },
                "componentDidMount": function() {
                    ReactEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topReset, "reset", this.getDOMNode());
                    ReactEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, "submit", this.getDOMNode());
                }
            });
            module.exports = ReactDOMForm;
        }, {
            "./EventConstants": 15,
            "./ReactBrowserComponentMixin": 27,
            "./ReactCompositeComponent": 33,
            "./ReactDOM": 36,
            "./ReactEventEmitter": 52
        } ],
        "40": [ function(_dereq_, module, exports) {
            "use strict";
            var CSSPropertyOperations = _dereq_("./CSSPropertyOperations");
            var DOMChildrenOperations = _dereq_("./DOMChildrenOperations");
            var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
            var ReactMount = _dereq_("./ReactMount");
            var ReactPerf = _dereq_("./ReactPerf");
            var invariant = _dereq_("./invariant");
            var INVALID_PROPERTY_ERRORS = {
                "dangerouslySetInnerHTML": "`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.",
                "style": "`style` must be set using `updateStylesByID()`."
            };
            var useWhitespaceWorkaround;
            var ReactDOMIDOperations = {
                "updatePropertyByID": ReactPerf.measure("ReactDOMIDOperations", "updatePropertyByID", function(id, name, value) {
                    var node = ReactMount.getNode(id);
                    "production" !== "development" ? invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name), "updatePropertyByID(...): %s", INVALID_PROPERTY_ERRORS[name]) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name));
                    if (null != value) DOMPropertyOperations.setValueForProperty(node, name, value); else DOMPropertyOperations.deleteValueForProperty(node, name);
                }),
                "deletePropertyByID": ReactPerf.measure("ReactDOMIDOperations", "deletePropertyByID", function(id, name, value) {
                    var node = ReactMount.getNode(id);
                    "production" !== "development" ? invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name), "updatePropertyByID(...): %s", INVALID_PROPERTY_ERRORS[name]) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name));
                    DOMPropertyOperations.deleteValueForProperty(node, name, value);
                }),
                "updateStylesByID": ReactPerf.measure("ReactDOMIDOperations", "updateStylesByID", function(id, styles) {
                    var node = ReactMount.getNode(id);
                    CSSPropertyOperations.setValueForStyles(node, styles);
                }),
                "updateInnerHTMLByID": ReactPerf.measure("ReactDOMIDOperations", "updateInnerHTMLByID", function(id, html) {
                    var node = ReactMount.getNode(id);
                    if (void 0 === useWhitespaceWorkaround) {
                        var temp = document.createElement("div");
                        temp.innerHTML = " ";
                        useWhitespaceWorkaround = "" === temp.innerHTML;
                    }
                    if (useWhitespaceWorkaround) node.parentNode.replaceChild(node, node);
                    if (useWhitespaceWorkaround && html.match(/^[ \r\n\t\f]/)) {
                        node.innerHTML = "\ufeff" + html;
                        node.firstChild.deleteData(0, 1);
                    } else node.innerHTML = html;
                }),
                "updateTextContentByID": ReactPerf.measure("ReactDOMIDOperations", "updateTextContentByID", function(id, content) {
                    var node = ReactMount.getNode(id);
                    DOMChildrenOperations.updateTextContent(node, content);
                }),
                "dangerouslyReplaceNodeWithMarkupByID": ReactPerf.measure("ReactDOMIDOperations", "dangerouslyReplaceNodeWithMarkupByID", function(id, markup) {
                    var node = ReactMount.getNode(id);
                    DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);
                }),
                "dangerouslyProcessChildrenUpdates": ReactPerf.measure("ReactDOMIDOperations", "dangerouslyProcessChildrenUpdates", function(updates, markup) {
                    for (var i = 0; i < updates.length; i++) updates[i].parentNode = ReactMount.getNode(updates[i].parentID);
                    DOMChildrenOperations.processUpdates(updates, markup);
                })
            };
            module.exports = ReactDOMIDOperations;
        }, {
            "./CSSPropertyOperations": 4,
            "./DOMChildrenOperations": 8,
            "./DOMPropertyOperations": 10,
            "./ReactMount": 60,
            "./ReactPerf": 65,
            "./invariant": 125
        } ],
        "41": [ function(_dereq_, module, exports) {
            "use strict";
            var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
            var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
            var ReactDOM = _dereq_("./ReactDOM");
            var ReactEventEmitter = _dereq_("./ReactEventEmitter");
            var EventConstants = _dereq_("./EventConstants");
            var img = ReactDOM.img;
            var ReactDOMImg = ReactCompositeComponent.createClass({
                "displayName": "ReactDOMImg",
                "tagName": "IMG",
                "mixins": [ ReactBrowserComponentMixin ],
                "render": function() {
                    return img(this.props);
                },
                "componentDidMount": function() {
                    var node = this.getDOMNode();
                    ReactEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, "load", node);
                    ReactEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topError, "error", node);
                }
            });
            module.exports = ReactDOMImg;
        }, {
            "./EventConstants": 15,
            "./ReactBrowserComponentMixin": 27,
            "./ReactCompositeComponent": 33,
            "./ReactDOM": 36,
            "./ReactEventEmitter": 52
        } ],
        "42": [ function(_dereq_, module, exports) {
            "use strict";
            var AutoFocusMixin = _dereq_("./AutoFocusMixin");
            var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
            var LinkedValueUtils = _dereq_("./LinkedValueUtils");
            var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
            var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
            var ReactDOM = _dereq_("./ReactDOM");
            var ReactMount = _dereq_("./ReactMount");
            var invariant = _dereq_("./invariant");
            var merge = _dereq_("./merge");
            var input = ReactDOM.input;
            var instancesByReactID = {};
            var ReactDOMInput = ReactCompositeComponent.createClass({
                "displayName": "ReactDOMInput",
                "mixins": [ AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin ],
                "getInitialState": function() {
                    var defaultValue = this.props.defaultValue;
                    return {
                        "checked": this.props.defaultChecked || false,
                        "value": null != defaultValue ? defaultValue : null
                    };
                },
                "shouldComponentUpdate": function() {
                    return !this._isChanging;
                },
                "render": function() {
                    var props = merge(this.props);
                    props.defaultChecked = null;
                    props.defaultValue = null;
                    var value = LinkedValueUtils.getValue(this);
                    props.value = null != value ? value : this.state.value;
                    var checked = LinkedValueUtils.getChecked(this);
                    props.checked = null != checked ? checked : this.state.checked;
                    props.onChange = this._handleChange;
                    return input(props, this.props.children);
                },
                "componentDidMount": function() {
                    var id = ReactMount.getID(this.getDOMNode());
                    instancesByReactID[id] = this;
                },
                "componentWillUnmount": function() {
                    var rootNode = this.getDOMNode();
                    var id = ReactMount.getID(rootNode);
                    delete instancesByReactID[id];
                },
                "componentDidUpdate": function(prevProps, prevState, prevContext) {
                    var rootNode = this.getDOMNode();
                    if (null != this.props.checked) DOMPropertyOperations.setValueForProperty(rootNode, "checked", this.props.checked || false);
                    var value = LinkedValueUtils.getValue(this);
                    if (null != value) DOMPropertyOperations.setValueForProperty(rootNode, "value", "" + value);
                },
                "_handleChange": function(event) {
                    var returnValue;
                    var onChange = LinkedValueUtils.getOnChange(this);
                    if (onChange) {
                        this._isChanging = true;
                        returnValue = onChange.call(this, event);
                        this._isChanging = false;
                    }
                    this.setState({
                        "checked": event.target.checked,
                        "value": event.target.value
                    });
                    var name = this.props.name;
                    if ("radio" === this.props.type && null != name) {
                        var rootNode = this.getDOMNode();
                        var queryRoot = rootNode;
                        while (queryRoot.parentNode) queryRoot = queryRoot.parentNode;
                        var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
                        for (var i = 0, groupLen = group.length; i < groupLen; i++) {
                            var otherNode = group[i];
                            if (otherNode === rootNode || otherNode.form !== rootNode.form) continue;
                            var otherID = ReactMount.getID(otherNode);
                            "production" !== "development" ? invariant(otherID, "ReactDOMInput: Mixing React and non-React radio inputs with the " + "same `name` is not supported.") : invariant(otherID);
                            var otherInstance = instancesByReactID[otherID];
                            "production" !== "development" ? invariant(otherInstance, "ReactDOMInput: Unknown radio button ID %s.", otherID) : invariant(otherInstance);
                            otherInstance.setState({
                                "checked": false
                            });
                        }
                    }
                    return returnValue;
                }
            });
            module.exports = ReactDOMInput;
        }, {
            "./AutoFocusMixin": 1,
            "./DOMPropertyOperations": 10,
            "./LinkedValueUtils": 23,
            "./ReactBrowserComponentMixin": 27,
            "./ReactCompositeComponent": 33,
            "./ReactDOM": 36,
            "./ReactMount": 60,
            "./invariant": 125,
            "./merge": 134
        } ],
        "43": [ function(_dereq_, module, exports) {
            "use strict";
            var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
            var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
            var ReactDOM = _dereq_("./ReactDOM");
            var warning = _dereq_("./warning");
            var option = ReactDOM.option;
            var ReactDOMOption = ReactCompositeComponent.createClass({
                "displayName": "ReactDOMOption",
                "mixins": [ ReactBrowserComponentMixin ],
                "componentWillMount": function() {
                    if ("production" !== "development") "production" !== "development" ? warning(null == this.props.selected, "Use the `defaultValue` or `value` props on <select> instead of " + "setting `selected` on <option>.") : null;
                },
                "render": function() {
                    return option(this.props, this.props.children);
                }
            });
            module.exports = ReactDOMOption;
        }, {
            "./ReactBrowserComponentMixin": 27,
            "./ReactCompositeComponent": 33,
            "./ReactDOM": 36,
            "./warning": 148
        } ],
        "44": [ function(_dereq_, module, exports) {
            "use strict";
            var AutoFocusMixin = _dereq_("./AutoFocusMixin");
            var LinkedValueUtils = _dereq_("./LinkedValueUtils");
            var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
            var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
            var ReactDOM = _dereq_("./ReactDOM");
            var invariant = _dereq_("./invariant");
            var merge = _dereq_("./merge");
            var select = ReactDOM.select;
            function selectValueType(props, propName, componentName) {
                if (null == props[propName]) return;
                if (props.multiple) "production" !== "development" ? invariant(Array.isArray(props[propName]), "The `%s` prop supplied to <select> must be an array if `multiple` is " + "true.", propName) : invariant(Array.isArray(props[propName])); else "production" !== "development" ? invariant(!Array.isArray(props[propName]), "The `%s` prop supplied to <select> must be a scalar value if " + "`multiple` is false.", propName) : invariant(!Array.isArray(props[propName]));
            }
            function updateOptions(component, propValue) {
                var multiple = component.props.multiple;
                var value = null != propValue ? propValue : component.state.value;
                var options = component.getDOMNode().options;
                var selectedValue, i, l;
                if (multiple) {
                    selectedValue = {};
                    for (i = 0, l = value.length; i < l; ++i) selectedValue["" + value[i]] = true;
                } else selectedValue = "" + value;
                for (i = 0, l = options.length; i < l; i++) {
                    var selected = multiple ? selectedValue.hasOwnProperty(options[i].value) : options[i].value === selectedValue;
                    if (selected !== options[i].selected) options[i].selected = selected;
                }
            }
            var ReactDOMSelect = ReactCompositeComponent.createClass({
                "displayName": "ReactDOMSelect",
                "mixins": [ AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin ],
                "propTypes": {
                    "defaultValue": selectValueType,
                    "value": selectValueType
                },
                "getInitialState": function() {
                    return {
                        "value": this.props.defaultValue || (this.props.multiple ? [] : "")
                    };
                },
                "componentWillReceiveProps": function(nextProps) {
                    if (!this.props.multiple && nextProps.multiple) this.setState({
                        "value": [ this.state.value ]
                    }); else if (this.props.multiple && !nextProps.multiple) this.setState({
                        "value": this.state.value[0]
                    });
                },
                "shouldComponentUpdate": function() {
                    return !this._isChanging;
                },
                "render": function() {
                    var props = merge(this.props);
                    props.onChange = this._handleChange;
                    props.value = null;
                    return select(props, this.props.children);
                },
                "componentDidMount": function() {
                    updateOptions(this, LinkedValueUtils.getValue(this));
                },
                "componentDidUpdate": function() {
                    var value = LinkedValueUtils.getValue(this);
                    if (null != value) updateOptions(this, value);
                },
                "_handleChange": function(event) {
                    var returnValue;
                    var onChange = LinkedValueUtils.getOnChange(this);
                    if (onChange) {
                        this._isChanging = true;
                        returnValue = onChange.call(this, event);
                        this._isChanging = false;
                    }
                    var selectedValue;
                    if (this.props.multiple) {
                        selectedValue = [];
                        var options = event.target.options;
                        for (var i = 0, l = options.length; i < l; i++) if (options[i].selected) selectedValue.push(options[i].value);
                    } else selectedValue = event.target.value;
                    this.setState({
                        "value": selectedValue
                    });
                    return returnValue;
                }
            });
            module.exports = ReactDOMSelect;
        }, {
            "./AutoFocusMixin": 1,
            "./LinkedValueUtils": 23,
            "./ReactBrowserComponentMixin": 27,
            "./ReactCompositeComponent": 33,
            "./ReactDOM": 36,
            "./invariant": 125,
            "./merge": 134
        } ],
        "45": [ function(_dereq_, module, exports) {
            "use strict";
            var getNodeForCharacterOffset = _dereq_("./getNodeForCharacterOffset");
            var getTextContentAccessor = _dereq_("./getTextContentAccessor");
            function getIEOffsets(node) {
                var selection = document.selection;
                var selectedRange = selection.createRange();
                var selectedLength = selectedRange.text.length;
                var fromStart = selectedRange.duplicate();
                fromStart.moveToElementText(node);
                fromStart.setEndPoint("EndToStart", selectedRange);
                var startOffset = fromStart.text.length;
                var endOffset = startOffset + selectedLength;
                return {
                    "start": startOffset,
                    "end": endOffset
                };
            }
            function getModernOffsets(node) {
                var selection = window.getSelection();
                if (0 === selection.rangeCount) return null;
                var anchorNode = selection.anchorNode;
                var anchorOffset = selection.anchorOffset;
                var focusNode = selection.focusNode;
                var focusOffset = selection.focusOffset;
                var currentRange = selection.getRangeAt(0);
                var rangeLength = currentRange.toString().length;
                var tempRange = currentRange.cloneRange();
                tempRange.selectNodeContents(node);
                tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);
                var start = tempRange.toString().length;
                var end = start + rangeLength;
                var detectionRange = document.createRange();
                detectionRange.setStart(anchorNode, anchorOffset);
                detectionRange.setEnd(focusNode, focusOffset);
                var isBackward = detectionRange.collapsed;
                detectionRange.detach();
                return {
                    "start": isBackward ? end : start,
                    "end": isBackward ? start : end
                };
            }
            function setIEOffsets(node, offsets) {
                var range = document.selection.createRange().duplicate();
                var start, end;
                if ("undefined" === typeof offsets.end) {
                    start = offsets.start;
                    end = start;
                } else if (offsets.start > offsets.end) {
                    start = offsets.end;
                    end = offsets.start;
                } else {
                    start = offsets.start;
                    end = offsets.end;
                }
                range.moveToElementText(node);
                range.moveStart("character", start);
                range.setEndPoint("EndToStart", range);
                range.moveEnd("character", end - start);
                range.select();
            }
            function setModernOffsets(node, offsets) {
                var selection = window.getSelection();
                var length = node[getTextContentAccessor()].length;
                var start = Math.min(offsets.start, length);
                var end = "undefined" === typeof offsets.end ? start : Math.min(offsets.end, length);
                if (!selection.extend && start > end) {
                    var temp = end;
                    end = start;
                    start = temp;
                }
                var startMarker = getNodeForCharacterOffset(node, start);
                var endMarker = getNodeForCharacterOffset(node, end);
                if (startMarker && endMarker) {
                    var range = document.createRange();
                    range.setStart(startMarker.node, startMarker.offset);
                    selection.removeAllRanges();
                    if (start > end) {
                        selection.addRange(range);
                        selection.extend(endMarker.node, endMarker.offset);
                    } else {
                        range.setEnd(endMarker.node, endMarker.offset);
                        selection.addRange(range);
                    }
                    range.detach();
                }
            }
            var ReactDOMSelection = {
                "getOffsets": function(node) {
                    var getOffsets = document.selection ? getIEOffsets : getModernOffsets;
                    return getOffsets(node);
                },
                "setOffsets": function(node, offsets) {
                    var setOffsets = document.selection ? setIEOffsets : setModernOffsets;
                    setOffsets(node, offsets);
                }
            };
            module.exports = ReactDOMSelection;
        }, {
            "./getNodeForCharacterOffset": 119,
            "./getTextContentAccessor": 121
        } ],
        "46": [ function(_dereq_, module, exports) {
            "use strict";
            var AutoFocusMixin = _dereq_("./AutoFocusMixin");
            var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
            var LinkedValueUtils = _dereq_("./LinkedValueUtils");
            var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
            var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
            var ReactDOM = _dereq_("./ReactDOM");
            var invariant = _dereq_("./invariant");
            var merge = _dereq_("./merge");
            var warning = _dereq_("./warning");
            var textarea = ReactDOM.textarea;
            var ReactDOMTextarea = ReactCompositeComponent.createClass({
                "displayName": "ReactDOMTextarea",
                "mixins": [ AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin ],
                "getInitialState": function() {
                    var defaultValue = this.props.defaultValue;
                    var children = this.props.children;
                    if (null != children) {
                        if ("production" !== "development") "production" !== "development" ? warning(false, "Use the `defaultValue` or `value` props instead of setting " + "children on <textarea>.") : null;
                        "production" !== "development" ? invariant(null == defaultValue, "If you supply `defaultValue` on a <textarea>, do not pass children.") : invariant(null == defaultValue);
                        if (Array.isArray(children)) {
                            "production" !== "development" ? invariant(children.length <= 1, "<textarea> can only have at most one child.") : invariant(children.length <= 1);
                            children = children[0];
                        }
                        defaultValue = "" + children;
                    }
                    if (null == defaultValue) defaultValue = "";
                    var value = LinkedValueUtils.getValue(this);
                    return {
                        "initialValue": "" + (null != value ? value : defaultValue),
                        "value": defaultValue
                    };
                },
                "shouldComponentUpdate": function() {
                    return !this._isChanging;
                },
                "render": function() {
                    var props = merge(this.props);
                    var value = LinkedValueUtils.getValue(this);
                    "production" !== "development" ? invariant(null == props.dangerouslySetInnerHTML, "`dangerouslySetInnerHTML` does not make sense on <textarea>.") : invariant(null == props.dangerouslySetInnerHTML);
                    props.defaultValue = null;
                    props.value = null != value ? value : this.state.value;
                    props.onChange = this._handleChange;
                    return textarea(props, this.state.initialValue);
                },
                "componentDidUpdate": function(prevProps, prevState, prevContext) {
                    var value = LinkedValueUtils.getValue(this);
                    if (null != value) {
                        var rootNode = this.getDOMNode();
                        DOMPropertyOperations.setValueForProperty(rootNode, "value", "" + value);
                    }
                },
                "_handleChange": function(event) {
                    var returnValue;
                    var onChange = LinkedValueUtils.getOnChange(this);
                    if (onChange) {
                        this._isChanging = true;
                        returnValue = onChange.call(this, event);
                        this._isChanging = false;
                    }
                    this.setState({
                        "value": event.target.value
                    });
                    return returnValue;
                }
            });
            module.exports = ReactDOMTextarea;
        }, {
            "./AutoFocusMixin": 1,
            "./DOMPropertyOperations": 10,
            "./LinkedValueUtils": 23,
            "./ReactBrowserComponentMixin": 27,
            "./ReactCompositeComponent": 33,
            "./ReactDOM": 36,
            "./invariant": 125,
            "./merge": 134,
            "./warning": 148
        } ],
        "47": [ function(_dereq_, module, exports) {
            "use strict";
            var ReactUpdates = _dereq_("./ReactUpdates");
            var Transaction = _dereq_("./Transaction");
            var emptyFunction = _dereq_("./emptyFunction");
            var mixInto = _dereq_("./mixInto");
            var RESET_BATCHED_UPDATES = {
                "initialize": emptyFunction,
                "close": function() {
                    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
                }
            };
            var FLUSH_BATCHED_UPDATES = {
                "initialize": emptyFunction,
                "close": ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
            };
            var TRANSACTION_WRAPPERS = [ FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES ];
            function ReactDefaultBatchingStrategyTransaction() {
                this.reinitializeTransaction();
            }
            mixInto(ReactDefaultBatchingStrategyTransaction, Transaction.Mixin);
            mixInto(ReactDefaultBatchingStrategyTransaction, {
                "getTransactionWrappers": function() {
                    return TRANSACTION_WRAPPERS;
                }
            });
            var transaction = new ReactDefaultBatchingStrategyTransaction();
            var ReactDefaultBatchingStrategy = {
                "isBatchingUpdates": false,
                "batchedUpdates": function(callback, param) {
                    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;
                    ReactDefaultBatchingStrategy.isBatchingUpdates = true;
                    if (alreadyBatchingUpdates) callback(param); else transaction.perform(callback, null, param);
                }
            };
            module.exports = ReactDefaultBatchingStrategy;
        }, {
            "./ReactUpdates": 81,
            "./Transaction": 96,
            "./emptyFunction": 109,
            "./mixInto": 137
        } ],
        "48": [ function(_dereq_, module, exports) {
            "use strict";
            var ReactInjection = _dereq_("./ReactInjection");
            var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
            var DefaultDOMPropertyConfig = _dereq_("./DefaultDOMPropertyConfig");
            var ChangeEventPlugin = _dereq_("./ChangeEventPlugin");
            var ClientReactRootIndex = _dereq_("./ClientReactRootIndex");
            var CompositionEventPlugin = _dereq_("./CompositionEventPlugin");
            var DefaultEventPluginOrder = _dereq_("./DefaultEventPluginOrder");
            var EnterLeaveEventPlugin = _dereq_("./EnterLeaveEventPlugin");
            var MobileSafariClickEventPlugin = _dereq_("./MobileSafariClickEventPlugin");
            var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
            var ReactComponentBrowserEnvironment = _dereq_("./ReactComponentBrowserEnvironment");
            var ReactEventTopLevelCallback = _dereq_("./ReactEventTopLevelCallback");
            var ReactDOM = _dereq_("./ReactDOM");
            var ReactDOMButton = _dereq_("./ReactDOMButton");
            var ReactDOMForm = _dereq_("./ReactDOMForm");
            var ReactDOMImg = _dereq_("./ReactDOMImg");
            var ReactDOMInput = _dereq_("./ReactDOMInput");
            var ReactDOMOption = _dereq_("./ReactDOMOption");
            var ReactDOMSelect = _dereq_("./ReactDOMSelect");
            var ReactDOMTextarea = _dereq_("./ReactDOMTextarea");
            var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");
            var ReactMount = _dereq_("./ReactMount");
            var SelectEventPlugin = _dereq_("./SelectEventPlugin");
            var ServerReactRootIndex = _dereq_("./ServerReactRootIndex");
            var SimpleEventPlugin = _dereq_("./SimpleEventPlugin");
            var ReactDefaultBatchingStrategy = _dereq_("./ReactDefaultBatchingStrategy");
            var createFullPageComponent = _dereq_("./createFullPageComponent");
            function inject() {
                ReactInjection.EventEmitter.injectTopLevelCallbackCreator(ReactEventTopLevelCallback);
                ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
                ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);
                ReactInjection.EventPluginHub.injectMount(ReactMount);
                ReactInjection.EventPluginHub.injectEventPluginsByName({
                    "SimpleEventPlugin": SimpleEventPlugin,
                    "EnterLeaveEventPlugin": EnterLeaveEventPlugin,
                    "ChangeEventPlugin": ChangeEventPlugin,
                    "CompositionEventPlugin": CompositionEventPlugin,
                    "MobileSafariClickEventPlugin": MobileSafariClickEventPlugin,
                    "SelectEventPlugin": SelectEventPlugin
                });
                ReactInjection.DOM.injectComponentClasses({
                    "button": ReactDOMButton,
                    "form": ReactDOMForm,
                    "img": ReactDOMImg,
                    "input": ReactDOMInput,
                    "option": ReactDOMOption,
                    "select": ReactDOMSelect,
                    "textarea": ReactDOMTextarea,
                    "html": createFullPageComponent(ReactDOM.html),
                    "head": createFullPageComponent(ReactDOM.head),
                    "title": createFullPageComponent(ReactDOM.title),
                    "body": createFullPageComponent(ReactDOM.body)
                });
                ReactInjection.CompositeComponent.injectMixin(ReactBrowserComponentMixin);
                ReactInjection.DOMProperty.injectDOMPropertyConfig(DefaultDOMPropertyConfig);
                ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);
                ReactInjection.RootIndex.injectCreateReactRootIndex(ExecutionEnvironment.canUseDOM ? ClientReactRootIndex.createReactRootIndex : ServerReactRootIndex.createReactRootIndex);
                ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);
                if ("production" !== "development") {
                    var url = ExecutionEnvironment.canUseDOM && window.location.href || "";
                    if (/[?&]react_perf\b/.test(url)) {
                        var ReactDefaultPerf = _dereq_("./ReactDefaultPerf");
                        ReactDefaultPerf.start();
                    }
                }
            }
            module.exports = {
                "inject": inject
            };
        }, {
            "./ChangeEventPlugin": 5,
            "./ClientReactRootIndex": 6,
            "./CompositionEventPlugin": 7,
            "./DefaultDOMPropertyConfig": 12,
            "./DefaultEventPluginOrder": 13,
            "./EnterLeaveEventPlugin": 14,
            "./ExecutionEnvironment": 21,
            "./MobileSafariClickEventPlugin": 24,
            "./ReactBrowserComponentMixin": 27,
            "./ReactComponentBrowserEnvironment": 32,
            "./ReactDOM": 36,
            "./ReactDOMButton": 37,
            "./ReactDOMForm": 39,
            "./ReactDOMImg": 41,
            "./ReactDOMInput": 42,
            "./ReactDOMOption": 43,
            "./ReactDOMSelect": 44,
            "./ReactDOMTextarea": 46,
            "./ReactDefaultBatchingStrategy": 47,
            "./ReactDefaultPerf": 49,
            "./ReactEventTopLevelCallback": 54,
            "./ReactInjection": 55,
            "./ReactInstanceHandles": 57,
            "./ReactMount": 60,
            "./SelectEventPlugin": 83,
            "./ServerReactRootIndex": 84,
            "./SimpleEventPlugin": 85,
            "./createFullPageComponent": 104
        } ],
        "49": [ function(_dereq_, module, exports) {
            "use strict";
            var DOMProperty = _dereq_("./DOMProperty");
            var ReactDefaultPerfAnalysis = _dereq_("./ReactDefaultPerfAnalysis");
            var ReactMount = _dereq_("./ReactMount");
            var ReactPerf = _dereq_("./ReactPerf");
            var performanceNow = _dereq_("./performanceNow");
            function roundFloat(val) {
                return Math.floor(100 * val) / 100;
            }
            var ReactDefaultPerf = {
                "_allMeasurements": [],
                "_injected": false,
                "start": function() {
                    if (!ReactDefaultPerf._injected) ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
                    ReactDefaultPerf._allMeasurements.length = 0;
                    ReactPerf.enableMeasure = true;
                },
                "stop": function() {
                    ReactPerf.enableMeasure = false;
                },
                "getLastMeasurements": function() {
                    return ReactDefaultPerf._allMeasurements;
                },
                "printExclusive": function(measurements) {
                    measurements = measurements || ReactDefaultPerf._allMeasurements;
                    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
                    console.table(summary.map(function(item) {
                        return {
                            "Component class name": item.componentName,
                            "Total inclusive time (ms)": roundFloat(item.inclusive),
                            "Total exclusive time (ms)": roundFloat(item.exclusive),
                            "Exclusive time per instance (ms)": roundFloat(item.exclusive / item.count),
                            "Instances": item.count
                        };
                    }));
                    console.log("Total time:", ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + " ms");
                },
                "printInclusive": function(measurements) {
                    measurements = measurements || ReactDefaultPerf._allMeasurements;
                    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
                    console.table(summary.map(function(item) {
                        return {
                            "Owner > component": item.componentName,
                            "Inclusive time (ms)": roundFloat(item.time),
                            "Instances": item.count
                        };
                    }));
                    console.log("Total time:", ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + " ms");
                },
                "printWasted": function(measurements) {
                    measurements = measurements || ReactDefaultPerf._allMeasurements;
                    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements, true);
                    console.table(summary.map(function(item) {
                        return {
                            "Owner > component": item.componentName,
                            "Wasted time (ms)": item.time,
                            "Instances": item.count
                        };
                    }));
                    console.log("Total time:", ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + " ms");
                },
                "printDOM": function(measurements) {
                    measurements = measurements || ReactDefaultPerf._allMeasurements;
                    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
                    console.table(summary.map(function(item) {
                        var result = {};
                        result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
                        result["type"] = item.type;
                        result["args"] = JSON.stringify(item.args);
                        return result;
                    }));
                    console.log("Total time:", ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + " ms");
                },
                "_recordWrite": function(id, fnName, totalTime, args) {
                    var writes = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].writes;
                    writes[id] = writes[id] || [];
                    writes[id].push({
                        "type": fnName,
                        "time": totalTime,
                        "args": args
                    });
                },
                "measure": function(moduleName, fnName, func) {
                    return function() {
                        var args = Array.prototype.slice.call(arguments, 0);
                        var totalTime;
                        var rv;
                        var start;
                        if ("_renderNewRootComponent" === fnName || "flushBatchedUpdates" === fnName) {
                            ReactDefaultPerf._allMeasurements.push({
                                "exclusive": {},
                                "inclusive": {},
                                "counts": {},
                                "writes": {},
                                "displayNames": {},
                                "totalTime": 0
                            });
                            start = performanceNow();
                            rv = func.apply(this, args);
                            ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].totalTime = performanceNow() - start;
                            return rv;
                        } else if ("ReactDOMIDOperations" === moduleName || "ReactComponentBrowserEnvironment" === moduleName) {
                            start = performanceNow();
                            rv = func.apply(this, args);
                            totalTime = performanceNow() - start;
                            if ("mountImageIntoNode" === fnName) {
                                var mountID = ReactMount.getID(args[1]);
                                ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);
                            } else if ("dangerouslyProcessChildrenUpdates" === fnName) args[0].forEach(function(update) {
                                var writeArgs = {};
                                if (null !== update.fromIndex) writeArgs.fromIndex = update.fromIndex;
                                if (null !== update.toIndex) writeArgs.toIndex = update.toIndex;
                                if (null !== update.textContent) writeArgs.textContent = update.textContent;
                                if (null !== update.markupIndex) writeArgs.markup = args[1][update.markupIndex];
                                ReactDefaultPerf._recordWrite(update.parentID, update.type, totalTime, writeArgs);
                            }); else ReactDefaultPerf._recordWrite(args[0], fnName, totalTime, Array.prototype.slice.call(args, 1));
                            return rv;
                        } else if ("ReactCompositeComponent" === moduleName && ("mountComponent" === fnName || "updateComponent" === fnName || "_renderValidatedComponent" === fnName)) {
                            var rootNodeID = "mountComponent" === fnName ? args[0] : this._rootNodeID;
                            var isRender = "_renderValidatedComponent" === fnName;
                            var entry = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1];
                            if (isRender) {
                                entry.counts[rootNodeID] = entry.counts[rootNodeID] || 0;
                                entry.counts[rootNodeID] += 1;
                            }
                            start = performanceNow();
                            rv = func.apply(this, args);
                            totalTime = performanceNow() - start;
                            var typeOfLog = isRender ? entry.exclusive : entry.inclusive;
                            typeOfLog[rootNodeID] = typeOfLog[rootNodeID] || 0;
                            typeOfLog[rootNodeID] += totalTime;
                            entry.displayNames[rootNodeID] = {
                                "current": this.constructor.displayName,
                                "owner": this._owner ? this._owner.constructor.displayName : "<root>"
                            };
                            return rv;
                        } else return func.apply(this, args);
                    };
                }
            };
            module.exports = ReactDefaultPerf;
        }, {
            "./DOMProperty": 9,
            "./ReactDefaultPerfAnalysis": 50,
            "./ReactMount": 60,
            "./ReactPerf": 65,
            "./performanceNow": 142
        } ],
        "50": [ function(_dereq_, module, exports) {
            var merge = _dereq_("./merge");
            var DONT_CARE_THRESHOLD = 1.2;
            var DOM_OPERATION_TYPES = {
                "mountImageIntoNode": "set innerHTML",
                "INSERT_MARKUP": "set innerHTML",
                "MOVE_EXISTING": "move",
                "REMOVE_NODE": "remove",
                "TEXT_CONTENT": "set textContent",
                "updatePropertyByID": "update attribute",
                "deletePropertyByID": "delete attribute",
                "updateStylesByID": "update styles",
                "updateInnerHTMLByID": "set innerHTML",
                "dangerouslyReplaceNodeWithMarkupByID": "replace"
            };
            function getTotalTime(measurements) {
                var totalTime = 0;
                for (var i = 0; i < measurements.length; i++) {
                    var measurement = measurements[i];
                    totalTime += measurement.totalTime;
                }
                return totalTime;
            }
            function getDOMSummary(measurements) {
                var items = [];
                for (var i = 0; i < measurements.length; i++) {
                    var measurement = measurements[i];
                    var id;
                    for (id in measurement.writes) measurement.writes[id].forEach(function(write) {
                        items.push({
                            "id": id,
                            "type": DOM_OPERATION_TYPES[write.type] || write.type,
                            "args": write.args
                        });
                    });
                }
                return items;
            }
            function getExclusiveSummary(measurements) {
                var candidates = {};
                var displayName;
                for (var i = 0; i < measurements.length; i++) {
                    var measurement = measurements[i];
                    var allIDs = merge(measurement.exclusive, measurement.inclusive);
                    for (var id in allIDs) {
                        displayName = measurement.displayNames[id].current;
                        candidates[displayName] = candidates[displayName] || {
                            "componentName": displayName,
                            "inclusive": 0,
                            "exclusive": 0,
                            "count": 0
                        };
                        if (measurement.exclusive[id]) candidates[displayName].exclusive += measurement.exclusive[id];
                        if (measurement.inclusive[id]) candidates[displayName].inclusive += measurement.inclusive[id];
                        if (measurement.counts[id]) candidates[displayName].count += measurement.counts[id];
                    }
                }
                var arr = [];
                for (displayName in candidates) if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) arr.push(candidates[displayName]);
                arr.sort(function(a, b) {
                    return b.exclusive - a.exclusive;
                });
                return arr;
            }
            function getInclusiveSummary(measurements, onlyClean) {
                var candidates = {};
                var inclusiveKey;
                for (var i = 0; i < measurements.length; i++) {
                    var measurement = measurements[i];
                    var allIDs = merge(measurement.exclusive, measurement.inclusive);
                    var cleanComponents;
                    if (onlyClean) cleanComponents = getUnchangedComponents(measurement);
                    for (var id in allIDs) {
                        if (onlyClean && !cleanComponents[id]) continue;
                        var displayName = measurement.displayNames[id];
                        inclusiveKey = displayName.owner + " > " + displayName.current;
                        candidates[inclusiveKey] = candidates[inclusiveKey] || {
                            "componentName": inclusiveKey,
                            "time": 0,
                            "count": 0
                        };
                        if (measurement.inclusive[id]) candidates[inclusiveKey].time += measurement.inclusive[id];
                        if (measurement.counts[id]) candidates[inclusiveKey].count += measurement.counts[id];
                    }
                }
                var arr = [];
                for (inclusiveKey in candidates) if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) arr.push(candidates[inclusiveKey]);
                arr.sort(function(a, b) {
                    return b.time - a.time;
                });
                return arr;
            }
            function getUnchangedComponents(measurement) {
                var cleanComponents = {};
                var dirtyLeafIDs = Object.keys(measurement.writes);
                var allIDs = merge(measurement.exclusive, measurement.inclusive);
                for (var id in allIDs) {
                    var isDirty = false;
                    for (var i = 0; i < dirtyLeafIDs.length; i++) if (0 === dirtyLeafIDs[i].indexOf(id)) {
                        isDirty = true;
                        break;
                    }
                    if (!isDirty && measurement.counts[id] > 0) cleanComponents[id] = true;
                }
                return cleanComponents;
            }
            var ReactDefaultPerfAnalysis = {
                "getExclusiveSummary": getExclusiveSummary,
                "getInclusiveSummary": getInclusiveSummary,
                "getDOMSummary": getDOMSummary,
                "getTotalTime": getTotalTime
            };
            module.exports = ReactDefaultPerfAnalysis;
        }, {
            "./merge": 134
        } ],
        "51": [ function(_dereq_, module, exports) {
            "use strict";
            var ReactErrorUtils = {
                "guard": function(func, name) {
                    return func;
                }
            };
            module.exports = ReactErrorUtils;
        }, {} ],
        "52": [ function(_dereq_, module, exports) {
            "use strict";
            var EventConstants = _dereq_("./EventConstants");
            var EventListener = _dereq_("./EventListener");
            var EventPluginHub = _dereq_("./EventPluginHub");
            var EventPluginRegistry = _dereq_("./EventPluginRegistry");
            var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
            var ReactEventEmitterMixin = _dereq_("./ReactEventEmitterMixin");
            var ViewportMetrics = _dereq_("./ViewportMetrics");
            var invariant = _dereq_("./invariant");
            var isEventSupported = _dereq_("./isEventSupported");
            var merge = _dereq_("./merge");
            var alreadyListeningTo = {};
            var isMonitoringScrollValue = false;
            var reactTopListenersCounter = 0;
            var topEventMapping = {
                "topBlur": "blur",
                "topChange": "change",
                "topClick": "click",
                "topCompositionEnd": "compositionend",
                "topCompositionStart": "compositionstart",
                "topCompositionUpdate": "compositionupdate",
                "topContextMenu": "contextmenu",
                "topCopy": "copy",
                "topCut": "cut",
                "topDoubleClick": "dblclick",
                "topDrag": "drag",
                "topDragEnd": "dragend",
                "topDragEnter": "dragenter",
                "topDragExit": "dragexit",
                "topDragLeave": "dragleave",
                "topDragOver": "dragover",
                "topDragStart": "dragstart",
                "topDrop": "drop",
                "topFocus": "focus",
                "topInput": "input",
                "topKeyDown": "keydown",
                "topKeyPress": "keypress",
                "topKeyUp": "keyup",
                "topMouseDown": "mousedown",
                "topMouseMove": "mousemove",
                "topMouseOut": "mouseout",
                "topMouseOver": "mouseover",
                "topMouseUp": "mouseup",
                "topPaste": "paste",
                "topScroll": "scroll",
                "topSelectionChange": "selectionchange",
                "topTouchCancel": "touchcancel",
                "topTouchEnd": "touchend",
                "topTouchMove": "touchmove",
                "topTouchStart": "touchstart",
                "topWheel": "wheel"
            };
            var topListenersIDKey = "_reactListenersID" + String(Math.random()).slice(2);
            function getListeningForDocument(mountAt) {
                if (null == mountAt[topListenersIDKey]) {
                    mountAt[topListenersIDKey] = reactTopListenersCounter++;
                    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
                }
                return alreadyListeningTo[mountAt[topListenersIDKey]];
            }
            function trapBubbledEvent(topLevelType, handlerBaseName, element) {
                EventListener.listen(element, handlerBaseName, ReactEventEmitter.TopLevelCallbackCreator.createTopLevelCallback(topLevelType));
            }
            function trapCapturedEvent(topLevelType, handlerBaseName, element) {
                EventListener.capture(element, handlerBaseName, ReactEventEmitter.TopLevelCallbackCreator.createTopLevelCallback(topLevelType));
            }
            var ReactEventEmitter = merge(ReactEventEmitterMixin, {
                "TopLevelCallbackCreator": null,
                "injection": {
                    "injectTopLevelCallbackCreator": function(TopLevelCallbackCreator) {
                        ReactEventEmitter.TopLevelCallbackCreator = TopLevelCallbackCreator;
                    }
                },
                "setEnabled": function(enabled) {
                    "production" !== "development" ? invariant(ExecutionEnvironment.canUseDOM, "setEnabled(...): Cannot toggle event listening in a Worker thread. " + "This is likely a bug in the framework. Please report immediately.") : invariant(ExecutionEnvironment.canUseDOM);
                    if (ReactEventEmitter.TopLevelCallbackCreator) ReactEventEmitter.TopLevelCallbackCreator.setEnabled(enabled);
                },
                "isEnabled": function() {
                    return !!(ReactEventEmitter.TopLevelCallbackCreator && ReactEventEmitter.TopLevelCallbackCreator.isEnabled());
                },
                "listenTo": function(registrationName, contentDocument) {
                    var mountAt = contentDocument;
                    var isListening = getListeningForDocument(mountAt);
                    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];
                    var topLevelTypes = EventConstants.topLevelTypes;
                    for (var i = 0, l = dependencies.length; i < l; i++) {
                        var dependency = dependencies[i];
                        if (!isListening[dependency]) {
                            var topLevelType = topLevelTypes[dependency];
                            if (topLevelType === topLevelTypes.topWheel) if (isEventSupported("wheel")) trapBubbledEvent(topLevelTypes.topWheel, "wheel", mountAt); else if (isEventSupported("mousewheel")) trapBubbledEvent(topLevelTypes.topWheel, "mousewheel", mountAt); else trapBubbledEvent(topLevelTypes.topWheel, "DOMMouseScroll", mountAt); else if (topLevelType === topLevelTypes.topScroll) if (isEventSupported("scroll", true)) trapCapturedEvent(topLevelTypes.topScroll, "scroll", mountAt); else trapBubbledEvent(topLevelTypes.topScroll, "scroll", window); else if (topLevelType === topLevelTypes.topFocus || topLevelType === topLevelTypes.topBlur) {
                                if (isEventSupported("focus", true)) {
                                    trapCapturedEvent(topLevelTypes.topFocus, "focus", mountAt);
                                    trapCapturedEvent(topLevelTypes.topBlur, "blur", mountAt);
                                } else if (isEventSupported("focusin")) {
                                    trapBubbledEvent(topLevelTypes.topFocus, "focusin", mountAt);
                                    trapBubbledEvent(topLevelTypes.topBlur, "focusout", mountAt);
                                }
                                isListening[topLevelTypes.topBlur] = true;
                                isListening[topLevelTypes.topFocus] = true;
                            } else if (topEventMapping[dependency]) trapBubbledEvent(topLevelType, topEventMapping[dependency], mountAt);
                            isListening[dependency] = true;
                        }
                    }
                },
                "ensureScrollValueMonitoring": function() {
                    if (!isMonitoringScrollValue) {
                        var refresh = ViewportMetrics.refreshScrollValues;
                        EventListener.listen(window, "scroll", refresh);
                        EventListener.listen(window, "resize", refresh);
                        isMonitoringScrollValue = true;
                    }
                },
                "eventNameDispatchConfigs": EventPluginHub.eventNameDispatchConfigs,
                "registrationNameModules": EventPluginHub.registrationNameModules,
                "putListener": EventPluginHub.putListener,
                "getListener": EventPluginHub.getListener,
                "deleteListener": EventPluginHub.deleteListener,
                "deleteAllListeners": EventPluginHub.deleteAllListeners,
                "trapBubbledEvent": trapBubbledEvent,
                "trapCapturedEvent": trapCapturedEvent
            });
            module.exports = ReactEventEmitter;
        }, {
            "./EventConstants": 15,
            "./EventListener": 16,
            "./EventPluginHub": 17,
            "./EventPluginRegistry": 18,
            "./ExecutionEnvironment": 21,
            "./ReactEventEmitterMixin": 53,
            "./ViewportMetrics": 97,
            "./invariant": 125,
            "./isEventSupported": 126,
            "./merge": 134
        } ],
        "53": [ function(_dereq_, module, exports) {
            "use strict";
            var EventPluginHub = _dereq_("./EventPluginHub");
            var ReactUpdates = _dereq_("./ReactUpdates");
            function runEventQueueInBatch(events) {
                EventPluginHub.enqueueEvents(events);
                EventPluginHub.processEventQueue();
            }
            var ReactEventEmitterMixin = {
                "handleTopLevel": function(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent) {
                    var events = EventPluginHub.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent);
                    ReactUpdates.batchedUpdates(runEventQueueInBatch, events);
                }
            };
            module.exports = ReactEventEmitterMixin;
        }, {
            "./EventPluginHub": 17,
            "./ReactUpdates": 81
        } ],
        "54": [ function(_dereq_, module, exports) {
            "use strict";
            var PooledClass = _dereq_("./PooledClass");
            var ReactEventEmitter = _dereq_("./ReactEventEmitter");
            var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");
            var ReactMount = _dereq_("./ReactMount");
            var getEventTarget = _dereq_("./getEventTarget");
            var mixInto = _dereq_("./mixInto");
            var _topLevelListenersEnabled = true;
            function findParent(node) {
                var nodeID = ReactMount.getID(node);
                var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
                var container = ReactMount.findReactContainerForID(rootID);
                var parent = ReactMount.getFirstReactDOM(container);
                return parent;
            }
            function handleTopLevelImpl(topLevelType, nativeEvent, bookKeeping) {
                var topLevelTarget = ReactMount.getFirstReactDOM(getEventTarget(nativeEvent)) || window;
                var ancestor = topLevelTarget;
                while (ancestor) {
                    bookKeeping.ancestors.push(ancestor);
                    ancestor = findParent(ancestor);
                }
                for (var i = 0, l = bookKeeping.ancestors.length; i < l; i++) {
                    topLevelTarget = bookKeeping.ancestors[i];
                    var topLevelTargetID = ReactMount.getID(topLevelTarget) || "";
                    ReactEventEmitter.handleTopLevel(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent);
                }
            }
            function TopLevelCallbackBookKeeping() {
                this.ancestors = [];
            }
            mixInto(TopLevelCallbackBookKeeping, {
                "destructor": function() {
                    this.ancestors.length = 0;
                }
            });
            PooledClass.addPoolingTo(TopLevelCallbackBookKeeping);
            var ReactEventTopLevelCallback = {
                "setEnabled": function(enabled) {
                    _topLevelListenersEnabled = !!enabled;
                },
                "isEnabled": function() {
                    return _topLevelListenersEnabled;
                },
                "createTopLevelCallback": function(topLevelType) {
                    return function(nativeEvent) {
                        if (!_topLevelListenersEnabled) return;
                        var bookKeeping = TopLevelCallbackBookKeeping.getPooled();
                        try {
                            handleTopLevelImpl(topLevelType, nativeEvent, bookKeeping);
                        } finally {
                            TopLevelCallbackBookKeeping.release(bookKeeping);
                        }
                    };
                }
            };
            module.exports = ReactEventTopLevelCallback;
        }, {
            "./PooledClass": 25,
            "./ReactEventEmitter": 52,
            "./ReactInstanceHandles": 57,
            "./ReactMount": 60,
            "./getEventTarget": 117,
            "./mixInto": 137
        } ],
        "55": [ function(_dereq_, module, exports) {
            "use strict";
            var DOMProperty = _dereq_("./DOMProperty");
            var EventPluginHub = _dereq_("./EventPluginHub");
            var ReactComponent = _dereq_("./ReactComponent");
            var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
            var ReactDOM = _dereq_("./ReactDOM");
            var ReactEventEmitter = _dereq_("./ReactEventEmitter");
            var ReactPerf = _dereq_("./ReactPerf");
            var ReactRootIndex = _dereq_("./ReactRootIndex");
            var ReactUpdates = _dereq_("./ReactUpdates");
            var ReactInjection = {
                "Component": ReactComponent.injection,
                "CompositeComponent": ReactCompositeComponent.injection,
                "DOMProperty": DOMProperty.injection,
                "EventPluginHub": EventPluginHub.injection,
                "DOM": ReactDOM.injection,
                "EventEmitter": ReactEventEmitter.injection,
                "Perf": ReactPerf.injection,
                "RootIndex": ReactRootIndex.injection,
                "Updates": ReactUpdates.injection
            };
            module.exports = ReactInjection;
        }, {
            "./DOMProperty": 9,
            "./EventPluginHub": 17,
            "./ReactComponent": 31,
            "./ReactCompositeComponent": 33,
            "./ReactDOM": 36,
            "./ReactEventEmitter": 52,
            "./ReactPerf": 65,
            "./ReactRootIndex": 72,
            "./ReactUpdates": 81
        } ],
        "56": [ function(_dereq_, module, exports) {
            "use strict";
            var ReactDOMSelection = _dereq_("./ReactDOMSelection");
            var containsNode = _dereq_("./containsNode");
            var focusNode = _dereq_("./focusNode");
            var getActiveElement = _dereq_("./getActiveElement");
            function isInDocument(node) {
                return containsNode(document.documentElement, node);
            }
            var ReactInputSelection = {
                "hasSelectionCapabilities": function(elem) {
                    return elem && ("INPUT" === elem.nodeName && "text" === elem.type || "TEXTAREA" === elem.nodeName || "true" === elem.contentEditable);
                },
                "getSelectionInformation": function() {
                    var focusedElem = getActiveElement();
                    return {
                        "focusedElem": focusedElem,
                        "selectionRange": ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
                    };
                },
                "restoreSelection": function(priorSelectionInformation) {
                    var curFocusedElem = getActiveElement();
                    var priorFocusedElem = priorSelectionInformation.focusedElem;
                    var priorSelectionRange = priorSelectionInformation.selectionRange;
                    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
                        if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
                        focusNode(priorFocusedElem);
                    }
                },
                "getSelection": function(input) {
                    var selection;
                    if ("selectionStart" in input) selection = {
                        "start": input.selectionStart,
                        "end": input.selectionEnd
                    }; else if (document.selection && "INPUT" === input.nodeName) {
                        var range = document.selection.createRange();
                        if (range.parentElement() === input) selection = {
                            "start": -range.moveStart("character", -input.value.length),
                            "end": -range.moveEnd("character", -input.value.length)
                        };
                    } else selection = ReactDOMSelection.getOffsets(input);
                    return selection || {
                        "start": 0,
                        "end": 0
                    };
                },
                "setSelection": function(input, offsets) {
                    var start = offsets.start;
                    var end = offsets.end;
                    if ("undefined" === typeof end) end = start;
                    if ("selectionStart" in input) {
                        input.selectionStart = start;
                        input.selectionEnd = Math.min(end, input.value.length);
                    } else if (document.selection && "INPUT" === input.nodeName) {
                        var range = input.createTextRange();
                        range.collapse(true);
                        range.moveStart("character", start);
                        range.moveEnd("character", end - start);
                        range.select();
                    } else ReactDOMSelection.setOffsets(input, offsets);
                }
            };
            module.exports = ReactInputSelection;
        }, {
            "./ReactDOMSelection": 45,
            "./containsNode": 101,
            "./focusNode": 113,
            "./getActiveElement": 115
        } ],
        "57": [ function(_dereq_, module, exports) {
            "use strict";
            var ReactRootIndex = _dereq_("./ReactRootIndex");
            var invariant = _dereq_("./invariant");
            var SEPARATOR = ".";
            var SEPARATOR_LENGTH = SEPARATOR.length;
            var MAX_TREE_DEPTH = 100;
            function getReactRootIDString(index) {
                return SEPARATOR + index.toString(36);
            }
            function isBoundary(id, index) {
                return id.charAt(index) === SEPARATOR || index === id.length;
            }
            function isValidID(id) {
                return "" === id || id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR;
            }
            function isAncestorIDOf(ancestorID, descendantID) {
                return 0 === descendantID.indexOf(ancestorID) && isBoundary(descendantID, ancestorID.length);
            }
            function getParentID(id) {
                return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : "";
            }
            function getNextDescendantID(ancestorID, destinationID) {
                "production" !== "development" ? invariant(isValidID(ancestorID) && isValidID(destinationID), "getNextDescendantID(%s, %s): Received an invalid React DOM ID.", ancestorID, destinationID) : invariant(isValidID(ancestorID) && isValidID(destinationID));
                "production" !== "development" ? invariant(isAncestorIDOf(ancestorID, destinationID), "getNextDescendantID(...): React has made an invalid assumption about " + "the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.", ancestorID, destinationID) : invariant(isAncestorIDOf(ancestorID, destinationID));
                if (ancestorID === destinationID) return ancestorID;
                var start = ancestorID.length + SEPARATOR_LENGTH;
                for (var i = start; i < destinationID.length; i++) if (isBoundary(destinationID, i)) break;
                return destinationID.substr(0, i);
            }
            function getFirstCommonAncestorID(oneID, twoID) {
                var minLength = Math.min(oneID.length, twoID.length);
                if (0 === minLength) return "";
                var lastCommonMarkerIndex = 0;
                for (var i = 0; i <= minLength; i++) if (isBoundary(oneID, i) && isBoundary(twoID, i)) lastCommonMarkerIndex = i; else if (oneID.charAt(i) !== twoID.charAt(i)) break;
                var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
                "production" !== "development" ? invariant(isValidID(longestCommonID), "getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s", oneID, twoID, longestCommonID) : invariant(isValidID(longestCommonID));
                return longestCommonID;
            }
            function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
                start = start || "";
                stop = stop || "";
                "production" !== "development" ? invariant(start !== stop, "traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.", start) : invariant(start !== stop);
                var traverseUp = isAncestorIDOf(stop, start);
                "production" !== "development" ? invariant(traverseUp || isAncestorIDOf(start, stop), "traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do " + "not have a parent path.", start, stop) : invariant(traverseUp || isAncestorIDOf(start, stop));
                var depth = 0;
                var traverse = traverseUp ? getParentID : getNextDescendantID;
                for (var id = start; ;id = traverse(id, stop)) {
                    var ret;
                    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) ret = cb(id, traverseUp, arg);
                    if (false === ret || id === stop) break;
                    "production" !== "development" ? invariant(depth++ < MAX_TREE_DEPTH, "traverseParentPath(%s, %s, ...): Detected an infinite loop while " + "traversing the React DOM ID tree. This may be due to malformed IDs: %s", start, stop) : invariant(depth++ < MAX_TREE_DEPTH);
                }
            }
            var ReactInstanceHandles = {
                "createReactRootID": function() {
                    return getReactRootIDString(ReactRootIndex.createReactRootIndex());
                },
                "createReactID": function(rootID, name) {
                    return rootID + name;
                },
                "getReactRootIDFromNodeID": function(id) {
                    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
                        var index = id.indexOf(SEPARATOR, 1);
                        return index > -1 ? id.substr(0, index) : id;
                    }
                    return null;
                },
                "traverseEnterLeave": function(leaveID, enterID, cb, upArg, downArg) {
                    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
                    if (ancestorID !== leaveID) traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
                    if (ancestorID !== enterID) traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
                },
                "traverseTwoPhase": function(targetID, cb, arg) {
                    if (targetID) {
                        traverseParentPath("", targetID, cb, arg, true, false);
                        traverseParentPath(targetID, "", cb, arg, false, true);
                    }
                },
                "traverseAncestors": function(targetID, cb, arg) {
                    traverseParentPath("", targetID, cb, arg, true, false);
                },
                "_getFirstCommonAncestorID": getFirstCommonAncestorID,
                "_getNextDescendantID": getNextDescendantID,
                "isAncestorIDOf": isAncestorIDOf,
                "SEPARATOR": SEPARATOR
            };
            module.exports = ReactInstanceHandles;
        }, {
            "./ReactRootIndex": 72,
            "./invariant": 125
        } ],
        "58": [ function(_dereq_, module, exports) {
            "use strict";
            function ReactLink(value, requestChange) {
                this.value = value;
                this.requestChange = requestChange;
            }
            module.exports = ReactLink;
        }, {} ],
        "59": [ function(_dereq_, module, exports) {
            "use strict";
            var adler32 = _dereq_("./adler32");
            var ReactMarkupChecksum = {
                "CHECKSUM_ATTR_NAME": "data-react-checksum",
                "addChecksumToMarkup": function(markup) {
                    var checksum = adler32(markup);
                    return markup.replace(">", " " + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '">');
                },
                "canReuseMarkup": function(markup, element) {
                    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
                    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
                    var markupChecksum = adler32(markup);
                    return markupChecksum === existingChecksum;
                }
            };
            module.exports = ReactMarkupChecksum;
        }, {
            "./adler32": 99
        } ],
        "60": [ function(_dereq_, module, exports) {
            "use strict";
            var DOMProperty = _dereq_("./DOMProperty");
            var ReactEventEmitter = _dereq_("./ReactEventEmitter");
            var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");
            var ReactPerf = _dereq_("./ReactPerf");
            var containsNode = _dereq_("./containsNode");
            var getReactRootElementInContainer = _dereq_("./getReactRootElementInContainer");
            var instantiateReactComponent = _dereq_("./instantiateReactComponent");
            var invariant = _dereq_("./invariant");
            var shouldUpdateReactComponent = _dereq_("./shouldUpdateReactComponent");
            var SEPARATOR = ReactInstanceHandles.SEPARATOR;
            var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
            var nodeCache = {};
            var ELEMENT_NODE_TYPE = 1;
            var DOC_NODE_TYPE = 9;
            var instancesByReactRootID = {};
            var containersByReactRootID = {};
            if ("production" !== "development") var rootElementsByReactRootID = {};
            var findComponentRootReusableArray = [];
            function getReactRootID(container) {
                var rootElement = getReactRootElementInContainer(container);
                return rootElement && ReactMount.getID(rootElement);
            }
            function getID(node) {
                var id = internalGetID(node);
                if (id) if (nodeCache.hasOwnProperty(id)) {
                    var cached = nodeCache[id];
                    if (cached !== node) {
                        "production" !== "development" ? invariant(!isValid(cached, id), "ReactMount: Two valid but unequal nodes with the same `%s`: %s", ATTR_NAME, id) : invariant(!isValid(cached, id));
                        nodeCache[id] = node;
                    }
                } else nodeCache[id] = node;
                return id;
            }
            function internalGetID(node) {
                return node && node.getAttribute && node.getAttribute(ATTR_NAME) || "";
            }
            function setID(node, id) {
                var oldID = internalGetID(node);
                if (oldID !== id) delete nodeCache[oldID];
                node.setAttribute(ATTR_NAME, id);
                nodeCache[id] = node;
            }
            function getNode(id) {
                if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) nodeCache[id] = ReactMount.findReactNodeByID(id);
                return nodeCache[id];
            }
            function isValid(node, id) {
                if (node) {
                    "production" !== "development" ? invariant(internalGetID(node) === id, "ReactMount: Unexpected modification of `%s`", ATTR_NAME) : invariant(internalGetID(node) === id);
                    var container = ReactMount.findReactContainerForID(id);
                    if (container && containsNode(container, node)) return true;
                }
                return false;
            }
            function purgeID(id) {
                delete nodeCache[id];
            }
            var deepestNodeSoFar = null;
            function findDeepestCachedAncestorImpl(ancestorID) {
                var ancestor = nodeCache[ancestorID];
                if (ancestor && isValid(ancestor, ancestorID)) deepestNodeSoFar = ancestor; else return false;
            }
            function findDeepestCachedAncestor(targetID) {
                deepestNodeSoFar = null;
                ReactInstanceHandles.traverseAncestors(targetID, findDeepestCachedAncestorImpl);
                var foundNode = deepestNodeSoFar;
                deepestNodeSoFar = null;
                return foundNode;
            }
            var ReactMount = {
                "totalInstantiationTime": 0,
                "totalInjectionTime": 0,
                "useTouchEvents": false,
                "_instancesByReactRootID": instancesByReactRootID,
                "scrollMonitor": function(container, renderCallback) {
                    renderCallback();
                },
                "_updateRootComponent": function(prevComponent, nextComponent, container, callback) {
                    var nextProps = nextComponent.props;
                    ReactMount.scrollMonitor(container, function() {
                        prevComponent.replaceProps(nextProps, callback);
                    });
                    if ("production" !== "development") rootElementsByReactRootID[getReactRootID(container)] = getReactRootElementInContainer(container);
                    return prevComponent;
                },
                "_registerComponent": function(nextComponent, container) {
                    "production" !== "development" ? invariant(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE), "_registerComponent(...): Target container is not a DOM element.") : invariant(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE));
                    ReactEventEmitter.ensureScrollValueMonitoring();
                    var reactRootID = ReactMount.registerContainer(container);
                    instancesByReactRootID[reactRootID] = nextComponent;
                    return reactRootID;
                },
                "_renderNewRootComponent": ReactPerf.measure("ReactMount", "_renderNewRootComponent", function(nextComponent, container, shouldReuseMarkup) {
                    var componentInstance = instantiateReactComponent(nextComponent);
                    var reactRootID = ReactMount._registerComponent(componentInstance, container);
                    componentInstance.mountComponentIntoNode(reactRootID, container, shouldReuseMarkup);
                    if ("production" !== "development") rootElementsByReactRootID[reactRootID] = getReactRootElementInContainer(container);
                    return componentInstance;
                }),
                "renderComponent": function(nextComponent, container, callback) {
                    var prevComponent = instancesByReactRootID[getReactRootID(container)];
                    if (prevComponent) if (shouldUpdateReactComponent(prevComponent, nextComponent)) return ReactMount._updateRootComponent(prevComponent, nextComponent, container, callback); else ReactMount.unmountComponentAtNode(container);
                    var reactRootElement = getReactRootElementInContainer(container);
                    var containerHasReactMarkup = reactRootElement && ReactMount.isRenderedByReact(reactRootElement);
                    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent;
                    var component = ReactMount._renderNewRootComponent(nextComponent, container, shouldReuseMarkup);
                    callback && callback.call(component);
                    return component;
                },
                "constructAndRenderComponent": function(constructor, props, container) {
                    return ReactMount.renderComponent(constructor(props), container);
                },
                "constructAndRenderComponentByID": function(constructor, props, id) {
                    var domNode = document.getElementById(id);
                    "production" !== "development" ? invariant(domNode, 'Tried to get element with id of "%s" but it is not present on the page.', id) : invariant(domNode);
                    return ReactMount.constructAndRenderComponent(constructor, props, domNode);
                },
                "registerContainer": function(container) {
                    var reactRootID = getReactRootID(container);
                    if (reactRootID) reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
                    if (!reactRootID) reactRootID = ReactInstanceHandles.createReactRootID();
                    containersByReactRootID[reactRootID] = container;
                    return reactRootID;
                },
                "unmountComponentAtNode": function(container) {
                    var reactRootID = getReactRootID(container);
                    var component = instancesByReactRootID[reactRootID];
                    if (!component) return false;
                    ReactMount.unmountComponentFromNode(component, container);
                    delete instancesByReactRootID[reactRootID];
                    delete containersByReactRootID[reactRootID];
                    if ("production" !== "development") delete rootElementsByReactRootID[reactRootID];
                    return true;
                },
                "unmountComponentFromNode": function(instance, container) {
                    instance.unmountComponent();
                    if (container.nodeType === DOC_NODE_TYPE) container = container.documentElement;
                    while (container.lastChild) container.removeChild(container.lastChild);
                },
                "findReactContainerForID": function(id) {
                    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);
                    var container = containersByReactRootID[reactRootID];
                    if ("production" !== "development") {
                        var rootElement = rootElementsByReactRootID[reactRootID];
                        if (rootElement && rootElement.parentNode !== container) {
                            "production" !== "development" ? invariant(internalGetID(rootElement) === reactRootID, "ReactMount: Root element ID differed from reactRootID.") : invariant(internalGetID(rootElement) === reactRootID);
                            var containerChild = container.firstChild;
                            if (containerChild && reactRootID === internalGetID(containerChild)) rootElementsByReactRootID[reactRootID] = containerChild; else console.warn("ReactMount: Root element has been removed from its original " + "container. New container:", rootElement.parentNode);
                        }
                    }
                    return container;
                },
                "findReactNodeByID": function(id) {
                    var reactRoot = ReactMount.findReactContainerForID(id);
                    return ReactMount.findComponentRoot(reactRoot, id);
                },
                "isRenderedByReact": function(node) {
                    if (1 !== node.nodeType) return false;
                    var id = ReactMount.getID(node);
                    return id ? id.charAt(0) === SEPARATOR : false;
                },
                "getFirstReactDOM": function(node) {
                    var current = node;
                    while (current && current.parentNode !== current) {
                        if (ReactMount.isRenderedByReact(current)) return current;
                        current = current.parentNode;
                    }
                    return null;
                },
                "findComponentRoot": function(ancestorNode, targetID) {
                    var firstChildren = findComponentRootReusableArray;
                    var childIndex = 0;
                    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;
                    firstChildren[0] = deepestAncestor.firstChild;
                    firstChildren.length = 1;
                    while (childIndex < firstChildren.length) {
                        var child = firstChildren[childIndex++];
                        var targetChild;
                        while (child) {
                            var childID = ReactMount.getID(child);
                            if (childID) {
                                if (targetID === childID) targetChild = child; else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {
                                    firstChildren.length = childIndex = 0;
                                    firstChildren.push(child.firstChild);
                                }
                            } else firstChildren.push(child.firstChild);
                            child = child.nextSibling;
                        }
                        if (targetChild) {
                            firstChildren.length = 0;
                            return targetChild;
                        }
                    }
                    firstChildren.length = 0;
                    "production" !== "development" ? invariant(false, "findComponentRoot(..., %s): Unable to find element. This probably " + "means the DOM was unexpectedly mutated (e.g., by the browser), " + "usually due to forgetting a <tbody> when using tables or nesting <p> " + "or <a> tags. Try inspecting the child nodes of the element with React " + "ID `%s`.", targetID, ReactMount.getID(ancestorNode)) : invariant(false);
                },
                "getReactRootID": getReactRootID,
                "getID": getID,
                "setID": setID,
                "getNode": getNode,
                "purgeID": purgeID
            };
            module.exports = ReactMount;
        }, {
            "./DOMProperty": 9,
            "./ReactEventEmitter": 52,
            "./ReactInstanceHandles": 57,
            "./ReactPerf": 65,
            "./containsNode": 101,
            "./getReactRootElementInContainer": 120,
            "./instantiateReactComponent": 124,
            "./invariant": 125,
            "./shouldUpdateReactComponent": 144
        } ],
        "61": [ function(_dereq_, module, exports) {
            "use strict";
            var PooledClass = _dereq_("./PooledClass");
            var mixInto = _dereq_("./mixInto");
            function ReactMountReady(initialCollection) {
                this._queue = initialCollection || null;
            }
            mixInto(ReactMountReady, {
                "enqueue": function(component, callback) {
                    this._queue = this._queue || [];
                    this._queue.push({
                        "component": component,
                        "callback": callback
                    });
                },
                "notifyAll": function() {
                    var queue = this._queue;
                    if (queue) {
                        this._queue = null;
                        for (var i = 0, l = queue.length; i < l; i++) {
                            var component = queue[i].component;
                            var callback = queue[i].callback;
                            callback.call(component);
                        }
                        queue.length = 0;
                    }
                },
                "reset": function() {
                    this._queue = null;
                },
                "destructor": function() {
                    this.reset();
                }
            });
            PooledClass.addPoolingTo(ReactMountReady);
            module.exports = ReactMountReady;
        }, {
            "./PooledClass": 25,
            "./mixInto": 137
        } ],
        "62": [ function(_dereq_, module, exports) {
            "use strict";
            var ReactComponent = _dereq_("./ReactComponent");
            var ReactMultiChildUpdateTypes = _dereq_("./ReactMultiChildUpdateTypes");
            var flattenChildren = _dereq_("./flattenChildren");
            var instantiateReactComponent = _dereq_("./instantiateReactComponent");
            var shouldUpdateReactComponent = _dereq_("./shouldUpdateReactComponent");
            var updateDepth = 0;
            var updateQueue = [];
            var markupQueue = [];
            function enqueueMarkup(parentID, markup, toIndex) {
                updateQueue.push({
                    "parentID": parentID,
                    "parentNode": null,
                    "type": ReactMultiChildUpdateTypes.INSERT_MARKUP,
                    "markupIndex": markupQueue.push(markup) - 1,
                    "textContent": null,
                    "fromIndex": null,
                    "toIndex": toIndex
                });
            }
            function enqueueMove(parentID, fromIndex, toIndex) {
                updateQueue.push({
                    "parentID": parentID,
                    "parentNode": null,
                    "type": ReactMultiChildUpdateTypes.MOVE_EXISTING,
                    "markupIndex": null,
                    "textContent": null,
                    "fromIndex": fromIndex,
                    "toIndex": toIndex
                });
            }
            function enqueueRemove(parentID, fromIndex) {
                updateQueue.push({
                    "parentID": parentID,
                    "parentNode": null,
                    "type": ReactMultiChildUpdateTypes.REMOVE_NODE,
                    "markupIndex": null,
                    "textContent": null,
                    "fromIndex": fromIndex,
                    "toIndex": null
                });
            }
            function enqueueTextContent(parentID, textContent) {
                updateQueue.push({
                    "parentID": parentID,
                    "parentNode": null,
                    "type": ReactMultiChildUpdateTypes.TEXT_CONTENT,
                    "markupIndex": null,
                    "textContent": textContent,
                    "fromIndex": null,
                    "toIndex": null
                });
            }
            function processQueue() {
                if (updateQueue.length) {
                    ReactComponent.BackendIDOperations.dangerouslyProcessChildrenUpdates(updateQueue, markupQueue);
                    clearQueue();
                }
            }
            function clearQueue() {
                updateQueue.length = 0;
                markupQueue.length = 0;
            }
            var ReactMultiChild = {
                "Mixin": {
                    "mountChildren": function(nestedChildren, transaction) {
                        var children = flattenChildren(nestedChildren);
                        var mountImages = [];
                        var index = 0;
                        this._renderedChildren = children;
                        for (var name in children) {
                            var child = children[name];
                            if (children.hasOwnProperty(name)) {
                                var childInstance = instantiateReactComponent(child);
                                children[name] = childInstance;
                                var rootID = this._rootNodeID + name;
                                var mountImage = childInstance.mountComponent(rootID, transaction, this._mountDepth + 1);
                                childInstance._mountIndex = index;
                                mountImages.push(mountImage);
                                index++;
                            }
                        }
                        return mountImages;
                    },
                    "updateTextContent": function(nextContent) {
                        updateDepth++;
                        var errorThrown = true;
                        try {
                            var prevChildren = this._renderedChildren;
                            for (var name in prevChildren) if (prevChildren.hasOwnProperty(name)) this._unmountChildByName(prevChildren[name], name);
                            this.setTextContent(nextContent);
                            errorThrown = false;
                        } finally {
                            updateDepth--;
                            if (!updateDepth) errorThrown ? clearQueue() : processQueue();
                        }
                    },
                    "updateChildren": function(nextNestedChildren, transaction) {
                        updateDepth++;
                        var errorThrown = true;
                        try {
                            this._updateChildren(nextNestedChildren, transaction);
                            errorThrown = false;
                        } finally {
                            updateDepth--;
                            if (!updateDepth) errorThrown ? clearQueue() : processQueue();
                        }
                    },
                    "_updateChildren": function(nextNestedChildren, transaction) {
                        var nextChildren = flattenChildren(nextNestedChildren);
                        var prevChildren = this._renderedChildren;
                        if (!nextChildren && !prevChildren) return;
                        var name;
                        var lastIndex = 0;
                        var nextIndex = 0;
                        for (name in nextChildren) {
                            if (!nextChildren.hasOwnProperty(name)) continue;
                            var prevChild = prevChildren && prevChildren[name];
                            var nextChild = nextChildren[name];
                            if (shouldUpdateReactComponent(prevChild, nextChild)) {
                                this.moveChild(prevChild, nextIndex, lastIndex);
                                lastIndex = Math.max(prevChild._mountIndex, lastIndex);
                                prevChild.receiveComponent(nextChild, transaction);
                                prevChild._mountIndex = nextIndex;
                            } else {
                                if (prevChild) {
                                    lastIndex = Math.max(prevChild._mountIndex, lastIndex);
                                    this._unmountChildByName(prevChild, name);
                                }
                                var nextChildInstance = instantiateReactComponent(nextChild);
                                this._mountChildByNameAtIndex(nextChildInstance, name, nextIndex, transaction);
                            }
                            nextIndex++;
                        }
                        for (name in prevChildren) if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren[name])) this._unmountChildByName(prevChildren[name], name);
                    },
                    "unmountChildren": function() {
                        var renderedChildren = this._renderedChildren;
                        for (var name in renderedChildren) {
                            var renderedChild = renderedChildren[name];
                            if (renderedChild.unmountComponent) renderedChild.unmountComponent();
                        }
                        this._renderedChildren = null;
                    },
                    "moveChild": function(child, toIndex, lastIndex) {
                        if (child._mountIndex < lastIndex) enqueueMove(this._rootNodeID, child._mountIndex, toIndex);
                    },
                    "createChild": function(child, mountImage) {
                        enqueueMarkup(this._rootNodeID, mountImage, child._mountIndex);
                    },
                    "removeChild": function(child) {
                        enqueueRemove(this._rootNodeID, child._mountIndex);
                    },
                    "setTextContent": function(textContent) {
                        enqueueTextContent(this._rootNodeID, textContent);
                    },
                    "_mountChildByNameAtIndex": function(child, name, index, transaction) {
                        var rootID = this._rootNodeID + name;
                        var mountImage = child.mountComponent(rootID, transaction, this._mountDepth + 1);
                        child._mountIndex = index;
                        this.createChild(child, mountImage);
                        this._renderedChildren = this._renderedChildren || {};
                        this._renderedChildren[name] = child;
                    },
                    "_unmountChildByName": function(child, name) {
                        if (ReactComponent.isValidComponent(child)) {
                            this.removeChild(child);
                            child._mountIndex = null;
                            child.unmountComponent();
                            delete this._renderedChildren[name];
                        }
                    }
                }
            };
            module.exports = ReactMultiChild;
        }, {
            "./ReactComponent": 31,
            "./ReactMultiChildUpdateTypes": 63,
            "./flattenChildren": 112,
            "./instantiateReactComponent": 124,
            "./shouldUpdateReactComponent": 144
        } ],
        "63": [ function(_dereq_, module, exports) {
            "use strict";
            var keyMirror = _dereq_("./keyMirror");
            var ReactMultiChildUpdateTypes = keyMirror({
                "INSERT_MARKUP": null,
                "MOVE_EXISTING": null,
                "REMOVE_NODE": null,
                "TEXT_CONTENT": null
            });
            module.exports = ReactMultiChildUpdateTypes;
        }, {
            "./keyMirror": 131
        } ],
        "64": [ function(_dereq_, module, exports) {
            "use strict";
            var emptyObject = _dereq_("./emptyObject");
            var invariant = _dereq_("./invariant");
            var ReactOwner = {
                "isValidOwner": function(object) {
                    return !!(object && "function" === typeof object.attachRef && "function" === typeof object.detachRef);
                },
                "addComponentAsRefTo": function(component, ref, owner) {
                    "production" !== "development" ? invariant(ReactOwner.isValidOwner(owner), "addComponentAsRefTo(...): Only a ReactOwner can have refs. This " + "usually means that you're trying to add a ref to a component that " + "doesn't have an owner (that is, was not created inside of another " + "component's `render` method). Try rendering this component inside of " + "a new top-level component which will hold the ref.") : invariant(ReactOwner.isValidOwner(owner));
                    owner.attachRef(ref, component);
                },
                "removeComponentAsRefFrom": function(component, ref, owner) {
                    "production" !== "development" ? invariant(ReactOwner.isValidOwner(owner), "removeComponentAsRefFrom(...): Only a ReactOwner can have refs. This " + "usually means that you're trying to remove a ref to a component that " + "doesn't have an owner (that is, was not created inside of another " + "component's `render` method). Try rendering this component inside of " + "a new top-level component which will hold the ref.") : invariant(ReactOwner.isValidOwner(owner));
                    if (owner.refs[ref] === component) owner.detachRef(ref);
                },
                "Mixin": {
                    "construct": function() {
                        this.refs = emptyObject;
                    },
                    "attachRef": function(ref, component) {
                        "production" !== "development" ? invariant(component.isOwnedBy(this), "attachRef(%s, ...): Only a component's owner can store a ref to it.", ref) : invariant(component.isOwnedBy(this));
                        var refs = this.refs === emptyObject ? this.refs = {} : this.refs;
                        refs[ref] = component;
                    },
                    "detachRef": function(ref) {
                        delete this.refs[ref];
                    }
                }
            };
            module.exports = ReactOwner;
        }, {
            "./emptyObject": 110,
            "./invariant": 125
        } ],
        "65": [ function(_dereq_, module, exports) {
            "use strict";
            var ReactPerf = {
                "enableMeasure": false,
                "storedMeasure": _noMeasure,
                "measure": function(objName, fnName, func) {
                    if ("production" !== "development") {
                        var measuredFunc = null;
                        return function() {
                            if (ReactPerf.enableMeasure) {
                                if (!measuredFunc) measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
                                return measuredFunc.apply(this, arguments);
                            }
                            return func.apply(this, arguments);
                        };
                    }
                    return func;
                },
                "injection": {
                    "injectMeasure": function(measure) {
                        ReactPerf.storedMeasure = measure;
                    }
                }
            };
            function _noMeasure(objName, fnName, func) {
                return func;
            }
            module.exports = ReactPerf;
        }, {} ],
        "66": [ function(_dereq_, module, exports) {
            "use strict";
            var emptyFunction = _dereq_("./emptyFunction");
            var invariant = _dereq_("./invariant");
            var joinClasses = _dereq_("./joinClasses");
            var merge = _dereq_("./merge");
            function createTransferStrategy(mergeStrategy) {
                return function(props, key, value) {
                    if (!props.hasOwnProperty(key)) props[key] = value; else props[key] = mergeStrategy(props[key], value);
                };
            }
            var TransferStrategies = {
                "children": emptyFunction,
                "className": createTransferStrategy(joinClasses),
                "key": emptyFunction,
                "ref": emptyFunction,
                "style": createTransferStrategy(merge)
            };
            var ReactPropTransferer = {
                "TransferStrategies": TransferStrategies,
                "mergeProps": function(oldProps, newProps) {
                    var props = merge(oldProps);
                    for (var thisKey in newProps) {
                        if (!newProps.hasOwnProperty(thisKey)) continue;
                        var transferStrategy = TransferStrategies[thisKey];
                        if (transferStrategy && TransferStrategies.hasOwnProperty(thisKey)) transferStrategy(props, thisKey, newProps[thisKey]); else if (!props.hasOwnProperty(thisKey)) props[thisKey] = newProps[thisKey];
                    }
                    return props;
                },
                "Mixin": {
                    "transferPropsTo": function(component) {
                        "production" !== "development" ? invariant(component._owner === this, "%s: You can't call transferPropsTo() on a component that you " + "don't own, %s. This usually means you are calling " + "transferPropsTo() on a component passed in as props or children.", this.constructor.displayName, component.constructor.displayName) : invariant(component._owner === this);
                        component.props = ReactPropTransferer.mergeProps(component.props, this.props);
                        return component;
                    }
                }
            };
            module.exports = ReactPropTransferer;
        }, {
            "./emptyFunction": 109,
            "./invariant": 125,
            "./joinClasses": 130,
            "./merge": 134
        } ],
        "67": [ function(_dereq_, module, exports) {
            "use strict";
            var ReactPropTypeLocationNames = {};
            if ("production" !== "development") ReactPropTypeLocationNames = {
                "prop": "prop",
                "context": "context",
                "childContext": "child context"
            };
            module.exports = ReactPropTypeLocationNames;
        }, {} ],
        "68": [ function(_dereq_, module, exports) {
            "use strict";
            var keyMirror = _dereq_("./keyMirror");
            var ReactPropTypeLocations = keyMirror({
                "prop": null,
                "context": null,
                "childContext": null
            });
            module.exports = ReactPropTypeLocations;
        }, {
            "./keyMirror": 131
        } ],
        "69": [ function(_dereq_, module, exports) {
            "use strict";
            var ReactComponent = _dereq_("./ReactComponent");
            var ReactPropTypeLocationNames = _dereq_("./ReactPropTypeLocationNames");
            var warning = _dereq_("./warning");
            var createObjectFrom = _dereq_("./createObjectFrom");
            var Props = {
                "array": createPrimitiveTypeChecker("array"),
                "bool": createPrimitiveTypeChecker("boolean"),
                "func": createPrimitiveTypeChecker("function"),
                "number": createPrimitiveTypeChecker("number"),
                "object": createPrimitiveTypeChecker("object"),
                "string": createPrimitiveTypeChecker("string"),
                "shape": createShapeTypeChecker,
                "oneOf": createEnumTypeChecker,
                "oneOfType": createUnionTypeChecker,
                "arrayOf": createArrayOfTypeChecker,
                "instanceOf": createInstanceTypeChecker,
                "renderable": createRenderableTypeChecker(),
                "component": createComponentTypeChecker(),
                "any": createAnyTypeChecker()
            };
            var ANONYMOUS = "<<anonymous>>";
            function isRenderable(propValue) {
                switch (typeof propValue) {
                  case "number":
                  case "string":
                    return true;

                  case "object":
                    if (Array.isArray(propValue)) return propValue.every(isRenderable);
                    if (ReactComponent.isValidComponent(propValue)) return true;
                    for (var k in propValue) if (!isRenderable(propValue[k])) return false;
                    return true;

                  default:
                    return false;
                }
            }
            function getPropType(propValue) {
                var propType = typeof propValue;
                if ("object" === propType && Array.isArray(propValue)) return "array";
                return propType;
            }
            function createAnyTypeChecker() {
                function validateAnyType(shouldWarn, propValue, propName, componentName, location) {
                    return true;
                }
                return createChainableTypeChecker(validateAnyType);
            }
            function createPrimitiveTypeChecker(expectedType) {
                function validatePrimitiveType(shouldWarn, propValue, propName, componentName, location) {
                    var propType = getPropType(propValue);
                    var isValid = propType === expectedType;
                    if (shouldWarn) "production" !== "development" ? warning(isValid, "Invalid %s `%s` of type `%s` supplied to `%s`, expected `%s`.", ReactPropTypeLocationNames[location], propName, propType, componentName, expectedType) : null;
                    return isValid;
                }
                return createChainableTypeChecker(validatePrimitiveType);
            }
            function createEnumTypeChecker(expectedValues) {
                var expectedEnum = createObjectFrom(expectedValues);
                function validateEnumType(shouldWarn, propValue, propName, componentName, location) {
                    var isValid = expectedEnum[propValue];
                    if (shouldWarn) "production" !== "development" ? warning(isValid, "Invalid %s `%s` supplied to `%s`, expected one of %s.", ReactPropTypeLocationNames[location], propName, componentName, JSON.stringify(Object.keys(expectedEnum))) : null;
                    return isValid;
                }
                return createChainableTypeChecker(validateEnumType);
            }
            function createShapeTypeChecker(shapeTypes) {
                function validateShapeType(shouldWarn, propValue, propName, componentName, location) {
                    var propType = getPropType(propValue);
                    var isValid = "object" === propType;
                    if (isValid) for (var key in shapeTypes) {
                        var checker = shapeTypes[key];
                        if (checker && !checker(propValue, key, componentName, location)) return false;
                    }
                    if (shouldWarn) "production" !== "development" ? warning(isValid, "Invalid %s `%s` of type `%s` supplied to `%s`, expected `object`.", ReactPropTypeLocationNames[location], propName, propType, componentName) : null;
                    return isValid;
                }
                return createChainableTypeChecker(validateShapeType);
            }
            function createInstanceTypeChecker(expectedClass) {
                function validateInstanceType(shouldWarn, propValue, propName, componentName, location) {
                    var isValid = propValue instanceof expectedClass;
                    if (shouldWarn) "production" !== "development" ? warning(isValid, "Invalid %s `%s` supplied to `%s`, expected instance of `%s`.", ReactPropTypeLocationNames[location], propName, componentName, expectedClass.name || ANONYMOUS) : null;
                    return isValid;
                }
                return createChainableTypeChecker(validateInstanceType);
            }
            function createArrayOfTypeChecker(propTypeChecker) {
                function validateArrayType(shouldWarn, propValue, propName, componentName, location) {
                    var isValid = Array.isArray(propValue);
                    if (isValid) for (var i = 0; i < propValue.length; i++) if (!propTypeChecker(propValue, i, componentName, location)) return false;
                    if (shouldWarn) "production" !== "development" ? warning(isValid, "Invalid %s `%s` supplied to `%s`, expected an array.", ReactPropTypeLocationNames[location], propName, componentName) : null;
                    return isValid;
                }
                return createChainableTypeChecker(validateArrayType);
            }
            function createRenderableTypeChecker() {
                function validateRenderableType(shouldWarn, propValue, propName, componentName, location) {
                    var isValid = isRenderable(propValue);
                    if (shouldWarn) "production" !== "development" ? warning(isValid, "Invalid %s `%s` supplied to `%s`, expected a renderable prop.", ReactPropTypeLocationNames[location], propName, componentName) : null;
                    return isValid;
                }
                return createChainableTypeChecker(validateRenderableType);
            }
            function createComponentTypeChecker() {
                function validateComponentType(shouldWarn, propValue, propName, componentName, location) {
                    var isValid = ReactComponent.isValidComponent(propValue);
                    if (shouldWarn) "production" !== "development" ? warning(isValid, "Invalid %s `%s` supplied to `%s`, expected a React component.", ReactPropTypeLocationNames[location], propName, componentName) : null;
                    return isValid;
                }
                return createChainableTypeChecker(validateComponentType);
            }
            function createUnionTypeChecker(arrayOfValidators) {
                return function(props, propName, componentName, location) {
                    var isValid = false;
                    for (var ii = 0; ii < arrayOfValidators.length; ii++) {
                        var validate = arrayOfValidators[ii];
                        if ("function" === typeof validate.weak) validate = validate.weak;
                        if (validate(props, propName, componentName, location)) {
                            isValid = true;
                            break;
                        }
                    }
                    "production" !== "development" ? warning(isValid, "Invalid %s `%s` supplied to `%s`.", ReactPropTypeLocationNames[location], propName, componentName || ANONYMOUS) : null;
                    return isValid;
                };
            }
            function createChainableTypeChecker(validate) {
                function checkType(isRequired, shouldWarn, props, propName, componentName, location) {
                    var propValue = props[propName];
                    if (null != propValue) return validate(shouldWarn, propValue, propName, componentName || ANONYMOUS, location); else {
                        var isValid = !isRequired;
                        if (shouldWarn) "production" !== "development" ? warning(isValid, "Required %s `%s` was not specified in `%s`.", ReactPropTypeLocationNames[location], propName, componentName || ANONYMOUS) : null;
                        return isValid;
                    }
                }
                var checker = checkType.bind(null, false, true);
                checker.weak = checkType.bind(null, false, false);
                checker.isRequired = checkType.bind(null, true, true);
                checker.weak.isRequired = checkType.bind(null, true, false);
                checker.isRequired.weak = checker.weak.isRequired;
                return checker;
            }
            module.exports = Props;
        }, {
            "./ReactComponent": 31,
            "./ReactPropTypeLocationNames": 67,
            "./createObjectFrom": 106,
            "./warning": 148
        } ],
        "70": [ function(_dereq_, module, exports) {
            "use strict";
            var PooledClass = _dereq_("./PooledClass");
            var ReactEventEmitter = _dereq_("./ReactEventEmitter");
            var mixInto = _dereq_("./mixInto");
            function ReactPutListenerQueue() {
                this.listenersToPut = [];
            }
            mixInto(ReactPutListenerQueue, {
                "enqueuePutListener": function(rootNodeID, propKey, propValue) {
                    this.listenersToPut.push({
                        "rootNodeID": rootNodeID,
                        "propKey": propKey,
                        "propValue": propValue
                    });
                },
                "putListeners": function() {
                    for (var i = 0; i < this.listenersToPut.length; i++) {
                        var listenerToPut = this.listenersToPut[i];
                        ReactEventEmitter.putListener(listenerToPut.rootNodeID, listenerToPut.propKey, listenerToPut.propValue);
                    }
                },
                "reset": function() {
                    this.listenersToPut.length = 0;
                },
                "destructor": function() {
                    this.reset();
                }
            });
            PooledClass.addPoolingTo(ReactPutListenerQueue);
            module.exports = ReactPutListenerQueue;
        }, {
            "./PooledClass": 25,
            "./ReactEventEmitter": 52,
            "./mixInto": 137
        } ],
        "71": [ function(_dereq_, module, exports) {
            "use strict";
            var PooledClass = _dereq_("./PooledClass");
            var ReactEventEmitter = _dereq_("./ReactEventEmitter");
            var ReactInputSelection = _dereq_("./ReactInputSelection");
            var ReactMountReady = _dereq_("./ReactMountReady");
            var ReactPutListenerQueue = _dereq_("./ReactPutListenerQueue");
            var Transaction = _dereq_("./Transaction");
            var mixInto = _dereq_("./mixInto");
            var SELECTION_RESTORATION = {
                "initialize": ReactInputSelection.getSelectionInformation,
                "close": ReactInputSelection.restoreSelection
            };
            var EVENT_SUPPRESSION = {
                "initialize": function() {
                    var currentlyEnabled = ReactEventEmitter.isEnabled();
                    ReactEventEmitter.setEnabled(false);
                    return currentlyEnabled;
                },
                "close": function(previouslyEnabled) {
                    ReactEventEmitter.setEnabled(previouslyEnabled);
                }
            };
            var ON_DOM_READY_QUEUEING = {
                "initialize": function() {
                    this.reactMountReady.reset();
                },
                "close": function() {
                    this.reactMountReady.notifyAll();
                }
            };
            var PUT_LISTENER_QUEUEING = {
                "initialize": function() {
                    this.putListenerQueue.reset();
                },
                "close": function() {
                    this.putListenerQueue.putListeners();
                }
            };
            var TRANSACTION_WRAPPERS = [ PUT_LISTENER_QUEUEING, SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING ];
            function ReactReconcileTransaction() {
                this.reinitializeTransaction();
                this.renderToStaticMarkup = false;
                this.reactMountReady = ReactMountReady.getPooled(null);
                this.putListenerQueue = ReactPutListenerQueue.getPooled();
            }
            var Mixin = {
                "getTransactionWrappers": function() {
                    return TRANSACTION_WRAPPERS;
                },
                "getReactMountReady": function() {
                    return this.reactMountReady;
                },
                "getPutListenerQueue": function() {
                    return this.putListenerQueue;
                },
                "destructor": function() {
                    ReactMountReady.release(this.reactMountReady);
                    this.reactMountReady = null;
                    ReactPutListenerQueue.release(this.putListenerQueue);
                    this.putListenerQueue = null;
                }
            };
            mixInto(ReactReconcileTransaction, Transaction.Mixin);
            mixInto(ReactReconcileTransaction, Mixin);
            PooledClass.addPoolingTo(ReactReconcileTransaction);
            module.exports = ReactReconcileTransaction;
        }, {
            "./PooledClass": 25,
            "./ReactEventEmitter": 52,
            "./ReactInputSelection": 56,
            "./ReactMountReady": 61,
            "./ReactPutListenerQueue": 70,
            "./Transaction": 96,
            "./mixInto": 137
        } ],
        "72": [ function(_dereq_, module, exports) {
            "use strict";
            var ReactRootIndexInjection = {
                "injectCreateReactRootIndex": function(_createReactRootIndex) {
                    ReactRootIndex.createReactRootIndex = _createReactRootIndex;
                }
            };
            var ReactRootIndex = {
                "createReactRootIndex": null,
                "injection": ReactRootIndexInjection
            };
            module.exports = ReactRootIndex;
        }, {} ],
        "73": [ function(_dereq_, module, exports) {
            "use strict";
            var ReactComponent = _dereq_("./ReactComponent");
            var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");
            var ReactMarkupChecksum = _dereq_("./ReactMarkupChecksum");
            var ReactServerRenderingTransaction = _dereq_("./ReactServerRenderingTransaction");
            var instantiateReactComponent = _dereq_("./instantiateReactComponent");
            var invariant = _dereq_("./invariant");
            function renderComponentToString(component) {
                "production" !== "development" ? invariant(ReactComponent.isValidComponent(component), "renderComponentToString(): You must pass a valid ReactComponent.") : invariant(ReactComponent.isValidComponent(component));
                "production" !== "development" ? invariant(!(2 === arguments.length && "function" === typeof arguments[1]), "renderComponentToString(): This function became synchronous and now " + "returns the generated markup. Please remove the second parameter.") : invariant(!(2 === arguments.length && "function" === typeof arguments[1]));
                var transaction;
                try {
                    var id = ReactInstanceHandles.createReactRootID();
                    transaction = ReactServerRenderingTransaction.getPooled(false);
                    return transaction.perform(function() {
                        var componentInstance = instantiateReactComponent(component);
                        var markup = componentInstance.mountComponent(id, transaction, 0);
                        return ReactMarkupChecksum.addChecksumToMarkup(markup);
                    }, null);
                } finally {
                    ReactServerRenderingTransaction.release(transaction);
                }
            }
            function renderComponentToStaticMarkup(component) {
                "production" !== "development" ? invariant(ReactComponent.isValidComponent(component), "renderComponentToStaticMarkup(): You must pass a valid ReactComponent.") : invariant(ReactComponent.isValidComponent(component));
                var transaction;
                try {
                    var id = ReactInstanceHandles.createReactRootID();
                    transaction = ReactServerRenderingTransaction.getPooled(true);
                    return transaction.perform(function() {
                        var componentInstance = instantiateReactComponent(component);
                        return componentInstance.mountComponent(id, transaction, 0);
                    }, null);
                } finally {
                    ReactServerRenderingTransaction.release(transaction);
                }
            }
            module.exports = {
                "renderComponentToString": renderComponentToString,
                "renderComponentToStaticMarkup": renderComponentToStaticMarkup
            };
        }, {
            "./ReactComponent": 31,
            "./ReactInstanceHandles": 57,
            "./ReactMarkupChecksum": 59,
            "./ReactServerRenderingTransaction": 74,
            "./instantiateReactComponent": 124,
            "./invariant": 125
        } ],
        "74": [ function(_dereq_, module, exports) {
            "use strict";
            var PooledClass = _dereq_("./PooledClass");
            var ReactMountReady = _dereq_("./ReactMountReady");
            var ReactPutListenerQueue = _dereq_("./ReactPutListenerQueue");
            var Transaction = _dereq_("./Transaction");
            var emptyFunction = _dereq_("./emptyFunction");
            var mixInto = _dereq_("./mixInto");
            var ON_DOM_READY_QUEUEING = {
                "initialize": function() {
                    this.reactMountReady.reset();
                },
                "close": emptyFunction
            };
            var PUT_LISTENER_QUEUEING = {
                "initialize": function() {
                    this.putListenerQueue.reset();
                },
                "close": emptyFunction
            };
            var TRANSACTION_WRAPPERS = [ PUT_LISTENER_QUEUEING, ON_DOM_READY_QUEUEING ];
            function ReactServerRenderingTransaction(renderToStaticMarkup) {
                this.reinitializeTransaction();
                this.renderToStaticMarkup = renderToStaticMarkup;
                this.reactMountReady = ReactMountReady.getPooled(null);
                this.putListenerQueue = ReactPutListenerQueue.getPooled();
            }
            var Mixin = {
                "getTransactionWrappers": function() {
                    return TRANSACTION_WRAPPERS;
                },
                "getReactMountReady": function() {
                    return this.reactMountReady;
                },
                "getPutListenerQueue": function() {
                    return this.putListenerQueue;
                },
                "destructor": function() {
                    ReactMountReady.release(this.reactMountReady);
                    this.reactMountReady = null;
                    ReactPutListenerQueue.release(this.putListenerQueue);
                    this.putListenerQueue = null;
                }
            };
            mixInto(ReactServerRenderingTransaction, Transaction.Mixin);
            mixInto(ReactServerRenderingTransaction, Mixin);
            PooledClass.addPoolingTo(ReactServerRenderingTransaction);
            module.exports = ReactServerRenderingTransaction;
        }, {
            "./PooledClass": 25,
            "./ReactMountReady": 61,
            "./ReactPutListenerQueue": 70,
            "./Transaction": 96,
            "./emptyFunction": 109,
            "./mixInto": 137
        } ],
        "75": [ function(_dereq_, module, exports) {
            "use strict";
            var ReactStateSetters = {
                "createStateSetter": function(component, funcReturningState) {
                    return function(a, b, c, d, e, f) {
                        var partialState = funcReturningState.call(component, a, b, c, d, e, f);
                        if (partialState) component.setState(partialState);
                    };
                },
                "createStateKeySetter": function(component, key) {
                    var cache = component.__keySetters || (component.__keySetters = {});
                    return cache[key] || (cache[key] = createStateKeySetter(component, key));
                }
            };
            function createStateKeySetter(component, key) {
                var partialState = {};
                return function stateKeySetter(value) {
                    partialState[key] = value;
                    component.setState(partialState);
                };
            }
            ReactStateSetters.Mixin = {
                "createStateSetter": function(funcReturningState) {
                    return ReactStateSetters.createStateSetter(this, funcReturningState);
                },
                "createStateKeySetter": function(key) {
                    return ReactStateSetters.createStateKeySetter(this, key);
                }
            };
            module.exports = ReactStateSetters;
        }, {} ],
        "76": [ function(_dereq_, module, exports) {
            "use strict";
            var EventConstants = _dereq_("./EventConstants");
            var EventPluginHub = _dereq_("./EventPluginHub");
            var EventPropagators = _dereq_("./EventPropagators");
            var React = _dereq_("./React");
            var ReactComponent = _dereq_("./ReactComponent");
            var ReactDOM = _dereq_("./ReactDOM");
            var ReactEventEmitter = _dereq_("./ReactEventEmitter");
            var ReactMount = _dereq_("./ReactMount");
            var ReactTextComponent = _dereq_("./ReactTextComponent");
            var ReactUpdates = _dereq_("./ReactUpdates");
            var SyntheticEvent = _dereq_("./SyntheticEvent");
            var mergeInto = _dereq_("./mergeInto");
            var copyProperties = _dereq_("./copyProperties");
            var topLevelTypes = EventConstants.topLevelTypes;
            function Event(suffix) {}
            var ReactTestUtils = {
                "renderIntoDocument": function(instance) {
                    var div = document.createElement("div");
                    return React.renderComponent(instance, div);
                },
                "isComponentOfType": function(inst, convenienceConstructor) {
                    return ReactComponent.isValidComponent(inst) && inst.type === convenienceConstructor.type;
                },
                "isDOMComponent": function(inst) {
                    return !!(inst && ReactComponent.isValidComponent(inst) && !!inst.tagName);
                },
                "isCompositeComponent": function(inst) {
                    if (!ReactComponent.isValidComponent(inst)) return false;
                    var prototype = inst.type.prototype;
                    return "function" === typeof prototype.render && "function" === typeof prototype.setState && "function" === typeof prototype.updateComponent;
                },
                "isCompositeComponentWithType": function(inst, type) {
                    return !!(ReactTestUtils.isCompositeComponent(inst) && (inst.constructor === type.componentConstructor || inst.constructor === type));
                },
                "isTextComponent": function(inst) {
                    return inst instanceof ReactTextComponent;
                },
                "findAllInRenderedTree": function(inst, test) {
                    if (!inst) return [];
                    var ret = test(inst) ? [ inst ] : [];
                    if (ReactTestUtils.isDOMComponent(inst)) {
                        var renderedChildren = inst._renderedChildren;
                        var key;
                        for (key in renderedChildren) {
                            if (!renderedChildren.hasOwnProperty(key)) continue;
                            ret = ret.concat(ReactTestUtils.findAllInRenderedTree(renderedChildren[key], test));
                        }
                    } else if (ReactTestUtils.isCompositeComponent(inst)) ret = ret.concat(ReactTestUtils.findAllInRenderedTree(inst._renderedComponent, test));
                    return ret;
                },
                "scryRenderedDOMComponentsWithClass": function(root, className) {
                    return ReactTestUtils.findAllInRenderedTree(root, function(inst) {
                        var instClassName = inst.props.className;
                        return ReactTestUtils.isDOMComponent(inst) && instClassName && (" " + instClassName + " ").indexOf(" " + className + " ") !== -1;
                    });
                },
                "findRenderedDOMComponentWithClass": function(root, className) {
                    var all = ReactTestUtils.scryRenderedDOMComponentsWithClass(root, className);
                    if (1 !== all.length) throw new Error("Did not find exactly one match for class:" + className);
                    return all[0];
                },
                "scryRenderedDOMComponentsWithTag": function(root, tagName) {
                    return ReactTestUtils.findAllInRenderedTree(root, function(inst) {
                        return ReactTestUtils.isDOMComponent(inst) && inst.tagName === tagName.toUpperCase();
                    });
                },
                "findRenderedDOMComponentWithTag": function(root, tagName) {
                    var all = ReactTestUtils.scryRenderedDOMComponentsWithTag(root, tagName);
                    if (1 !== all.length) throw new Error("Did not find exactly one match for tag:" + tagName);
                    return all[0];
                },
                "scryRenderedComponentsWithType": function(root, componentType) {
                    return ReactTestUtils.findAllInRenderedTree(root, function(inst) {
                        return ReactTestUtils.isCompositeComponentWithType(inst, componentType);
                    });
                },
                "findRenderedComponentWithType": function(root, componentType) {
                    var all = ReactTestUtils.scryRenderedComponentsWithType(root, componentType);
                    if (1 !== all.length) throw new Error("Did not find exactly one match for componentType:" + componentType);
                    return all[0];
                },
                "mockComponent": function(module, mockTagName) {
                    var ConvenienceConstructor = React.createClass({
                        "render": function() {
                            var mockTagName = mockTagName || module.mockTagName || "div";
                            return ReactDOM[mockTagName](null, this.props.children);
                        }
                    });
                    copyProperties(module, ConvenienceConstructor);
                    module.mockImplementation(ConvenienceConstructor);
                    return this;
                },
                "simulateNativeEventOnNode": function(topLevelType, node, fakeNativeEvent) {
                    var virtualHandler = ReactEventEmitter.TopLevelCallbackCreator.createTopLevelCallback(topLevelType);
                    fakeNativeEvent.target = node;
                    virtualHandler(fakeNativeEvent);
                },
                "simulateNativeEventOnDOMComponent": function(topLevelType, comp, fakeNativeEvent) {
                    ReactTestUtils.simulateNativeEventOnNode(topLevelType, comp.getDOMNode(), fakeNativeEvent);
                },
                "nativeTouchData": function(x, y) {
                    return {
                        "touches": [ {
                            "pageX": x,
                            "pageY": y
                        } ]
                    };
                },
                "Simulate": null,
                "SimulateNative": {}
            };
            function makeSimulator(eventType) {
                return function(domComponentOrNode, eventData) {
                    var node;
                    if (ReactTestUtils.isDOMComponent(domComponentOrNode)) node = domComponentOrNode.getDOMNode(); else if (domComponentOrNode.tagName) node = domComponentOrNode;
                    var fakeNativeEvent = new Event();
                    fakeNativeEvent.target = node;
                    var event = new SyntheticEvent(ReactEventEmitter.eventNameDispatchConfigs[eventType], ReactMount.getID(node), fakeNativeEvent);
                    mergeInto(event, eventData);
                    EventPropagators.accumulateTwoPhaseDispatches(event);
                    ReactUpdates.batchedUpdates(function() {
                        EventPluginHub.enqueueEvents(event);
                        EventPluginHub.processEventQueue();
                    });
                };
            }
            function buildSimulators() {
                ReactTestUtils.Simulate = {};
                var eventType;
                for (eventType in ReactEventEmitter.eventNameDispatchConfigs) ReactTestUtils.Simulate[eventType] = makeSimulator(eventType);
            }
            var oldInjectEventPluginOrder = EventPluginHub.injection.injectEventPluginOrder;
            EventPluginHub.injection.injectEventPluginOrder = function() {
                oldInjectEventPluginOrder.apply(this, arguments);
                buildSimulators();
            };
            var oldInjectEventPlugins = EventPluginHub.injection.injectEventPluginsByName;
            EventPluginHub.injection.injectEventPluginsByName = function() {
                oldInjectEventPlugins.apply(this, arguments);
                buildSimulators();
            };
            buildSimulators();
            function makeNativeSimulator(eventType) {
                return function(domComponentOrNode, nativeEventData) {
                    var fakeNativeEvent = new Event(eventType);
                    mergeInto(fakeNativeEvent, nativeEventData);
                    if (ReactTestUtils.isDOMComponent(domComponentOrNode)) ReactTestUtils.simulateNativeEventOnDOMComponent(eventType, domComponentOrNode, fakeNativeEvent); else if (!!domComponentOrNode.tagName) ReactTestUtils.simulateNativeEventOnNode(eventType, domComponentOrNode, fakeNativeEvent);
                };
            }
            var eventType;
            for (eventType in topLevelTypes) {
                var convenienceName = 0 === eventType.indexOf("top") ? eventType.charAt(3).toLowerCase() + eventType.substr(4) : eventType;
                ReactTestUtils.SimulateNative[convenienceName] = makeNativeSimulator(eventType);
            }
            module.exports = ReactTestUtils;
        }, {
            "./EventConstants": 15,
            "./EventPluginHub": 17,
            "./EventPropagators": 20,
            "./React": 26,
            "./ReactComponent": 31,
            "./ReactDOM": 36,
            "./ReactEventEmitter": 52,
            "./ReactMount": 60,
            "./ReactTextComponent": 77,
            "./ReactUpdates": 81,
            "./SyntheticEvent": 89,
            "./copyProperties": 102,
            "./mergeInto": 136
        } ],
        "77": [ function(_dereq_, module, exports) {
            "use strict";
            var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
            var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
            var ReactComponent = _dereq_("./ReactComponent");
            var escapeTextForBrowser = _dereq_("./escapeTextForBrowser");
            var mixInto = _dereq_("./mixInto");
            var ReactTextComponent = function(initialText) {
                this.construct({
                    "text": initialText
                });
            };
            ReactTextComponent.ConvenienceConstructor = function(props) {
                return new ReactTextComponent(props.text);
            };
            mixInto(ReactTextComponent, ReactComponent.Mixin);
            mixInto(ReactTextComponent, ReactBrowserComponentMixin);
            mixInto(ReactTextComponent, {
                "mountComponent": function(rootID, transaction, mountDepth) {
                    ReactComponent.Mixin.mountComponent.call(this, rootID, transaction, mountDepth);
                    var escapedText = escapeTextForBrowser(this.props.text);
                    if (transaction.renderToStaticMarkup) return escapedText;
                    return "<span " + DOMPropertyOperations.createMarkupForID(rootID) + ">" + escapedText + "</span>";
                },
                "receiveComponent": function(nextComponent, transaction) {
                    var nextProps = nextComponent.props;
                    if (nextProps.text !== this.props.text) {
                        this.props.text = nextProps.text;
                        ReactComponent.BackendIDOperations.updateTextContentByID(this._rootNodeID, nextProps.text);
                    }
                }
            });
            ReactTextComponent.type = ReactTextComponent;
            ReactTextComponent.prototype.type = ReactTextComponent;
            module.exports = ReactTextComponent;
        }, {
            "./DOMPropertyOperations": 10,
            "./ReactBrowserComponentMixin": 27,
            "./ReactComponent": 31,
            "./escapeTextForBrowser": 111,
            "./mixInto": 137
        } ],
        "78": [ function(_dereq_, module, exports) {
            "use strict";
            var ReactChildren = _dereq_("./ReactChildren");
            var ReactTransitionChildMapping = {
                "getChildMapping": function(children) {
                    return ReactChildren.map(children, function(child) {
                        return child;
                    });
                },
                "mergeChildMappings": function(prev, next) {
                    prev = prev || {};
                    next = next || {};
                    function getValueForKey(key) {
                        if (next.hasOwnProperty(key)) return next[key]; else return prev[key];
                    }
                    var nextKeysPending = {};
                    var pendingKeys = [];
                    for (var prevKey in prev) if (next[prevKey]) {
                        if (pendingKeys.length) {
                            nextKeysPending[prevKey] = pendingKeys;
                            pendingKeys = [];
                        }
                    } else pendingKeys.push(prevKey);
                    var i;
                    var childMapping = {};
                    for (var nextKey in next) {
                        if (nextKeysPending[nextKey]) for (i = 0; i < nextKeysPending[nextKey].length; i++) {
                            var pendingNextKey = nextKeysPending[nextKey][i];
                            childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
                        }
                        childMapping[nextKey] = getValueForKey(nextKey);
                    }
                    for (i = 0; i < pendingKeys.length; i++) childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
                    return childMapping;
                }
            };
            module.exports = ReactTransitionChildMapping;
        }, {
            "./ReactChildren": 30
        } ],
        "79": [ function(_dereq_, module, exports) {
            "use strict";
            var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
            var EVENT_NAME_MAP = {
                "transitionend": {
                    "transition": "transitionend",
                    "WebkitTransition": "webkitTransitionEnd",
                    "MozTransition": "mozTransitionEnd",
                    "OTransition": "oTransitionEnd",
                    "msTransition": "MSTransitionEnd"
                },
                "animationend": {
                    "animation": "animationend",
                    "WebkitAnimation": "webkitAnimationEnd",
                    "MozAnimation": "mozAnimationEnd",
                    "OAnimation": "oAnimationEnd",
                    "msAnimation": "MSAnimationEnd"
                }
            };
            var endEvents = [];
            function detectEvents() {
                var testEl = document.createElement("div");
                var style = testEl.style;
                for (var baseEventName in EVENT_NAME_MAP) {
                    var baseEvents = EVENT_NAME_MAP[baseEventName];
                    for (var styleName in baseEvents) if (styleName in style) {
                        endEvents.push(baseEvents[styleName]);
                        break;
                    }
                }
            }
            if (ExecutionEnvironment.canUseDOM) detectEvents();
            function addEventListener(node, eventName, eventListener) {
                node.addEventListener(eventName, eventListener, false);
            }
            function removeEventListener(node, eventName, eventListener) {
                node.removeEventListener(eventName, eventListener, false);
            }
            var ReactTransitionEvents = {
                "addEndEventListener": function(node, eventListener) {
                    if (0 === endEvents.length) {
                        window.setTimeout(eventListener, 0);
                        return;
                    }
                    endEvents.forEach(function(endEvent) {
                        addEventListener(node, endEvent, eventListener);
                    });
                },
                "removeEndEventListener": function(node, eventListener) {
                    if (0 === endEvents.length) return;
                    endEvents.forEach(function(endEvent) {
                        removeEventListener(node, endEvent, eventListener);
                    });
                }
            };
            module.exports = ReactTransitionEvents;
        }, {
            "./ExecutionEnvironment": 21
        } ],
        "80": [ function(_dereq_, module, exports) {
            "use strict";
            var React = _dereq_("./React");
            var ReactTransitionChildMapping = _dereq_("./ReactTransitionChildMapping");
            var cloneWithProps = _dereq_("./cloneWithProps");
            var emptyFunction = _dereq_("./emptyFunction");
            var merge = _dereq_("./merge");
            var ReactTransitionGroup = React.createClass({
                "propTypes": {
                    "component": React.PropTypes.func,
                    "childFactory": React.PropTypes.func
                },
                "getDefaultProps": function() {
                    return {
                        "component": React.DOM.span,
                        "childFactory": emptyFunction.thatReturnsArgument
                    };
                },
                "getInitialState": function() {
                    return {
                        "children": ReactTransitionChildMapping.getChildMapping(this.props.children)
                    };
                },
                "componentWillReceiveProps": function(nextProps) {
                    var nextChildMapping = ReactTransitionChildMapping.getChildMapping(nextProps.children);
                    var prevChildMapping = this.state.children;
                    this.setState({
                        "children": ReactTransitionChildMapping.mergeChildMappings(prevChildMapping, nextChildMapping)
                    });
                    var key;
                    for (key in nextChildMapping) if (!prevChildMapping.hasOwnProperty(key) && !this.currentlyTransitioningKeys[key]) this.keysToEnter.push(key);
                    for (key in prevChildMapping) if (!nextChildMapping.hasOwnProperty(key) && !this.currentlyTransitioningKeys[key]) this.keysToLeave.push(key);
                },
                "componentWillMount": function() {
                    this.currentlyTransitioningKeys = {};
                    this.keysToEnter = [];
                    this.keysToLeave = [];
                },
                "componentDidUpdate": function() {
                    var keysToEnter = this.keysToEnter;
                    this.keysToEnter = [];
                    keysToEnter.forEach(this.performEnter);
                    var keysToLeave = this.keysToLeave;
                    this.keysToLeave = [];
                    keysToLeave.forEach(this.performLeave);
                },
                "performEnter": function(key) {
                    this.currentlyTransitioningKeys[key] = true;
                    var component = this.refs[key];
                    if (component.componentWillEnter) component.componentWillEnter(this._handleDoneEntering.bind(this, key)); else this._handleDoneEntering(key);
                },
                "_handleDoneEntering": function(key) {
                    var component = this.refs[key];
                    if (component.componentDidEnter) component.componentDidEnter();
                    delete this.currentlyTransitioningKeys[key];
                    var currentChildMapping = ReactTransitionChildMapping.getChildMapping(this.props.children);
                    if (!currentChildMapping.hasOwnProperty(key)) this.performLeave(key);
                },
                "performLeave": function(key) {
                    this.currentlyTransitioningKeys[key] = true;
                    var component = this.refs[key];
                    if (component.componentWillLeave) component.componentWillLeave(this._handleDoneLeaving.bind(this, key)); else this._handleDoneLeaving(key);
                },
                "_handleDoneLeaving": function(key) {
                    var component = this.refs[key];
                    if (component.componentDidLeave) component.componentDidLeave();
                    delete this.currentlyTransitioningKeys[key];
                    var currentChildMapping = ReactTransitionChildMapping.getChildMapping(this.props.children);
                    if (currentChildMapping.hasOwnProperty(key)) this.performEnter(key); else {
                        var newChildren = merge(this.state.children);
                        delete newChildren[key];
                        this.setState({
                            "children": newChildren
                        });
                    }
                },
                "render": function() {
                    var childrenToRender = {};
                    for (var key in this.state.children) {
                        var child = this.state.children[key];
                        if (child) childrenToRender[key] = cloneWithProps(this.props.childFactory(child), {
                            "ref": key
                        });
                    }
                    return this.transferPropsTo(this.props.component(null, childrenToRender));
                }
            });
            module.exports = ReactTransitionGroup;
        }, {
            "./React": 26,
            "./ReactTransitionChildMapping": 78,
            "./cloneWithProps": 100,
            "./emptyFunction": 109,
            "./merge": 134
        } ],
        "81": [ function(_dereq_, module, exports) {
            "use strict";
            var ReactPerf = _dereq_("./ReactPerf");
            var invariant = _dereq_("./invariant");
            var dirtyComponents = [];
            var batchingStrategy = null;
            function ensureBatchingStrategy() {
                "production" !== "development" ? invariant(batchingStrategy, "ReactUpdates: must inject a batching strategy") : invariant(batchingStrategy);
            }
            function batchedUpdates(callback, param) {
                ensureBatchingStrategy();
                batchingStrategy.batchedUpdates(callback, param);
            }
            function mountDepthComparator(c1, c2) {
                return c1._mountDepth - c2._mountDepth;
            }
            function runBatchedUpdates() {
                dirtyComponents.sort(mountDepthComparator);
                for (var i = 0; i < dirtyComponents.length; i++) {
                    var component = dirtyComponents[i];
                    if (component.isMounted()) {
                        var callbacks = component._pendingCallbacks;
                        component._pendingCallbacks = null;
                        component.performUpdateIfNecessary();
                        if (callbacks) for (var j = 0; j < callbacks.length; j++) callbacks[j].call(component);
                    }
                }
            }
            function clearDirtyComponents() {
                dirtyComponents.length = 0;
            }
            var flushBatchedUpdates = ReactPerf.measure("ReactUpdates", "flushBatchedUpdates", function() {
                try {
                    runBatchedUpdates();
                } finally {
                    clearDirtyComponents();
                }
            });
            function enqueueUpdate(component, callback) {
                "production" !== "development" ? invariant(!callback || "function" === typeof callback, "enqueueUpdate(...): You called `setProps`, `replaceProps`, " + "`setState`, `replaceState`, or `forceUpdate` with a callback that " + "isn't callable.") : invariant(!callback || "function" === typeof callback);
                ensureBatchingStrategy();
                if (!batchingStrategy.isBatchingUpdates) {
                    component.performUpdateIfNecessary();
                    callback && callback.call(component);
                    return;
                }
                dirtyComponents.push(component);
                if (callback) if (component._pendingCallbacks) component._pendingCallbacks.push(callback); else component._pendingCallbacks = [ callback ];
            }
            var ReactUpdatesInjection = {
                "injectBatchingStrategy": function(_batchingStrategy) {
                    "production" !== "development" ? invariant(_batchingStrategy, "ReactUpdates: must provide a batching strategy") : invariant(_batchingStrategy);
                    "production" !== "development" ? invariant("function" === typeof _batchingStrategy.batchedUpdates, "ReactUpdates: must provide a batchedUpdates() function") : invariant("function" === typeof _batchingStrategy.batchedUpdates);
                    "production" !== "development" ? invariant("boolean" === typeof _batchingStrategy.isBatchingUpdates, "ReactUpdates: must provide an isBatchingUpdates boolean attribute") : invariant("boolean" === typeof _batchingStrategy.isBatchingUpdates);
                    batchingStrategy = _batchingStrategy;
                }
            };
            var ReactUpdates = {
                "batchedUpdates": batchedUpdates,
                "enqueueUpdate": enqueueUpdate,
                "flushBatchedUpdates": flushBatchedUpdates,
                "injection": ReactUpdatesInjection
            };
            module.exports = ReactUpdates;
        }, {
            "./ReactPerf": 65,
            "./invariant": 125
        } ],
        "82": [ function(_dereq_, module, exports) {
            "use strict";
            var LinkedStateMixin = _dereq_("./LinkedStateMixin");
            var React = _dereq_("./React");
            var ReactCSSTransitionGroup = _dereq_("./ReactCSSTransitionGroup");
            var ReactTransitionGroup = _dereq_("./ReactTransitionGroup");
            var ReactCSSTransitionGroup = _dereq_("./ReactCSSTransitionGroup");
            var cx = _dereq_("./cx");
            var cloneWithProps = _dereq_("./cloneWithProps");
            var update = _dereq_("./update");
            React.addons = {
                "LinkedStateMixin": LinkedStateMixin,
                "CSSTransitionGroup": ReactCSSTransitionGroup,
                "TransitionGroup": ReactTransitionGroup,
                "classSet": cx,
                "cloneWithProps": cloneWithProps,
                "update": update
            };
            if ("production" !== "development") React.addons.TestUtils = _dereq_("./ReactTestUtils");
            module.exports = React;
        }, {
            "./LinkedStateMixin": 22,
            "./React": 26,
            "./ReactCSSTransitionGroup": 28,
            "./ReactTestUtils": 76,
            "./ReactTransitionGroup": 80,
            "./cloneWithProps": 100,
            "./cx": 107,
            "./update": 147
        } ],
        "83": [ function(_dereq_, module, exports) {
            "use strict";
            var EventConstants = _dereq_("./EventConstants");
            var EventPropagators = _dereq_("./EventPropagators");
            var ReactInputSelection = _dereq_("./ReactInputSelection");
            var SyntheticEvent = _dereq_("./SyntheticEvent");
            var getActiveElement = _dereq_("./getActiveElement");
            var isTextInputElement = _dereq_("./isTextInputElement");
            var keyOf = _dereq_("./keyOf");
            var shallowEqual = _dereq_("./shallowEqual");
            var topLevelTypes = EventConstants.topLevelTypes;
            var eventTypes = {
                "select": {
                    "phasedRegistrationNames": {
                        "bubbled": keyOf({
                            "onSelect": null
                        }),
                        "captured": keyOf({
                            "onSelectCapture": null
                        })
                    },
                    "dependencies": [ topLevelTypes.topBlur, topLevelTypes.topContextMenu, topLevelTypes.topFocus, topLevelTypes.topKeyDown, topLevelTypes.topMouseDown, topLevelTypes.topMouseUp, topLevelTypes.topSelectionChange ]
                }
            };
            var activeElement = null;
            var activeElementID = null;
            var lastSelection = null;
            var mouseDown = false;
            function getSelection(node) {
                if ("selectionStart" in node && ReactInputSelection.hasSelectionCapabilities(node)) return {
                    "start": node.selectionStart,
                    "end": node.selectionEnd
                }; else if (document.selection) {
                    var range = document.selection.createRange();
                    return {
                        "parentElement": range.parentElement(),
                        "text": range.text,
                        "top": range.boundingTop,
                        "left": range.boundingLeft
                    };
                } else {
                    var selection = window.getSelection();
                    return {
                        "anchorNode": selection.anchorNode,
                        "anchorOffset": selection.anchorOffset,
                        "focusNode": selection.focusNode,
                        "focusOffset": selection.focusOffset
                    };
                }
            }
            function constructSelectEvent(nativeEvent) {
                if (mouseDown || null == activeElement || activeElement != getActiveElement()) return;
                var currentSelection = getSelection(activeElement);
                if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
                    lastSelection = currentSelection;
                    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementID, nativeEvent);
                    syntheticEvent.type = "select";
                    syntheticEvent.target = activeElement;
                    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);
                    return syntheticEvent;
                }
            }
            var SelectEventPlugin = {
                "eventTypes": eventTypes,
                "extractEvents": function(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent) {
                    switch (topLevelType) {
                      case topLevelTypes.topFocus:
                        if (isTextInputElement(topLevelTarget) || "true" === topLevelTarget.contentEditable) {
                            activeElement = topLevelTarget;
                            activeElementID = topLevelTargetID;
                            lastSelection = null;
                        }
                        break;

                      case topLevelTypes.topBlur:
                        activeElement = null;
                        activeElementID = null;
                        lastSelection = null;
                        break;

                      case topLevelTypes.topMouseDown:
                        mouseDown = true;
                        break;

                      case topLevelTypes.topContextMenu:
                      case topLevelTypes.topMouseUp:
                        mouseDown = false;
                        return constructSelectEvent(nativeEvent);

                      case topLevelTypes.topSelectionChange:
                      case topLevelTypes.topKeyDown:
                      case topLevelTypes.topKeyUp:
                        return constructSelectEvent(nativeEvent);
                    }
                }
            };
            module.exports = SelectEventPlugin;
        }, {
            "./EventConstants": 15,
            "./EventPropagators": 20,
            "./ReactInputSelection": 56,
            "./SyntheticEvent": 89,
            "./getActiveElement": 115,
            "./isTextInputElement": 128,
            "./keyOf": 132,
            "./shallowEqual": 143
        } ],
        "84": [ function(_dereq_, module, exports) {
            "use strict";
            var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);
            var ServerReactRootIndex = {
                "createReactRootIndex": function() {
                    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);
                }
            };
            module.exports = ServerReactRootIndex;
        }, {} ],
        "85": [ function(_dereq_, module, exports) {
            "use strict";
            var EventConstants = _dereq_("./EventConstants");
            var EventPluginUtils = _dereq_("./EventPluginUtils");
            var EventPropagators = _dereq_("./EventPropagators");
            var SyntheticClipboardEvent = _dereq_("./SyntheticClipboardEvent");
            var SyntheticEvent = _dereq_("./SyntheticEvent");
            var SyntheticFocusEvent = _dereq_("./SyntheticFocusEvent");
            var SyntheticKeyboardEvent = _dereq_("./SyntheticKeyboardEvent");
            var SyntheticMouseEvent = _dereq_("./SyntheticMouseEvent");
            var SyntheticDragEvent = _dereq_("./SyntheticDragEvent");
            var SyntheticTouchEvent = _dereq_("./SyntheticTouchEvent");
            var SyntheticUIEvent = _dereq_("./SyntheticUIEvent");
            var SyntheticWheelEvent = _dereq_("./SyntheticWheelEvent");
            var invariant = _dereq_("./invariant");
            var keyOf = _dereq_("./keyOf");
            var topLevelTypes = EventConstants.topLevelTypes;
            var eventTypes = {
                "blur": {
                    "phasedRegistrationNames": {
                        "bubbled": keyOf({
                            "onBlur": true
                        }),
                        "captured": keyOf({
                            "onBlurCapture": true
                        })
                    }
                },
                "click": {
                    "phasedRegistrationNames": {
                        "bubbled": keyOf({
                            "onClick": true
                        }),
                        "captured": keyOf({
                            "onClickCapture": true
                        })
                    }
                },
                "contextMenu": {
                    "phasedRegistrationNames": {
                        "bubbled": keyOf({
                            "onContextMenu": true
                        }),
                        "captured": keyOf({
                            "onContextMenuCapture": true
                        })
                    }
                },
                "copy": {
                    "phasedRegistrationNames": {
                        "bubbled": keyOf({
                            "onCopy": true
                        }),
                        "captured": keyOf({
                            "onCopyCapture": true
                        })
                    }
                },
                "cut": {
                    "phasedRegistrationNames": {
                        "bubbled": keyOf({
                            "onCut": true
                        }),
                        "captured": keyOf({
                            "onCutCapture": true
                        })
                    }
                },
                "doubleClick": {
                    "phasedRegistrationNames": {
                        "bubbled": keyOf({
                            "onDoubleClick": true
                        }),
                        "captured": keyOf({
                            "onDoubleClickCapture": true
                        })
                    }
                },
                "drag": {
                    "phasedRegistrationNames": {
                        "bubbled": keyOf({
                            "onDrag": true
                        }),
                        "captured": keyOf({
                            "onDragCapture": true
                        })
                    }
                },
                "dragEnd": {
                    "phasedRegistrationNames": {
                        "bubbled": keyOf({
                            "onDragEnd": true
                        }),
                        "captured": keyOf({
                            "onDragEndCapture": true
                        })
                    }
                },
                "dragEnter": {
                    "phasedRegistrationNames": {
                        "bubbled": keyOf({
                            "onDragEnter": true
                        }),
                        "captured": keyOf({
                            "onDragEnterCapture": true
                        })
                    }
                },
                "dragExit": {
                    "phasedRegistrationNames": {
                        "bubbled": keyOf({
                            "onDragExit": true
                        }),
                        "captured": keyOf({
                            "onDragExitCapture": true
                        })
                    }
                },
                "dragLeave": {
                    "phasedRegistrationNames": {
                        "bubbled": keyOf({
                            "onDragLeave": true
                        }),
                        "captured": keyOf({
                            "onDragLeaveCapture": true
                        })
                    }
                },
                "dragOver": {
                    "phasedRegistrationNames": {
                        "bubbled": keyOf({
                            "onDragOver": true
                        }),
                        "captured": keyOf({
                            "onDragOverCapture": true
                        })
                    }
                },
                "dragStart": {
                    "phasedRegistrationNames": {
                        "bubbled": keyOf({
                            "onDragStart": true
                        }),
                        "captured": keyOf({
                            "onDragStartCapture": true
                        })
                    }
                },
                "drop": {
                    "phasedRegistrationNames": {
                        "bubbled": keyOf({
                            "onDrop": true
                        }),
                        "captured": keyOf({
                            "onDropCapture": true
                        })
                    }
                },
                "focus": {
                    "phasedRegistrationNames": {
                        "bubbled": keyOf({
                            "onFocus": true
                        }),
                        "captured": keyOf({
                            "onFocusCapture": true
                        })
                    }
                },
                "input": {
                    "phasedRegistrationNames": {
                        "bubbled": keyOf({
                            "onInput": true
                        }),
                        "captured": keyOf({
                            "onInputCapture": true
                        })
                    }
                },
                "keyDown": {
                    "phasedRegistrationNames": {
                        "bubbled": keyOf({
                            "onKeyDown": true
                        }),
                        "captured": keyOf({
                            "onKeyDownCapture": true
                        })
                    }
                },
                "keyPress": {
                    "phasedRegistrationNames": {
                        "bubbled": keyOf({
                            "onKeyPress": true
                        }),
                        "captured": keyOf({
                            "onKeyPressCapture": true
                        })
                    }
                },
                "keyUp": {
                    "phasedRegistrationNames": {
                        "bubbled": keyOf({
                            "onKeyUp": true
                        }),
                        "captured": keyOf({
                            "onKeyUpCapture": true
                        })
                    }
                },
                "load": {
                    "phasedRegistrationNames": {
                        "bubbled": keyOf({
                            "onLoad": true
                        }),
                        "captured": keyOf({
                            "onLoadCapture": true
                        })
                    }
                },
                "error": {
                    "phasedRegistrationNames": {
                        "bubbled": keyOf({
                            "onError": true
                        }),
                        "captured": keyOf({
                            "onErrorCapture": true
                        })
                    }
                },
                "mouseDown": {
                    "phasedRegistrationNames": {
                        "bubbled": keyOf({
                            "onMouseDown": true
                        }),
                        "captured": keyOf({
                            "onMouseDownCapture": true
                        })
                    }
                },
                "mouseMove": {
                    "phasedRegistrationNames": {
                        "bubbled": keyOf({
                            "onMouseMove": true
                        }),
                        "captured": keyOf({
                            "onMouseMoveCapture": true
                        })
                    }
                },
                "mouseOut": {
                    "phasedRegistrationNames": {
                        "bubbled": keyOf({
                            "onMouseOut": true
                        }),
                        "captured": keyOf({
                            "onMouseOutCapture": true
                        })
                    }
                },
                "mouseOver": {
                    "phasedRegistrationNames": {
                        "bubbled": keyOf({
                            "onMouseOver": true
                        }),
                        "captured": keyOf({
                            "onMouseOverCapture": true
                        })
                    }
                },
                "mouseUp": {
                    "phasedRegistrationNames": {
                        "bubbled": keyOf({
                            "onMouseUp": true
                        }),
                        "captured": keyOf({
                            "onMouseUpCapture": true
                        })
                    }
                },
                "paste": {
                    "phasedRegistrationNames": {
                        "bubbled": keyOf({
                            "onPaste": true
                        }),
                        "captured": keyOf({
                            "onPasteCapture": true
                        })
                    }
                },
                "reset": {
                    "phasedRegistrationNames": {
                        "bubbled": keyOf({
                            "onReset": true
                        }),
                        "captured": keyOf({
                            "onResetCapture": true
                        })
                    }
                },
                "scroll": {
                    "phasedRegistrationNames": {
                        "bubbled": keyOf({
                            "onScroll": true
                        }),
                        "captured": keyOf({
                            "onScrollCapture": true
                        })
                    }
                },
                "submit": {
                    "phasedRegistrationNames": {
                        "bubbled": keyOf({
                            "onSubmit": true
                        }),
                        "captured": keyOf({
                            "onSubmitCapture": true
                        })
                    }
                },
                "touchCancel": {
                    "phasedRegistrationNames": {
                        "bubbled": keyOf({
                            "onTouchCancel": true
                        }),
                        "captured": keyOf({
                            "onTouchCancelCapture": true
                        })
                    }
                },
                "touchEnd": {
                    "phasedRegistrationNames": {
                        "bubbled": keyOf({
                            "onTouchEnd": true
                        }),
                        "captured": keyOf({
                            "onTouchEndCapture": true
                        })
                    }
                },
                "touchMove": {
                    "phasedRegistrationNames": {
                        "bubbled": keyOf({
                            "onTouchMove": true
                        }),
                        "captured": keyOf({
                            "onTouchMoveCapture": true
                        })
                    }
                },
                "touchStart": {
                    "phasedRegistrationNames": {
                        "bubbled": keyOf({
                            "onTouchStart": true
                        }),
                        "captured": keyOf({
                            "onTouchStartCapture": true
                        })
                    }
                },
                "wheel": {
                    "phasedRegistrationNames": {
                        "bubbled": keyOf({
                            "onWheel": true
                        }),
                        "captured": keyOf({
                            "onWheelCapture": true
                        })
                    }
                }
            };
            var topLevelEventsToDispatchConfig = {
                "topBlur": eventTypes.blur,
                "topClick": eventTypes.click,
                "topContextMenu": eventTypes.contextMenu,
                "topCopy": eventTypes.copy,
                "topCut": eventTypes.cut,
                "topDoubleClick": eventTypes.doubleClick,
                "topDrag": eventTypes.drag,
                "topDragEnd": eventTypes.dragEnd,
                "topDragEnter": eventTypes.dragEnter,
                "topDragExit": eventTypes.dragExit,
                "topDragLeave": eventTypes.dragLeave,
                "topDragOver": eventTypes.dragOver,
                "topDragStart": eventTypes.dragStart,
                "topDrop": eventTypes.drop,
                "topError": eventTypes.error,
                "topFocus": eventTypes.focus,
                "topInput": eventTypes.input,
                "topKeyDown": eventTypes.keyDown,
                "topKeyPress": eventTypes.keyPress,
                "topKeyUp": eventTypes.keyUp,
                "topLoad": eventTypes.load,
                "topMouseDown": eventTypes.mouseDown,
                "topMouseMove": eventTypes.mouseMove,
                "topMouseOut": eventTypes.mouseOut,
                "topMouseOver": eventTypes.mouseOver,
                "topMouseUp": eventTypes.mouseUp,
                "topPaste": eventTypes.paste,
                "topReset": eventTypes.reset,
                "topScroll": eventTypes.scroll,
                "topSubmit": eventTypes.submit,
                "topTouchCancel": eventTypes.touchCancel,
                "topTouchEnd": eventTypes.touchEnd,
                "topTouchMove": eventTypes.touchMove,
                "topTouchStart": eventTypes.touchStart,
                "topWheel": eventTypes.wheel
            };
            for (var topLevelType in topLevelEventsToDispatchConfig) topLevelEventsToDispatchConfig[topLevelType].dependencies = [ topLevelType ];
            var SimpleEventPlugin = {
                "eventTypes": eventTypes,
                "executeDispatch": function(event, listener, domID) {
                    var returnValue = EventPluginUtils.executeDispatch(event, listener, domID);
                    if (false === returnValue) {
                        event.stopPropagation();
                        event.preventDefault();
                    }
                },
                "extractEvents": function(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent) {
                    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
                    if (!dispatchConfig) return null;
                    var EventConstructor;
                    switch (topLevelType) {
                      case topLevelTypes.topInput:
                      case topLevelTypes.topLoad:
                      case topLevelTypes.topError:
                      case topLevelTypes.topReset:
                      case topLevelTypes.topSubmit:
                        EventConstructor = SyntheticEvent;
                        break;

                      case topLevelTypes.topKeyDown:
                      case topLevelTypes.topKeyPress:
                      case topLevelTypes.topKeyUp:
                        EventConstructor = SyntheticKeyboardEvent;
                        break;

                      case topLevelTypes.topBlur:
                      case topLevelTypes.topFocus:
                        EventConstructor = SyntheticFocusEvent;
                        break;

                      case topLevelTypes.topClick:
                        if (2 === nativeEvent.button) return null;

                      case topLevelTypes.topContextMenu:
                      case topLevelTypes.topDoubleClick:
                      case topLevelTypes.topMouseDown:
                      case topLevelTypes.topMouseMove:
                      case topLevelTypes.topMouseOut:
                      case topLevelTypes.topMouseOver:
                      case topLevelTypes.topMouseUp:
                        EventConstructor = SyntheticMouseEvent;
                        break;

                      case topLevelTypes.topDrag:
                      case topLevelTypes.topDragEnd:
                      case topLevelTypes.topDragEnter:
                      case topLevelTypes.topDragExit:
                      case topLevelTypes.topDragLeave:
                      case topLevelTypes.topDragOver:
                      case topLevelTypes.topDragStart:
                      case topLevelTypes.topDrop:
                        EventConstructor = SyntheticDragEvent;
                        break;

                      case topLevelTypes.topTouchCancel:
                      case topLevelTypes.topTouchEnd:
                      case topLevelTypes.topTouchMove:
                      case topLevelTypes.topTouchStart:
                        EventConstructor = SyntheticTouchEvent;
                        break;

                      case topLevelTypes.topScroll:
                        EventConstructor = SyntheticUIEvent;
                        break;

                      case topLevelTypes.topWheel:
                        EventConstructor = SyntheticWheelEvent;
                        break;

                      case topLevelTypes.topCopy:
                      case topLevelTypes.topCut:
                      case topLevelTypes.topPaste:
                        EventConstructor = SyntheticClipboardEvent;
                    }
                    "production" !== "development" ? invariant(EventConstructor, "SimpleEventPlugin: Unhandled event type, `%s`.", topLevelType) : invariant(EventConstructor);
                    var event = EventConstructor.getPooled(dispatchConfig, topLevelTargetID, nativeEvent);
                    EventPropagators.accumulateTwoPhaseDispatches(event);
                    return event;
                }
            };
            module.exports = SimpleEventPlugin;
        }, {
            "./EventConstants": 15,
            "./EventPluginUtils": 19,
            "./EventPropagators": 20,
            "./SyntheticClipboardEvent": 86,
            "./SyntheticDragEvent": 88,
            "./SyntheticEvent": 89,
            "./SyntheticFocusEvent": 90,
            "./SyntheticKeyboardEvent": 91,
            "./SyntheticMouseEvent": 92,
            "./SyntheticTouchEvent": 93,
            "./SyntheticUIEvent": 94,
            "./SyntheticWheelEvent": 95,
            "./invariant": 125,
            "./keyOf": 132
        } ],
        "86": [ function(_dereq_, module, exports) {
            "use strict";
            var SyntheticEvent = _dereq_("./SyntheticEvent");
            var ClipboardEventInterface = {
                "clipboardData": function(event) {
                    return "clipboardData" in event ? event.clipboardData : window.clipboardData;
                }
            };
            function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
                SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
            }
            SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);
            module.exports = SyntheticClipboardEvent;
        }, {
            "./SyntheticEvent": 89
        } ],
        "87": [ function(_dereq_, module, exports) {
            "use strict";
            var SyntheticEvent = _dereq_("./SyntheticEvent");
            var CompositionEventInterface = {
                "data": null
            };
            function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent) {
                SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
            }
            SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);
            module.exports = SyntheticCompositionEvent;
        }, {
            "./SyntheticEvent": 89
        } ],
        "88": [ function(_dereq_, module, exports) {
            "use strict";
            var SyntheticMouseEvent = _dereq_("./SyntheticMouseEvent");
            var DragEventInterface = {
                "dataTransfer": null
            };
            function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent) {
                SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
            }
            SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);
            module.exports = SyntheticDragEvent;
        }, {
            "./SyntheticMouseEvent": 92
        } ],
        "89": [ function(_dereq_, module, exports) {
            "use strict";
            var PooledClass = _dereq_("./PooledClass");
            var emptyFunction = _dereq_("./emptyFunction");
            var getEventTarget = _dereq_("./getEventTarget");
            var merge = _dereq_("./merge");
            var mergeInto = _dereq_("./mergeInto");
            var EventInterface = {
                "type": null,
                "target": getEventTarget,
                "currentTarget": emptyFunction.thatReturnsNull,
                "eventPhase": null,
                "bubbles": null,
                "cancelable": null,
                "timeStamp": function(event) {
                    return event.timeStamp || Date.now();
                },
                "defaultPrevented": null,
                "isTrusted": null
            };
            function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent) {
                this.dispatchConfig = dispatchConfig;
                this.dispatchMarker = dispatchMarker;
                this.nativeEvent = nativeEvent;
                var Interface = this.constructor.Interface;
                for (var propName in Interface) {
                    if (!Interface.hasOwnProperty(propName)) continue;
                    var normalize = Interface[propName];
                    if (normalize) this[propName] = normalize(nativeEvent); else this[propName] = nativeEvent[propName];
                }
                var defaultPrevented = null != nativeEvent.defaultPrevented ? nativeEvent.defaultPrevented : false === nativeEvent.returnValue;
                if (defaultPrevented) this.isDefaultPrevented = emptyFunction.thatReturnsTrue; else this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
                this.isPropagationStopped = emptyFunction.thatReturnsFalse;
            }
            mergeInto(SyntheticEvent.prototype, {
                "preventDefault": function() {
                    this.defaultPrevented = true;
                    var event = this.nativeEvent;
                    event.preventDefault ? event.preventDefault() : event.returnValue = false;
                    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
                },
                "stopPropagation": function() {
                    var event = this.nativeEvent;
                    event.stopPropagation ? event.stopPropagation() : event.cancelBubble = true;
                    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
                },
                "persist": function() {
                    this.isPersistent = emptyFunction.thatReturnsTrue;
                },
                "isPersistent": emptyFunction.thatReturnsFalse,
                "destructor": function() {
                    var Interface = this.constructor.Interface;
                    for (var propName in Interface) this[propName] = null;
                    this.dispatchConfig = null;
                    this.dispatchMarker = null;
                    this.nativeEvent = null;
                }
            });
            SyntheticEvent.Interface = EventInterface;
            SyntheticEvent.augmentClass = function(Class, Interface) {
                var Super = this;
                var prototype = Object.create(Super.prototype);
                mergeInto(prototype, Class.prototype);
                Class.prototype = prototype;
                Class.prototype.constructor = Class;
                Class.Interface = merge(Super.Interface, Interface);
                Class.augmentClass = Super.augmentClass;
                PooledClass.addPoolingTo(Class, PooledClass.threeArgumentPooler);
            };
            PooledClass.addPoolingTo(SyntheticEvent, PooledClass.threeArgumentPooler);
            module.exports = SyntheticEvent;
        }, {
            "./PooledClass": 25,
            "./emptyFunction": 109,
            "./getEventTarget": 117,
            "./merge": 134,
            "./mergeInto": 136
        } ],
        "90": [ function(_dereq_, module, exports) {
            "use strict";
            var SyntheticUIEvent = _dereq_("./SyntheticUIEvent");
            var FocusEventInterface = {
                "relatedTarget": null
            };
            function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent) {
                SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
            }
            SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);
            module.exports = SyntheticFocusEvent;
        }, {
            "./SyntheticUIEvent": 94
        } ],
        "91": [ function(_dereq_, module, exports) {
            "use strict";
            var SyntheticUIEvent = _dereq_("./SyntheticUIEvent");
            var getEventKey = _dereq_("./getEventKey");
            var KeyboardEventInterface = {
                "key": getEventKey,
                "location": null,
                "ctrlKey": null,
                "shiftKey": null,
                "altKey": null,
                "metaKey": null,
                "repeat": null,
                "locale": null,
                "char": null,
                "charCode": null,
                "keyCode": null,
                "which": null
            };
            function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
                SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
            }
            SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);
            module.exports = SyntheticKeyboardEvent;
        }, {
            "./SyntheticUIEvent": 94,
            "./getEventKey": 116
        } ],
        "92": [ function(_dereq_, module, exports) {
            "use strict";
            var SyntheticUIEvent = _dereq_("./SyntheticUIEvent");
            var ViewportMetrics = _dereq_("./ViewportMetrics");
            var MouseEventInterface = {
                "screenX": null,
                "screenY": null,
                "clientX": null,
                "clientY": null,
                "ctrlKey": null,
                "shiftKey": null,
                "altKey": null,
                "metaKey": null,
                "button": function(event) {
                    var button = event.button;
                    if ("which" in event) return button;
                    return 2 === button ? 2 : 4 === button ? 1 : 0;
                },
                "buttons": null,
                "relatedTarget": function(event) {
                    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
                },
                "pageX": function(event) {
                    return "pageX" in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;
                },
                "pageY": function(event) {
                    return "pageY" in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;
                }
            };
            function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent) {
                SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
            }
            SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);
            module.exports = SyntheticMouseEvent;
        }, {
            "./SyntheticUIEvent": 94,
            "./ViewportMetrics": 97
        } ],
        "93": [ function(_dereq_, module, exports) {
            "use strict";
            var SyntheticUIEvent = _dereq_("./SyntheticUIEvent");
            var TouchEventInterface = {
                "touches": null,
                "targetTouches": null,
                "changedTouches": null,
                "altKey": null,
                "metaKey": null,
                "ctrlKey": null,
                "shiftKey": null
            };
            function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent) {
                SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
            }
            SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);
            module.exports = SyntheticTouchEvent;
        }, {
            "./SyntheticUIEvent": 94
        } ],
        "94": [ function(_dereq_, module, exports) {
            "use strict";
            var SyntheticEvent = _dereq_("./SyntheticEvent");
            var UIEventInterface = {
                "view": null,
                "detail": null
            };
            function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent) {
                SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
            }
            SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);
            module.exports = SyntheticUIEvent;
        }, {
            "./SyntheticEvent": 89
        } ],
        "95": [ function(_dereq_, module, exports) {
            "use strict";
            var SyntheticMouseEvent = _dereq_("./SyntheticMouseEvent");
            var WheelEventInterface = {
                "deltaX": function(event) {
                    return "deltaX" in event ? event.deltaX : "wheelDeltaX" in event ? -event.wheelDeltaX : 0;
                },
                "deltaY": function(event) {
                    return "deltaY" in event ? event.deltaY : "wheelDeltaY" in event ? -event.wheelDeltaY : "wheelDelta" in event ? -event.wheelDelta : 0;
                },
                "deltaZ": null,
                "deltaMode": null
            };
            function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent) {
                SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
            }
            SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);
            module.exports = SyntheticWheelEvent;
        }, {
            "./SyntheticMouseEvent": 92
        } ],
        "96": [ function(_dereq_, module, exports) {
            "use strict";
            var invariant = _dereq_("./invariant");
            var Mixin = {
                "reinitializeTransaction": function() {
                    this.transactionWrappers = this.getTransactionWrappers();
                    if (!this.wrapperInitData) this.wrapperInitData = []; else this.wrapperInitData.length = 0;
                    if (!this.timingMetrics) this.timingMetrics = {};
                    this.timingMetrics.methodInvocationTime = 0;
                    if (!this.timingMetrics.wrapperInitTimes) this.timingMetrics.wrapperInitTimes = []; else this.timingMetrics.wrapperInitTimes.length = 0;
                    if (!this.timingMetrics.wrapperCloseTimes) this.timingMetrics.wrapperCloseTimes = []; else this.timingMetrics.wrapperCloseTimes.length = 0;
                    this._isInTransaction = false;
                },
                "_isInTransaction": false,
                "getTransactionWrappers": null,
                "isInTransaction": function() {
                    return !!this._isInTransaction;
                },
                "perform": function(method, scope, a, b, c, d, e, f) {
                    "production" !== "development" ? invariant(!this.isInTransaction(), "Transaction.perform(...): Cannot initialize a transaction when there " + "is already an outstanding transaction.") : invariant(!this.isInTransaction());
                    var memberStart = Date.now();
                    var errorThrown;
                    var ret;
                    try {
                        this._isInTransaction = true;
                        errorThrown = true;
                        this.initializeAll(0);
                        ret = method.call(scope, a, b, c, d, e, f);
                        errorThrown = false;
                    } finally {
                        var memberEnd = Date.now();
                        this.methodInvocationTime += memberEnd - memberStart;
                        try {
                            if (errorThrown) try {
                                this.closeAll(0);
                            } catch (err) {} else this.closeAll(0);
                        } finally {
                            this._isInTransaction = false;
                        }
                    }
                    return ret;
                },
                "initializeAll": function(startIndex) {
                    var transactionWrappers = this.transactionWrappers;
                    var wrapperInitTimes = this.timingMetrics.wrapperInitTimes;
                    for (var i = startIndex; i < transactionWrappers.length; i++) {
                        var initStart = Date.now();
                        var wrapper = transactionWrappers[i];
                        try {
                            this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
                            this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
                        } finally {
                            var curInitTime = wrapperInitTimes[i];
                            var initEnd = Date.now();
                            wrapperInitTimes[i] = (curInitTime || 0) + (initEnd - initStart);
                            if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) try {
                                this.initializeAll(i + 1);
                            } catch (err) {}
                        }
                    }
                },
                "closeAll": function(startIndex) {
                    "production" !== "development" ? invariant(this.isInTransaction(), "Transaction.closeAll(): Cannot close transaction when none are open.") : invariant(this.isInTransaction());
                    var transactionWrappers = this.transactionWrappers;
                    var wrapperCloseTimes = this.timingMetrics.wrapperCloseTimes;
                    for (var i = startIndex; i < transactionWrappers.length; i++) {
                        var wrapper = transactionWrappers[i];
                        var closeStart = Date.now();
                        var initData = this.wrapperInitData[i];
                        var errorThrown;
                        try {
                            errorThrown = true;
                            if (initData !== Transaction.OBSERVED_ERROR) wrapper.close && wrapper.close.call(this, initData);
                            errorThrown = false;
                        } finally {
                            var closeEnd = Date.now();
                            var curCloseTime = wrapperCloseTimes[i];
                            wrapperCloseTimes[i] = (curCloseTime || 0) + (closeEnd - closeStart);
                            if (errorThrown) try {
                                this.closeAll(i + 1);
                            } catch (e) {}
                        }
                    }
                    this.wrapperInitData.length = 0;
                }
            };
            var Transaction = {
                "Mixin": Mixin,
                "OBSERVED_ERROR": {}
            };
            module.exports = Transaction;
        }, {
            "./invariant": 125
        } ],
        "97": [ function(_dereq_, module, exports) {
            "use strict";
            var getUnboundedScrollPosition = _dereq_("./getUnboundedScrollPosition");
            var ViewportMetrics = {
                "currentScrollLeft": 0,
                "currentScrollTop": 0,
                "refreshScrollValues": function() {
                    var scrollPosition = getUnboundedScrollPosition(window);
                    ViewportMetrics.currentScrollLeft = scrollPosition.x;
                    ViewportMetrics.currentScrollTop = scrollPosition.y;
                }
            };
            module.exports = ViewportMetrics;
        }, {
            "./getUnboundedScrollPosition": 122
        } ],
        "98": [ function(_dereq_, module, exports) {
            "use strict";
            var invariant = _dereq_("./invariant");
            function accumulate(current, next) {
                "production" !== "development" ? invariant(null != next, "accumulate(...): Accumulated items must be not be null or undefined.") : invariant(null != next);
                if (null == current) return next; else {
                    var currentIsArray = Array.isArray(current);
                    var nextIsArray = Array.isArray(next);
                    if (currentIsArray) return current.concat(next); else if (nextIsArray) return [ current ].concat(next); else return [ current, next ];
                }
            }
            module.exports = accumulate;
        }, {
            "./invariant": 125
        } ],
        "99": [ function(_dereq_, module, exports) {
            "use strict";
            var MOD = 65521;
            function adler32(data) {
                var a = 1;
                var b = 0;
                for (var i = 0; i < data.length; i++) {
                    a = (a + data.charCodeAt(i)) % MOD;
                    b = (b + a) % MOD;
                }
                return a | b << 16;
            }
            module.exports = adler32;
        }, {} ],
        "100": [ function(_dereq_, module, exports) {
            "use strict";
            var ReactPropTransferer = _dereq_("./ReactPropTransferer");
            var keyOf = _dereq_("./keyOf");
            var warning = _dereq_("./warning");
            var CHILDREN_PROP = keyOf({
                "children": null
            });
            function cloneWithProps(child, props) {
                if ("production" !== "development") "production" !== "development" ? warning(!child.props.ref, "You are calling cloneWithProps() on a child with a ref. This is " + "dangerous because you're creating a new child which will not be " + "added as a ref to its parent.") : null;
                var newProps = ReactPropTransferer.mergeProps(props, child.props);
                if (!newProps.hasOwnProperty(CHILDREN_PROP) && child.props.hasOwnProperty(CHILDREN_PROP)) newProps.children = child.props.children;
                return child.constructor.ConvenienceConstructor(newProps);
            }
            module.exports = cloneWithProps;
        }, {
            "./ReactPropTransferer": 66,
            "./keyOf": 132,
            "./warning": 148
        } ],
        "101": [ function(_dereq_, module, exports) {
            var isTextNode = _dereq_("./isTextNode");
            function containsNode(outerNode, innerNode) {
                if (!outerNode || !innerNode) return false; else if (outerNode === innerNode) return true; else if (isTextNode(outerNode)) return false; else if (isTextNode(innerNode)) return containsNode(outerNode, innerNode.parentNode); else if (outerNode.contains) return outerNode.contains(innerNode); else if (outerNode.compareDocumentPosition) return !!(16 & outerNode.compareDocumentPosition(innerNode)); else return false;
            }
            module.exports = containsNode;
        }, {
            "./isTextNode": 129
        } ],
        "102": [ function(_dereq_, module, exports) {
            function copyProperties(obj, a, b, c, d, e, f) {
                obj = obj || {};
                if ("production" !== "development") if (f) throw new Error("Too many arguments passed to copyProperties");
                var args = [ a, b, c, d, e ];
                var ii = 0, v;
                while (args[ii]) {
                    v = args[ii++];
                    for (var k in v) obj[k] = v[k];
                    if (v.hasOwnProperty && v.hasOwnProperty("toString") && "undefined" != typeof v.toString && obj.toString !== v.toString) obj.toString = v.toString;
                }
                return obj;
            }
            module.exports = copyProperties;
        }, {} ],
        "103": [ function(_dereq_, module, exports) {
            var toArray = _dereq_("./toArray");
            function hasArrayNature(obj) {
                return !!obj && ("object" == typeof obj || "function" == typeof obj) && "length" in obj && !("setInterval" in obj) && "number" != typeof obj.nodeType && (Array.isArray(obj) || "callee" in obj || "item" in obj);
            }
            function createArrayFrom(obj) {
                if (!hasArrayNature(obj)) return [ obj ]; else if (Array.isArray(obj)) return obj.slice(); else return toArray(obj);
            }
            module.exports = createArrayFrom;
        }, {
            "./toArray": 145
        } ],
        "104": [ function(_dereq_, module, exports) {
            "use strict";
            var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
            var invariant = _dereq_("./invariant");
            function createFullPageComponent(componentClass) {
                var FullPageComponent = ReactCompositeComponent.createClass({
                    "displayName": "ReactFullPageComponent" + (componentClass.componentConstructor.displayName || ""),
                    "componentWillUnmount": function() {
                        "production" !== "development" ? invariant(false, "%s tried to unmount. Because of cross-browser quirks it is " + "impossible to unmount some top-level components (eg <html>, <head>, " + "and <body>) reliably and efficiently. To fix this, have a single " + "top-level component that never unmounts render these elements.", this.constructor.displayName) : invariant(false);
                    },
                    "render": function() {
                        return this.transferPropsTo(componentClass(null, this.props.children));
                    }
                });
                return FullPageComponent;
            }
            module.exports = createFullPageComponent;
        }, {
            "./ReactCompositeComponent": 33,
            "./invariant": 125
        } ],
        "105": [ function(_dereq_, module, exports) {
            var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
            var createArrayFrom = _dereq_("./createArrayFrom");
            var getMarkupWrap = _dereq_("./getMarkupWrap");
            var invariant = _dereq_("./invariant");
            var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement("div") : null;
            var nodeNamePattern = /^\s*<(\w+)/;
            function getNodeName(markup) {
                var nodeNameMatch = markup.match(nodeNamePattern);
                return nodeNameMatch && nodeNameMatch[1].toLowerCase();
            }
            function createNodesFromMarkup(markup, handleScript) {
                var node = dummyNode;
                "production" !== "development" ? invariant(!!dummyNode, "createNodesFromMarkup dummy not initialized") : invariant(!!dummyNode);
                var nodeName = getNodeName(markup);
                var wrap = nodeName && getMarkupWrap(nodeName);
                if (wrap) {
                    node.innerHTML = wrap[1] + markup + wrap[2];
                    var wrapDepth = wrap[0];
                    while (wrapDepth--) node = node.lastChild;
                } else node.innerHTML = markup;
                var scripts = node.getElementsByTagName("script");
                if (scripts.length) {
                    "production" !== "development" ? invariant(handleScript, "createNodesFromMarkup(...): Unexpected <script> element rendered.") : invariant(handleScript);
                    createArrayFrom(scripts).forEach(handleScript);
                }
                var nodes = createArrayFrom(node.childNodes);
                while (node.lastChild) node.removeChild(node.lastChild);
                return nodes;
            }
            module.exports = createNodesFromMarkup;
        }, {
            "./ExecutionEnvironment": 21,
            "./createArrayFrom": 103,
            "./getMarkupWrap": 118,
            "./invariant": 125
        } ],
        "106": [ function(_dereq_, module, exports) {
            function createObjectFrom(keys, values) {
                if ("production" !== "development") if (!Array.isArray(keys)) throw new TypeError("Must pass an array of keys.");
                var object = {};
                var isArray = Array.isArray(values);
                if ("undefined" == typeof values) values = true;
                for (var ii = keys.length; ii--; ) object[keys[ii]] = isArray ? values[ii] : values;
                return object;
            }
            module.exports = createObjectFrom;
        }, {} ],
        "107": [ function(_dereq_, module, exports) {
            function cx(classNames) {
                if ("object" == typeof classNames) return Object.keys(classNames).filter(function(className) {
                    return classNames[className];
                }).join(" "); else return Array.prototype.join.call(arguments, " ");
            }
            module.exports = cx;
        }, {} ],
        "108": [ function(_dereq_, module, exports) {
            "use strict";
            var CSSProperty = _dereq_("./CSSProperty");
            function dangerousStyleValue(styleName, value) {
                var isEmpty = null == value || "boolean" === typeof value || "" === value;
                if (isEmpty) return "";
                var isNonNumeric = isNaN(value);
                if (isNonNumeric || 0 === value || CSSProperty.isUnitlessNumber[styleName]) return "" + value;
                return value + "px";
            }
            module.exports = dangerousStyleValue;
        }, {
            "./CSSProperty": 3
        } ],
        "109": [ function(_dereq_, module, exports) {
            var copyProperties = _dereq_("./copyProperties");
            function makeEmptyFunction(arg) {
                return function() {
                    return arg;
                };
            }
            function emptyFunction() {}
            copyProperties(emptyFunction, {
                "thatReturns": makeEmptyFunction,
                "thatReturnsFalse": makeEmptyFunction(false),
                "thatReturnsTrue": makeEmptyFunction(true),
                "thatReturnsNull": makeEmptyFunction(null),
                "thatReturnsThis": function() {
                    return this;
                },
                "thatReturnsArgument": function(arg) {
                    return arg;
                }
            });
            module.exports = emptyFunction;
        }, {
            "./copyProperties": 102
        } ],
        "110": [ function(_dereq_, module, exports) {
            "use strict";
            var emptyObject = {};
            if ("production" !== "development") Object.freeze(emptyObject);
            module.exports = emptyObject;
        }, {} ],
        "111": [ function(_dereq_, module, exports) {
            "use strict";
            var ESCAPE_LOOKUP = {
                "&": "&amp;",
                ">": "&gt;",
                "<": "&lt;",
                '"': "&quot;",
                "'": "&#x27;",
                "/": "&#x2f;"
            };
            var ESCAPE_REGEX = /[&><"'\/]/g;
            function escaper(match) {
                return ESCAPE_LOOKUP[match];
            }
            function escapeTextForBrowser(text) {
                return ("" + text).replace(ESCAPE_REGEX, escaper);
            }
            module.exports = escapeTextForBrowser;
        }, {} ],
        "112": [ function(_dereq_, module, exports) {
            "use strict";
            var invariant = _dereq_("./invariant");
            var traverseAllChildren = _dereq_("./traverseAllChildren");
            function flattenSingleChildIntoContext(traverseContext, child, name) {
                var result = traverseContext;
                "production" !== "development" ? invariant(!result.hasOwnProperty(name), "flattenChildren(...): Encountered two children with the same key, `%s`. " + "Children keys must be unique.", name) : invariant(!result.hasOwnProperty(name));
                if (null != child) result[name] = child;
            }
            function flattenChildren(children) {
                if (null == children) return children;
                var result = {};
                traverseAllChildren(children, flattenSingleChildIntoContext, result);
                return result;
            }
            module.exports = flattenChildren;
        }, {
            "./invariant": 125,
            "./traverseAllChildren": 146
        } ],
        "113": [ function(_dereq_, module, exports) {
            "use strict";
            function focusNode(node) {
                if (!node.disabled) node.focus();
            }
            module.exports = focusNode;
        }, {} ],
        "114": [ function(_dereq_, module, exports) {
            "use strict";
            var forEachAccumulated = function(arr, cb, scope) {
                if (Array.isArray(arr)) arr.forEach(cb, scope); else if (arr) cb.call(scope, arr);
            };
            module.exports = forEachAccumulated;
        }, {} ],
        "115": [ function(_dereq_, module, exports) {
            function getActiveElement() {
                try {
                    return document.activeElement || document.body;
                } catch (e) {
                    return document.body;
                }
            }
            module.exports = getActiveElement;
        }, {} ],
        "116": [ function(_dereq_, module, exports) {
            "use strict";
            var normalizeKey = {
                "Esc": "Escape",
                "Spacebar": " ",
                "Left": "ArrowLeft",
                "Up": "ArrowUp",
                "Right": "ArrowRight",
                "Down": "ArrowDown",
                "Del": "Delete",
                "Win": "OS",
                "Menu": "ContextMenu",
                "Apps": "ContextMenu",
                "Scroll": "ScrollLock",
                "MozPrintableKey": "Unidentified"
            };
            var translateToKey = {
                "8": "Backspace",
                "9": "Tab",
                "12": "Clear",
                "13": "Enter",
                "16": "Shift",
                "17": "Control",
                "18": "Alt",
                "19": "Pause",
                "20": "CapsLock",
                "27": "Escape",
                "32": " ",
                "33": "PageUp",
                "34": "PageDown",
                "35": "End",
                "36": "Home",
                "37": "ArrowLeft",
                "38": "ArrowUp",
                "39": "ArrowRight",
                "40": "ArrowDown",
                "45": "Insert",
                "46": "Delete",
                "112": "F1",
                "113": "F2",
                "114": "F3",
                "115": "F4",
                "116": "F5",
                "117": "F6",
                "118": "F7",
                "119": "F8",
                "120": "F9",
                "121": "F10",
                "122": "F11",
                "123": "F12",
                "144": "NumLock",
                "145": "ScrollLock",
                "224": "Meta"
            };
            function getEventKey(nativeEvent) {
                return "key" in nativeEvent ? normalizeKey[nativeEvent.key] || nativeEvent.key : translateToKey[nativeEvent.which || nativeEvent.keyCode] || "Unidentified";
            }
            module.exports = getEventKey;
        }, {} ],
        "117": [ function(_dereq_, module, exports) {
            "use strict";
            function getEventTarget(nativeEvent) {
                var target = nativeEvent.target || nativeEvent.srcElement || window;
                return 3 === target.nodeType ? target.parentNode : target;
            }
            module.exports = getEventTarget;
        }, {} ],
        "118": [ function(_dereq_, module, exports) {
            var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
            var invariant = _dereq_("./invariant");
            var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement("div") : null;
            var shouldWrap = {
                "circle": true,
                "defs": true,
                "g": true,
                "line": true,
                "linearGradient": true,
                "path": true,
                "polygon": true,
                "polyline": true,
                "radialGradient": true,
                "rect": true,
                "stop": true,
                "text": true
            };
            var selectWrap = [ 1, '<select multiple="true">', "</select>" ];
            var tableWrap = [ 1, "<table>", "</table>" ];
            var trWrap = [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ];
            var svgWrap = [ 1, "<svg>", "</svg>" ];
            var markupWrap = {
                "*": [ 1, "?<div>", "</div>" ],
                "area": [ 1, "<map>", "</map>" ],
                "col": [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
                "legend": [ 1, "<fieldset>", "</fieldset>" ],
                "param": [ 1, "<object>", "</object>" ],
                "tr": [ 2, "<table><tbody>", "</tbody></table>" ],
                "optgroup": selectWrap,
                "option": selectWrap,
                "caption": tableWrap,
                "colgroup": tableWrap,
                "tbody": tableWrap,
                "tfoot": tableWrap,
                "thead": tableWrap,
                "td": trWrap,
                "th": trWrap,
                "circle": svgWrap,
                "defs": svgWrap,
                "g": svgWrap,
                "line": svgWrap,
                "linearGradient": svgWrap,
                "path": svgWrap,
                "polygon": svgWrap,
                "polyline": svgWrap,
                "radialGradient": svgWrap,
                "rect": svgWrap,
                "stop": svgWrap,
                "text": svgWrap
            };
            function getMarkupWrap(nodeName) {
                "production" !== "development" ? invariant(!!dummyNode, "Markup wrapping node not initialized") : invariant(!!dummyNode);
                if (!markupWrap.hasOwnProperty(nodeName)) nodeName = "*";
                if (!shouldWrap.hasOwnProperty(nodeName)) {
                    if ("*" === nodeName) dummyNode.innerHTML = "<link />"; else dummyNode.innerHTML = "<" + nodeName + "></" + nodeName + ">";
                    shouldWrap[nodeName] = !dummyNode.firstChild;
                }
                return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
            }
            module.exports = getMarkupWrap;
        }, {
            "./ExecutionEnvironment": 21,
            "./invariant": 125
        } ],
        "119": [ function(_dereq_, module, exports) {
            "use strict";
            function getLeafNode(node) {
                while (node && node.firstChild) node = node.firstChild;
                return node;
            }
            function getSiblingNode(node) {
                while (node) {
                    if (node.nextSibling) return node.nextSibling;
                    node = node.parentNode;
                }
            }
            function getNodeForCharacterOffset(root, offset) {
                var node = getLeafNode(root);
                var nodeStart = 0;
                var nodeEnd = 0;
                while (node) {
                    if (3 == node.nodeType) {
                        nodeEnd = nodeStart + node.textContent.length;
                        if (nodeStart <= offset && nodeEnd >= offset) return {
                            "node": node,
                            "offset": offset - nodeStart
                        };
                        nodeStart = nodeEnd;
                    }
                    node = getLeafNode(getSiblingNode(node));
                }
            }
            module.exports = getNodeForCharacterOffset;
        }, {} ],
        "120": [ function(_dereq_, module, exports) {
            "use strict";
            var DOC_NODE_TYPE = 9;
            function getReactRootElementInContainer(container) {
                if (!container) return null;
                if (container.nodeType === DOC_NODE_TYPE) return container.documentElement; else return container.firstChild;
            }
            module.exports = getReactRootElementInContainer;
        }, {} ],
        "121": [ function(_dereq_, module, exports) {
            "use strict";
            var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
            var contentKey = null;
            function getTextContentAccessor() {
                if (!contentKey && ExecutionEnvironment.canUseDOM) contentKey = "textContent" in document.createElement("div") ? "textContent" : "innerText";
                return contentKey;
            }
            module.exports = getTextContentAccessor;
        }, {
            "./ExecutionEnvironment": 21
        } ],
        "122": [ function(_dereq_, module, exports) {
            "use strict";
            function getUnboundedScrollPosition(scrollable) {
                if (scrollable === window) return {
                    "x": window.pageXOffset || document.documentElement.scrollLeft,
                    "y": window.pageYOffset || document.documentElement.scrollTop
                };
                return {
                    "x": scrollable.scrollLeft,
                    "y": scrollable.scrollTop
                };
            }
            module.exports = getUnboundedScrollPosition;
        }, {} ],
        "123": [ function(_dereq_, module, exports) {
            var _uppercasePattern = /([A-Z])/g;
            function hyphenate(string) {
                return string.replace(_uppercasePattern, "-$1").toLowerCase();
            }
            module.exports = hyphenate;
        }, {} ],
        "124": [ function(_dereq_, module, exports) {
            "use strict";
            var warning = _dereq_("./warning");
            function isValidComponentDescriptor(descriptor) {
                return "function" === typeof descriptor.constructor && "function" === typeof descriptor.constructor.prototype.construct && "function" === typeof descriptor.constructor.prototype.mountComponent && "function" === typeof descriptor.constructor.prototype.receiveComponent;
            }
            function instantiateReactComponent(descriptor) {
                if ("production" !== "development") {
                    "production" !== "development" ? warning(isValidComponentDescriptor(descriptor), "Only React Components are valid for mounting.") : null;
                    var instance = descriptor.__realComponentInstance || descriptor;
                    instance._descriptor = descriptor;
                    return instance;
                }
                descriptor._descriptor = descriptor;
                return descriptor;
            }
            module.exports = instantiateReactComponent;
        }, {
            "./warning": 148
        } ],
        "125": [ function(_dereq_, module, exports) {
            "use strict";
            var invariant = function(condition) {
                if (!condition) {
                    var error = new Error("Minified exception occured; use the non-minified dev environment for " + "the full error message and additional helpful warnings.");
                    error.framesToPop = 1;
                    throw error;
                }
            };
            if ("production" !== "development") invariant = function(condition, format, a, b, c, d, e, f) {
                if (void 0 === format) throw new Error("invariant requires an error message argument");
                if (!condition) {
                    var args = [ a, b, c, d, e, f ];
                    var argIndex = 0;
                    var error = new Error("Invariant Violation: " + format.replace(/%s/g, function() {
                        return args[argIndex++];
                    }));
                    error.framesToPop = 1;
                    throw error;
                }
            };
            module.exports = invariant;
        }, {} ],
        "126": [ function(_dereq_, module, exports) {
            "use strict";
            var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
            var useHasFeature;
            if (ExecutionEnvironment.canUseDOM) useHasFeature = document.implementation && document.implementation.hasFeature && true !== document.implementation.hasFeature("", "");
            function isEventSupported(eventNameSuffix, capture) {
                if (!ExecutionEnvironment.canUseDOM || capture && !("addEventListener" in document)) return false;
                var eventName = "on" + eventNameSuffix;
                var isSupported = eventName in document;
                if (!isSupported) {
                    var element = document.createElement("div");
                    element.setAttribute(eventName, "return;");
                    isSupported = "function" === typeof element[eventName];
                }
                if (!isSupported && useHasFeature && "wheel" === eventNameSuffix) isSupported = document.implementation.hasFeature("Events.wheel", "3.0");
                return isSupported;
            }
            module.exports = isEventSupported;
        }, {
            "./ExecutionEnvironment": 21
        } ],
        "127": [ function(_dereq_, module, exports) {
            function isNode(object) {
                return !!(object && ("function" === typeof Node ? object instanceof Node : "object" === typeof object && "number" === typeof object.nodeType && "string" === typeof object.nodeName));
            }
            module.exports = isNode;
        }, {} ],
        "128": [ function(_dereq_, module, exports) {
            "use strict";
            var supportedInputTypes = {
                "color": true,
                "date": true,
                "datetime": true,
                "datetime-local": true,
                "email": true,
                "month": true,
                "number": true,
                "password": true,
                "range": true,
                "search": true,
                "tel": true,
                "text": true,
                "time": true,
                "url": true,
                "week": true
            };
            function isTextInputElement(elem) {
                return elem && ("INPUT" === elem.nodeName && supportedInputTypes[elem.type] || "TEXTAREA" === elem.nodeName);
            }
            module.exports = isTextInputElement;
        }, {} ],
        "129": [ function(_dereq_, module, exports) {
            var isNode = _dereq_("./isNode");
            function isTextNode(object) {
                return isNode(object) && 3 == object.nodeType;
            }
            module.exports = isTextNode;
        }, {
            "./isNode": 127
        } ],
        "130": [ function(_dereq_, module, exports) {
            "use strict";
            function joinClasses(className) {
                if (!className) className = "";
                var nextClass;
                var argLength = arguments.length;
                if (argLength > 1) for (var ii = 1; ii < argLength; ii++) {
                    nextClass = arguments[ii];
                    nextClass && (className += " " + nextClass);
                }
                return className;
            }
            module.exports = joinClasses;
        }, {} ],
        "131": [ function(_dereq_, module, exports) {
            "use strict";
            var invariant = _dereq_("./invariant");
            var keyMirror = function(obj) {
                var ret = {};
                var key;
                "production" !== "development" ? invariant(obj instanceof Object && !Array.isArray(obj), "keyMirror(...): Argument must be an object.") : invariant(obj instanceof Object && !Array.isArray(obj));
                for (key in obj) {
                    if (!obj.hasOwnProperty(key)) continue;
                    ret[key] = key;
                }
                return ret;
            };
            module.exports = keyMirror;
        }, {
            "./invariant": 125
        } ],
        "132": [ function(_dereq_, module, exports) {
            var keyOf = function(oneKeyObj) {
                var key;
                for (key in oneKeyObj) {
                    if (!oneKeyObj.hasOwnProperty(key)) continue;
                    return key;
                }
                return null;
            };
            module.exports = keyOf;
        }, {} ],
        "133": [ function(_dereq_, module, exports) {
            "use strict";
            function memoizeStringOnly(callback) {
                var cache = {};
                return function(string) {
                    if (cache.hasOwnProperty(string)) return cache[string]; else return cache[string] = callback.call(this, string);
                };
            }
            module.exports = memoizeStringOnly;
        }, {} ],
        "134": [ function(_dereq_, module, exports) {
            "use strict";
            var mergeInto = _dereq_("./mergeInto");
            var merge = function(one, two) {
                var result = {};
                mergeInto(result, one);
                mergeInto(result, two);
                return result;
            };
            module.exports = merge;
        }, {
            "./mergeInto": 136
        } ],
        "135": [ function(_dereq_, module, exports) {
            "use strict";
            var invariant = _dereq_("./invariant");
            var keyMirror = _dereq_("./keyMirror");
            var MAX_MERGE_DEPTH = 36;
            var isTerminal = function(o) {
                return "object" !== typeof o || null === o;
            };
            var mergeHelpers = {
                "MAX_MERGE_DEPTH": MAX_MERGE_DEPTH,
                "isTerminal": isTerminal,
                "normalizeMergeArg": function(arg) {
                    return void 0 === arg || null === arg ? {} : arg;
                },
                "checkMergeArrayArgs": function(one, two) {
                    "production" !== "development" ? invariant(Array.isArray(one) && Array.isArray(two), "Tried to merge arrays, instead got %s and %s.", one, two) : invariant(Array.isArray(one) && Array.isArray(two));
                },
                "checkMergeObjectArgs": function(one, two) {
                    mergeHelpers.checkMergeObjectArg(one);
                    mergeHelpers.checkMergeObjectArg(two);
                },
                "checkMergeObjectArg": function(arg) {
                    "production" !== "development" ? invariant(!isTerminal(arg) && !Array.isArray(arg), "Tried to merge an object, instead got %s.", arg) : invariant(!isTerminal(arg) && !Array.isArray(arg));
                },
                "checkMergeLevel": function(level) {
                    "production" !== "development" ? invariant(level < MAX_MERGE_DEPTH, "Maximum deep merge depth exceeded. You may be attempting to merge " + "circular structures in an unsupported way.") : invariant(level < MAX_MERGE_DEPTH);
                },
                "checkArrayStrategy": function(strategy) {
                    "production" !== "development" ? invariant(void 0 === strategy || strategy in mergeHelpers.ArrayStrategies, "You must provide an array strategy to deep merge functions to " + "instruct the deep merge how to resolve merging two arrays.") : invariant(void 0 === strategy || strategy in mergeHelpers.ArrayStrategies);
                },
                "ArrayStrategies": keyMirror({
                    "Clobber": true,
                    "IndexByIndex": true
                })
            };
            module.exports = mergeHelpers;
        }, {
            "./invariant": 125,
            "./keyMirror": 131
        } ],
        "136": [ function(_dereq_, module, exports) {
            "use strict";
            var mergeHelpers = _dereq_("./mergeHelpers");
            var checkMergeObjectArg = mergeHelpers.checkMergeObjectArg;
            function mergeInto(one, two) {
                checkMergeObjectArg(one);
                if (null != two) {
                    checkMergeObjectArg(two);
                    for (var key in two) {
                        if (!two.hasOwnProperty(key)) continue;
                        one[key] = two[key];
                    }
                }
            }
            module.exports = mergeInto;
        }, {
            "./mergeHelpers": 135
        } ],
        "137": [ function(_dereq_, module, exports) {
            "use strict";
            var mixInto = function(constructor, methodBag) {
                var methodName;
                for (methodName in methodBag) {
                    if (!methodBag.hasOwnProperty(methodName)) continue;
                    constructor.prototype[methodName] = methodBag[methodName];
                }
            };
            module.exports = mixInto;
        }, {} ],
        "138": [ function(_dereq_, module, exports) {
            "use strict";
            var invariant = _dereq_("./invariant");
            function monitorCodeUse(eventName, data) {
                "production" !== "development" ? invariant(eventName && !/[^a-z0-9_]/.test(eventName), "You must provide an eventName using only the characters [a-z0-9_]") : invariant(eventName && !/[^a-z0-9_]/.test(eventName));
            }
            module.exports = monitorCodeUse;
        }, {
            "./invariant": 125
        } ],
        "139": [ function(_dereq_, module, exports) {
            "use strict";
            function objMap(obj, func, context) {
                if (!obj) return null;
                var i = 0;
                var ret = {};
                for (var key in obj) if (obj.hasOwnProperty(key)) ret[key] = func.call(context, obj[key], key, i++);
                return ret;
            }
            module.exports = objMap;
        }, {} ],
        "140": [ function(_dereq_, module, exports) {
            "use strict";
            function objMapKeyVal(obj, func, context) {
                if (!obj) return null;
                var i = 0;
                var ret = {};
                for (var key in obj) if (obj.hasOwnProperty(key)) ret[key] = func.call(context, key, obj[key], i++);
                return ret;
            }
            module.exports = objMapKeyVal;
        }, {} ],
        "141": [ function(_dereq_, module, exports) {
            "use strict";
            var ReactComponent = _dereq_("./ReactComponent");
            var invariant = _dereq_("./invariant");
            function onlyChild(children) {
                "production" !== "development" ? invariant(ReactComponent.isValidComponent(children), "onlyChild must be passed a children with exactly one child.") : invariant(ReactComponent.isValidComponent(children));
                return children;
            }
            module.exports = onlyChild;
        }, {
            "./ReactComponent": 31,
            "./invariant": 125
        } ],
        "142": [ function(_dereq_, module, exports) {
            "use strict";
            var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
            var performance = null;
            if (ExecutionEnvironment.canUseDOM) performance = window.performance || window.webkitPerformance;
            if (!performance || !performance.now) performance = Date;
            var performanceNow = performance.now.bind(performance);
            module.exports = performanceNow;
        }, {
            "./ExecutionEnvironment": 21
        } ],
        "143": [ function(_dereq_, module, exports) {
            "use strict";
            function shallowEqual(objA, objB) {
                if (objA === objB) return true;
                var key;
                for (key in objA) if (objA.hasOwnProperty(key) && (!objB.hasOwnProperty(key) || objA[key] !== objB[key])) return false;
                for (key in objB) if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) return false;
                return true;
            }
            module.exports = shallowEqual;
        }, {} ],
        "144": [ function(_dereq_, module, exports) {
            "use strict";
            function shouldUpdateReactComponent(prevComponentInstance, nextDescriptor) {
                if (prevComponentInstance && nextDescriptor && prevComponentInstance.constructor === nextDescriptor.constructor && (prevComponentInstance.props && prevComponentInstance.props.key) === (nextDescriptor.props && nextDescriptor.props.key)) if (prevComponentInstance._owner === nextDescriptor._owner) return true; else if ("production" !== "development") if (prevComponentInstance.state) console.warn("A recent change to React has been found to impact your code. " + "A mounted component will now be unmounted and replaced by a " + "component (of the same class) if their owners are different. " + "Previously, ownership was not considered when updating.", prevComponentInstance, nextDescriptor);
                return false;
            }
            module.exports = shouldUpdateReactComponent;
        }, {} ],
        "145": [ function(_dereq_, module, exports) {
            var invariant = _dereq_("./invariant");
            function toArray(obj) {
                var length = obj.length;
                "production" !== "development" ? invariant(!Array.isArray(obj) && ("object" === typeof obj || "function" === typeof obj), "toArray: Array-like object expected") : invariant(!Array.isArray(obj) && ("object" === typeof obj || "function" === typeof obj));
                "production" !== "development" ? invariant("number" === typeof length, "toArray: Object needs a length property") : invariant("number" === typeof length);
                "production" !== "development" ? invariant(0 === length || length - 1 in obj, "toArray: Object should have keys for indices") : invariant(0 === length || length - 1 in obj);
                if (obj.hasOwnProperty) try {
                    return Array.prototype.slice.call(obj);
                } catch (e) {}
                var ret = Array(length);
                for (var ii = 0; ii < length; ii++) ret[ii] = obj[ii];
                return ret;
            }
            module.exports = toArray;
        }, {
            "./invariant": 125
        } ],
        "146": [ function(_dereq_, module, exports) {
            "use strict";
            var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");
            var ReactTextComponent = _dereq_("./ReactTextComponent");
            var invariant = _dereq_("./invariant");
            var SEPARATOR = ReactInstanceHandles.SEPARATOR;
            var SUBSEPARATOR = ":";
            var userProvidedKeyEscaperLookup = {
                "=": "=0",
                ".": "=1",
                ":": "=2"
            };
            var userProvidedKeyEscapeRegex = /[=.:]/g;
            function userProvidedKeyEscaper(match) {
                return userProvidedKeyEscaperLookup[match];
            }
            function getComponentKey(component, index) {
                if (component && component.props && null != component.props.key) return wrapUserProvidedKey(component.props.key);
                return index.toString(36);
            }
            function escapeUserProvidedKey(text) {
                return ("" + text).replace(userProvidedKeyEscapeRegex, userProvidedKeyEscaper);
            }
            function wrapUserProvidedKey(key) {
                return "$" + escapeUserProvidedKey(key);
            }
            var traverseAllChildrenImpl = function(children, nameSoFar, indexSoFar, callback, traverseContext) {
                var subtreeCount = 0;
                if (Array.isArray(children)) for (var i = 0; i < children.length; i++) {
                    var child = children[i];
                    var nextName = nameSoFar + (nameSoFar ? SUBSEPARATOR : SEPARATOR) + getComponentKey(child, i);
                    var nextIndex = indexSoFar + subtreeCount;
                    subtreeCount += traverseAllChildrenImpl(child, nextName, nextIndex, callback, traverseContext);
                } else {
                    var type = typeof children;
                    var isOnlyChild = "" === nameSoFar;
                    var storageName = isOnlyChild ? SEPARATOR + getComponentKey(children, 0) : nameSoFar;
                    if (null == children || "boolean" === type) {
                        callback(traverseContext, null, storageName, indexSoFar);
                        subtreeCount = 1;
                    } else if (children.type && children.type.prototype && children.type.prototype.mountComponentIntoNode) {
                        callback(traverseContext, children, storageName, indexSoFar);
                        subtreeCount = 1;
                    } else if ("object" === type) {
                        "production" !== "development" ? invariant(!children || 1 !== children.nodeType, "traverseAllChildren(...): Encountered an invalid child; DOM " + "elements are not valid children of React components.") : invariant(!children || 1 !== children.nodeType);
                        for (var key in children) if (children.hasOwnProperty(key)) subtreeCount += traverseAllChildrenImpl(children[key], nameSoFar + (nameSoFar ? SUBSEPARATOR : SEPARATOR) + wrapUserProvidedKey(key) + SUBSEPARATOR + getComponentKey(children[key], 0), indexSoFar + subtreeCount, callback, traverseContext);
                    } else if ("string" === type) {
                        var normalizedText = new ReactTextComponent(children);
                        callback(traverseContext, normalizedText, storageName, indexSoFar);
                        subtreeCount += 1;
                    } else if ("number" === type) {
                        var normalizedNumber = new ReactTextComponent("" + children);
                        callback(traverseContext, normalizedNumber, storageName, indexSoFar);
                        subtreeCount += 1;
                    }
                }
                return subtreeCount;
            };
            function traverseAllChildren(children, callback, traverseContext) {
                if (null !== children && void 0 !== children) traverseAllChildrenImpl(children, "", 0, callback, traverseContext);
            }
            module.exports = traverseAllChildren;
        }, {
            "./ReactInstanceHandles": 57,
            "./ReactTextComponent": 77,
            "./invariant": 125
        } ],
        "147": [ function(_dereq_, module, exports) {
            "use strict";
            var copyProperties = _dereq_("./copyProperties");
            var keyOf = _dereq_("./keyOf");
            var invariant = _dereq_("./invariant");
            function shallowCopy(x) {
                if (Array.isArray(x)) return x.concat(); else if (x && "object" === typeof x) return copyProperties(new x.constructor(), x); else return x;
            }
            var DIRECTIVE_PUSH = keyOf({
                "$push": null
            });
            var DIRECTIVE_UNSHIFT = keyOf({
                "$unshift": null
            });
            var DIRECTIVE_SPLICE = keyOf({
                "$splice": null
            });
            var DIRECTIVE_SET = keyOf({
                "$set": null
            });
            var DIRECTIVE_MERGE = keyOf({
                "$merge": null
            });
            var ALL_DIRECTIVES_LIST = [ DIRECTIVE_PUSH, DIRECTIVE_UNSHIFT, DIRECTIVE_SPLICE, DIRECTIVE_SET, DIRECTIVE_MERGE ];
            var ALL_DIRECTIVES_SET = {};
            ALL_DIRECTIVES_LIST.forEach(function(directive) {
                ALL_DIRECTIVES_SET[directive] = true;
            });
            function invariantArrayCase(value, spec, directive) {
                "production" !== "development" ? invariant(Array.isArray(value), "update(): expected target of %s to be an array; got %s.", directive, value) : invariant(Array.isArray(value));
                var specValue = spec[directive];
                "production" !== "development" ? invariant(Array.isArray(specValue), "update(): expected spec of %s to be an array; got %s. " + "Did you forget to wrap your parameter in an array?", directive, specValue) : invariant(Array.isArray(specValue));
            }
            function update(value, spec) {
                "production" !== "development" ? invariant("object" === typeof spec, "update(): You provided a key path to update() that did not contain one " + "of %s. Did you forget to include {%s: ...}?", ALL_DIRECTIVES_LIST.join(", "), DIRECTIVE_SET) : invariant("object" === typeof spec);
                if (spec.hasOwnProperty(DIRECTIVE_SET)) {
                    "production" !== "development" ? invariant(1 === Object.keys(spec).length, "Cannot have more than one key in an object with %s", DIRECTIVE_SET) : invariant(1 === Object.keys(spec).length);
                    return spec[DIRECTIVE_SET];
                }
                var nextValue = shallowCopy(value);
                if (spec.hasOwnProperty(DIRECTIVE_MERGE)) {
                    var mergeObj = spec[DIRECTIVE_MERGE];
                    "production" !== "development" ? invariant(mergeObj && "object" === typeof mergeObj, "update(): %s expects a spec of type 'object'; got %s", DIRECTIVE_MERGE, mergeObj) : invariant(mergeObj && "object" === typeof mergeObj);
                    "production" !== "development" ? invariant(nextValue && "object" === typeof nextValue, "update(): %s expects a target of type 'object'; got %s", DIRECTIVE_MERGE, nextValue) : invariant(nextValue && "object" === typeof nextValue);
                    copyProperties(nextValue, spec[DIRECTIVE_MERGE]);
                }
                if (spec.hasOwnProperty(DIRECTIVE_PUSH)) {
                    invariantArrayCase(value, spec, DIRECTIVE_PUSH);
                    spec[DIRECTIVE_PUSH].forEach(function(item) {
                        nextValue.push(item);
                    });
                }
                if (spec.hasOwnProperty(DIRECTIVE_UNSHIFT)) {
                    invariantArrayCase(value, spec, DIRECTIVE_UNSHIFT);
                    spec[DIRECTIVE_UNSHIFT].forEach(function(item) {
                        nextValue.unshift(item);
                    });
                }
                if (spec.hasOwnProperty(DIRECTIVE_SPLICE)) {
                    "production" !== "development" ? invariant(Array.isArray(value), "Expected %s target to be an array; got %s", DIRECTIVE_SPLICE, value) : invariant(Array.isArray(value));
                    "production" !== "development" ? invariant(Array.isArray(spec[DIRECTIVE_SPLICE]), "update(): expected spec of %s to be an array of arrays; got %s. " + "Did you forget to wrap your parameters in an array?", DIRECTIVE_SPLICE, spec[DIRECTIVE_SPLICE]) : invariant(Array.isArray(spec[DIRECTIVE_SPLICE]));
                    spec[DIRECTIVE_SPLICE].forEach(function(args) {
                        "production" !== "development" ? invariant(Array.isArray(args), "update(): expected spec of %s to be an array of arrays; got %s. " + "Did you forget to wrap your parameters in an array?", DIRECTIVE_SPLICE, spec[DIRECTIVE_SPLICE]) : invariant(Array.isArray(args));
                        nextValue.splice.apply(nextValue, args);
                    });
                }
                for (var k in spec) if (!ALL_DIRECTIVES_SET[k]) nextValue[k] = update(value[k], spec[k]);
                return nextValue;
            }
            module.exports = update;
        }, {
            "./copyProperties": 102,
            "./invariant": 125,
            "./keyOf": 132
        } ],
        "148": [ function(_dereq_, module, exports) {
            "use strict";
            var emptyFunction = _dereq_("./emptyFunction");
            var warning = emptyFunction;
            if ("production" !== "development") warning = function(condition, format) {
                var args = Array.prototype.slice.call(arguments, 2);
                if (void 0 === format) throw new Error("`warning(condition, format, ...args)` requires a warning " + "message argument");
                if (!condition) {
                    var argIndex = 0;
                    console.warn("Warning: " + format.replace(/%s/g, function() {
                        return args[argIndex++];
                    }));
                }
            };
            module.exports = warning;
        }, {
            "./emptyFunction": 109
        } ]
    }, {}, [ 82 ])(82);
});

var ModelMixin = {
    "componentDidMount": function() {
        _.each(this.getBackboneModels(), function(model) {
            this.injectModel(model);
        }, this);
    },
    "componentWillUnmount": function() {
        _.each(this.__syncedModels, function(model) {
            _.each(model.__updater, function(updater) {
                model.off(null, updater, this);
            }, this);
            delete model.__updater;
        }, this);
        delete this.__syncedModels;
    },
    "injectModel": function(model, events, updater) {
        if (!this.__syncedModels) this.__syncedModels = [];
        if (!events && !updater && ~this.__syncedModels.indexOf(model)) return;
        updater = updater || this.forceUpdate.bind(this, null);
        if (!model.__updater) model.__updater = [];
        model.__updater.push(updater);
        events = events || "add change remove";
        if (model instanceof ws.bb.Model) events = "add change destroy"; else if (model instanceof ws.bb.Collection) events = "add remove reset sort destroy";
        model.on(events, updater, this);
        this.__syncedModels.push(model);
    },
    "bindTo": function(model, key) {
        return {
            "value": model.get(key),
            "requestChange": function(value) {
                model.set(key, value);
            }.bind(this)
        };
    }
};

ws.namespace("ws.common");

ws.common = function($, undefined) {
    var preventMenuClose = false;
    var ajaxQueue = {};
    $.extend($.pnotify.defaults, {
        "addclass": "WikispacesContent WikispacesBs3",
        "history": false,
        "closer": true,
        "closer_hover": false,
        "sticker": false,
        "width": "",
        "styling": {
            "container": "alert",
            "notice": "alert-warning",
            "notice_icon": "fa fa-exclamation-circle",
            "info": "alert-info",
            "info_icon": "fa fa-info-circle",
            "success": "alert-success",
            "success_icon": "fa fa-check-circle",
            "error": "alert-danger",
            "error_icon": "fa fa-exclamation-triangle",
            "closer": "fa fa-times",
            "pin_up": "fa fa-pause",
            "pin_down": "fa fa-play",
            "hi_menu": "well",
            "hi_btn": "btn btn-default",
            "hi_btnhov": "",
            "hi_hnd": "fa fa-chevron-down"
        }
    });
    $.pnotify.defaults.stack.spacing1 = 5;
    $(document).ready(function() {
        $("input, textarea").placeholder();
        $(document).on("click", "a.userLink:not(.userLinkNoMenu)", ws.common.makeLinkClickFunction(ws.common.userLinkClick));
        $("textarea.autogrow").autogrow();
        $("body").click(function(event) {
            $(".userMenu").remove();
        });
        $(".btn").one("submit", function() {
            $(this).click(function() {
                return false;
            });
        });
        $("form").submit(function() {
            $(this).find(".wsh, .jowic, .movkp, .mimw, .jovise").find('input[name="wikispaces_user_id"]').val("");
            $(this).find($(this).data("onSubmitShow")).show();
            $(this).find($(this).data("onSubmitHide")).hide();
        });
        if ($("#WikispacesBanner").length) _.delay(function() {
            ws.common.displayBanner(true);
        }, 1e3);
        $(".WikiAddContentBar .ws-tip").tooltip({
            "container": $("body"),
            "placement": "bottom"
        });
        ws.math.process();
        $('.WikispacesContent input[type="email"]').one("blur", function() {
            $(this).mailcheck({
                "suggested": function(element, suggestion) {
                    jQuery(".mailcheck").remove();
                    var $div = $("<div/>").addClass("mailcheck");
                    var $a = $("<a>").click(function(e) {
                        jQuery(element).val(suggestion.full);
                        jQuery(".mailcheck").remove();
                        e.preventDefault();
                    }).html(suggestion.full);
                    $div.append("Did you mean ").append($a).append("? ").append($("<a/>").text("(dismiss)").on("click", function() {
                        $(this).closest(".mailcheck").remove();
                    }));
                    jQuery("#mailcheck-placeholder").css("visibility", "visible").find("a").replaceWith($div);
                },
                "empty": function(element) {
                    jQuery(".mailcheck").remove();
                }
            });
        });
        Backbone.ajax = ws.common.ajaxForRest;
        $.receiveMessage(function(event) {
            var matches = event.data.match(/^notices(.*)/);
            if (matches) {
                var message = $.deparam(matches[0]);
                ws.common.addJsonNotices(message.notices);
                return;
            }
        });
        ws.common.trackEvents("form.ws-track, a.ws-track");
    });
    window.onload = function() {
        if (window.performance && window.performance.timing) {
            var ntStats = getPerfStats();
            _gaq = _gaq || [];
            _gaq.push([ "_setAccount", wsGoogleAccount ]);
            _gaq.push([ "_trackEvent", "Navigation Timing", "DNS", undefined, ntStats.dns, true ]);
            _gaq.push([ "_trackEvent", "Navigation Timing", "Connect", undefined, ntStats.connect, true ]);
            _gaq.push([ "_trackEvent", "Navigation Timing", "TTFB", undefined, ntStats.ttfb, true ]);
            _gaq.push([ "_trackEvent", "Navigation Timing", "BasePage", undefined, ntStats.basePage, true ]);
            _gaq.push([ "_trackEvent", "Navigation Timing", "FrontEnd", undefined, ntStats.frontEnd, true ]);
        }
    };
    function getPerfStats() {
        var timing = window.performance.timing;
        return {
            "dns": timing.domainLookupEnd - timing.domainLookupStart,
            "connect": timing.connectEnd - timing.connectStart,
            "ttfb": timing.responseStart - timing.connectEnd,
            "basePage": timing.responseEnd - timing.responseStart,
            "frontEnd": timing.loadEventStart - timing.responseEnd
        };
    }
    function isPageNameParam(object, method) {
        if ("page" == object || "file" == object || "doc" == object || "theme" == object || "star" == object || "message" == object || "space" == object && "defaulttemplate" == method || "site" == object && "helpcontent" == method) return true;
        return false;
    }
    function encodePath(project, space, object, method, page, id) {
        return _(arguments).chain().filter(function(part) {
            return null !== part && part !== undefined && "" !== part;
        }).map(function(part) {
            var encodedPart = encodeURIComponent(part);
            if (part == page && isPageNameParam(object, method)) encodedPart = encodedPart.replace(/%20/g, "+");
            return encodedPart;
        }).value().join("/");
    }
    return {
        "PROJECT_INDICATOR": "-",
        "highlightColor": "#FFC",
        "single_page_regex": /^([:\/]?)([^:\/]+)$/,
        "full_link_regex": /^[:\/]?([^:\/]+)[:\/]([^:\/]+)[:\/]([^:\/]+)$/,
        "pageNameRegex": /[\[\]:|{}$\"#@+]/,
        "projectNameRegex": /[:\[\]\/]/,
        "teamNameRegex": /[:\[\]\/]/,
        "disableHideOverlappingEmbeds": false,
        "isMac": navigator.userAgent.indexOf("Mac") != -1,
        "camelize": function(str) {
            var parts = str.split("-"), len = parts.length;
            if (1 == len) return parts[0];
            var camelized = "-" == str.charAt(0) ? parts[0].charAt(0).toUpperCase() + parts[0].substring(1) : parts[0];
            for (var i = 1; i < len; i++) camelized += parts[i].charAt(0).toUpperCase() + parts[i].substring(1);
            return camelized;
        },
        "normalizeCssSelector": function(value) {
            if (value == value.toUpperCase()) value = value.toLowerCase();
            return ws.common.camelize(value);
        },
        "truncate": function(str, length, ellipsis) {
            return ws.common.truncify(str, length, 0, ellipsis);
        },
        "truncify": function(str, length, suffix, ellipsis) {
            if (!str) return "";
            if ("number" !== typeof suffix) suffix = 10;
            if (!ellipsis) ellipsis = "...";
            if (str.length <= length) return str;
            return str.substr(0, length - suffix - ellipsis.length) + ellipsis + str.substr(str.length - suffix);
        },
        "addUriParams": function(uri, params) {
            if (!params || !params.length) return uri;
            uri += uri.indexOf("?") == -1 ? "?" : "&";
            var newParams = [];
            for (var i = 0; i < params.length; ++i) if (!_.isUndefined(params[i][1])) newParams.push(encodeURIComponent(params[i][0]) + "=" + encodeURIComponent(params[i][1]));
            return uri + newParams.join("&");
        },
        "removeUriParams": function(uri) {
            return uri.match(/^[^\?]*/);
        },
        "updateUriParams": function(uri, params) {
            return ws.common.replaceUriParams(uri, _.extend(ws.common.uriParams(uri), params));
        },
        "replaceUriParams": function(uri, params) {
            var paramStr = "?" + _(params).chain().map(function(v, k) {
                return null === v ? "" : encodeURIComponent(k) + "=" + encodeURIComponent(v);
            }).compact().value().join("&");
            return uri.match(/.*?(?=\?|$)/)[0] + paramStr;
        },
        "uriParams": function(uri) {
            var params = {}, queryStart;
            if ((queryStart = uri.indexOf("?")) >= 0) {
                var query = uri.substring(queryStart + 1);
                var regex = /(.+?)=(.*?)(?:&|;|$)/g, match;
                while (match = regex.exec(query)) params[decodeURIComponent(match[1])] = decodeURIComponent(match[2]);
            }
            return params;
        },
        "track": function(category, action, opt_label, opt_value, opt_noninteraction) {
            _gaq = _gaq || [];
            _gaq.push([ "_trackEvent", category, action, opt_label, opt_value, opt_noninteraction ]);
            if (window.mixpanel) window.mixpanel.track(category + "/" + action, {
                "label": opt_label,
                "value": opt_value
            });
        },
        "escapeRegExp": function(s) {
            return s.replace(/([.*+?^${}()|[\]\/\\])/g, "\\$1");
        },
        "escapeHtml": function escapeHtml(s) {
            return (s || "").replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
        },
        "strtr": function(s, from, to) {
            var result = "", offset = -1;
            for (var i = 0; i < s.length; i++) if (s.charCodeAt(i) <= 127) result += s.charAt(i); else {
                offset = from.indexOf(s.charAt(i));
                if (offset >= 0) result += to.charAt(offset); else result += s.charAt(i);
            }
            return result;
        },
        "pathFor": function(object, method, page, id) {
            var project = null;
            var space = null;
            if (!wikispaces_isDefaultSpace) {
                project = wikispaces_projectName;
                space = wikispaces_spaceName;
            }
            return ws.common.pathForFull(project, space, object, method, page, id);
        },
        "pathForFull": function(project, space, object, method, page, id) {
            var path = "";
            if (project) path = "/" + ws.common.PROJECT_INDICATOR;
            path += "/" + encodePath(project, space, object, method, page, id);
            return path;
        },
        "parseLink": function(link, object, method) {
            var project = null;
            var space = null;
            var page = null;
            var matches = link.match(ws.common.single_page_regex);
            if (matches) if ("/" != matches[1]) return ws.common.pathFor(object, method, matches[2]); else return ws.common.pathForFull(null, null, object, method, matches[2]); else {
                matches = link.match(ws.common.full_link_regex);
                if (matches) return ws.common.pathForFull(matches[1], matches[2], object, method, matches[3]); else return false;
            }
        },
        "makeLinkClickFunction": function(func) {
            return function(e) {
                if (!ws.common.isMac && e.ctrlKey || ws.common.isMac && e.originalEvent && e.originalEvent.metaKey || e.shiftKey || 2 == e.which) return;
                if (!func.apply(this, arguments)) {
                    e.preventDefault();
                    return false;
                }
            };
        },
        "compareGroupPermissionValues": function(val1, val2) {
            if (val1 == val2) return 0;
            if ("O" == val1) return 1;
            if ("O" == val2) return -1;
            if ("M" == val1) return 1;
            if ("M" == val2) return -1;
            if ("W" == val1) return 1;
            if ("W" == val2) return -1;
            if ("L" == val1) return 1;
            if ("L" == val2) return -1;
        },
        "hideOverlappingEmbeds": function(elem) {
            if (ws.common.disableHideOverlappingEmbeds) return;
            elem = $(elem);
            if (!elem.is(":visible")) {
                $(".WikiEmbedSubForPopup").remove();
                $(".WikiHideForPopup").removeClass("WikiHideForPopup");
                return;
            }
            var offset = elem.offset();
            var y1 = offset.top;
            var x1 = offset.left;
            var y2 = y1 + elem.outerHeight();
            var x2 = x1 + elem.outerWidth();
            $("iframe:visible, object:visible, embed:visible, applet:visible").not(elem.find("*")).each(function() {
                var jI = $(this);
                if (!jI.is(":visible")) return;
                if (jI.is("iframe") && ws.common.isSameDomain(jI.attr("src"))) {
                    this.contentWindow.ws.common.hideOverlappingEmbeds(this.contentWindow.document.body);
                    return;
                }
                var iOffset = jI.offset();
                var iY1 = iOffset.top;
                var iX1 = iOffset.left;
                var iX2 = iX1 + jI.outerWidth();
                var iY2 = iY1 + jI.outerHeight();
                jI.find("iframe:visible, object:visible, embed:visible, applet:visible").each(function() {
                    var jThis = $(this);
                    var myOffset = jThis.offset();
                    var myY1 = myOffset.top;
                    var myX1 = myOffset.left;
                    var myX2 = myX1 + jThis.outerWidth();
                    var myY2 = myY1 + jThis.outerHeight();
                    if (myY1 < iY1) iY1 = myY1;
                    if (myX1 < iX1) iX1 = myX1;
                    if (myY2 > iY2) iY2 = myY2;
                    if (myX2 > iX2) iX2 = myX2;
                });
                if (!(y1 < iY2 && y2 > iY1 && x1 < iX2 && x2 > iX1)) return;
                var display = jI.css("display");
                if ("block" != display) display = "inline-block";
                var css = {
                    "display": display,
                    "position": jI.css("position"),
                    "float": jI.css("float"),
                    "top": jI.css("top"),
                    "right": jI.css("right"),
                    "bottom": jI.css("bottom"),
                    "left": jI.css("left"),
                    "width": iX2 - iX1 - 18,
                    "height": iY2 - iY1 - 18,
                    "overflow": "hidden"
                };
                $("<div></div>").css(css).addClass("WikiEmbedSubForPopup").insertBefore(jI);
                jI.addClass("WikiHideForPopup");
            });
        },
        "resolveNameToBoundFunction": function(name) {
            if ("string" !== typeof name) return;
            var obj = null, func = window, success = false;
            $.each(name.split("."), function(i, namePart) {
                obj = func;
                func = obj[namePart];
                if (!func) {
                    success = false;
                    return false;
                }
                success = true;
            });
            if (success && "function" === typeof func) return function() {
                return func.call(obj);
            };
        },
        "combineFunctions": function() {
            var functions = arguments;
            return function() {
                var me = this;
                var args = arguments;
                _.each(_.compact(functions), function(func) {
                    func.apply(me, args);
                });
            };
        },
        "trackEvents": function(selector) {
            if (!window.mixpanel) return;
            $(selector).each(function() {
                var $elem = $(this);
                if ($elem.is(".WikispacesDialogLink")) {
                    $elem.on("click", function() {
                        if (!$elem.is(".ws-track")) return;
                        var myProps = $(this).data("track-props");
                        if ("function" == typeof myProps) myProps = myProps.call();
                        mixpanel.track($elem.data("track"), myProps);
                    });
                    return;
                }
                var id = $elem.attr("id");
                var removeId = false;
                if (!id) {
                    id = "ws-" + Math.random();
                    $elem.attr("id", id);
                    removeId = true;
                }
                var props = function(elem) {
                    var myProps = $(elem).data("track-props");
                    if ("function" == typeof myProps) myProps = myProps(elem);
                    return myProps || {};
                };
                if ($elem.is("a")) mixpanel.track_links("#" + id, $elem.data("track"), props); else if ($elem.is("form")) mixpanel.track_forms("#" + id, $elem.data("track"), props);
                if (removeId) $elem.removeAttr(id);
            });
        },
        "trackFileLink": function(url) {
            _gaq = _gaq || [];
            if ("undefined" != typeof wsSpaceGoogleAccount) _gaq.push([ "gaSpace._trackPageview", url ]);
            if ("undefined" != typeof wsInstanceGoogleAcount) _gaq.push([ "gaInstance._trackPageview", url ]);
            _gaq.push([ "_trackPageview", url ]);
        },
        "userLinkClick": function() {
            var link = $(this);
            $(".userMenu").remove();
            var o = $("<div>");
            o.addClass("userMenu");
            $("body").append(o);
            var username = link.attr("href").substring(link.attr("href").lastIndexOf("/") + 1);
            function errorFunction(request, textStatus, errorThrown) {
                ws.session.reloadSession(function() {
                    link.click();
                }, 500, function() {
                    window.alert("Error: Could not display user details");
                });
            }
            $.ajax({
                "url": "/user/menu/" + username,
                "type": "GET",
                "dataType": "html",
                "success": function(data, textStatus, request) {
                    o.html(data);
                    o.fadeIn("slow");
                    o.css("position", "absolute");
                    o.css("left", Math.min(link.offset().left - 3, $(window).width() - o.outerWidth()));
                    o.css("top", link.offset().top - 8);
                },
                "error": errorFunction
            });
        },
        "ucfirst": function(str) {
            str += "";
            var f = str.charAt(0).toUpperCase();
            return f + str.substr(1);
        },
        "addNotice": function(str, type) {
            var opts = {
                "text": str,
                "type": type,
                "hide": "success" == type,
                "after_init": function(pnotify) {
                    $(document).trigger("add-notice", [ pnotify ]);
                }
            };
            jQuery.pnotify(opts);
        },
        "removeNotice": function() {
            $.pnotify_remove_all();
        },
        "addJsonNotices": function(notices) {
            if (!notices) return;
            var hasStuff = _.find(notices, function(noticeList) {
                return !_.isEmpty(noticeList);
            });
            if (!hasStuff) return;
            if (ws.context.settings.isDialog && parent) {
                var target = ws.common.uriParams(document.location.href).pwin;
                if (!target) target = window.location.protocol + "//" + window.location.host;
                $.postMessage({
                    "notices": notices
                }, target);
                return;
            }
            _(notices).each(function(noticeList, noticeClass) {
                _(noticeList).each(function(notice) {
                    ws.common.addNotice(notice, noticeClass);
                });
            });
        },
        "displayBanner": function(makeVisible) {
            if (makeVisible) $("#WikispacesBanner").slideDown({
                "step": function() {
                    ws.header.reposition();
                }
            }); else $("#WikispacesBanner").slideUp({
                "step": function() {
                    ws.header.reposition();
                }
            });
        },
        "ajaxifyForms": function(forms) {
            $(forms).find("form").addBack("form").on("submit", function(e, button) {
                e.preventDefault();
                var form = this;
                _.defer(function() {
                    var ajax = ws.common.ajax({
                        "form": form,
                        "target": button
                    });
                    $(form).find(".btn:not(.disabled)").addClass("disabled js-ajax-disabled");
                    $(form).find(":input:not(:disabled)").addClass("js-ajax-disabled").prop("disabled", true);
                    $(form).find(".select2-offscreen.js-ajax-disabled").select2("enable", false);
                    ajax.always(function() {
                        $(form).find(".select2-offscreen.js-ajax-disabled").select2("enable", true);
                        $(form).find(".js-ajax-disabled").filter(".btn.disabled").removeClass("disabled").end().filter(":input:disabled").prop("disabled", false).end().removeClass("js-ajax-disabled");
                    });
                    $(form).trigger("ws-ajax-submit", [ ajax, button ]);
                });
            }).find(":submit, :image").click(function(e) {
                e.preventDefault();
                $(this).trigger("submit", [ this ]);
            });
        },
        "ajaxForRest": function(options) {
            options = $.extend({
                "type": "post"
            }, options, {
                "data": {
                    "type": options.type,
                    "content": options.data
                }
            });
            if ("get" != options.type.toLowerCase()) options.type = "post";
            return ws.common.ajax(options);
        },
        "ajax": function(options) {
            if (options.form) {
                var $form = $(options.form);
                options = $.extend({
                    "url": $form.attr("action"),
                    "type": $form.attr("method"),
                    "data": $form
                }, options);
            }
            options = $.extend({
                "url": window.location.href,
                "type": "POST",
                "iframe": true,
                "cache": false,
                "dataType": "json"
            }, options);
            options = $.extend({
                "processData": !options.iframe
            }, options);
            if (options.data && options.iframe) {
                var optData = options.data;
                var data = [];
                if ($.isPlainObject(optData)) $.each(optData, function(name, value) {
                    if (!$.isArray(value)) value = [ value ];
                    $.each(value, function(index, val) {
                        if ("function" == typeof val) val = val.call(optData);
                        data.push({
                            "name": name,
                            "value": val
                        });
                    });
                }); else {
                    if (!$.isArray(optData)) optData = [ optData ];
                    $.each(optData, function(index, value) {
                        if ($.isPlainObject(value)) data.push(value); else if ("object" == $.type(value)) data = data.concat($(value).find(":input").addBack(":input").filter(function() {
                            if ($(this).is(":disabled, :reset, :checkbox:not(:checked), :radio:not(:checked)")) return false;
                            if (!$(this).is(":button, :submit, :image")) return true;
                            if ($(this).is("button:not(:submit)")) return false;
                            return options.target == this;
                        }).toArray()); else $.error("Unexpected type in data: " + $.type(value));
                    });
                }
                options.data = data;
            }
            if (options.queueName && ajaxQueue[options.queueName]) ajaxQueue[options.queueName].abort();
            var then = options.then;
            delete options.then;
            var error = options.error;
            delete options.error;
            var success = options.success;
            delete options.success;
            var complete = options.complete;
            delete options.complete;
            var request = $.ajax(options);
            if (options.queueName) {
                var originalRequest = request;
                ajaxQueue[options.queueName] = request;
                request = request.then(null, function(jqXHR, textStatus, errorThrown) {
                    if ("abort" == errorThrown) return $.Deferred().promise();
                    return originalRequest;
                });
            }
            request.done(function(data) {
                if (data) ws.common.addJsonNotices(data.notices);
            });
            !function() {
                request = request.then(function(data, textStatus, jqXHR) {
                    var d = $.Deferred();
                    if (data && data.http) if (301 == data.http.code || 302 == data.http.code || data.redirectUrl) {
                        var url = data.redirectUrl;
                        if (ws.context.settings.isDialog && parent && parent.ws && parent.ws.dialog && parent.ws.dialog.close) {
                            parent.ws.dialog.close({
                                "redirect": data.redirectUrl
                            });
                            return;
                        }
                        ws.dialog.blankOverlay();
                        location.href = data.redirectUrl;
                        return;
                    } else if (200 != data.http.code) {
                        d.reject(jqXHR, "error", data.http.text);
                        return d.promise();
                    }
                    if (data) data = data.content;
                    return d.resolve(data, textStatus, jqXHR).promise();
                });
            }();
            request.done(success);
            request.fail(error);
            request.always(complete);
            return request;
        },
        "getURLParameter": function(name) {
            return decodeURI((new RegExp(name + "=" + "(.+?)(&|$)").exec(location.search) || [ null, null ])[1]);
        },
        "validatePageName": function(value) {
            var invalid = value.match(/[\/\[\]\{\}\:\|\$\+\#\@\"]/);
            if (invalid && invalid.length > 0 || value.length > 255 || 0 === value.length) return false;
            return true;
        },
        "showMorePageBar": function() {
            var $more = $(".ws-menu-bar .btn-group .ws-btn-more");
            if ($more.data("tooltip")) $more.tooltip("hide");
            $(".ws-menu-bar .btn-group").addClass("open");
            ws.common.hideOverlappingEmbeds($(".ws-menu-bar .ws-more-menu"));
        },
        "hideMorePageBar": function() {
            if ($(".ws-menu-bar .ws-more-menu .WikiTagFormEdit").length) return;
            $(".ws-menu-bar .btn-group").removeClass("open");
            var $more = $(".ws-menu-bar .btn-group .ws-btn-more");
            if ($more.data("tooltip")) $more.tooltip("hide");
            ws.common.hideOverlappingEmbeds();
        },
        "showTagDropdown": function() {
            $(".ws-menu-bar .ws-tag-dropdown-toggle").closest(".dropdown").addClass("open active");
        },
        "hideTagDropdown": function() {
            if ($(".ws-menu-bar .ws-more-menu .WikiTagFormEdit").length) return;
            $(".ws-menu-bar .ws-tag-dropdown-toggle").closest(".dropdown").removeClass("open active");
        },
        "setSelectionRange": function(element, start, end) {
            if (element.setSelectionRange) return element.setSelectionRange(start, end);
            var range = element.createTextRange();
            range.collapse(true);
            range.moveEnd("character", end);
            range.moveStart("character", start);
            range.select();
        },
        "isScrolledIntoView": function(elem) {
            var docViewTop = $(window).scrollTop();
            var docViewBottom = docViewTop + $(window).height();
            var elemTop = $(elem).offset().top;
            var elemBottom = elemTop + $(elem).height();
            return elemBottom <= docViewBottom && elemTop >= docViewTop;
        },
        "getPagerData": function(offset, limit, numrows) {
            var pager = {
                "firstpage": 1,
                "numrows": numrows,
                "numpages": Math.max(Math.ceil(numrows / limit), 1),
                "limit": limit,
                "current": Math.floor(offset / limit) + 1,
                "from": Math.min(numrows, offset + 1),
                "to": numrows
            };
            pager.lastpage = pager.numpages;
            if (pager.current != pager.numpages) pager.to = pager.current * limit;
            pager.prev = null;
            if (pager.current > pager.firstpage) pager.prev = Math.max(0, pager.from - 1 - pager.limit);
            pager.next = null;
            if (pager.current < pager.lastpage) pager.next = Math.min(pager.numrows, pager.from - 1 + pager.limit);
            pager.first = 0;
            pager.last = (pager.lastpage - 1) * pager.limit;
            pager.paginator = ws.common.getPagerPagination(pager);
            return pager;
        },
        "getPagerPagination": function(pager) {
            var result = [ {
                "page": pager.firstpage,
                "offset": pager.first
            } ];
            if (1 == pager.lastpage) return result;
            var offset = 1;
            var start = pager.current - offset;
            var end = pager.current + offset;
            var frontOverhang = Math.max(0, pager.firstpage + 1 - start);
            var backOverhang = Math.max(0, end - (pager.lastpage - 1));
            start = Math.max(pager.firstpage + 1, start - backOverhang);
            end = Math.min(pager.lastpage - 1, end + frontOverhang);
            if (start > pager.firstpage + 1) result.push({
                "page": null,
                "offset": null
            });
            for (var i = start; i <= end; i++) result.push({
                "page": i,
                "offset": (i - 1) * pager.limit
            });
            if (end < pager.lastpage - 1) result.push({
                "page": null,
                "offset": null
            });
            result.push({
                "page": pager.lastpage,
                "offset": pager.last
            });
            return result;
        },
        "log": function() {
            var jsDebugMode = false;
            if (document.cookie && document.cookie.indexOf("debug_js=") != -1) jsDebugMode = true;
            if (jsDebugMode && window.console) if ($.browser.mozilla || $.browser.webkit) window.console.log(arguments); else for (var i = 0; i < arguments.length; i++) window.console.log(arguments[i]);
        },
        "isSameDomain": function(src) {
            if (!src) return false;
            if (src.match(/^\/(?:[^\/]|$)/)) return true;
            if (src.match("^" + ws.common.escapeRegExp("//" + location.host) + "(?:/|$)")) return true;
            if (src.match("^" + ws.common.escapeRegExp(location.protocol + "//" + location.host) + "(?:/|$)")) return true;
            return false;
        }
    };
}(jQuery);

function log() {
    ws.common.log.apply(this, arguments);
}

ws.namespace("ws.assessment");

ws.assessment = function($, undefined) {
    var handle = {};
    var lastActive = null;
    var enabled = false;
    $(document).ready(function() {
        var viewCallback = function(date) {
            return 1;
        };
        enabled = ws.context.wiki.isClassroom;
        ws.assessment.schedule("view", viewCallback);
        $(window).on("focus", function(e) {
            ws.assessment.schedule("view", viewCallback);
        });
        $(window).on("blur", function(e) {
            if (handle.view) {
                clearTimeout(handle.view);
                handle.view = null;
            }
            $("iframe").each(function() {
                if (!ws.common.isSameDomain($(this).attr("src"))) return;
                $(this.contentWindow).off(".subfocus");
                $(this.contentWindow).on("focus.subfocus", function(e) {
                    ws.assessment.schedule("view", viewCallback);
                }).on("blur.subfocus", function(e) {
                    if (handle.view) {
                        clearTimeout(handle.view);
                        handle.view = null;
                    }
                });
            });
        });
    });
    function sendActivity(type, valueCallback, date) {
        if (!enabled || !ws.context.user.id) return;
        if (!date) date = ws.assessment.getCurrentDate();
        var value = valueCallback(date);
        if (!value) return;
        var url = "/data/put/" + encodeURIComponent(type);
        var data = {
            "s": ws.context.space.id,
            "w": ws.context.wiki.id,
            "u": ws.context.user.id,
            "d": date,
            "v": value
        };
        var md5Data = [ type, encodeURIComponent(Cookie.get("slave")) ];
        $.each(data, function() {
            url = ws.common.addUriParams(url, [ arguments ]);
            md5Data.push(arguments[1]);
        });
        var hash = md5Data.join(":");
        hash = b64_md5(hash).replace(/\+/g, "-").replace(/\//g, "_");
        url = ws.common.addUriParams(url, [ [ "h", hash ] ]);
        $.ajax(url);
    }
    return {
        "BUCKET_SECONDS": 5,
        "getCurrentDate": function(unixMillis) {
            var date = null;
            if (unixMillis) date = new Date(unixMillis); else date = new Date(new Date().getTime() + ws.context.clockSkewMillis);
            date.setUTCMilliseconds(0);
            var seconds = date.getUTCSeconds();
            seconds = Math.floor(seconds / ws.assessment.BUCKET_SECONDS) * ws.assessment.BUCKET_SECONDS;
            date.setUTCSeconds(seconds);
            var currentBucket = Math.floor(date.getTime() / 1e3);
            return currentBucket;
        },
        "disable": function() {
            enabled = false;
            $.each(handle, function(type, v) {
                clearTimeout(v);
                handle[type] = null;
            });
        },
        "schedule": function(type, callback) {
            if (handle[type]) return;
            var bucketDate = ws.assessment.getCurrentDate();
            var runAt = 1e3 * (bucketDate + ws.assessment.BUCKET_SECONDS - Math.floor((new Date().getTime() + ws.context.clockSkewMillis) / 1e3));
            handle[type] = setTimeout(function() {
                sendActivity(type, callback, bucketDate);
                handle[type] = null;
                ws.assessment.schedule(type, callback);
            }, runAt);
        }
    };
}(jQuery);

ws.namespace("ws.bb");

ws.bb = function(undefined) {
    var commonBbObject = {
        "save": function(options) {
            if (!(this instanceof Backbone.Model)) throw new Error("save only works on models");
            options = options || {};
            if (!_.size(this.changed)) return;
            if (this.id) {
                options.patch = true;
                options.error = ws.common.combineFunctions(options.error, _.bind(function() {
                    this.fetch();
                }, this));
            }
            return Backbone.Model.prototype.save.call(this, this.changed, options);
        },
        "sync": function(method, model, options) {
            options = options || {};
            if (!options.url && "create" == method && model.createUrl) options.url = _.result(model, "createUrl");
            _.each([ "success", "error" ], function(name) {
                options[name] = ws.common.combineFunctions(options[name], function() {
                    _.delay(ws.bb.store.unlockUpdate, 1e3, model);
                });
            });
            ws.bb.store.lockUpdate(model);
            return Backbone.sync.apply(this, arguments);
        },
        "destroy": function(options) {
            if (!(this instanceof Backbone.Model)) throw new Error("Cannot call destroy on a collection");
            var self = this;
            options = options || {};
            options.success = ws.common.combineFunctions(function() {
                ws.bb.store.remove(self, true);
            }, options.success);
            Backbone.Model.prototype.destroy.call(this, options);
        },
        "parse": function(response) {
            if (!_.isObject(response)) return response;
            _.each(this.nestedClasses, function(spec, attrName) {
                if (response[attrName]) {
                    var options = null;
                    if (spec.options) options = spec.options.call(this, response);
                    var object = null;
                    try {
                        object = ws.bb.store.create(spec.type, response[attrName], options);
                    } catch (excep) {
                        response[attrName] = null;
                    }
                    if (object) {
                        if (spec.events) _.each(spec.events, function(handler, event) {
                            object.on(event, handler, this);
                        }, this);
                        response[attrName] = object;
                    }
                }
            }, this);
            return response;
        }
    };
    var Model = Backbone.Model.extend(commonBbObject);
    var Collection = Backbone.Collection.extend(commonBbObject);
    return {
        "Model": Model,
        "Collection": Collection
    };
}();

ws.namespace("ws.bb.store");

ws.bb.store = function(undefined) {
    var _store = {};
    var _locks = {};
    var dfs = function(object, callback, visitBefore) {
        var addNestedToStack = function(spec, attrName, object) {
            if (object[attrName]) this.push(object[attrName]);
        };
        var addModelToStack = function(model) {
            this.push(model);
        };
        var stack = [ object ];
        while (stack.length) {
            object = stack.pop();
            if (visitBefore) callback(object);
            if (object.nestedClasses) _.each(object.nestedClasses, _.bind(addNestedToStack, stack));
            if (object instanceof Backbone.Collection) object.each(_.bind(addModelToStack, stack));
            if (!visitBefore) callback(object);
        }
    };
    var bbStoreObject = {
        "create": function(type, attributes, options, noAdd) {
            var object = new type(attributes, _.extend({
                "parse": true
            }, options));
            if (!noAdd) ws.bb.store.add(object);
            return object;
        },
        "add": function(rootObject) {
            dfs(rootObject, function(object) {
                var url = _.result(object, "url");
                if (url && object) _store[url] = object;
            }, true);
        },
        "get": function(url) {
            if (_store[url]) return _store[url];
            return null;
        },
        "remove": function(rootObject, silent) {
            if (!_.isObject(rootObject)) rootObject = ws.bb.store.get(rootObject);
            dfs(rootObject, function(object) {
                var url = _.result(object, "url");
                if (!_store[url]) return;
                if (!silent) object.trigger("destroy", object, object.collection, {});
                delete _store[url];
            }, false);
        },
        "lockUpdate": function(object) {
            var url = _.result(object, "url");
            if (_locks[url]) _locks[url]++; else _locks[url] = 1;
        },
        "unlockUpdate": function(object) {
            var url = _.result(object, "url");
            if (_locks[url]) _locks[url]--;
            if (_locks[url] <= 0) delete _locks[url];
        },
        "update": function(action, modelSpec, collectionSpec, options) {
            if (_locks[modelSpec.url] > 0) return;
            options = options || {};
            var object = ws.bb.store.get(modelSpec.url);
            if (object) {
                if ("save" == action) object.fetch(options); else if ("delete" == action) ws.bb.store.remove(object); else if ("undelete" == action) if (true === object.get("is_deleted")) {
                    object.set("is_deleted", false);
                    object.save({
                        "success": function() {
                            object.fetch(options);
                        }
                    });
                }
                return;
            }
            if ("save" == action || "undelete" == action) {
                object = ws.bb.store.create(modelSpec.type, {}, modelSpec.options, true);
                object.set("id", modelSpec.id);
                var successFunction = function() {
                    ws.bb.store.add(object);
                    if (collectionSpec) {
                        var collection = ws.bb.store.get(collectionSpec.url);
                        if (collection && !collection.get(object.id)) collection.add(object);
                    }
                };
                if ("save" == action) {
                    options.success = ws.common.combineFunctions(successFunction, options.success);
                    object.fetch(options);
                } else if ("undelete" == action) {
                    object.set("is_deleted", false);
                    object.save({
                        "success": function() {
                            options.success = ws.common.combineFunctions(successFunction, options.success);
                            object.fetch(options);
                        }
                    });
                }
            }
        }
    };
    _.each([ "size", "pairs" ], function(method) {
        bbStoreObject[method] = function() {
            var args = Array.prototype.slice.call(arguments);
            args.unshift(_store);
            return _[method].apply(_, args);
        };
    });
    return bbStoreObject;
}();

ws.namespace("ws.lesson");

ws.lesson = _.extend(function(undefined) {
    var Page = ws.bb.Model.extend({
        "urlRoot": "/api/page",
        "createUrl": function() {
            return "/api/space/" + this.get("namespace") + "/page";
        }
    }, {
        "undelete": function(pageId, spaceId, options) {
            if (!pageId || !spaceId) throw new Error("Page ID and space ID not set");
            ws.bb.store.update("undelete", {
                "type": ws.lesson.Page,
                "url": "/api/page/" + pageId,
                "id": pageId
            }, {
                "type": ws.lesson.PageList,
                "url": "/api/space/" + spaceId + "/page"
            }, options);
        }
    });
    var PageOrder = ws.bb.Model.extend({
        "urlRoot": "/api/pageorder",
        "createUrl": function() {
            return "/api/project/" + this.get("project_id") + "/pageorder";
        },
        "initialize": function(attributes, options) {
            if (options.project_id && !attributes.project_id) this.set("project_id", options.project_id);
        }
    }, {
        "eventsToListenOn": "add change destroy"
    });
    var PageList = ws.bb.Collection.extend({
        "model": Page,
        "comparator": function(modelA, modelB) {
            for (var i = 0; i < this.page_order.length; i++) {
                if (parseInt(this.page_order[i]) == modelA.id) return -1;
                if (parseInt(this.page_order[i]) == modelB.id) return 1;
            }
        },
        "spaceId": null,
        "page_order": [],
        "url": function() {
            return "/api/space/" + this.spaceId + "/page";
        },
        "initialize": function(attributes, options) {
            if (!options.spaceId) throw new Error("Space id is not set");
            this.spaceId = options.spaceId;
            if (options.page_order) this.page_order = options.page_order;
        }
    }, {});
    return {
        "PageList": PageList,
        "PageOrder": PageOrder,
        "Page": Page
    };
}(), ws.lesson);

ws.namespace("ws.lesson");

ws.lesson = _.extend(function(undefined) {
    var Lesson = ws.bb.Model.extend({
        "urlRoot": "/api/project",
        "nestedClasses": {
            "DefaultTemplatePages": {
                "type": ws.lesson.PageList,
                "options": function(response) {
                    return {
                        "spaceId": response.DefaultTemplate.id,
                        "page_order": response.PageOrder.page_order
                    };
                }
            },
            "PageOrder": {
                "type": ws.lesson.PageOrder,
                "options": function(response) {
                    return {
                        "project_id": response.id
                    };
                }
            }
        }
    }, {
        "STATUS_SETUP": "S",
        "STATUS_ACTIVE": "A",
        "STATUS_ARCHIVED": "R"
    });
    var LessonList = ws.bb.Collection.extend({
        "model": Lesson,
        "comparator": function(modelA, modelB) {
            var dateA = parseInt(modelA.get("date_created"), 10);
            var dateB = parseInt(modelB.get("date_created"), 10);
            if (dateA > dateB) return -1;
            if (dateA < dateB) return 1;
            return 0;
        },
        "url": "/api/project"
    }, {});
    return {
        "LessonList": LessonList,
        "Lesson": Lesson,
        "listenOnMessageQueue": function($) {
            $(document).on("message.project", function(event, action, projectId) {
                ws.bb.store.update(action, {
                    "type": ws.lesson.Lesson,
                    "url": "/api/project/" + projectId,
                    "id": projectId
                }, {
                    "type": ws.lesson.LessonList,
                    "url": "/api/project"
                });
            });
            $(document).on("message.page", function(e, action, pageId, spaceId, projectId) {
                ws.bb.store.update(action, {
                    "type": ws.lesson.Page,
                    "url": "/api/page/" + pageId,
                    "id": pageId
                }, {
                    "type": ws.lesson.PageList,
                    "url": "/api/space/" + spaceId + "/page"
                });
            });
        }
    };
}(), ws.lesson);

ws.namespace("ws.cob");

ws.cob = function($, undefined) {
    var callbacks = [];
    var registeredCallbacks = {};
    var associatedCallbacks = {};
    var overlay;
    $(document).ready(function() {
        $(".cobWrapper").on("click", ".js-selections-remove", function(e) {
            var wrapper = $(this).closest(".cobWrapper");
            ws.cob.clearSelections(wrapper);
            e.preventDefault();
        });
        $(".cobWrapper").on("change", ".cobSelectAll", function(e) {
            var check = $(this).prop("checked");
            var wrapper = $(this).closest(".cobWrapper");
            wrapper.find("input[type=checkbox].cobCheck").prop("checked", check).each(function() {
                checkBox(this, check);
            });
            updateSelections(wrapper);
        });
        $(".cobWrapper").on("refreshChecks", function() {
            $(this).find("input.cobCheck").each(function() {
                checkBox(this, $(this).prop("checked"));
            });
            updateSelections($(this));
        });
        $(".cobWrapper").on("click", ".cobCheck", function(e) {
            checkBox(this, $(this).prop("checked"));
            updateSelections($(this).closest(".cobWrapper"));
        });
        $(".cobWrapper").each(function() {
            updateSelections(this);
        });
        $(".cobWrapper").on("click", ".cobOperation", function(e) {
            e.preventDefault();
            var wrapper = $(this).closest(".cobWrapper");
            if (!ws.cob.hasChecks(wrapper)) {
                alert("Please select at least one item from the list to continue.");
                return;
            }
            if (!$(this).data("bulk-params")) {
                $(this).trigger("bulk-needs-params");
                return;
            }
            var form = $('<form method="post" action="/site/bulk"/>').addClass("hidden");
            $("<input>").attr({
                "type": "hidden",
                "name": "operation",
                "value": $(this).data("bulk-operation")
            }).appendTo(form);
            for (var key in $(this).data("bulk-params")) {
                var val = $(this).data("bulk-params")[key];
                if ("function" == typeof val) val = val.call(form);
                $("<input>").attr({
                    "type": "hidden",
                    "name": "params[" + key + "]",
                    "value": val
                }).appendTo(form);
            }
            for (var prop in ws.cob.getChecks(wrapper)) $("<input>").attr("type", "hidden").addClass("cobId").attr("name", "cobCheck[]").val(prop).appendTo(form);
            var returnTo = document.location.href;
            if ($(this).data("bulk-goto")) returnTo = $(this).data("bulk-goto");
            $("<input>").attr("type", "hidden").attr("name", "goto").val(returnTo).appendTo(form);
            wrapper.append(form);
            form.submit();
        });
        $(".cobWrapper").on("click", ".js-file-operations", function(e) {
            var $wrapper = $(this).closest(".cobWrapper");
            e.preventDefault();
            e.stopPropagation();
            if (!closeOldPopover($wrapper, e)) return;
            $wrapper.data("ws-old-popover-target", e.currentTarget);
            $(e.currentTarget).popover({
                "html": true,
                "trigger": "manual"
            }).popover("show");
            $(e.currentTarget).data("bs.popover").setContent = function() {
                var $tip = this.tip();
                $tip.removeClass("fade top bottom left right in");
            };
            $(e.currentTarget).data("bs.popover").tip().css("max-width", "600px");
        });
        $("body").click(function(e) {
            $(".cobWrapper").each(function() {
                closeOldPopover($(this), e);
            });
        });
        if (!History.enabled) return false;
        History.Adapter.bind(window, "statechange", function(e) {
            var State = History.getState();
            var tableId = null;
            if (!State) return;
            if (State.data) tableId = State.data.tableId;
            if (!tableId) tableId = $(".cobWrapper").attr("id");
            if (State.url && tableId) ws.cob.makeAjaxCall(State.url, tableId);
        });
    });
    function closeOldPopover($wrapper, e) {
        var oldPopoverTarget = $wrapper.data("ws-old-popover-target");
        if (!oldPopoverTarget || !$(oldPopoverTarget).data("bs.popover")) return true;
        var popover = $(oldPopoverTarget).data("bs.popover").tip();
        if (popover.find(".WikiTagFormEdit").length || $(e.target).closest(popover).length) return false;
        $(oldPopoverTarget).popover("hide");
        $wrapper.removeData("ws-old-popover-target");
        return e.currentTarget !== oldPopoverTarget;
    }
    function toggleFilters(wrapper) {
        wrapper = $(wrapper);
        var $btn = wrapper.find(".ws-cob-filter-btn");
        if (!wrapper.find(".filter-row").is(":visible")) {
            $btn.addClass("active");
            wrapper.find(".filter-row").show();
            Cookie.set("filter-preference", 1, 30);
            return;
        }
        if (!filtering(wrapper)) {
            $btn.removeClass("active");
            wrapper.find(".filter-row").hide();
            Cookie.set("filter-preference", 0, 30);
            return;
        }
        if (confirm("Clear all filters?")) {
            Cookie.set("filter-preference", 0, 30);
            var teamFilterLink = wrapper.find(".teamFilterLink");
            var href = ws.common.removeUriParams(teamFilterLink.attr("href"));
            teamFilterLink.attr("href", href).click();
        }
    }
    function filtering(wrapper) {
        var params = ws.common.uriParams(window.location.href);
        var filterState = false;
        $(wrapper).find(".cobFilterOption").each(function() {
            if (params[$(this).attr("name")]) filterState = true;
        });
        return filterState;
    }
    function setCheckboxes(wrapper) {
        wrapper = $(wrapper);
        var checks = ws.cob.getChecks(wrapper);
        wrapper.find("input.cobCheck").each(function() {
            if (checks[$(this).val()]) {
                $(this).prop("checked", true);
                checkBox(this, true);
            }
        });
        updateSelections(wrapper);
    }
    function updateSelections(wrapper) {
        wrapper = $(wrapper);
        var cobTable = wrapper.find("table.cob");
        cobTable.find("input.cobSelectAll").prop("checked", !cobTable.find("input.cobCheck:not(:checked):first").length);
        var selections = wrapper.find(".js-selections");
        var checksCount = ws.cob.getChecksCount(wrapper);
        if (checksCount <= 0) {
            selections.hide();
            setOperationState(wrapper, false);
            wrapper.trigger("cob-selection-update");
            return;
        }
        if (selections.length) {
            selections.show();
            var selectionInner = selections.find("span span");
            if (1 == checksCount) selectionInner.text(selections.data("singular").replace("%d", checksCount)); else selectionInner.text(selections.data("plural").replace("%d", checksCount));
        }
        setOperationState(wrapper, true);
        selections.show().find("span").css("color", "#F00").animate({
            "color": "#000"
        }, 2e3);
        wrapper.trigger("cob-selection-update");
    }
    function setOperationState(wrapper, isEnabled) {
        var cobBtns = $(wrapper).find(".cobOperations .btn.cobOperation");
        cobBtns.filter(":button").prop("disabled", !isEnabled);
        cobBtns.not(":button").toggleClass("disabled", !isEnabled);
    }
    function checkBox(checkbox, check) {
        checkbox = $(checkbox);
        checkbox.closest("tr").toggleClass("info", check);
        setCheck(checkbox.closest(".cobWrapper"), checkbox.val(), check);
    }
    function setCheck(wrapper, key, check) {
        var checks = ws.cob.getChecks(wrapper);
        var checksCount = ws.cob.getChecksCount(wrapper);
        if (check && !checks[key]) {
            checks[key] = 1;
            checksCount++;
        } else if (!check && checks[key]) {
            delete checks[key];
            checksCount--;
        }
        wrapper.data("cob-checks-count", checksCount);
    }
    function defaultCallback(table, html) {
        table.html(html);
        if (overlay) {
            overlay.remove();
            overlay = null;
        }
        if (ws.cob.scrollOnLoad && !table.find("th:first").is(":inView")) $.scrollTo(table, {
            "axis": "y"
        });
    }
    return {
        "TABLE_ID": "utable",
        "scrollOnLoad": true,
        "enableState": true,
        "getChecks": function(wrapper) {
            var checks = wrapper.data("cob-checks");
            if (!checks) {
                checks = {};
                wrapper.data("cob-checks", checks);
            }
            return checks;
        },
        "getChecksCount": function(wrapper) {
            var checksCount = $(wrapper).data("cob-checks-count");
            return checksCount || 0;
        },
        "hasChecks": function(wrapper) {
            for (var prop in ws.cob.getChecks(wrapper)) return true;
            return false;
        },
        "clearSelections": function(wrapper) {
            wrapper.find("input[type=checkbox].cobCheck").prop("checked", false).each(function() {
                checkBox(this, false);
            });
            wrapper.find(".cobSelectAll").prop("checked", false);
            wrapper.data("cob-checks-count", 0);
            wrapper.data("cob-checks", {});
            updateSelections(wrapper);
        },
        "refreshRows": function() {
            $("table.cob .refreshLink").trigger("click");
        },
        "registerCallback": function(name, callback) {
            registeredCallbacks[name] = callback;
        },
        "associateCallback": function(tableId, callbackName) {
            associatedCallbacks[tableId] = function() {
                var callback = registeredCallbacks[callbackName];
                return callback.apply(this, arguments);
            };
        },
        "addCallback": function(callback) {
            callbacks.push(callback);
        },
        "makeAjaxLink": function(a, tableId) {
            $(a).click(ws.common.makeLinkClickFunction(function(event) {
                if (!ws.tags.promptForOpenInputs(event)) return false;
                var url = $(this).attr("href");
                if (ws.cob.enableState) History.pushState({
                    "tableId": tableId
                }, null, url); else ws.cob.makeAjaxCall(url, tableId);
            }));
        },
        "makeAjaxCall": function(url, tableId) {
            overlay = ws.dialog.blankOverlay();
            ws.common.trackFileLink(url);
            var ajaxUrl = ws.common.addUriParams(url, [ [ ws.cob.TABLE_ID, tableId ] ]);
            return ws.common.ajax({
                "url": ajaxUrl
            }).done(function(data) {
                if (overlay) {
                    overlay.remove();
                    overlay = null;
                }
                ws.cob.makeCallback(tableId)(data);
            });
        },
        "makeCallback": function(tableId, callback) {
            if (!callback) callback = associatedCallbacks[tableId];
            if (!callback) callback = defaultCallback;
            return function(html) {
                var table = $("#" + tableId);
                callback(table, html);
                $.each(callbacks, function(i, cb) {
                    cb(table);
                });
                setCheckboxes(table);
                table.find(".jssmLink, .pagerLink").not(".refreshLink").each(function() {
                    ws.cob.makeAjaxLink(this, tableId);
                });
                table.find(".jssmLink, .pagerLink").filter(".refreshLink").click(function() {
                    ws.cob.makeAjaxCall($(this).attr("href"), tableId);
                });
            };
        },
        "initFilterRow": function(wrapper) {
            wrapper = $(wrapper);
            if (Cookie.get("filter-preference") || filtering(wrapper)) toggleFilters(wrapper);
            if (wrapper.data("filter-handlers-attached")) return;
            wrapper.on("click", ".ws-cob-filter-btn", function(e) {
                toggleFilters(wrapper);
                e.preventDefault();
            });
            wrapper.on("change", ".cobFilterOption", function() {
                var params = {};
                wrapper.find(".cobFilterOption").each(function() {
                    if ($(this).is("select,input")) params[$(this).attr("name")] = $(this).val();
                });
                var cobUrlA = wrapper.find(".cobUrl");
                var href = ws.common.updateUriParams(cobUrlA.attr("href"), params);
                cobUrlA.attr("href", href).click();
            });
            wrapper.data("filter-handlers-attached", true);
        }
    };
}(jQuery);

!function($, undefined) {
    var CANVAS_Z_INDEX, COMMENT_MARGIN, Comment, DivCanvas, ElemFinder, IMAGE_HIGHLIGHT_MARGIN, MENUBAR_ACTIVE_CLASS, MENUBAR_DISABLED_CLASS, MENU_Z_INDEX, MINIMUM_MIDDLE_EXTENT_HEIGHT, MINIMUM_MULTILINE_STARTING_EXTENT_WIDTH, POSITION_SEARCH_INCREMENT, SELECTED_COMMENT_Z_INDEX, Space, UNSELECTED_COMMENT_Z_INDEX, commentFooter, composerTemplate, contentTemplate, outerHtml, proxyTemplate;
    POSITION_SEARCH_INCREMENT = 10;
    COMMENT_MARGIN = 4;
    IMAGE_HIGHLIGHT_MARGIN = 4;
    MINIMUM_MULTILINE_STARTING_EXTENT_WIDTH = 5;
    MINIMUM_MIDDLE_EXTENT_HEIGHT = 10;
    UNSELECTED_COMMENT_Z_INDEX = 0;
    SELECTED_COMMENT_Z_INDEX = 1;
    CANVAS_Z_INDEX = 10;
    MENU_Z_INDEX = 12;
    MENUBAR_DISABLED_CLASS = "disabled";
    MENUBAR_ACTIVE_CLASS = "Current";
    outerHtml = function(elem) {
        return $(elem).clone().wrap("<div></div>").parent().html();
    };
    window.WikispacesCommentManager = {
        "comments": [],
        "spaces": [],
        "openComment": null,
        "readOnly": true,
        "clear": function() {
            var space, _i, _len, _ref, _results;
            this.comments = [];
            $(".commentList").empty();
            _ref = this.spaces;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                space = _ref[_i];
                _results.push(this.removeSpace(space));
            }
            return _results;
        },
        "reload": function() {
            var space, _i, _len, _ref, _this = this;
            _ref = this.spaces;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                space = _ref[_i];
                space.reset();
            }
            return this.retrieveData(function(digests) {
                _this.commentsFromDigests(digests);
                return _this.redrawAll();
            });
        },
        "retrieveData": function(callback) {
            return ws.common.ajax({
                "url": ws.common.pathFor("page", "shares", wikispaces_page),
                "type": "GET"
            }).done(function(data) {
                callback(data.comments);
            });
        },
        "commentsFromDigests": function(digests) {
            var _this = this;
            this.comments = _(digests).map(function(digest) {
                return new Comment(digest);
            });
            return this.comments;
        },
        "fetchPageViewComments": function() {
            var _this = this;
            return this.retrieveData(function(digests) {
                return _this.loadPageViewComments(digests);
            });
        },
        "loadPageViewComments": function(digests) {
            var match, _ref, commentSpace;
            commentSpace = new WikispacesCommentSpace("#content_view", ".commentContainer", ".commentContainer");
            this.commentsFromDigests(digests);
            this.redrawAll();
            match = window.location.hash.match(/#comment-(\d+)-open/);
            if (match) return null != (_ref = WikispacesCommentManager.commentById(match[1])) ? _ref.select().scrollTo() : void 0;
        },
        "addSpace": function(space) {
            this.spaces.push(space);
            return this.redrawAll();
        },
        "removeSpace": function(space) {
            space.remove();
            this.spaces = _(this.spaces).without(space);
            return this.spaces;
        },
        "preemptSpaces": function() {
            var spaces;
            spaces = this.spaces;
            this.spaces = [];
            this.undiscover();
            return spaces;
        },
        "restoreSpaces": function(spaces) {
            this.spaces = spaces;
            return this.spaces;
        },
        "rediscover": function() {
            var comment, _i, _len, _ref, _results;
            _ref = this.comments;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                comment = _ref[_i];
                _results.push(comment.discover(this.spaces));
            }
            return _results;
        },
        "undiscover": function() {
            var comment, _i, _len, _ref, _results;
            _ref = this.discoveredComments();
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                comment = _ref[_i];
                _results.push(comment.undiscover());
            }
            return _results;
        },
        "discoveredComments": function() {
            return _(this.comments).select(function(comment) {
                return comment.isDiscovered();
            });
        },
        "unsavedComments": function() {
            return _(this.discoveredComments()).select(function(comment) {
                return comment.isUnsaved();
            });
        },
        "sortedComments": function() {
            return _(this.spaces).chain().map(function(s) {
                return s.sortedComments();
            }).flatten().value();
        },
        "commentsInSpace": function(space) {
            return _(this.comments).select(function(comment) {
                return comment.space === space;
            });
        },
        "commentById": function(id) {
            return _(this.comments).find(function(comment) {
                return comment.attributes.id === id;
            });
        },
        "addComment": function(comment) {
            this.comments.push(comment);
            return this.redrawAll(true);
        },
        "removeComment": function(comment) {
            this.comments = _(this.comments).without(comment);
            return this.positionProxies();
        },
        "showAll": function() {
            return $(".commentColumn, .commentContainer .div-canvas").show();
        },
        "hideAll": function() {
            return $(".commentColumn, .commentContainer .div-canvas").hide();
        },
        "redrawAll": function() {
            this.rediscover();
            return this.positionProxies();
        },
        "deselectAll": function() {
            var comment, _i, _len, _ref, _results;
            _ref = this.discoveredComments();
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                comment = _ref[_i];
                _results.push(comment.deselect());
            }
            return _results;
        },
        "markCommentsSaved": function() {
            return this.reload();
        },
        "generateCommentId": function() {
            var id, version, _ref, _ref1, checkId;
            if (!this.idCounter) this.idCounter = 0;
            version = null != (_ref1 = "undefined" !== typeof tinymce && null !== tinymce ? tinymce.mainEditor.plugins.wscommon.getOption("version") : void 0) ? _ref1 : "v";
            id = "" + version + "_" + ++this.idCounter;
            checkId = function(comment) {
                return comment.commentId === id;
            };
            while (_(this.comments).any(checkId)) id = "" + version + "_" + ++this.idCounter;
            return id;
        },
        "positionProxies": function() {
            var comment, drawIndex, drawQueue, drawable, height, maxY, _i, _j, _len, _len1, _ref, _results;
            this.reservedPositions = [];
            drawQueue = [];
            _ref = this.sortedComments();
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                comment = _ref[_i];
                if (comment.isDiscovered()) {
                    height = comment.height();
                    drawQueue.push({
                        "comment": comment,
                        "y": this.findPosition(comment.preferredY(), height)
                    });
                } else comment.hide();
            }
            maxY = $(".commentColumn").height();
            drawQueue = _(drawQueue).sortBy(function(drawable) {
                return drawable.y;
            });
            drawIndex = 0;
            _results = [];
            for (_j = 0, _len1 = drawQueue.length; _j < _len1; _j++) {
                drawable = drawQueue[_j];
                drawable.comment.$proxy.css({
                    "visibility": "visible",
                    "top": Math.floor(drawable.y)
                }).show();
                maxY = Math.max(maxY, drawable.y + height);
                _results.push(drawIndex += 1);
            }
            return _results;
        },
        "findPosition": function(preferredY, height) {
            var downProbe, position, top, upProbe;
            top = 0;
            upProbe = Math.max(preferredY, top);
            downProbe = Math.max(preferredY + POSITION_SEARCH_INCREMENT, top);
            position = null;
            while (null == position) {
                if (upProbe >= top && this.isPositionClear(upProbe, height)) position = upProbe; else if (this.isPositionClear(downProbe, height)) position = downProbe;
                upProbe -= POSITION_SEARCH_INCREMENT;
                downProbe += POSITION_SEARCH_INCREMENT;
            }
            this.reservedPositions.push([ position - COMMENT_MARGIN, position + height + COMMENT_MARGIN ]);
            return position;
        },
        "isPositionClear": function(pos, height) {
            var isBetween, _this = this;
            isBetween = function(num, low, high) {
                return low < num && num < high;
            };
            return _(this.reservedPositions).isEmpty() || _(this.reservedPositions).all(function(reservation) {
                return !isBetween(pos, reservation[0], reservation[1]) && !isBetween(pos + height, reservation[0], reservation[1]) && !isBetween(reservation[0], pos, pos + height);
            });
        }
    };
    window.WikispacesCommentSpace = Space = function() {
        function Space(contents, contentContainer, canvasContainer, drawBehind) {
            this.contents = $(contents);
            this.contentContainer = $(contentContainer);
            this.canvasContainer = $(canvasContainer);
            this.drawBehind = $(drawBehind || contentContainer);
            this.canvas = new DivCanvas(this.drawBehind, this.canvasContainer, "a.range", this.contents);
            WikispacesCommentManager.addSpace(this);
        }
        Space.prototype.remove = function() {
            return this.canvas.destroy();
        };
        Space.prototype.reset = function() {
            var comment, _i, _len, _ref, _results;
            _ref = this.comments();
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                comment = _ref[_i];
                _results.push(comment.reset());
            }
            return _results;
        };
        Space.prototype.comments = function() {
            return WikispacesCommentManager.commentsInSpace(this);
        };
        Space.prototype.sortedComments = function() {
            var unsorted;
            unsorted = this.comments();
            return _($("a.range[name^=comment-]", this.contents)).chain().map(function(elem) {
                return _(unsorted).find(function(comment) {
                    return comment.opener[0] === elem;
                });
            }).compact().value();
        };
        Space.prototype.yOffset = function() {
            return this.contentContainer.offset().top - $(".commentSubject").offset().top;
        };
        Space.prototype.closeAll = function() {
            var comment, _i, _len, _ref, _results;
            _ref = this.sortedComments();
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                comment = _ref[_i];
                _results.push(comment.close());
            }
            return _results;
        };
        return Space;
    }();
    window.WikispacesComment = Comment = function() {
        function Comment(attributes) {
            var _base, _base1;
            this.attributes = attributes ? attributes : {};
            this.composing = false;
            if (!this.attributes.id) {
                if (!this.attributes.commentId) this.attributes.commentId = WikispacesCommentManager.generateCommentId();
                this.attributes.userCreated = {
                    "username": wikispaces_username,
                    "url": "/user/view/" + wikispaces_username,
                    "imageUrl": "/user/pic/" + wikispaces_username + "-sm.jpg"
                };
                if (!this.attributes.replyPages) this.attributes.replyPages = [];
                this.composing = true;
            }
            this.space = null;
            this.$proxy = $(proxyTemplate(this.attributes));
            this.div = $(this.template()(this.attributes)).css("visibility", "hidden");
            this.rerender();
        }
        Comment.prototype.open = function(opts) {
            var top, _ref;
            if (null == opts) opts = {};
            if (null != (_ref = this.space)) _ref.closeAll();
            WikispacesCommentManager.openComment = this;
            this.$proxy.addClass("open");
            this.showExtent();
            top = this.extent.last().position().top + this.extent.last().height() + this.space.yOffset();
            this.div.appendTo(".commentList").css({
                "visibility": "visible",
                "top": top,
                "right": $(".commentColumn").width() + 4
            }).show();
            $("abbr.timeago").timeago();
            $(".ws-tip").tooltip({
                "container": this.div
            });
            this.div.find(".previous, .next").toggle(!!(this.previous() || this.next()));
            this.div.find(".previous").prop("disabled", !this.previous());
            this.div.find(".next").prop("disabled", !this.next());
            if (!opts.noFocus) this.div.find("textarea").focus();
            return this.repositionDiv();
        };
        Comment.prototype.repositionDiv = function() {
            var overflow, top;
            if ((overflow = this.div.offset().top + this.div.outerHeight() - $(document).outerHeight()) > 0) {
                top = parseInt(this.div.css("top").match(/\d+/)[0], 10);
                return this.div.css({
                    "top": top - overflow
                });
            }
        };
        Comment.prototype.close = function() {
            this.$proxy.removeClass("open");
            this.hideExtent();
            this.div.css({
                "visibility": "hidden"
            });
            WikispacesCommentManager.openComment = null;
            return WikispacesCommentManager.openComment;
        };
        Comment.prototype.insertInto = function(space) {
            var _this = this;
            this.space = space;
            this.$proxy.appendTo($(".commentList")).hide();
            this.$proxy.on("mouseenter", function() {
                _this.showExtent();
                return _this.$proxy.addClass("selected");
            });
            this.$proxy.on("mouseleave", function() {
                if (!_this.$proxy.hasClass("open")) _this.hideExtent();
                return _this.$proxy.removeClass("selected");
            });
            return this.$proxy.on("click", function() {
                if (_this.$proxy.hasClass("open")) return _this.close(); else return _this.open();
            });
        };
        Comment.prototype.setReply = function(reply) {
            return this.div.find(".reply textarea").val(reply);
        };
        Comment.prototype.previous = function() {
            var index, list;
            list = this.space.sortedComments();
            if ((index = _(list).indexOf(this)) > 0) return list[index - 1];
        };
        Comment.prototype.next = function() {
            var index, list;
            list = this.space.sortedComments();
            if ((index = _(list).indexOf(this)) !== list.length - 1) return list[index + 1];
        };
        Comment.prototype.template = function() {
            if (this.composing) return composerTemplate; else return contentTemplate;
        };
        Comment.prototype.rerender = function() {
            var esto, _this = this;
            this.$proxy.html($(proxyTemplate(this.attributes)).html());
            this.div.html($(this.template()(this.attributes)).html());
            $("abbr.timeago").timeago();
            $(".ws-tip").tooltip({
                "container": this.div
            });
            this.div.find(".userLink").click(ws.common.makeLinkClickFunction(ws.common.userLinkClick));
            esto = this;
            this.div.find(".previous").on("click", function() {
                _this.previous().open({
                    "noFocus": true
                });
                return false;
            });
            this.div.find(".next").on("click", function() {
                _this.next().open({
                    "noFocus": true
                });
                return false;
            });
            this.div.find(".closeme").on("click", function() {
                _this.close();
                return false;
            });
            this.div.find("form.compose").on("submit", function() {
                _this.close();
                return false;
            });
            this.div.find(".commentHeader .trash").on("click", function() {
                _this["delete"]();
                return false;
            });
            this.div.find(".toggle-lock").on("click", function() {
                _this.attributes.locked = !_this.attributes.locked;
                _this.div.find(".toggle-lock").toggleClass("active");
                _this.div.find(".toggle-lock").attr("title", _this.attributes.locked ? "Replies are not allowed. Click to allow." : "Replies are allowed. Click to disallow.").tooltip("fixTitle").tooltip("show");
                _this.sync(true);
                return false;
            });
            this.div.find(".toggle-monitor").on("click", function() {
                _this.attributes.monitored = !_this.attributes.monitored;
                _this.div.find(".toggle-monitor").toggleClass("active");
                _this.div.find(".toggle-monitor").attr("title", _this.attributes.monitored ? "You are monitoring replies. Click to stop." : "You are not monitoring replies. Click to monitor.").tooltip("fixTitle").tooltip("show");
                _this.sync(true);
                return false;
            });
            this.div.find(".delete").on("click", function() {
                if (_this.composing && !_this.body() || confirm("Do you really want to delete this comment?")) _this["delete"]();
                return false;
            });
            this.div.find(".remove").on("click", function() {
                var msg;
                msg = "Do you really want to remove this comment?";
                if (!_this.composing) msg += " It will remain visible in the page's discussion list.";
                if (_this.composing && !_this.body() || confirm(msg)) _this.remove();
                return false;
            });
            if (!ws.editor.canEdit || this.attributes.locked && !window.ws.context.userCanAdministerWiki) this.div.find(".reply").hide();
            this.div.find(".delete-reply").on("click", function(evt) {
                var id;
                if (!confirm("Are you sure you want to delete this reply?")) return;
                id = $(evt.target).closest(".commentReply").data("id");
                ws.common.ajax({
                    "url": ws.common.pathFor("message", "delete", "$", id)
                }).done(function(data) {
                    _this.update(data);
                });
            });
            return this.div.find("form.reply").on("submit", function() {
                var replyText;
                if (!(replyText = _this.div.find("form.reply textarea").val())) {
                    alert("Please enter a reply first.");
                    return false;
                }
                _this.div.find(".spinner").show();
                _this.div.find("form.reply").prop("disabled", true);
                ws.common.ajax({
                    "url": ws.common.pathFor("share", "reply", _this.attributes.id),
                    "data": {
                        "body": replyText
                    }
                }).done(function(data) {
                    _this.update(data);
                }).always(function() {
                    _this.div.find(".spinner").hide();
                });
                return false;
            });
        };
        Comment.prototype.update = function(attrs, opts) {
            var share, _ref, _ref1;
            if (null == opts) opts = {};
            this.attributes = attrs;
            if (!opts.silent && (share = null != (_ref = ws.stream) ? null != (_ref1 = _ref.shares) ? _ref1.get(this.attributes.id) : void 0 : void 0)) share.set(attrs);
            if (!opts.noRender) this.rerender();
            return this.repositionDiv();
        };
        Comment.prototype.sync = function(noRender) {
            var _this = this;
            if (null == noRender) noRender = false;
            return ws.common.ajax({
                "url": ws.common.pathFor("share", "update", this.attributes.id),
                "data": this.attributes
            }).done(function(data) {
                _this.update(data, {
                    "noRender": noRender
                });
            });
        };
        Comment.prototype.reset = function() {
            this.close();
            this.div.remove();
            this.$proxy.remove();
            return this.undiscover();
        };
        Comment.prototype.remove = function() {
            var _ref, _ref1;
            this.reset();
            if (null != (_ref = this.opener)) _ref.remove();
            return null != (_ref1 = this.closer) ? _ref1.remove() : void 0;
        };
        Comment.prototype["delete"] = function(opts) {
            var wipe, _this = this;
            if (null == opts) opts = {};
            wipe = function() {
                var share, _ref, _ref1;
                _this.remove();
                if (!opts.silent && (share = null != (_ref = ws.stream) ? null != (_ref1 = _ref.shares) ? _ref1.get(_this.attributes.id) : void 0 : void 0)) ws.stream.shares.remove(share);
                WikispacesCommentManager.removeComment(_this);
                _this.composing = false;
                return _this.composing;
            };
            if (this.composing) return wipe(); else return ws.common.ajax({
                "url": ws.common.pathFor("share", "delete", this.attributes.id)
            }).done(wipe);
        };
        Comment.prototype.discover = function(spaces) {
            var backwards, space, _i, _len, _ref;
            this.opener = this.closer = null;
            for (_i = 0, _len = spaces.length; _i < _len; _i++) {
                space = spaces[_i];
                this.opener = $(space.contents).find(this.openSelector());
                this.closer = $(space.contents).find(this.closeSelector());
                if (0 === this.opener.length && 0 === this.closer.length) {
                    if (this.space === space) this.undiscover();
                    continue;
                } else if (!this.isDiscovered() && (null != (_ref = space.editor) ? _ref.selection.isCollapsed() : void 0)) if (0 === this.opener.length) {
                    space.editor.selection.setContent(this.openerHtml());
                    this.opener = $(space.contents).find(this.openSelector());
                } else if (0 === this.closer.length) {
                    space.editor.selection.setContent(this.closerHtml());
                    this.closer = $(space.contents).find(this.closeSelector());
                }
                backwards = $("a[name=" + this.opener.attr("name") + "], a[name=" + this.closer.attr("name") + "]", space.contents)[0] === this.closer[0];
                if (backwards || this.hasNullExtent()) this.remove(); else {
                    this.opener.slice(1).remove();
                    this.closer.slice(1).remove();
                }
                if (space !== this.space) this.insertInto(space);
                return true;
            }
        };
        Comment.prototype.undiscover = function() {
            var _ref;
            this.deselect();
            if (null != (_ref = this.extent)) _ref.remove();
            this.$proxy.remove();
            this.space = null;
            return this.space;
        };
        Comment.prototype.isDiscovered = function() {
            var _ref, _ref1;
            return (null != (_ref = this.opener) ? _ref.length : void 0) > 0 && (null != (_ref1 = this.closer) ? _ref1.length : void 0) > 0;
        };
        Comment.prototype.isContentBetween = function(node1, node2) {
            var n;
            n = null != node1 ? node1.nextSibling : void 0;
            while (n && n !== node2) {
                if (3 !== n.nodeType || n.nodeValue) return true;
                n = n.nextSibling;
            }
            return false;
        };
        Comment.prototype.hasNullExtent = function() {
            return !this.isContentBetween(this.opener[0], this.closer[0]);
        };
        Comment.prototype.scrollTo = function() {
            return $.scrollTo(this.$proxy, {
                "offset": -70
            });
        };
        Comment.prototype.showExtent = function() {
            this.hideExtent();
            this.extent = this.space.canvas.makeExtent(this.opener.get(0), this.closer.get(0));
            return this.extent;
        };
        Comment.prototype.hideExtent = function() {
            var _ref;
            return null != (_ref = this.extent) ? _ref.remove() : void 0;
        };
        Comment.prototype.openAnchorName = function() {
            return "comment-" + this.attributes.commentId + "-open";
        };
        Comment.prototype.closeAnchorName = function() {
            return "comment-" + this.attributes.commentId + "-close";
        };
        Comment.prototype.openSelector = function() {
            return "a.range[name=" + this.openAnchorName() + "]";
        };
        Comment.prototype.closeSelector = function() {
            return "a.range[name=" + this.closeAnchorName() + "]";
        };
        Comment.prototype.generateOpener = function(doc) {
            return $("<a>", doc).addClass("range").attr("name", this.openAnchorName()).get(0);
        };
        Comment.prototype.generateCloser = function(doc) {
            return $("<a>", doc).addClass("range").attr("name", this.closeAnchorName()).get(0);
        };
        Comment.prototype.openerHtml = function() {
            return outerHtml(this.generateOpener());
        };
        Comment.prototype.closerHtml = function() {
            return outerHtml(this.generateCloser());
        };
        Comment.prototype.preferredY = function() {
            if (!(null != this.opener.get(0).offsetParent && null != this.closer.get(0).offsetParent)) WikispacesCommentManager.rediscover();
            return ElemFinder.top(this.opener) + this.space.yOffset();
        };
        Comment.prototype.height = function() {
            if (!this.$proxy.parent().size()) this.$proxy.appendTo("body");
            return this.$proxy.height();
        };
        Comment.prototype.draw = function(y, canvas) {
            if (!(null != this.opener.get(0).offsetParent && null != this.closer.get(0).offsetParent)) WikispacesCommentManager.rediscover();
            this.$proxy.css({
                "visibility": "visible",
                "top": Math.floor(y)
            }).show();
            if (this.$proxy.hasClass("open")) return this.showExtent();
        };
        Comment.prototype.hide = function() {
            var _ref;
            this.deselect();
            this.div.hide();
            if (null != (_ref = this.extent)) _ref.hide();
            return this.$proxy.hide();
        };
        Comment.prototype.commentId = function() {
            return this.attributes.commentId;
        };
        Comment.prototype.body = function() {
            return this.div.find("textarea").val();
        };
        Comment.prototype.memo = function() {
            return {
                "body": this.body(),
                "commentId": this.commentId(),
                "locked": this.div.find(".btn.locked").hasClass("active"),
                "monitored": this.div.find(".btn.monitored").hasClass("active")
            };
        };
        Comment.prototype.select = function() {
            var _ref;
            WikispacesCommentManager.deselectAll();
            this.div.addClass("selected");
            if (null != (_ref = this.extent)) _ref.addClass("selected").css("z-index", SELECTED_COMMENT_Z_INDEX);
            return this;
        };
        Comment.prototype.deselect = function() {
            var _ref;
            this.div.removeClass("selected");
            if (null != (_ref = this.extent)) _ref.removeClass("selected").css("z-index", UNSELECTED_COMMENT_Z_INDEX);
            return this;
        };
        Comment.prototype.isSelected = function() {
            return this.div.hasClass("selected");
        };
        Comment.prototype.isUnsaved = function() {
            return this.composing;
        };
        return Comment;
    }();
    DivCanvas = function() {
        function DivCanvas(targetDiv, canvasContainer, locatorPattern, locatorSource) {
            var left, top;
            this.targetDiv = targetDiv;
            this.locatorPattern = locatorPattern;
            this.locatorSource = locatorSource;
            $(this.targetDiv).css({
                "position": "relative",
                "zIndex": CANVAS_Z_INDEX
            });
            $(canvasContainer).css({
                "position": "relative",
                "zIndex": CANVAS_Z_INDEX
            });
            top = parseInt(this.targetDiv.css("padding-top"), 10) + parseInt(canvasContainer.css("padding-top"), 10);
            left = parseInt(this.targetDiv.css("padding-left"), 10) + parseInt(canvasContainer.css("padding-left"), 10);
            this.canvasDiv = $("<div>").addClass("div-canvas").css({
                "position": "absolute",
                "top": top,
                "left": left
            }).prependTo(canvasContainer);
            this.reset();
        }
        DivCanvas.prototype.show = function() {
            return this.canvasDiv.show();
        };
        DivCanvas.prototype.hide = function() {
            return this.canvasDiv.hide();
        };
        DivCanvas.prototype.destroy = function() {
            return this.canvasDiv.remove();
        };
        DivCanvas.prototype.reset = function() {
            this.canvasDiv.empty();
            this.canvasDiv.css({
                "width": this.targetDiv.width(),
                "height": this.targetDiv.height()
            });
            return ElemFinder.prepare(this.locatorPattern, this.locatorSource);
        };
        DivCanvas.prototype.makeExtentDiv = function(t, l, w, h) {
            return $("<div>").addClass("commentExtent").css({
                "top": t,
                "left": l,
                "width": w,
                "height": h
            })[0];
        };
        DivCanvas.prototype.makeImageFrame = function(img) {
            img = $(img);
            return this.makeExtentDiv(img.position().top, img.position().left, img.outerWidth() + IMAGE_HIGHLIGHT_MARGIN, img.outerHeight() + IMAGE_HIGHLIGHT_MARGIN);
        };
        DivCanvas.prototype.elemsBetween = function(fromElem, toElem) {
            var elems, nextNode;
            elems = [];
            nextNode = fromElem.nextSibling;
            while (nextNode !== toElem) {
                if (!nextNode) return [];
                if (1 === nextNode.nodeType) elems.push(nextNode);
                nextNode = nextNode.nextSibling;
            }
            return elems;
        };
        DivCanvas.prototype.makeExtent = function(fromElem, toElem) {
            var divs, fromHeight, fromLeft, fromTd, fromTop, left, right, toHeight, toLeft, toTd, toTop, width, _this = this;
            divs = [];
            $(this.elemsBetween(fromElem, toElem)).filter("img").each(function(index, elem) {
                return divs.push(_this.makeImageFrame(elem));
            });
            fromTop = ElemFinder.top(fromElem);
            fromLeft = ElemFinder.left(fromElem);
            fromHeight = ElemFinder.height(fromElem);
            toTop = ElemFinder.top(toElem);
            toLeft = ElemFinder.left(toElem);
            toHeight = ElemFinder.height(toElem);
            fromTd = $(fromElem).closest("table.wiki_table td");
            toTd = $(toElem).closest("table.wiki_table td");
            if (fromTd.length && fromTd.get(0) === toTd.get(0)) {
                left = fromTd.position().left;
                right = left + fromTd.innerWidth();
            } else {
                left = 0;
                right = this.canvasDiv.width();
            }
            if (Math.abs(fromTop - toTop) < 10) {
                width = toLeft - fromLeft;
                divs.push(this.makeExtentDiv(fromTop, fromLeft, width, fromHeight));
            } else if (this.isRtl(fromElem)) {
                if (fromLeft - left >= MINIMUM_MULTILINE_STARTING_EXTENT_WIDTH) divs.push(this.makeExtentDiv(fromTop, left, fromLeft - left, fromHeight));
                if (toTop - fromTop - fromHeight >= MINIMUM_MIDDLE_EXTENT_HEIGHT) divs.push(this.makeExtentDiv(fromTop + fromHeight, left, right - left, toTop - fromTop - fromHeight));
                divs.push(this.makeExtentDiv(toTop, toLeft, right - toLeft, toHeight));
            } else {
                if (right - fromLeft >= MINIMUM_MULTILINE_STARTING_EXTENT_WIDTH) divs.push(this.makeExtentDiv(fromTop, fromLeft, right - fromLeft, fromHeight));
                if (toTop - fromTop - fromHeight >= MINIMUM_MIDDLE_EXTENT_HEIGHT) divs.push(this.makeExtentDiv(fromTop + fromHeight, left, right - left, toTop - fromTop - fromHeight));
                divs.push(this.makeExtentDiv(toTop, left, toLeft - left, toHeight));
            }
            return $(divs).appendTo(this.canvasDiv);
        };
        DivCanvas.prototype.isRtl = function(elem) {
            return "rtl" === $(elem).css("direction") || "rtl" === $(elem).parents("*[dir]").attr("dir");
        };
        return DivCanvas;
    }();
    ElemFinder = {
        "top": function(elem) {
            var top;
            if ($.browser.mozilla) return $(elem).position().top - this.height(elem) + 2; else if ($.browser.webkit) {
                $(elem).html("&zwj;");
                top = $(elem).position().top - 2;
                $(elem).html("");
                return top;
            } else if ($.browser.msie && !WikispacesCommentManager.readOnly && parseFloat($.browser.version) >= 10) return $(elem).position().top - this.height(elem) + 4; else return $(elem).position().top;
        },
        "height": function(elem) {
            var height;
            if ($.browser.msie) if (!WikispacesCommentManager.readOnly && parseFloat($.browser.version) >= 10) return parseInt($(elem).css("lineHeight").match(/^\d+/)[0], 10); else return $(elem).get(0).offsetHeight; else {
                height = parseInt($(elem).css("lineHeight").match(/^\d+/), 10);
                if (_.isNaN(height)) return $(elem).get(0).offsetHeight; else return height;
            }
        },
        "left": function(elem) {
            var left, _ref;
            elem = $(elem)[0];
            if ($.browser.webkit) {
                $(elem).html("&zwj;");
                left = $(elem).position().left;
                $(elem).html("");
                return left;
            } else if ($.browser.msie && "true" === $(null != (_ref = elem.ownerDocument) ? _ref.body : void 0).attr("contentEditable")) {
                $(elem).html(" ");
                left = $(elem).position().left;
                $(elem).html("");
                return left;
            } else return $(elem).position().left;
        },
        "prepare": function(locatorPattern, source) {
            if ($.browser.msie) return $(locatorPattern, source).html("&zwj;"); else if ($.browser.webkit) {
                $("span.wkzw", source).remove();
                return $("<span>").addClass("wkzw").html("&zwj;").insertBefore($(locatorPattern, source));
            }
        }
    };
    $(document).ready(function() {
        var _this = this;
        if (ws.context.settings.isMobileSite) {
            MENUBAR_DISABLED_CLASS = "ui-disabled";
            MENUBAR_ACTIVE_CLASS = "ui-btn-active";
        }
        WikispacesCommentManager.readOnly = true;
        $(".commentColumn").on("click", function() {
            return WikispacesCommentManager.deselectAll();
        });
        $(window).resize(function() {
            return WikispacesCommentManager.redrawAll();
        });
        $(document).keydown(function(e) {
            var _ref, _ref1;
            if (!WikispacesCommentManager.openComment || WikispacesCommentManager.openComment.div.find("textarea").is(":focus")) return;
            switch (e.keyCode) {
              case 37:
              case 38:
                if (null != (_ref = WikispacesCommentManager.openComment.previous())) _ref.open({
                    "noFocus": true
                });
                return false;

              case 39:
              case 40:
                if (null != (_ref1 = WikispacesCommentManager.openComment.next())) _ref1.open({
                    "noFocus": true
                });
                return false;
            }
        });
        if ($("#comment-footer-template").length) {
            commentFooter = _.template($("#comment-footer-template").html());
            contentTemplate = _.template($("#comment-content-template").html());
            composerTemplate = _.template($("#comment-composer-template").html());
            proxyTemplate = _.template($("#comment-proxy-template").html());
        }
        if ($("#content_view a.range[name^=comment-]:first").size() > 0 && !ws.context.wiki.isClassroom) return WikispacesCommentManager.fetchPageViewComments();
    });
}(jQuery);

ws.namespace("ws.dialog");

ws.dialog = function($, undefined) {
    var dialogTemplate;
    $(document).ready(function() {
        if (ws.context.settings.isMobileSite) return;
        dialogTemplate = _.template($.trim($("#dialog-template").html()));
        $(document).on("click", ".WikispacesDialogLink", ws.common.makeLinkClickFunction(function() {
            var closeCallback = $(this).data("dialogonclose");
            frameDialog(this.href, {
                "onhidden": ws.common.resolveNameToBoundFunction(closeCallback)
            });
        }));
        $(document).on("click", ".js-dialog-close", function(e) {
            e.preventDefault();
            $(this).trigger("dialog-close");
        });
        $(document).on("click", ".WikispacesXDomainDialogLink", ws.common.makeLinkClickFunction(function() {
            var url = $(this).attr("href");
            var gt = ws.common.getURLParameter("goto");
            if (!gt) gt = window.location.href;
            ws.common.addUriParams(url, [ [ "goto", gt ] ]);
            xDomainDialog(url);
        }));
        xDomainOnReady(ws.common.uriParams(document.location.href).pwin);
    });
    function getDimensionObject(win) {
        if ($.browser.msie && $.browser.version <= 10) return $(win.document);
        return $("html", win.document);
    }
    function getIframeDimesions(win) {
        var $dimObj = getDimensionObject(win);
        var $content = $(".WikispacesContent", win.document);
        var dataWidth = $content.data("dialogwidth") || 0;
        var dataHeight = $content.data("dialogheight") || 0;
        var $select2 = $content.find(".select2-results:visible");
        var select2Width = 0;
        var select2Height = 0;
        if ($select2.length) {
            select2Width = $select2.offset().left + $select2.outerWidth(true);
            select2Height = $select2.offset().top + $select2.outerHeight(true);
        }
        return {
            "width": Math.max($dimObj.outerWidth(true), dataWidth, select2Width),
            "height": Math.max($dimObj.outerHeight(true), dataHeight, select2Height)
        };
    }
    function xDomainOnReady(pwin) {
        if (!(pwin && ws.context.settings.isDialog)) return;
        $.receiveMessage(function(e) {
            var m = e.data.match(/event=(.*?)(?:&|$)/);
            if (m) {
                $(document).trigger(m[1]);
                return;
            }
        });
        $(document).on("resize.dialog", function(e) {
            var dims = getIframeDimesions(window);
            $.postMessage({
                "dim": dims.width + "x" + dims.height
            }, pwin);
        });
        $.postMessage("title=" + encodeURIComponent($(".pageTitle").text()), pwin);
        $(document).on("shown.bs.modal", function() {
            $("input:visible, textarea:visible").first().focus();
        });
        $(document).on("dialog-close", function(e) {
            if (!e.isDefaultPrevented()) $.postMessage({
                "close": true
            }, pwin);
        });
        $(document).on("dialog-focus.bs.modal", function() {
            $("input:visible, textarea:visible").first().focus();
        });
    }
    function create(opts) {
        opts = $.extend({
            "title": "",
            "content": "",
            "backdrop": "static",
            "show": true,
            "keyboard": false
        }, opts);
        if (opts.backdrop) {
            var $overlay = blankOverlay();
            opts.backdrop = false;
        }
        var uniqueId = _.uniqueId();
        var titleId = "dialog-title-" + uniqueId;
        var contentId = "dialog-content-" + uniqueId;
        var $dialog = $(dialogTemplate({
            "header": '<span id="' + titleId + '"></span>',
            "body": '<span id="' + contentId + '"></span>'
        })).find("#" + titleId).replaceWith(opts.title).end().find("#" + contentId).replaceWith(opts.content).end();
        if (opts.width) $dialog.find(".modal-dialog").width(opts.width);
        if (opts.oncreate) opts.oncreate.call($dialog);
        $dialog.appendTo("body").addClass("js-dialog WikispacesContent WikispacesBs3").modal({
            "backdrop": opts.backdrop,
            "show": false,
            "keyboard": opts.keyboard
        });
        opts.onshow = ws.common.combineFunctions(opts.onshow);
        var deferred = $.Deferred();
        $dialog.data("onshown", deferred.promise());
        opts.onshown = ws.common.combineFunctions(function() {
            $dialog.trigger("dialog-focus");
            $(document).trigger("dialogonload", [ $dialog ]);
            deferred.resolve();
        }, opts.onshown);
        opts.onhide = ws.common.combineFunctions(opts.onhide);
        opts.onhidden = ws.common.combineFunctions(function() {
            $(document).trigger("dialogclose", [ $dialog ]);
            $dialog.remove();
            $overlay.remove();
        }, opts.onhidden);
        $dialog.on("show.bs.modal", _.bind(opts.onshow, $dialog)).on("shown.bs.modal", _.bind(opts.onshown, $dialog)).on("hide.bs.modal", _.bind(opts.onhide, $dialog)).on("hidden.bs.modal", _.bind(opts.onhidden, $dialog)).on("dialog-focus.bs.modal", function() {
            $dialog.find("input:visible, textarea:visible").first().focus();
        }).on("dialog-close", function(e) {
            if (!e.isDefaultPrevented()) $dialog.modal("hide");
        });
        if (opts.show) $dialog.modal("show");
        return $dialog;
    }
    function frameDialog(src, opts) {
        opts = $.extend({
            "show": true
        }, opts);
        var $dialog;
        var $iframe = $("<iframe>").attr({
            "src": ws.common.addUriParams(src, [ [ "f", "dialog" ] ]),
            "frameborder": "no",
            "scrolling": "auto"
        }).css("width", "100%").on("load", function() {
            opts.onload.call($dialog);
        });
        if (!opts.onload) opts.onload = function() {
            frameDialogOnLoad(src, $dialog, $iframe);
        };
        if (opts.show) opts.onload = ws.common.combineFunctions(opts.onload, function() {
            $dialog.modal("show");
        });
        opts.content = $iframe;
        opts.oncreate = ws.common.combineFunctions(function() {
            $dialog = this;
        }, opts.oncreate);
        opts.onshow = ws.common.combineFunctions(function() {
            _.delay(function() {
                ws.common.hideOverlappingEmbeds($dialog);
                sizeFrameToContent($iframe);
            }, 200);
        }, opts.onshow);
        opts.onshown = ws.common.combineFunctions(function() {
            ws.common.hideOverlappingEmbeds($dialog);
        }, opts.onshown);
        opts.onhidden = ws.common.combineFunctions(function() {
            ws.common.hideOverlappingEmbeds($dialog);
        }, opts.onhidden);
        return create($.extend({}, opts, {
            "show": false
        })).addClass("frameDialog").off("dialog-focus.bs.modal").on("dialog-focus.bs.modal", function() {
            $(this).find("iframe").trigger("dialog-focus");
        });
    }
    function blankOverlay() {
        var $overlay = $('<div class="modal-backdrop fade"></div>').appendTo("body");
        _.defer(function() {
            $overlay.addClass("in");
        });
        return $overlay;
    }
    function isXDomain($iframe) {
        var html = null;
        try {
            var doc = $iframe.get(0).contentDocument || $iframe.get(0).contentWindow.document;
            html = doc.body.innerHTML;
        } catch (err) {}
        return null === html;
    }
    function sizeFrameToContent($iframe) {
        if (isXDomain($iframe)) {
            $.postMessage({
                "event": "resize.dialog"
            }, $iframe.attr("src"), $iframe.get(0).contentWindow);
            return;
        }
        if ($iframe.get(0).contentWindow.document.body) {
            var dims = getIframeDimesions($iframe.get(0).contentWindow);
            $iframe.height(dims.height);
            if (dims.width > 600) $iframe.closest(".modal-dialog").width(dims.width);
        }
    }
    function setDialogTitle($dialog, title) {
        $dialog.find(".modal-title").html(title);
    }
    function frameDialogOnLoad(src, $dialog, $iframe) {
        $iframe.get(0).contentWindow.dialogParent = window;
        var $dialogContent = $("#dialogContent", $iframe.get(0).contentWindow.document);
        if (0 === $dialogContent.length) {
            window.location.href = src;
            return;
        }
        if (0 === $dialogContent.contents().length) return;
        var $content = $dialogContent.find(".WikispacesContent");
        setDialogTitle($dialog, $content.find(".pageTitle").html());
        var iframeWindow = $iframe.get(0).contentWindow;
        iframeWindow.jQuery("body", iframeWindow.document).on("resize.dialog", function() {
            if ($iframe.is(":visible")) {
                sizeFrameToContent($iframe);
                ws.common.hideOverlappingEmbeds($dialog);
            }
            $(document).trigger("resize.dialog");
        });
        iframeWindow.jQuery($iframe.get(0).contentWindow.document).on("dialog-close", function(e) {
            $iframe.trigger("dialog-close");
        });
        $iframe.on("dialog-focus.bs.modal", function(e) {
            e.stopPropagation();
            $dialogContent.find("input:visible, textarea:visible").first().focus();
        });
    }
    function xDomainDialog(src) {
        var url = ws.common.addUriParams(src, [ [ "pwin", window.location.href ] ]);
        frameDialog(url, {
            "onload": function() {},
            "onshown": function() {
                var $iframe = $(this).find("iframe");
                $.postMessage({
                    "event": "shown.bs.modal"
                }, $iframe.attr("src"), $iframe.get(0).contentWindow);
            },
            "oncreate": function() {
                var $this = $(this);
                var $iframe = $this.find("iframe");
                $iframe.on("dialog-focus.bs.modal", function(e) {
                    e.stopPropagation();
                    $.postMessage({
                        "event": "dialog-focus.bs.modal"
                    }, $iframe.attr("src"), $iframe.get(0).contentWindow);
                });
                $.receiveMessage(function(e) {
                    var m = e.data.match(/title=(.*?)(?:&|$)/);
                    if (m) {
                        setDialogTitle($this, decodeURIComponent(m[1]));
                        return;
                    }
                    m = e.data.match(/openDialog=(.+?)(?:&|$)/);
                    if (m) {
                        $this.modal("hide");
                        frameDialog(decodeURIComponent(m[1]));
                        return;
                    }
                    m = e.data.match(/redirect=(.+?)(?:&|$)/);
                    if (m) {
                        $this.modal("hide");
                        blankOverlay();
                        window.location.href = decodeURIComponent(m[1]);
                        return;
                    }
                    if (e.data.match(/closeAndReload/)) {
                        $this.modal("hide");
                        blankOverlay();
                        window.location.reload();
                        return;
                    }
                    if (e.data.match(/close/)) {
                        $this.find("iframe").trigger("dialog-close");
                        return;
                    }
                    m = e.data.match(/dim=(\d+)x(\d+)/);
                    if (m) {
                        var h = Number(m[2]);
                        var w = Number(m[1]);
                        $this.find("iframe").height(h);
                        if (w > 600) $this.find(".modal-dialog").width(w);
                    }
                    var matches = e.data.match(/^notices(.*)/);
                    if (matches) {
                        var message = $.deparam(matches[0]);
                        ws.common.addJsonNotices(message.notices);
                        return;
                    }
                });
            }
        });
    }
    function close(opts) {
        if (!opts) opts = {};
        $(".modal").modal("hide");
        var topWindow = window;
        if (opts.reload) topWindow.location.reload(); else if (opts.redirect) {
            blankOverlay();
            window.location.href = opts.redirect;
        } else if (opts.notices) {
            topWindow.ws.common.removeNotice();
            topWindow.ws.common.addJsonNotices(opts.notices);
        }
    }
    return {
        "create": create,
        "frameDialog": frameDialog,
        "blankOverlay": blankOverlay,
        "xDomainDialog": xDomainDialog,
        "close": close
    };
}(jQuery);

ws.namespace("ws.editableWebsite");

ws.editableWebsite = function($, undefined) {
    $(document).ready(function() {
        $("a.WikispacesEditableHideControls").click(function(event) {
            event.preventDefault();
            ws.editableWebsite.showControls(false);
        });
        $("a.WikispacesEditableShowControls").click(function(event) {
            event.preventDefault();
            ws.editableWebsite.showControls();
        });
    });
    return {
        "controlsVisible": function() {
            var controls = $(".WikispacesEditableShowControls");
            if (0 === controls.length) return true;
            return !controls.is(":visible");
        },
        "showControls": function(show) {
            if ("undefined" == typeof show) show = true;
            var ret = ws.common.ajax({
                "url": ws.common.pathFor("wiki", "editable"),
                "data": {
                    "flag": show + 0
                },
                "type": "GET"
            });
            $("a.WikispacesEditableShowControls").toggle(!show);
            $("a.WikispacesEditableHideControls").toggle(show);
            $(".WikiControls").toggle(show);
            if (!show) WikispacesCommentManager.hideAll();
            return ret;
        }
    };
}(jQuery);

ws.namespace("ws.editor");

ws.editor = function($, undefined) {
    var mainEditorId = "wsMainEditor";
    var corePlugins = [ "wscommon", "wsundo", "wslink", "wsstyle", "wstable", "wsimage", "wswidget", "wslist", "wsobjectresize", "wsselection", "wsblockformat", "autoresize", "rgbcolor", "wsbrtop", "wscommentspace" ];
    var mainPlugins = [ "wssave", "wsautosave", "wsundomain", "wspreview", "wspreviewtext", "wsassessment", "wsreference", "wsautoload", "wstext", "wslinktext", "wsimagetext", "wstabletext", "wswidgettext", "wsstyletext", "wstoolbarscroll", "wssubeditor", "wspopup", "wssavewithcommentpopup", "wsdraftrecoveredpopup", "wscleanuppopup", "wsconcurrenteditorpopup", "wsimagepopup", "wslinkpopup", "wsstylepopup", "wstablepopup", "wswidgetpopup", "wsimageoverlay", "wswidgetoverlay", "wstableoverlay", "wsexpireddraftpopup", "wslinkoverlay", "wscomment" ];
    var _editorDeferred = $.Deferred();
    return {
        "_editorDeferred": _editorDeferred,
        "editorLoaded": _editorDeferred.promise(),
        "canEdit": false,
        "loadEditor": function(moreCoreOptions, moreMainOptions) {
            var coreOptions = {
                "mode": "exact",
                "language": "",
                "convert_newlines_to_brs": false,
                "apply_source_formatting": false,
                "force_br_newlines": false,
                "force_p_newlines": true,
                "forced_root_block": "p",
                "body_class": "wiki",
                "formats": {
                    "underline": {
                        "inline": "u"
                    }
                },
                "gecko_spellcheck": true,
                "inline_styles": false,
                "fix_list_elements": false,
                "theme": "-subeditor",
                "convert_urls": false
            };
            var mainOptions = {
                "elements": mainEditorId,
                "plugins": "-paste,-" + corePlugins.concat(mainPlugins).join(",-"),
                "theme_wikispaces_toolbar_align": "left",
                "theme_wikispaces_toolbar_location": "external",
                "paste_remove_styles_if_webkit": false,
                "paste_retain_style_properties": "all",
                "paste_remove_word_images": false,
                "wsautosave_enabled": "page" == wikispaces_object,
                "wssubeditor_plugins": "-paste,-" + corePlugins.join(",-"),
                "wssubeditor_options": $.extend({}, coreOptions, moreCoreOptions),
                "button_tile_map": true,
                "theme": "-wikispaces",
                "add_form_submit_trigger": false,
                "submit_patch": false,
                "setup": function(ed) {
                    tinymce.mainEditor = ed;
                    ed.onInit.add(function(ed) {
                        ed.focus();
                    });
                }
            };
            if (tinyMCE.isIDevice) tinyMCE.isIDevice = false;
            tinyMCE.init($.extend({}, coreOptions, moreCoreOptions, mainOptions, moreMainOptions));
        },
        "loadEditorPlugins": function(callback) {
            var cb, nocache = "?_=" + new Date().valueOf();
            $.each([ "wikispaces", "subeditor", "reference" ].reverse(), function(i, val) {
                var innerCb = cb;
                cb = function() {
                    tinymce.ThemeManager.load(val, "/s/js/editor/themes/" + val + "/editor_template_src.js" + nocache, innerCb);
                };
            });
            $.each([ "wscleanup" ].concat(corePlugins, mainPlugins).reverse(), function(i, val) {
                var lib = "";
                if (!this.match(/^ws/)) lib = "-lib";
                var innerCb = cb;
                cb = function() {
                    tinymce.PluginManager.load(val, "/s/js/editor" + lib + "/plugins/" + val + "/editor_plugin_src.js" + nocache, innerCb);
                };
            });
            cb();
            tinymce.ScriptLoader.loadQueue(callback);
        },
        "loadEditorLibs": function(url) {
            var se = document.createElement("script");
            se.type = "text/javascript";
            se.src = url;
            document.getElementsByTagName("head")[0].appendChild(se);
        },
        "enableButtons": function() {
            $(".editButton").css("cursor", "pointer").on("click.wsEditor", ws.common.makeLinkClickFunction(function() {
                $(this).off("click.wsEditor").addClass("Current");
                ws.common.removeNotice();
                ws.common.displayBanner(false);
                ws.navigation.collapse();
                try {
                    ws.editor.disableEditButtons();
                    ws.editor.startEditor.call(this);
                } catch (e) {
                    ws.common.log(e);
                    return true;
                }
            }));
        },
        "restoreButtons": function() {
            $(".editButton").off("click.wsEditor");
        },
        "disableEditButtons": function(element) {
            $(element).find(".editButton").css("cursor", "default").attr("href", "#").off("click.wsEditor");
        }
    };
}(jQuery);

ws.namespace("ws.editor.content");

ws.editor.content = function($, undefined) {
    var content = {
        "draftRecovered": '<div id="draftRecovered">' + '<p>We\'ve recovered an unsaved draft from <span id="recoveredDraftDate"></span>.</p>' + '<p id="outOfDateDraft" class="hidden">' + 'However, another person has edited this page since your last draft.  If you continue, their changes will be overwritten. To view these changes, <a href="#">click here</a>.' + "</p>" + "<p>What would you like to do?</p>" + '<button type="button" class="btn btn-primary" id="recoverDraft">Edit from Recovered Draft</button>' + "\n" + '<button type="button" class="btn btn-default" id="discardDraft">Ignore Recovered Draft</button>' + "</div>",
        "cleanupPopupContents": "<div>" + "<p>Please wait while we optimize the styles on your page. " + '<img id="cleanupSpinner" style="vertical-align: top;" src="/i/spinner.gif" width="18" height="18" alt="please wait..."/>' + "</p>" + "</div>"
    };
    return {
        "isLoaded": false,
        "callbacks": [],
        "loadContent": function(id) {
            if (content[id]) return content[id];
            throw "Unloaded editor part: " + id;
        },
        "setContent": function(key, val) {
            content[key] = val;
        },
        "add": function(func) {
            ws.editor.content.callbacks.push(func);
            if (ws.editor.content.isLoaded) func();
        },
        "loaded": function() {
            ws.editor.content.isLoaded = true;
            $.each(ws.editor.content.callbacks, function(index, callback) {
                callback();
            });
        }
    };
}(jQuery);

!function($, undefined) {
    $(document).ready(function($) {
        var COOKIE = "tour";
        guiders.setCookie = function(id) {
            Cookie.set(COOKIE, id);
        };
        var hashLoading = false;
        var lastValidId = null;
        var leavingElem = null;
        guiders.loaded = false;
        guiders._defaultSettings.expectedPath = null;
        guiders._defaultSettings.previousId = null;
        guiders._defaultSettings.xButton = true;
        guiders._defaultSettings.preShow = null;
        guiders._defaultSettings.postShow = null;
        guiders._defaultSettings.onShowError = null;
        guiders._defaultSettings.overlay = true;
        guiders._defaultSettings.buttons = [];
        guiders._defaultSettings.highlight = ".hiddenHighlight";
        guiders._defaultSettings.onMisstep = null;
        guiders.onClose = function(myGuider, escapeKeyOrXButton) {
            if (escapeKeyOrXButton) ws.common.track("tour", "close", myGuider.id);
        };
        guiders._defaultSettings.onClose = guiders.onClose;
        $(document).on("resize.dialog", function() {
            guiders.reposition();
        });
        var showSpinner = function() {
            var $spinner = $("<i>", {
                "class": "fa fa-spinner fa-spin guiders-spinner"
            }).css({
                "position": "fixed",
                "top": "50%",
                "left": "50%",
                "margin-top": "-6px;",
                "margin-left": "-10px"
            });
            $("body").append($spinner);
            $(document).mask();
        };
        var hideSpinner = function() {
            $(".guiders-spinner").remove();
            $(document).mask(false);
        };
        guiders.loadGuiders = _.once(function() {
            if (wikispaces_isMobileSite || "C" == ws.context.wiki.module) return $.Deferred().reject().promise();
            showSpinner();
            return ws.common.ajax({
                "url": ws.common.pathFor("wiki", "guiders"),
                "type": "GET"
            }).then(function(data) {
                $("body").append($("<div>", {
                    "class": "hiddenHighlight"
                }));
                return ws.guiders.stages.createStages(data.playlists);
            }).fail(function() {
                window.alert("Failed to load help system.");
            }).always(function() {
                hideSpinner();
            });
        });
        var showMisstepLeaving = function(elem) {
            lastValidId = Cookie.get(COOKIE);
            guiders.hideAll();
            leavingElem = null;
            if (elem) leavingElem = elem;
            guiders.show("misstep-leaving");
        };
        guiders.endTour = function() {
            var guiderId = guiders._currentGuiderID;
            guiders.hideAll();
            ws.common.track("tour", "end", guiderId);
        };
        guiders.abortTour = function() {
            var guiderId = guiders._currentGuiderID;
            guiders.hideAll();
            ws.common.track("tour", "abort", guiderId);
            if (leavingElem) $(leavingElem).on("click.guiderclick", function(event) {
                if (!event.isDefaultPrevented()) window.location.href = $(this).attr("href");
            }).click().off("click.guiderclick");
        };
        guiders.setMilestone = function(tour, stage) {
            ws.common.ajax({
                "url": "/wiki/setmilestone/" + tour,
                "type": "POST",
                "data": {
                    "stage": stage
                }
            });
        };
        guiders.showLastValidStep = function() {
            if (!lastValidId) {
                guiders.show("misstep-no-return");
                return;
            }
            guiders.show(lastValidId);
            lastValidId = null;
        };
        guiders.jumpToStep = function(guiderId) {
            guiders.hideAll();
            ws.common.track("tour", "jump", guiderId);
            guiders.show(guiderId);
        };
        guiders.reloadPage = function(guiderId) {
            if (guiderId) guiders.setCookie(guiderId);
            window.location.reload(false);
        };
        guiders.gotoPage = function(guiderId, url) {
            if (guiderId) guiders.setCookie(guiderId);
            window.location = url;
        };
        guiders.advanceGuidersAfterLoad = function() {
            var guiders = window.guiders;
            if (window.parent != window) guiders = window.parent.guiders;
            if (Cookie.get(COOKIE)) {
                var guider = guiders.get(Cookie.get(COOKIE));
                var next = guider.next;
                if (next) guiders.setCookie(next);
            }
        };
        function isLinkExternal(url) {
            if (!url.match(/^http/)) return false;
            var base_url = url.replace("https://", "").replace("http://", "").split("/")[0];
            var current_url = location.href.replace("https://", "").replace("http://", "").split("/")[0];
            return base_url != current_url;
        }
        function attachTourWarnings() {
            $(document).on("click", "a", function(event) {
                var $a = $(this);
                var url = $a.attr("href");
                if (url && "javascript:" != url.substring(0, 11) && !event.isDefaultPrevented() && !$a.hasClass("guider_button") && !$a.hasClass("nextGuiderLink") && !$a.hasClass("editButton")) {
                    var guiderId = Cookie.get(COOKIE);
                    if (guiderId) {
                        var isExternal = isLinkExternal(url);
                        var isNotExpected = isNotExpectedPath(url);
                        if (!isExternal && !isNotExpected) return;
                        var guider = guiders.get(guiderId);
                        if (isNotExpected && guider.onMisstep) {
                            guider.onMisstep.call(guider);
                            return;
                        }
                        if (isExternal || isNotExpected) {
                            event.preventDefault();
                            event.stopPropagation();
                            showMisstepLeaving(this);
                        }
                    }
                }
            });
        }
        function loadFromCookie() {
            var tour_name = Cookie.get(COOKIE);
            if (tour_name) {
                var guiders = window.guiders;
                if (window.parent != window) guiders = window.parent.guiders;
                guiders.show(tour_name);
            }
        }
        function isMisstep(id) {
            return "misstep" == id.substring(0, 7);
        }
        function isNotExpectedPath(url) {
            url = url.replace("https://", "").replace("http://", "");
            url = url.substring(url.indexOf("/"), url.length);
            if ("#" == url) return false;
            var tour_id = Cookie.get(COOKIE);
            if (tour_id) {
                var guider = guiders.get(tour_id);
                if (guider.expectedPath) {
                    if ("string" == typeof guider.expectedPath) return guider.expectedPath != url;
                    if ("object" == typeof guider.expectedPath && guider.expectedPath instanceof RegExp) return !url.match(guider.expectedPath);
                    return true;
                }
                return false;
            }
            return false;
        }
        guiders._showOverlay = function() {};
        guiders._highlightElement = function(selector) {
            if ("function" == typeof selector) selector = selector();
            $(document).mask(selector);
        };
        guiders._dehighlightElement = function(selector) {
            $(document).mask(false);
        };
        !function() {
            var orig = guiders._showIfHashed;
            guiders._showIfHashed = function(myGuider) {
                hashLoading = true;
                orig.call(guiders, myGuider);
                hashLoading = false;
            };
        }();
        !function() {
            var orig = guiders.hideAll;
            guiders.hideAll = function() {
                try {
                    orig.apply(guiders, arguments);
                    Cookie.erase(COOKIE);
                    guiders._currentGuiderID = null;
                } catch (excep) {
                    window.alert("Oops, there was a problem with the tour. Please restart it.");
                }
            };
        }();
        var handleShowException = function(id, opt_msg) {
            ws.common.track("tour", "fail", id);
            var handleIt = true;
            var myGuider = guiders.get(id);
            if (myGuider && myGuider.onShowError) handleIt = !myGuider.onShowError.call(myGuider);
            if (handleIt) handleExceptionHelper(id);
        };
        var handleExceptionHelper = function(id, opt_msg) {
            opt_msg = opt_msg || "There was a problem with the help system.";
            guiders.hideAll();
            if ("misstep-no-return" == id) window.alert(opt_msg); else guiders.show("misstep-no-return");
        };
        !function() {
            var orig = guiders.next;
            guiders.next = function() {
                var guiders = window.guiders;
                if (window.parent != window) guiders = window.parent.guiders;
                var id = Cookie.get(COOKIE);
                if (id) try {
                    ws.common.track("tour", "next", id);
                    orig.apply(guiders, arguments);
                } catch (excep) {
                    handleExceptionHelper(id);
                    return;
                }
            };
        }();
        !function() {
            var orig = guiders.reposition;
            guiders.reposition = function() {
                orig.apply(guiders, arguments);
                if (guiders._currentGuiderID) {
                    var guider = guiders.getCurrentGuider();
                    if (guider.highlight) {
                        guiders._dehighlightElement(guider.highlight);
                        guiders._highlightElement(guider.highlight);
                    }
                    var $elem = $(guider.elem);
                    var resized = false;
                    var left = $elem.offset().left;
                    if (left < 0 && $elem.width() >= Math.abs(left)) {
                        $elem.width($elem.width() + left - 1);
                        resized = true;
                    }
                    if (left + $elem.width() > $("body").width()) {
                        $elem.width($("body").width() - left);
                        resized = true;
                    }
                    var top = $elem.offset().top;
                    if (top < 0 && $elem.height() >= Math.abs(top)) {
                        $elem.height($elem.height() + top - 1);
                        resized = true;
                    }
                    if (top + $elem.height() > $("body").height()) {
                        $elem.height($("body").height() - top);
                        resized = true;
                    }
                    if (resized) {
                        orig.apply(guiders, arguments);
                        guiders._styleArrow(guider);
                    }
                }
            };
        }();
        !function() {
            var orig = guiders.show;
            guiders.show = function(id) {
                $(".nextGuiderLink").removeClass("nextGuiderLink");
                var myGuider = guiders.get(id);
                if (myGuider.expectedPath) if ("string" == typeof myGuider.expectedPath) {
                    if (myGuider.expectedPath != window.location.pathname) {
                        guiders.gotoPage(id, myGuider.expectedPath + window.location.hash);
                        return;
                    }
                } else if ("object" == typeof myGuider.expectedPath && myGuider.expectedPath instanceof RegExp) if (!window.location.pathname.match(myGuider.expectedPath)) {
                    if (myGuider.onMisstep) myGuider.onMisstep.call(myGuider); else {
                        guiders.hideAll();
                        guiders.show("misstep-no-return");
                    }
                    return;
                }
                var actualShow = function() {
                    if (myGuider.attachTo && 0 === $(myGuider.attachTo).length) {
                        handleShowException(id, "We had trouble continuing the tour");
                        return;
                    }
                    if (myGuider.highlight && 0 === $(myGuider.highlight).length) {
                        handleShowException(id, "We had trouble constructing the tour");
                        return;
                    }
                    try {
                        orig.call(guiders, id);
                        guiders._styleArrow(myGuider);
                        if (!isMisstep(id)) guiders.setCookie(id);
                        guiders.reposition();
                        ws.common.track("tour", "show", id);
                        if (myGuider.postShow) myGuider.postShow.call(myGuider);
                    } catch (excep_ignored) {
                        handleShowException(id);
                        return;
                    }
                };
                if ("function" == typeof myGuider.preShow) try {
                    var preShowPromise = myGuider.preShow.call(myGuider);
                    preShowPromise.done(actualShow);
                } catch (excep) {
                    handleExceptionHelper(id, "We had trouble showing the tour");
                    return;
                } else actualShow();
            };
        }();
        !function() {
            if ((Cookie.get(COOKIE) || 1 == window.location.hash.indexOf("guider")) && window.parent == window) $(window).load(function() {
                guiders.loadGuiders().done(function() {
                    if (!hashLoading) loadFromCookie();
                });
            });
            if ("dialog" != ws.common.getURLParameter("f")) attachTourWarnings();
        }();
    });
}(jQuery);

ws.namespace("ws.guiders.stages");

ws.guiders.stages = function($, undefined) {
    var selectorsMapping = [];
    var registerSelector = function(selector, expectedPath) {
        if (!selectorsMapping[expectedPath]) selectorsMapping[expectedPath] = [];
        selectorsMapping[expectedPath].push(selector);
    };
    var rs$ = function(selector) {
        var guider = guiders.getCurrentGuider();
        if (guider) registerSelector(selector, guider.expectedPath);
        return $(selector);
    };
    var startEditor = function(callback) {
        var d = $.Deferred();
        d.done(callback);
        ws.editor.editorLoaded.done(function() {
            var popup = tinymce.mainEditor.plugins.wspopup.get("draftRecovered");
            if (popup && popup.dialog) {
                popup.dialog.one("hidden.bs.modal.guider", function() {
                    d.resolve();
                });
                rs$("#recoverDraft").click();
            } else d.resolve();
        });
        return d.promise();
    };
    var uploadDialog = function() {
        var d1 = $.Deferred();
        if (rs$(".modal-dialog").length) {
            d1.resolve();
            return $.when();
        }
        $(document).on("dialogonload.guider", function(event, $dialog) {
            var $iframe = $dialog.find("iframe");
            if ($iframe.attr("src").indexOf("/file/upload") !== -1) {
                $(document).off("dialogonload.guider");
                d1.resolve();
            }
        });
        ws.dialog.frameDialog("/file/upload");
        return d1;
    };
    var ensureFrameDialog = function($link) {
        var $modal = $(".modal");
        var $iframe = $(".modal-body iframe");
        var needsOpen = 0 === $modal.length;
        if (!needsOpen && ($iframe.attr("src") === undefined || null === $iframe.attr("src").match($link.attr("href")))) {
            $modal.modal("hide");
            needsOpen = true;
        }
        if (needsOpen) {
            $link.click();
            $modal = $(".modal");
        }
        return $modal.data("onshown");
    };
    var positionToActions = null;
    var calculatePositionToActions = function() {
        if (positionToActions) return positionToActions;
        positionToActions = 9;
        var $actions = rs$(".WikiActions");
        var unshow = false;
        if ($actions.is(":hidden")) {
            $actions.show();
            unshow = true;
        }
        var offset = $actions.offset();
        var height = $actions.height();
        var width = $actions.width();
        if (unshow) $actions.hide();
        if (offset) if (width / height > 10) if (offset.top < $(window).height() / 2) positionToActions = 6; else positionToActions = 12; else if (offset.left < $(window).width() / 2) positionToActions = 3; else positionToActions = 9;
        return positionToActions;
    };
    var getPageUrl = function() {
        var pageUrl;
        var path = ws.context.path;
        if ("page" == path.object && "view" == path.method && "home" != path.page) pageUrl = ws.common.pathFor(path.object, path.method, path.page); else if (ws.context.space.isDefaultSpace) pageUrl = "/"; else pageUrl = ws.common.pathFor();
        return pageUrl;
    };
    var buttons = {
        "END": "end",
        "NEXT": "next",
        "SKIP": "skip",
        "BEGIN": "begin",
        "BACK": "back",
        "ABORT": "abort"
    };
    var createNextButton = function(name) {
        return {
            "name": ws.guiderscontent.get(name),
            "onclick": function(event) {
                guiders.next();
                event.preventDefault();
            }
        };
    };
    var createButton = function(name) {
        switch (name) {
          case buttons.END:
            return {
                "name": ws.guiderscontent.get("buttonEndTour"),
                "onclick": function(event) {
                    guiders.endTour();
                    event.preventDefault();
                },
                "classString": "guiders_button_end"
            };

          case buttons.NEXT:
            return createNextButton("buttonNext");

          case buttons.SKIP:
            return createNextButton("buttonSkip");

          case buttons.BEGIN:
            return createNextButton("buttonBegin");

          case buttons.BACK:
            return {
                "name": ws.guiderscontent.get("buttonGoBack"),
                "onclick": function(event) {
                    guiders.hideAll();
                    guiders.showLastValidStep();
                    event.preventDefault();
                }
            };

          case buttons.ABORT:
            return {
                "name": ws.guiderscontent.get("buttonEndTour"),
                "onclick": function(event) {
                    guiders.abortTour();
                    event.preventDefault();
                },
                "classString": "guiders_button_end"
            };

          default:
            return null;
        }
    };
    var createStagesHelper = function(playlist, tourname) {
        var deferredObjects = _.map(playlist, function(scriptUrl) {
            return $.getScript(scriptUrl);
        });
        return $.when.apply(this, deferredObjects).then(function() {
            var builder = new ws.guiders.stages.builder();
            try {
                _.each(playlist, function(scriptUrl, stage) {
                    builder.startStage(tourname, stage);
                    ws.guiders.stages[stage].create(tourname, builder);
                    builder.finishStage();
                });
            } catch (excep) {
                if (window.console && window.console.log) window.console.log("guiders_stages: " + excep.message);
                return $.Deferred().reject().promise();
            }
        });
    };
    var loadDictionary = _.once(function() {
        return ws.common.ajax({
            "url": ws.common.pathFor("site", "guiderscontent"),
            "type": "GET"
        }).then(function(data) {
            _.each(data, function(value, key) {
                ws.guiderscontent.set(key, value);
            });
        });
    });
    var createStages = _.once(function(playlists) {
        return loadDictionary().then(function() {
            var deferreds = _.map(playlists, function(playlist, tourname) {
                return createStagesHelper(playlist, tourname);
            });
            return $.when.apply(this, deferreds);
        });
    });
    return {
        "registerSelector": registerSelector,
        "rs$": rs$,
        "startEditor": startEditor,
        "uploadDialog": uploadDialog,
        "ensureFrameDialog": ensureFrameDialog,
        "calculatePositionToActions": calculatePositionToActions,
        "getPageUrl": getPageUrl,
        "buttons": buttons,
        "createButton": createButton,
        "getSelectorsMapping": function() {
            return selectorsMapping;
        },
        "createStages": createStages
    };
}(jQuery);

ws.namespace("ws.guiders.stages.builder");

ws.guiders.stages.builder = function(undefined) {
    var builder = function() {
        this.tourname = null;
        this.stage = null;
        this.index = 1;
    };
    builder.prototype.startStage = function(tourname, stage) {
        this.tourname = tourname;
        this.stage = stage;
        this.index = 1;
    };
    builder.prototype.templatePagePathRegex = /^\/-\/.*\/template\/.+$/;
    builder.prototype.templatePageEditPathRegex = /^\/-\/.*\/template\/page\/edit\/.+$/;
    builder.prototype.templatePathRegex = /^\/-\/.*\/template[\/]?$/;
    builder.prototype.templateOrPagePathRegex = /^\/-\/.*\/template([\/]?|\/.+)$/;
    var UNSEQUENCED_STAGES = [ "createlesson", "misc" ];
    builder.prototype.createGuider = function(passedSettings) {
        passedSettings.stage = this.stage;
        passedSettings.tourname = this.tourname;
        if (!passedSettings.id) passedSettings.id = this.tourname + "-" + this.stage + "-" + this.index;
        if (guiders._lastCreatedGuiderID) {
            var prevGuider = guiders._guiders[guiders._lastCreatedGuiderID];
            if (!~_.indexOf(UNSEQUENCED_STAGES, prevGuider.stage) && !~_.indexOf(UNSEQUENCED_STAGES, this.stage)) prevGuider.next = passedSettings.id;
        }
        if (!passedSettings.title) passedSettings.title = ws.guiderscontent.get(this.stage + this.index + "Title");
        if (!passedSettings.description) passedSettings.description = ws.guiderscontent.get(this.stage + this.index + "Description");
        if (passedSettings.attachTo && !passedSettings.highlight) passedSettings.highlight = passedSettings.attachTo;
        if (passedSettings.buttons) passedSettings.buttons = _.map(passedSettings.buttons, function(nameOrObject) {
            if ("object" == typeof nameOrObject) return nameOrObject;
            return ws.guiders.stages.createButton(nameOrObject);
        });
        if (passedSettings.expectedPath) {
            if (passedSettings.attachTo) ws.guiders.stages.registerSelector(passedSettings.attachTo, passedSettings.expectedPath);
            if (passedSettings.highlight && passedSettings.highlight != guiders._defaultSettings.highlight) ws.guiders.stages.registerSelector(passedSettings.highlight, passedSettings.expectedPath);
        }
        guiders.createGuider(passedSettings);
        var guider = guiders._guiders[guiders._lastCreatedGuiderID];
        _.each([ "onShow", "onHide", "onClose" ], function(name) {
            if (guider[name]) guider[name].bind(guider);
        });
        this.index++;
    };
    builder.prototype.finishStage = function() {
        if (guiders._lastCreatedGuiderID) {
            var prevGuider = guiders._guiders[guiders._lastCreatedGuiderID];
            if (!~_.indexOf(UNSEQUENCED_STAGES, prevGuider.stage)) prevGuider.onShow = ws.common.combineFunctions(function() {
                guiders.setMilestone(prevGuider.tourname, prevGuider.stage);
            }.bind(prevGuider), prevGuider.onShow);
        }
    };
    return builder;
}();

ws.namespace("ws.guiderscontent");

ws.guiderscontent = function($, undefined) {
    var content = {};
    return {
        "set": function(key, value) {
            content[key] = value;
        },
        "get": function(id) {
            if (content[id]) return content[id];
            throw new Error("Unloaded guiders content " + id);
        }
    };
}(jQuery);

ws.namespace("ws.header");

ws.header = function($, undefined) {
    function reposition() {
        var height = $("#js-fixed-header-holder").outerHeight(true);
        $("#js-fixed-header-offset").css("margin-top", height + "px");
        $("#js-fixed-header-holder").addClass("fixed");
        try {
            $("#js-fixed-header-a-style").html(".wiki a[name]:before {" + ' content: "\\00A0";' + " display: inline-block;" + " visibility: hidden;" + " width: 0;" + " padding-top: " + height + "px;" + " margin-top: -" + height + "px;" + " }");
        } catch (e) {}
    }
    function initGlobalNavPopover() {
        var $container = $(".ws-main-top-nav .js-globalnav-popover-container");
        if (!$container.length) return;
        var $content = $container.find(".js-globalnav-popover-content").contents();
        var $trigger = $container.find(".js-globalnav-popover-trigger");
        $trigger.popover({
            "container": "body",
            "trigger": "manual",
            "placement": "left",
            "html": true,
            "content": function() {
                return $content;
            }
        }).on("show.bs.popover", function() {
            $("body").on("click.globalnav", function(e) {
                if (!$(e.target).closest(".js-globalnav-popover-container, .ws-globalnav-popover").length) {
                    $("body").off("click.globalnav");
                    $trigger.popover("hide");
                }
            });
        }).on("hide.bs.popover", function() {
            $("body").off("click.globalnav");
        }).click(ws.common.makeLinkClickFunction(function() {
            $trigger.popover("toggle");
        })).data("bs.popover").tip().addClass("ws-globalnav-popover");
    }
    $(document).ready(function() {
        $("<style>").attr({
            "type": "text/css",
            "id": "js-fixed-header-a-style"
        }).appendTo("head");
        $(window).resize(function() {
            reposition();
        });
        reposition();
        initGlobalNavPopover();
    });
    return {
        "reposition": reposition
    };
}(jQuery);

ws.namespace("ws.help");

ws.help = function($, undefined) {
    var homePage = "Home";
    var pageStack = [];
    var MAX_BREADCRUMBS = 4;
    $(document).ready(function() {
        if (!$("#js-help-template").length) return;
        $(".js-help-link").click(ws.common.makeLinkClickFunction(function() {
            ws.help.show(jQuery(this).data("help"));
        }));
        $("body").on("click", ".js-help-trigger", ws.common.makeLinkClickFunction(function() {
            ws.help.show();
        })).on("click", ".ws-help-dialog .breadcrumb li a", ws.common.makeLinkClickFunction(function(e) {
            var breadcrumb = $(this).data("breadcrumb");
            if (!$.isNumeric(breadcrumb)) return true;
            $(this).closest("li").nextAll(":not(.js-special-breadcrumb)").remove();
            ws.help.gotoBreadcrumb(breadcrumb);
        }));
    });
    function createHelpPopup() {
        var $dialog = ws.dialog.create({
            "title": "Help",
            "content": $("#js-help-template").contents().clone(),
            "width": 880
        }).addClass("ws-help-dialog").removeClass("WikispacesContent WikispacesBs3").find(".modal-header").addClass("WikispacesContent WikispacesBs3").end();
        if ("Home" != homePage) {
            $dialog.find(".js-getting-started-off").show();
            $dialog.find(".modal-title").text("Getting Started");
        }
        return $dialog;
    }
    function getHelpPageText(page) {
        var pageText = page;
        if (!pageText) pageText = "";
        if ("/" == pageText.substr(0, 1)) pageText = pageText.substr(1);
        pageText = pageText.replace(/\+/g, " ");
        pageText = decodeURIComponent(pageText);
        if (pageText.lastIndexOf(".") > 0) pageText = pageText.substr(pageText.lastIndexOf(".") + 1);
        return pageText;
    }
    function showBreadcrumbs() {
        var $breadcrumbs = $(".ws-help-dialog .js-help-controls .breadcrumb");
        $breadcrumbs.find("li:not(.js-special-breadcrumb)").remove();
        var startAt = Math.max(1, pageStack.length - MAX_BREADCRUMBS);
        _.each(_.last(_.rest(pageStack, 1), MAX_BREADCRUMBS), function(page, i) {
            $breadcrumbs.append('<li><a href="//help.' + wikispaces_main_domain + "/" + page + '" data-breadcrumb="' + (startAt + i) + '">' + getHelpPageText(page) + " </a></li>");
        });
        $breadcrumbs.find(".js-spinner").remove().appendTo($breadcrumbs);
        $breadcrumbs.find(".js-ellipsis").toggle(pageStack.length - 1 > MAX_BREADCRUMBS);
        $breadcrumbs.find(".active").removeClass("active");
        $breadcrumbs.find("li:visible:not(.js-special-breadcrumb), li:first").last().addClass("active");
    }
    function generateHelpToc(helpContent) {
        $(helpContent).find("#toc").remove();
        var toc = $('<div id="toc"><h1 class="nopad">Table of Contents</h1></div>');
        helpContent.find("h1,h2,h3,h4,h5,h6").each(function() {
            var link = $('<a href="#">' + $(this).text() + "</a>");
            var heading = $(this);
            link.click(function(event) {
                helpContent.scrollTo(heading, 300);
                event.preventDefault();
                return false;
            });
            var div = $('<div style="margin-left: ' + this.tagName.substr(1, 2) + 'em;"></div>');
            div.append(link);
            toc.append(div);
        });
        helpContent.prepend(toc);
    }
    function fixHelpContent(helpContent) {
        var helpLink = window.location.protocol + "//help." + wikispaces_main_domain;
        $(helpContent).find('img[src^="/"]').attr("src", function(i, oldSrc) {
            return helpLink + oldSrc;
        });
        $(helpContent).find('a[href^="/"]').attr("href", function(i, oldSrc) {
            return helpLink + oldSrc;
        });
        $('a[href$="site/help"]').each(function() {
            $(this).attr("href", $(this).attr("href") + "?src=" + wikispaces_wikiName);
        });
        $(helpContent).find("a").each(function() {
            var link = $(this);
            if (!link.attr("href") || helpLink != link.attr("href").substr(0, helpLink.length)) return;
            link.off("click");
            link.click(ws.common.makeLinkClickFunction(function(event) {
                return !ws.help.load(link.attr("href").substr(helpLink.length));
            }));
        });
    }
    return {
        "show": function(page) {
            if (parent != window && "function" == typeof parent.ws.help.show) return parent.ws.help.show(page);
            ws.navigation.collapse();
            createHelpPopup();
            if (!pageStack.length) pageStack.push(homePage);
            if (page) return ws.help.load(page); else {
                ws.help.refresh();
                return true;
            }
            return false;
        },
        "load": function(page) {
            var baseUrl = document.location.protocol + "//" + document.location.hostname;
            if (page.substring(0, baseUrl.length) == baseUrl && "/Help." == page.substr(baseUrl.length, 6)) page = page.substr(baseUrl.length);
            if ("http://" == page.substring(0, 7) || "https://" == page.substring(0, 8)) return false;
            if ("/file/view/" == page.substring(0, 11)) {
                window.location = window.location.protocol + "//help." + wikispaces_main_domain + page;
                return true;
            }
            if ("/" == page.substr(0, 1)) page = page.substr(1);
            var anchor = "";
            if (page.indexOf("#") > 0) {
                anchor = page.substr(page.indexOf("#") + 1);
                page = page.substr(0, page.indexOf("#"));
            }
            if (page == pageStack[pageStack.length - 1]) {
                if (anchor) $(".ws-help-dialog .ws-help-content").scrollTo($(".ws-help-content a[name='" + anchor + "']")); else $(".ws-help-dialog .ws-help-content").scrollTop(0);
                return true;
            }
            pageStack.push(page);
            ws.help.refresh().done(function() {
                if (anchor) $content.scrollTo($content.find('a[name="' + anchor + '"]')); else $content.scrollTop(0);
            });
            return true;
        },
        "refresh": function() {
            $(".ws-help-dialog .js-help-controls .js-spinner").show();
            return ws.common.ajax({
                "queueName": "help",
                "url": "/site/helpcontent/" + _.last(pageStack),
                "type": "GET"
            }).done(function(data) {
                $content = $(".ws-help-dialog .ws-help-content");
                $content.html(data);
                fixHelpContent($content);
                generateHelpToc($content);
                showBreadcrumbs();
            }).fail(function() {
                $content = $(".ws-help-dialog .ws-help-content");
                $content.html("No help content found.");
                fixHelpContent($content);
                generateHelpToc($content);
                showBreadcrumbs();
            }).always(function() {
                $(".ws-help-dialog .js-help-controls .js-spinner").hide();
            });
        },
        "gotoBreadcrumb": function(index) {
            pageStack.length = index + 1;
            ws.help.refresh();
        },
        "setHomePage": function(page) {
            homePage = page;
        }
    };
}(jQuery);

ws.namespace("ws.math");

ws.math = function($, undefined) {
    return {
        "process": function(parent) {
            if ($('.wiki script[type="math/tex"]').length > 0) if (window.MathJax) MathJax.Hub.Queue([ "Typeset", MathJax.Hub, parent ]); else ws.math.loadMath();
        },
        "loadMath": function() {
            var url = "/s/js/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML";
            var se = document.createElement("script");
            se.type = "text/javascript";
            se.src = url;
            document.getElementsByTagName("head")[0].appendChild(se);
        }
    };
}(jQuery);

ws.namespace("ws.messagequeue");

ws.messagequeue = function($, undefined) {
    $(document).ready(function() {
        if ("undefined" == typeof EventSource) return;
        var channels = [];
        if (ws.context.user.id) channels.push(ws.context.environment_name + "user" + ws.context.user.id);
        if (!ws.context.space.isDefaultSpace && ws.context.wiki.isTesClassroom && ws.context.userCanAdministerWiki && ws.context.wiki.defaultSpaceId) channels.push(ws.context.environment_name + "space" + ws.context.wiki.defaultSpaceId); else if (ws.context.space.id) channels.push(ws.context.environment_name + "space" + ws.context.space.id);
        if (!channels.length) return;
        var channel = channels.join("/");
        var es = new EventSource("/queue/subscribe/ev/" + channel);
        es.addEventListener("message", function(event) {
            var message = JSON.parse(event.data);
            var parts = message.text.split(" ");
            var area = parts.shift();
            $(document).trigger("message." + area, parts);
        });
    });
    return {};
}(jQuery);

ws.namespace("ws.navbar");

ws.navbar = function($, undefined) {
    $(document).ready(function() {
        var $navbar = $(".WikispacesNavbar");
        if (!$navbar.length) return;
        hideIfEmpty($navbar.find("#WikispacesNavbarFavoritesEntry"));
        setExpandedFromCookie($navbar);
        $(document).on("message.navbar", function(event, action, spaceId) {
            if ("refresh" == action && spaceId == $navbar.data("spaceid")) ws.navbar.refresh();
        });
        $navbar.on("click", ".WikispacesNavbarEntry .WikispacesNavbarEntryHeader:not(.ui-sortable *)", function(e) {
            $(this).find(".WikispacesNavbarToggle:visible").click();
        });
        $navbar.on("click", ".WikispacesNavbarToggle.WikispacesNavbarPlus", makeToggleEntryFunc(false));
        $navbar.on("click", ".WikispacesNavbarToggle.WikispacesNavbarMinus", makeToggleEntryFunc(true));
        $navbar.on("click", "a.WikispacesNavbarSeeMore", function(e) {
            ws.navbar.seeMore($(this).closest(".WikispacesNavbarEntryItems"));
            e.preventDefault();
        });
        jQuery(document).on("tagUpdate", "form.WikiTagForm", function() {
            ws.navbar.refresh(true);
        });
        $(".WikispacesCustomNavEdit").on("click.navEdit", ws.common.makeLinkClickFunction(clickEdit));
        $navbar.on("click", ".WikispacesNavbarEditDone", function(e) {
            clickDone();
            e.preventDefault();
        });
        $navbar.on("click", ".WikispacesNavbarRemoveEntry", function(e) {
            removeElem($(this).closest(".WikispacesNavbarEntry"));
            e.stopPropagation();
        });
        $navbar.on("click", ".WikispacesNavbarSortableEntry .ui-sortable a", function(e) {
            e.preventDefault();
        });
        $navbar.on("submit", ".WikispacesNavbarShowAllPagesForm", function(e) {
            submitShowAll($(this));
            e.preventDefault();
        });
        $navbar.on("submit", ".WikispacesNavbarNewTagNavbarForm", function(e) {
            ws.navbar.addTag();
            e.preventDefault();
        });
    });
    function clickEdit() {
        ws.navbar.setEditMode(true);
        var $edit = $(this);
        $edit.data("edittext", $edit.text());
        var editText = $edit.data("editpagetext");
        if (!editText) editText = "";
        $edit.text(editText);
        $(".WikispacesCustomNavEdit").off(".navEdit");
    }
    function clickDone() {
        ws.navbar.setEditMode(false);
        $(".WikispacesCustomNavEdit").each(function() {
            var $edit = $(this);
            $edit.text($edit.data("edittext"));
            $edit.on("click.navEdit", ws.common.makeLinkClickFunction(clickEdit));
        });
    }
    function setExpandedFromCookie(elem) {
        $(elem).find(".WikispacesNavbarEntry").not("#WikispacesNavbarOptions").each(function() {
            var $entry = $(this);
            if (Cookie.get($entry.attr("id"))) $entry.addClass("WikispacesNavbarEntryCollapsed"); else $entry.removeClass("WikispacesNavbarEntryCollapsed");
        });
    }
    function makeToggleEntryFunc(collapse) {
        return function(e) {
            var $entry = $(this).closest(".WikispacesNavbarEntry");
            var slideType = collapse ? "slideUp" : "slideDown";
            Cookie.set($entry.attr("id"), collapse, 365);
            e.stopPropagation();
            return $entry.find(".WikispacesNavbarEntryItems")[slideType]("fast").promise().done(function() {
                $entry.toggleClass("WikispacesNavbarEntryCollapsed", collapse);
            });
        };
    }
    function hideIfEmpty(entry) {
        entry.toggle(!!entry.find("li").length);
    }
    function submitShowAll(elem) {
        var $form = $(elem);
        $form.find(".WikispacesNavbarShowAllPages").prop("disabled", true);
        return ws.common.ajax({
            "form": $form
        }).then(function() {
            return ws.navbar.refresh(true);
        }).always(function() {
            $form.find(".WikispacesNavbarShowAllPages").prop("disabled", false);
        });
    }
    function removeElem(elem) {
        elem.addClass("WikispacesNavbarEntryWorking");
        var id = elem.data("entryid");
        var $navbar = elem.closest(".WikispacesNavbar");
        var navbarUrl = $navbar.data("navbarurl");
        return ws.common.ajax({
            "url": navbarUrl + "/update/" + id,
            "data": {
                "status": "D"
            }
        }).done(function() {
            elem.hide();
            if (!$navbar.find("#WikispacesNavbarAllPagesEntry").is(":visible")) $navbar.find(".WikispacesNavbarShowAllPages").removeClass("hidden");
        }).always(function() {
            elem.removeClass("WikispacesNavbarEntryWorking");
        });
    }
    function reorderTags(elem) {
        var navbarUrl = elem.closest(".WikispacesNavbar").data("navbarurl");
        var tags = [];
        elem.find(".WikispacesNavbarEntry:visible").addClass("WikispacesNavbarEntryWorking").each(function(index) {
            tags.push($(this).data("entryid"));
        });
        return ws.common.ajax({
            "url": navbarUrl + "/tagreorder",
            "data": {
                "tags[]": tags
            }
        }).fail(function() {
            elem.sortable("cancel");
        }).always(function() {
            elem.find(".WikispacesNavbarEntry").removeClass("WikispacesNavbarEntryWorking");
        });
    }
    function reorderPages(elem) {
        var navbarUrl = elem.closest(".WikispacesNavbar").data("navbarurl");
        var entryId = elem.closest(".WikispacesNavbarEntry").addClass("WikispacesNavbarEntryWorking").data("entryid");
        var pages = [];
        elem.find("li a").each(function() {
            pages.push($(this).data("uniqid"));
        });
        return ws.common.ajax({
            "url": navbarUrl + "/pagereorder/" + entryId,
            "data": {
                "pages[]": pages
            }
        }).fail(function() {
            elem.sortable("cancel");
        }).always(function() {
            elem.closest(".WikispacesNavbarEntry").removeClass("WikispacesNavbarEntryWorking");
        });
    }
    function setSortable(enable) {
        var $navbar = $(".WikispacesNavbar");
        if (!$navbar.length) return;
        var $tags = $navbar.find("div#WikispacesNavbarTags");
        var $pages = $navbar.find(".WikispacesNavbarSortableEntry ol");
        if (!enable) {
            if ($tags.is(".ui-sortable")) $tags.sortable("destroy");
            if ($pages.is(".ui-sortable")) $pages.sortable("destroy");
            return;
        }
        $tags.sortable({
            "handle": ".WikispacesNavbarEntryHeader",
            "tolerance": "pointer",
            "containment": "parent",
            "update": function() {
                reorderTags($(this));
            }
        });
        $pages.sortable({
            "tolerance": "pointer",
            "containment": "parent",
            "update": function() {
                reorderPages($(this));
            }
        });
    }
    function setupTagForm(enable) {
        var $navbar = $(".WikispacesNavbar");
        if (!$navbar.length) return;
        var $tagInput = $navbar.find(".WikispacesNavbarNewTagNavbarForm").find("input[name=tagName]");
        var hasSelect2 = !!$tagInput.data("select2");
        if (enable == hasSelect2) return;
        if (!hasSelect2) ws.select2.tag($tagInput, {
            "width": false,
            "containerCss": {
                "display": "inline-block",
                "float": "none"
            }
        });
        if (!enable) $tagInput.select2("close");
    }
    return {
        "seeMore": function(elem, num) {
            var entry = elem.closest(".WikispacesNavbarEntry");
            var entry_id = entry.data("entryid");
            var d = $.Deferred();
            var params = {
                "num": num
            };
            if (!num) {
                params.num = elem.find("span.WikispacesNavbarNum").text();
                params.seeMore = 1;
            }
            entry.addClass("WikispacesNavbarEntryWorking");
            var navbarUrl = elem.closest(".WikispacesNavbar").data("navbarurl");
            elem.load(navbarUrl + "/fetch/" + entry_id, params, function(responseText, textStatus) {
                if ("error" === textStatus) d.reject(entry); else d.resolve(entry);
            });
            d.done(function(entry) {
                setSortable($(".WikispacesNavbar").is(".WikispacesNavbarEdit"));
                hideIfEmpty(entry);
            }).always(function(entry) {
                entry.removeClass("WikispacesNavbarEntryWorking");
            });
            return d.promise();
        },
        "addTag": function(tagName) {
            var form = $(".WikispacesNavbarNewTagNavbarForm");
            if (!form.length) return $.when();
            if (tagName) form.find("input[name=tagName]").val(tagName);
            if ("" === form.find("input[name=tagName]").val()) return $.when();
            form.find("button").prop("disabled", true);
            var promise = ws.common.ajax({
                "form": form
            });
            form.find("input[name=tagName]").prop("disabled", true).val("");
            return promise.then(function() {
                return ws.navbar.refresh(true);
            }).always(function() {
                form.find("button").prop("disabled", false);
                form.find("input[name=tagName]").removeAttr("disabled").val("");
            });
        },
        "refresh": function(force) {
            var $navbar = null;
            if (force) $navbar = $(".WikispacesNavbar"); else $navbar = $(".WikispacesNavbar:not(.WikispacesNavbarEdit)");
            if (!$navbar.length) return $.when();
            var d = $.Deferred();
            var navbarUrl = $navbar.data("navbarurl");
            var entryNums = [];
            $navbar.find(".WikispacesNavbarEntry:visible").each(function() {
                var entry = $(this);
                var num = entry.find("span.WikispacesNavbarNum").text();
                entryNums.push(entry.data("entryid") + ":" + num);
            });
            var div = $("<div>").hide().load(navbarUrl + "/fetch/full", {
                "entryNums[]": entryNums
            }, function(responseText, textStatus) {
                if ("error" === textStatus) d.reject(div); else d.resolve(div);
            });
            d.done(function(div) {
                var newNavbar = div.find(".WikispacesNavbar");
                hideIfEmpty(newNavbar.find("#WikispacesNavbarFavoritesEntry"));
                setExpandedFromCookie(newNavbar);
                var html = newNavbar.html();
                $navbar.html(html);
                setSortable($(".WikispacesNavbar").is(".WikispacesNavbarEdit"));
                if (force) setupTagForm(true);
            }).always(function(div) {
                div.remove();
            });
            return d.promise();
        },
        "setEditMode": function(enable) {
            if ("undefined" == typeof enable) enable = true;
            var refresh = false;
            if (!enable && $(".WikispacesNavbar.WikispacesNavbarEdit").length) refresh = true;
            $(".WikispacesNavbar").toggleClass("WikispacesNavbarEdit", enable);
            setupTagForm(enable);
            if (refresh) return ws.navbar.refresh();
            setSortable(enable);
            return $.when();
        }
    };
}(jQuery);

ws.namespace("ws.navigation");

ws.navigation = function($, undefined) {
    function init(navEl) {
        var NavigationApp = Backbone.View.extend({
            "events": {
                "mouseover": "tryExpand",
                "click .headerButton": "clickButton"
            },
            "panels": [],
            "initialize": function(options) {
                var self = this;
                this.options = options || {};
                this.options.panels = [];
                $(window).scroll(function() {
                    var anyOpen = _.filter(self.options.panels, function(panel) {
                        return panel.options.displayed;
                    }).length > 0;
                    if ($(document).scrollTop() > 15 && !anyOpen) self.collapse();
                });
                $(document).on("message.mail", function(event, operation, count) {
                    if ("increment" == operation || "decrement" == operation) self.$el.find("#NoticeButton").text(count);
                });
            },
            "render": function() {
                var noticePanel = new NoticePanel({
                    "collection": new NoticeList(),
                    "viewClass": NoticeView,
                    "name": "Notice",
                    "parentApp": this,
                    "id": "NoticeTool"
                });
                this.options.panels.push(noticePanel);
                var wikiPanel = new WikiPanel({
                    "collection": new WikiList(),
                    "viewClass": WikiView,
                    "name": "Wiki",
                    "parentApp": this,
                    "id": "WikiTool"
                });
                this.options.panels.push(wikiPanel);
                if (!wikispaces_isMobileSite) {
                    var helpPanel = new HelpPanel({
                        "collection": new HelpList(),
                        "viewClass": HelpView,
                        "name": "Help",
                        "parentApp": this,
                        "id": "HelpTool"
                    });
                    this.options.panels.push(helpPanel);
                }
                var view = this;
                _.each(this.options.panels, function(panel) {
                    view.$el.append(panel.render().el);
                });
                return this;
            },
            "clickButton": function(e) {
                var clickPanel = $(e.target).data("panel");
                _.each(this.options.panels, function(panel) {
                    if (panel.options.name != clickPanel) panel.hide();
                });
                _.each(this.options.panels, function(panel) {
                    if (panel.options.name == clickPanel) if (panel.options.displayed) panel.hide(); else panel.show();
                });
                e.preventDefault();
            },
            "highlightButton": function(panel) {
                this.$el.find(".headerButton").closest(".WikiInternalHeaderNavMenuArea").removeClass("active");
                this.$el.find('.headerButton[data-panel="' + panel + '"]').closest(".WikiInternalHeaderNavMenuArea").addClass("active");
            },
            "tryExpand": function() {
                if (!this.options.justHidden) this.expand();
            },
            "expand": function() {
                if (!this.options.isHidden) return $.when();
                this.options.isHidden = false;
                return this.$el.animate({
                    "right": 0
                }).promise();
            },
            "collapse": function() {
                if (this.options.isHidden) return;
                if (wikispaces_isMain && "www" == wikispaces_spaceName && !wikispaces_username) return;
                _.each(this.options.panels, function(panel) {
                    panel.hide();
                });
                if (this.$el.is(".noHide")) return;
                if (this.$el.find(".slideMarker").length) {
                    var slideSize = $(window).width() - this.$el.find(".slideMarker").offset().left;
                    this.$el.animate({
                        "right": -slideSize
                    });
                    this.options.isHidden = true;
                    this.options.justHidden = true;
                    var me = this;
                    _.delay(function() {
                        me.options.justHidden = false;
                    }, 500);
                }
            },
            "show": function(panelName) {
                this.$el.find('.headerButton[data-panel="' + panelName + '"]').click();
            }
        });
        var app = new NavigationApp({
            "el": navEl
        });
        var Notice = Backbone.Model.extend({
            "defaults": {}
        });
        var NoticeList = Backbone.Collection.extend({
            "initialize": function() {
                this.loadedPromise = null;
                var self = this;
                $(document).on("message.mail", function(event, operation, count) {
                    if ("increment" == operation || "decrement" == operation) self.fetch();
                });
            },
            "model": Notice,
            "url": "/site/notice/" + encodeURIComponent(wikispaces_username)
        });
        var WikiList = Backbone.Collection.extend({
            "model": Notice,
            "url": "/site/wikilist/" + encodeURIComponent(wikispaces_username),
            "initialize": function() {
                this.loadedPromise = null;
            }
        });
        var HelpList = Backbone.Collection.extend({
            "model": Notice,
            "url": "/site/wikitour",
            "initialize": function() {
                this.loadedPromise = null;
            }
        });
        var Panel = Backbone.View.extend({
            "tagName": "div",
            "className": "headerPanel",
            "parentApp": null,
            "initialize": function(options) {
                var view = this;
                this.options = options || {};
                this.options.displayed = false;
                $(window).resize(function() {
                    if (view.options.displayed) view.updateHeight();
                });
                this.collection.on("add", this.addOne, this);
                this.collection.on("reset", this.addAll, this);
            },
            "render": function() {
                this.$el.hide();
                if (0 === this.$el.closest("body").length) {
                    this.$el.append('<div id="' + this.options.name + 'ToolList"><ol class="dropdown-menu dropdown-menu-right"></ol></div>');
                    this.$el.find(".dropdown-menu").show();
                }
                return this;
            },
            "addOne": function(notice) {
                var view = new this.options.viewClass({
                    "model": notice
                });
                this.getPanelArea().append(view.render().el);
            },
            "addAll": function() {
                this.getPanelArea().empty();
                var func = _.bind(this.addOne, this);
                this.collection.each(func);
            },
            "getPanelArea": function() {
                return this.$el.find("#" + this.id + "List ol");
            },
            "updateHeight": function() {
                var $navTool = $(this.id);
                if ($navTool.length) {
                    var height = $(window).height() - ($navTool.offset().top - $(window).scrollTop());
                    $navTool.height(height);
                }
            },
            "show": function() {
                var view = this;
                var promise = this.collection.loadedPromise;
                if (!promise) {
                    promise = this.collection.fetch();
                    this.collection.loadedPromise = promise;
                }
                var existingAnimation = this.options.parentApp.options.animationDone;
                var newAnimation = $.Deferred();
                this.options.parentApp.options.animationDone = newAnimation.promise();
                $.when(promise, existingAnimation).pipe(function() {
                    return view.options.parentApp.expand();
                }).pipe(function() {
                    view.options.parentApp.highlightButton(view.options.name);
                    return view.$el.slideDown(0).promise();
                }).done(function() {
                    view.$el.css("max-height", view.$el.get(0).scrollHeight);
                    view.$el.css("width", $(".WikiInternalHeaderNavMenu")[0].scrollWidth);
                    view.updateHeight();
                    $(document).trigger("showPanel", [ view.options.name ]);
                    newAnimation.resolve();
                });
                this.options.displayed = true;
                return this;
            },
            "hide": function() {
                var view = this;
                var existingAnimation = this.options.parentApp.options.animationDone;
                var newAnimation = $.Deferred();
                this.options.parentApp.options.animationDone = newAnimation.promise();
                $.when(existingAnimation).pipe(function() {
                    return view.$el.slideUp(0).promise();
                }).done(function() {
                    view.options.parentApp.highlightButton("");
                    newAnimation.resolve();
                });
                this.options.displayed = false;
            }
        });
        var NoticePanel = Panel.extend({
            "render": function() {
                var ret = Panel.prototype.render.apply(this, arguments);
                var domain = "www." + ws.context.instance.url;
                this.$el.find("#NoticeToolList ol").append('<li class="js-last text-center"><a href="//' + domain + "/mail/list/" + ws.context.user.username + '?folder=Inbox">View All Messages</a></li>');
                return ret;
            },
            "addOne": function(notice) {
                var insertBefore = this.getPanelArea().find("li.js-last");
                var view = new this.options.viewClass({
                    "model": notice
                });
                insertBefore.before(view.render().$el);
            },
            "addAll": function() {
                this.getPanelArea().find("li.mailItem").remove();
                var func = _.bind(this.addOne, this);
                this.collection.each(func);
            }
        });
        var WikiPanel = Panel.extend({});
        var HelpPanel = Panel.extend({
            "render": function() {
                var ret = Panel.prototype.render.apply(this, arguments);
                var domain = "help." + ws.context.instance.url;
                this.$el.find("#HelpToolList ol").append('<li class="js-last divider hidden"></li><li><a class="js-help-trigger" rel="nofollow" href="//' + domain + '/">Help Wiki</a></li>');
                return ret;
            },
            "addOne": function(notice) {
                this.getPanelArea().find("li.divider").show();
                var insertBefore = this.getPanelArea().find("li.js-last");
                var view = new this.options.viewClass({
                    "model": notice
                });
                insertBefore.before(view.render().$el);
                _.each(notice.get("stages"), function(stage, stage_name) {
                    stage.id = stage_name;
                    stage.tour = notice;
                    view = new HelpStageView({
                        "model": stage
                    });
                    insertBefore.before(view.render().$el);
                });
            },
            "addAll": function() {
                this.getPanelArea().find("li.wikiTour").remove();
                var func = _.bind(this.addOne, this);
                this.collection.each(func);
            }
        });
        var NoticeView = Backbone.View.extend({
            "tagName": "li",
            "className": "mailItem",
            "events": {
                "mouseenter": "highlightOn",
                "mouseleave": "highlightOff",
                "click": "clickItem"
            },
            "render": function() {
                if ("R" == this.model.get("status")) this.$el.removeClass("unread").addClass("read"); else this.$el.addClass("unread").removeClass("read");
                var date = new Date(1e3 * this.model.get("InternalMail").date_created);
                var user = this.model.get("InternalMail").UserCreated;
                var userImage = ws.user.pic(user, {
                    "imageSize": "small"
                });
                this.$el.html('<a href="#"><span class="subject">' + this.model.get("InternalMail").subject + "</span><br/>" + userImage + " " + user.username + " " + date.toDateString() + "</a>");
                return this;
            },
            "highlightOn": function() {
                this.$el.addClass("highlight");
            },
            "highlightOff": function() {
                this.$el.removeClass("highlight");
            },
            "clickItem": function() {
                window.location.href = this.model.get("url");
            }
        });
        var WikiView = Backbone.View.extend({
            "tagName": "li",
            "className": "wikiItem",
            "events": {
                "mousenter": "highlightOn",
                "mouseleave": "highlightOff",
                "click": "clickItem"
            },
            "render": function() {
                var escapedText = ws.common.escapeHtml(this.model.get("text"));
                this.$el.html('<a href="' + this.model.get("url") + '"><img src="' + (this.model.get("image_type") ? this.model.get("image") : "/i/logo-20.png") + '" width="20" height="20" alt="' + escapedText + '">' + escapedText + "</a>");
                return this;
            },
            "highlightOn": function() {
                this.$el.addClass("highlight");
            },
            "highlightOff": function() {
                this.$el.removeClass("highlight");
            },
            "clickItem": function() {
                window.location.href = this.model.get("url");
            }
        });
        var HelpView = Backbone.View.extend({
            "tagName": "li",
            "className": "wikiTour",
            "events": {
                "click": "clickItem"
            },
            "render": function() {
                var tour = this.model;
                this.$el.html('<a href="#" data-tour-id="' + tour.get("id") + '-intro-1">' + tour.get("name") + "</a>");
                return this;
            },
            "clickItem": function(event) {
                event.preventDefault();
                app.collapse();
                $(".frameDialog").modal("hide");
                var guider_id = $(event.target).data("tour-id");
                guiders.loadGuiders().done(function() {
                    guiders.jumpToStep(guider_id);
                });
            }
        });
        var HelpStageView = HelpView.extend({
            "render": function() {
                var stage = this.model;
                this.$el.html('<a href="#" data-tour-id="' + stage.tour.get("id") + "-" + stage.id + '-1"> * ' + stage.name + "</a>");
                return this;
            }
        });
        return app;
    }
    $(document).ready(function() {
        $(".WikiInternalHeaderNav").each(function() {
            var app = init(this);
            $(this).data("navApp", app);
            app.render();
        });
    });
    function findVisibleHeaderNavApp() {
        return $(".WikiInternalHeaderNav:visible").data("navApp");
    }
    return {
        "show": function(panel) {
            return findVisibleHeaderNavApp().show(panel);
        },
        "expand": function() {
            return findVisibleHeaderNavApp().expand();
        },
        "collapse": function() {
            return findVisibleHeaderNavApp().collapse();
        }
    };
}(jQuery);

ws.namespace("ws.pricing");

ws.pricing = function($, undefined) {
    var USER_BUCKET_SIZE = 100;
    var MAX_USERS = 1e6;
    function priceCheck(elem, preview, validateCallback, returnCallback) {
        if ($(elem).data("timeout")) clearTimeout($(elem).data("timeout"));
        var handle = setTimeout(function() {
            priceCheckActual(elem, preview, validateCallback, returnCallback);
        }, 200);
        $(elem).data("timeout", handle);
    }
    function priceCheckActual(elem, preview, validateCallback, returnCallback) {
        var $elem = $(elem);
        var plan = $elem.data("plan");
        var version = $elem.data("version");
        var type = $elem.data("type");
        var users = ws.pricing.normalizeUsers($elem.val());
        if ("function" == typeof validateCallback) {
            var valid = validateCallback.call(elem, users);
            if (!valid) return;
        }
        var url = "/site/previewprice/" + encodeURIComponent(plan) + "/" + encodeURIComponent(version) + encodeURIComponent(type) + encodeURIComponent(users);
        ws.common.ajax({
            "url": url,
            "queueName": "pricing." + $elem.attr("name")
        }).done(function(data) {
            var price = addCommas(data.year);
            preview.html(price);
            if ("function" == typeof returnCallback) returnCallback.call(elem, users, data);
        });
    }
    function addCommas(number) {
        number += "";
        var x = number.split(".");
        var whole = x[0];
        var decimal = x.length > 1 ? "." + x[1] : "";
        var regex = /(\d+)(\d{3})/;
        while (regex.test(whole)) whole = whole.replace(regex, "$1" + "," + "$2");
        return whole + decimal;
    }
    return {
        "normalizeUsers": function(users) {
            users = users.replace(/,/, "");
            users = users.replace(/^0+/, "");
            users = parseInt(users, 10);
            if (!users || users <= 0) users = 1;
            users = Math.ceil(users / USER_BUCKET_SIZE) * USER_BUCKET_SIZE;
            return users;
        },
        "attachPriceCheck": function(elem, preview, validateCallback, returnCallback) {
            $(elem).change(function() {
                priceCheck(this, preview, validateCallback, returnCallback);
            }).keyup(function() {
                priceCheck(this, preview, validateCallback, returnCallback);
            });
            priceCheck(elem, preview, validateCallback, returnCallback);
        },
        "validateUsers": function(users, options, notice) {
            var addError = function(message) {
                if (true === notice) alert(message); else if (false === notice) ; else notice.message = message;
            };
            if (!users) {
                addError("Please enter a user number.");
                return false;
            }
            if (users < options.minUsers) {
                addError("The minimum number of users is " + options.minUsers + ".");
                return false;
            }
            if (users > MAX_USERS) {
                addError("The maximum number of users is ".MAX_USERS + ".");
                return false;
            }
            if (users < options.currentUsers) {
                var currentMinUsers = ws.pricing.normalizeUsers(options.currentUsers);
                addError("You currently have " + options.currentUsers + " active users. Please set your subscription to " + currentMinUsers + " users or more.");
                return false;
            }
            return true;
        }
    };
}(jQuery);

ws.namespace("ws.select2");

ws.select2 = function($, undefined) {
    $(document).ready(function() {
        $.fn.select2.defaults.dropdownCssClass = "WikispacesContent WikispacesBs3";
        window.Select2["class"].multi.prototype.showSearch = $.noop;
        ws.select2.instance($(".autocompleteInstance"));
        ws.select2.wiki($(".autocompleteWiki"));
        ws.select2.user($(".autocompleteUser"));
        ws.select2.tag($(".autocompleteTag"));
    });
    function handleResults(data, page) {
        var results = [];
        $(data.result).each(function() {
            var id = this.shift();
            var text = this.shift();
            results.push({
                "id": id,
                "text": text,
                "data": this
            });
        });
        return {
            "results": results,
            "more": data.more
        };
    }
    function identityInitSelection(element, callback) {
        var data = {
            "id": $(element).val(),
            "text": $(element).val()
        };
        callback(data);
    }
    function dataInitSelection(element, callback) {
        var data = {
            "id": $(element).val(),
            "text": $(element).data("select2-text")
        };
        callback(data);
    }
    function formatSimpleNotEscaped(obj) {
        if (!obj || !obj.text) return "";
        return obj.text;
    }
    function formatSimple(obj) {
        return ws.common.escapeHtml(formatSimpleNotEscaped(obj));
    }
    function formatId(obj) {
        return obj.id;
    }
    function formatTag(obj) {
        return ws.common.escapeHtml(obj.id + " (" + obj.count + ")");
    }
    function formatInstance(obj) {
        return ws.common.escapeHtml(obj.text) + ' <br/><small class="text-muted">' + ws.common.escapeHtml(obj.data[0]) + "</small>";
    }
    function initTagSelection(elem, callback) {
        callback(_.map($(elem).val().split(","), function(tag) {
            return {
                "id": tag
            };
        }));
    }
    function createTagSearchChoice(term, results) {
        var lowerTerm = term.toLowerCase();
        var data = this.data();
        if (data && data.length) results = results.concat(data);
        var $matchingdata = $(results).filter(function() {
            return 0 === this.id.toLowerCase().localeCompare(lowerTerm);
        });
        if (0 !== $matchingdata.length) return null;
        return {
            "id": term,
            "count": 0
        };
    }
    function onOpen() {
        $("body").trigger("resize.dialog");
    }
    function tagDefaults() {
        var pageLimit = 10;
        return {
            "placeholder": "Choose a tag",
            "createSearchChoice": createTagSearchChoice,
            "ajax": {
                "transport": ws.common.ajax,
                "url": ws.common.pathFor("tag", "listjson", "all"),
                "quietMillis": 200,
                "data": function(term, page) {
                    return {
                        "q": term,
                        "page": page,
                        "pageLimit": 10
                    };
                },
                "results": _.identity
            },
            "pageLimit": pageLimit,
            "formatSelection": formatId,
            "formatResult": formatTag
        };
    }
    return {
        "formatObject": function(obj) {
            if (obj.title) return ws.common.escapeHtml(obj.title); else if (obj.iconUrl) return "<img src='" + ws.common.escapeHtml(obj.iconUrl) + "' width='16' height='16' style='text-align: center'/> " + ws.common.escapeHtml(obj.text); else if (obj.text) return "<img src='/i/mime/32/text/plain.png' width='16' height='16' style='text-align: center'/> " + ws.common.escapeHtml(obj.text); else return "";
        },
        "instance": function(input) {
            $(input).select2({
                "placeholder": "Find a site",
                "ajax": {
                    "transport": ws.common.ajax,
                    "url": "/int/autocompleteinstance",
                    "quietMillis": 200,
                    "data": function(term, page) {
                        return {
                            "q": term,
                            "p": page,
                            "n": 10
                        };
                    },
                    "results": handleResults
                },
                "formatSelection": formatSimpleNotEscaped,
                "formatResult": formatInstance,
                "initSelection": dataInitSelection
            }).on("select2-open", onOpen).on("select2-loaded", onOpen);
        },
        "user": function(input) {
            $(input).select2({
                "placeholder": "Find a user",
                "minimumInputLength": 3,
                "ajax": {
                    "transport": ws.common.ajax,
                    "url": "/user/autocomplete",
                    "quietMillis": 200,
                    "data": function(term, page) {
                        return {
                            "q": term,
                            "p": page,
                            "n": 10
                        };
                    },
                    "results": handleResults
                },
                "formatSelection": formatSimpleNotEscaped,
                "formatResult": formatSimple,
                "initSelection": identityInitSelection
            }).on("select2-open", onOpen).on("select2-loaded", onOpen);
        },
        "wikiAndObject": function(wikiInput, pageInput, type) {
            ws.select2.wiki(wikiInput);
            ws.select2.object(pageInput, wikiInput, type);
        },
        "wiki": function(wikiInput) {
            var params = {
                "a": ("U" == ws.context.user.status) + 0
            };
            $(wikiInput).each(function() {
                var $this = $(this);
                var data = $this.data("autocomplete-params");
                if (!data) data = {};
                var myParams = $.extend({}, params, data);
                $this.select2({
                    "placeholder": "Find a wiki",
                    "ajax": {
                        "transport": ws.common.ajax,
                        "url": "/wiki/autocomplete",
                        "quietMillis": 200,
                        "data": function(term, page) {
                            return $.extend({}, myParams, {
                                "q": term,
                                "p": page,
                                "n": 10
                            });
                        },
                        "results": handleResults
                    },
                    "formatSelection": formatSimple,
                    "formatResult": formatSimple,
                    "initSelection": dataInitSelection
                }).on("select2-open", onOpen).on("select2-loaded", onOpen);
            });
        },
        "tagFilterDefaults": function() {
            var defaults = tagDefaults();
            return {
                "placeholder": "Filter by tag",
                "multiple": true,
                "maximumSelectionSize": 5,
                "maximumInputLength": 255,
                "initSelection": initTagSelection,
                "createSearchChoice": false,
                "ajax": {
                    "data": function(term, page) {
                        return $.extend(defaults.ajax.data.call(this, term, page), {
                            "tag": $(this).select2("val").join()
                        });
                    }
                }
            };
        },
        "tagEditDefaults": function() {
            var defaults = tagDefaults();
            return {
                "maximumSelectionSize": 0,
                "minimumInputLength": 1,
                "tokenSeparators": [ ",", "\n" ],
                "createSearchChoice": createTagSearchChoice,
                "placeholder": "Add tags",
                "formatInputTooShort": function() {
                    return "Type a tag name.  Press comma or enter to add another.";
                },
                "ajax": {
                    "data": function(term, page) {
                        return $.extend(defaults.ajax.data.call(this, term, page), {
                            "pageLimit": 20,
                            "exclude": $(this).select2("val").join()
                        });
                    }
                }
            };
        },
        "tag": function(tagInput, options) {
            options = $.extend(true, {}, tagDefaults(), options || {});
            return $(tagInput).each(function() {
                $(this).select2($.extend(true, {}, options));
            });
        },
        "tagFilter": function(tagInput, options) {
            return this.tag(tagInput, $.extend(true, {}, ws.select2.tagFilterDefaults(), options || {}));
        },
        "tagEdit": function(tagInput, options) {
            return this.tagFilter(tagInput, $.extend(true, {}, ws.select2.tagEditDefaults(), options || {}));
        },
        "object": function(pageInput, wikiInput, type) {
            var placeholder = "Find a page or file";
            switch (type) {
              case "P":
                placeholder = "Find a page";
                break;

              case "F":
                placeholder = "Find a file";
                break;

              case "G":
                placeholder = "Find a Google Doc";
            }
            $(pageInput).select2({
                "placeholder": placeholder,
                "createSearchChoice": function(term) {
                    term = term.replace(/,/, "");
                    var prefix = "page:";
                    if ("P" == type) prefix = "";
                    return {
                        "id": prefix + term,
                        "text": term
                    };
                },
                "ajax": {
                    "transport": ws.common.ajax,
                    "url": ws.common.pathFor("space", "autocompletepage"),
                    "quietMillis": 200,
                    "data": function(term, page) {
                        var wiki = wikispaces_wikiName;
                        if (wikiInput) wiki = $(wikiInput).val();
                        return {
                            "json": 1,
                            "w": wiki,
                            "q": term,
                            "p": page,
                            "n": 10,
                            "type": type
                        };
                    },
                    "results": function(data, page) {
                        var pages = [];
                        $.each(data, function(index, val) {
                            var prefix = val.type + ":";
                            if ("P" == type) prefix = "";
                            val.id = prefix + val.name;
                            pages.push(val);
                        });
                        var more = 10 == pages.length;
                        return {
                            "results": pages,
                            "more": more
                        };
                    }
                },
                "formatSelection": formatSimpleNotEscaped,
                "formatResult": ws.select2.formatObject,
                "initSelection": identityInitSelection
            }).on("select2-open", onOpen).on("select2-loaded", onOpen);
        }
    };
}(jQuery);

ws.namespace("ws.session");

ws.session = function($, undefined) {
    var me = this;
    var sessionReloadAttempt = 0;
    var sessionReloadHandle = null;
    return {
        "reloadSessionSuccess": function() {},
        "reloadSession": function(callback, callbackTime, failureCallback) {
            var failFunc = function() {
                if ("function" == typeof failureCallback) failureCallback.apply(me);
            };
            var d = $.Deferred();
            d.done(function(data) {
                if (data && data.reloadAt > 0) ws.session.reloadSessionAt(data.reloadAt);
                sessionReloadAttempt = 0;
                if ("function" == typeof callback) callback.apply(me);
            }).fail(failFunc);
            if (sessionReloadAttempt > 4) return d.reject().promise();
            sessionReloadAttempt++;
            ws.common.ajax({
                "url": "/space/sessionreload"
            }).done(function(data) {
                d.resolve(data);
            }).fail(function() {
                ws.session.reloadSession(callback, callbackTime, failureCallback).done(function(data) {
                    d.resolve(data);
                }).fail(function() {
                    d.reject();
                });
            });
            return d.promise();
        },
        "reloadSessionAt": function(time) {
            if ("number" === typeof sessionReloadHandle) clearTimeout(sessionReloadHandle);
            var now = Math.floor(new Date().getTime() / 1e3);
            var when = time - now;
            if (when < 1) when = 1;
            var session = this;
            sessionReloadHandle = setTimeout(function() {
                ws.session.reloadSession();
            }, 1e3 * when);
        }
    };
}(jQuery);

!function($, undefined) {
    function changeStar(method) {
        $(".ws-star i:visible").addClass("fa-spin");
        ws.common.ajax({
            "url": ws.common.pathFor("star", method, ws.context.path.page),
            "data": {
                "type": ws.context.path.object
            }
        }).done(function(data) {
            if ("added" == data) $(".ws-star").removeClass("ws-star-no").addClass("ws-star-yes"); else if ("removed" == data) $(".ws-star").removeClass("ws-star-yes").addClass("ws-star-no");
        }).always(function() {
            $(".ws-star i").removeClass("fa-spin");
        });
    }
    $(document).ready(function() {
        $(".ws-star .ws-star-yes").click(function() {
            changeStar("delete");
        });
        $(".ws-star .ws-star-no").click(function() {
            changeStar("create");
        });
    });
}(jQuery);

ws.namespace("ws.tags");

ws.tags = function($, undefined) {
    var openCounter = 0;
    $(document).ready(function() {
        $(document).on("click", ".WikiTagsEditLink", function(event) {
            ws.tags.showInput(this);
            event.preventDefault();
            return false;
        });
        $(document).on("click", ".WikiTagFormCancel", function(event) {
            hideInput(this);
            event.preventDefault();
            return false;
        });
    });
    function updateTags(form) {
        form = $(form);
        form.find(".WikiTagsEditLink").hide();
        var tags = form.find(".WikiTagInput").select2("val");
        return ws.common.ajax({
            "url": form.find('input[name="url"]').val(),
            "data": {
                "go": true,
                "tags[]": tags,
                "object": form.find('input[name="type"]').val()
            }
        }).done(function() {
            var tagUrl = ws.common.pathFor("space", "content");
            form.find(".WikiTagList ul").empty();
            for (var i = 0; i < tags.length; i++) {
                var a = $("<a>").attr("rel", "tag").attr("href", ws.common.addUriParams(tagUrl, [ [ "tag", tags[i] ] ])).text(tags[i]);
                var li = $("<li>").addClass("WikiTag").append(a);
                form.find(".WikiTagList ul").append(li).append(" ");
            }
            form.trigger("tagUpdate");
        }).fail(function() {
            alert("Error: Could not update tags");
        }).always(function() {
            form.find(".WikiTagsEditLink").show();
        });
    }
    function hideInput(element) {
        $(element).closest(".WikiTagForm").removeClass("WikiTagFormEdit");
        openCounter--;
    }
    function save(form) {
        updateTags(form);
        hideInput(form);
    }
    function checkForOpenInputs() {
        if (openCounter > 0) return "You have not yet saved your tag changes.";
    }
    return {
        "showInput": function(element) {
            window.onbeforeunload = checkForOpenInputs;
            var form = $(element).closest(".WikiTagForm");
            var input = form.find(".WikiTagInput");
            if (!input.data("select2")) {
                ws.select2.tagEdit(input);
                form.submit(function(event) {
                    save(this);
                    event.preventDefault();
                    return false;
                });
            }
            form.addClass("WikiTagFormEdit");
            input.select2("open");
            openCounter++;
        },
        "promptForOpenInputs": function(e) {
            var message = checkForOpenInputs();
            if (!message) return true;
            var res = confirm("Are you sure you want to navigate away from this page?" + "\n\n" + message + "\n\n" + "Press OK to continue, or Cancel to stay on the current page.");
            if (!res) {
                e.stopImmediatePropagation();
                e.preventDefault();
                return false;
            }
            openCounter = 0;
            return true;
        }
    };
}(jQuery);

ws.namespace("ws.template");

ws.template = function($, undefined) {
    function updateTemplates(spaceId, $templateList) {
        if (!spaceId) spaceId = ws.context.space.id;
        if ("S" == spaceId.substr(0, 1)) spaceId = spaceId.substring(1);
        return ws.common.ajax({
            "url": "/space/templates",
            "method": "GET",
            "data": {
                "spaceId": spaceId
            }
        }).done(function(data) {
            if (!data || !data.templates) return;
            var templates = data.templates;
            if (0 === templates.length) {
                $templateList.closest(".form-group").hide();
                return;
            }
            $templateList.closest(".form-group").show();
            var first = $templateList.find("option").first();
            $templateList.empty();
            $templateList.append(first);
            $.each(data.templates, function(i, template) {
                var option = $("<option>").attr("value", template.name).text(template.displayName);
                if (template.defaultTemplate) option.attr("selected", true);
                $templateList.append(option);
            });
            $("body").trigger("resize.dialog");
        });
    }
    $(document).ready(function() {
        $(".js-template-list").each(function() {
            var $templateList = $(this);
            var $spaceSelector = $($templateList.data("template-space"));
            $spaceSelector.change(function() {
                updateTemplates($(this).val(), $templateList);
            });
            updateTemplates($spaceSelector.val(), $templateList);
        });
    });
}(jQuery);

ws.namespace("ws.user");

ws.user = function($, undefined) {
    return {
        "pic": function(user, params) {
            var url;
            if (!user.date_pic_updated) url = "/i/user_none_"; else url = "//www." + ws.context.instance.url + "/user/pic/" + user.date_pic_updated + "/" + encodeURIComponent(user.username) + "-";
            var photo = '<img src="' + url + 'sm.jpg" width="16" height="16" alt="' + ws.common.escapeHtml(user.username) + '" class="userPicture" />';
            if ("large" == params.imageSize) photo = '<img src="' + url + 'lg.jpg" width="48" height="48" alt="' + ws.common.escapeHtml(user.username) + '" class="userPicture" />';
            return photo;
        },
        "link": function(user, params) {
            if (!params) params = {};
            var linkUrl = "//www." + ws.context.instance.url;
            if (params.adminLink) linkUrl += "/admin/userdetail/"; else linkUrl += "/user/view/";
            linkUrl += encodeURIComponent(user.username);
            var linkOpen = '<a class="userLink' + (params.showMenu ? "" : " userLinkNoMenu") + '" href="' + linkUrl + '" style="outline: none;"' + (params.target ? ' target="' + params.target + '"' : "") + ">";
            var linkClose = "</a>";
            var photo = "";
            if ("none" != params.imageSize) photo = ws.user.pic(user, params);
            if (photo) photo = linkOpen + photo + linkClose + " ";
            var userString = linkOpen + ws.common.escapeHtml(user.username) + linkClose;
            if (params.hideUsername) $userString = "";
            var highlight = false;
            if (params.activity) {
                userString += " " + user.posts + "/" + user.edits;
                if (user.posts || user.edits > 12) highlight = true;
            }
            if (highlight) userString = '<span style="background-color: red;">' + userString + "</span>";
            return photo + userString;
        }
    };
}(jQuery);

ws.namespace("ws.wikitext");

ws.wikitext = function($, undefined) {
    return {
        "highlightIncludeSection": function(button, sectionClassName, hl) {
            $(button).toggleClass("includeEditButton", !hl).toggleClass("includeEditButtonActive", hl);
            $(".includeBody-" + sectionClassName.replace(/%/g, "\\%")).toggleClass("includeBody", !hl).toggleClass("includeBodyActive", hl);
        }
    };
}(jQuery);