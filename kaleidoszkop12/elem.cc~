#include "elem.h"

using namespace std;

Elem::Elem(point a, point b, color col){
  this->a = a;
  this->b = b;
  this->col = col;
}

void Elem::draw(SDL_Surface *screen, int t){
 
  vector<point> points = elem(t);
  if (flag < n){
  //for (int i = 0; i < n; i++){
    thickLineRGBA(screen, a.x, a.y, b.x, b.y, t, col.red, col.green, col.blue, col.alpha);
    //SDL_Flip(screen);
  }
  
  /* eddig elvegzett rajzolasok a kepernyore */
}

Elem Elem::rotate(int u, int v, int delta){
  int degrees = 360;
  point a_;
  int x = this->a.x;
  int y = this->a.y;
  double degrees_to_rads = 2 * M_PI / degrees ;
  int x_=((x-u)*cos(degrees_to_rads * delta)+(y-v)*sin(degrees_to_rads * delta))+u;
  int y_=((x-u)*sin(degrees_to_rads * delta)-(y-v)*cos(degrees_to_rads * delta))+v; 
  a_.x = x_;
  a_.y = y_;
  x = this->b.x;
  y = this->b.y;
  x_=((x-u)*cos(degrees_to_rads * delta)+(y-v)*sin(degrees_to_rads * delta))+u;
  y_=((x-u)*sin(degrees_to_rads * delta)-(y-v)*cos(degrees_to_rads * delta))+v; 
  point b_;
  b_.x = x_;
  b_.y = y_;
  color col_ = this->col;
  Elem el = Elem(a_, b_, col_);
  return el;
}

Elem Elem::mirror_horizontal(int h){
  point a_;
  int x = this->a.x;
  int y = this->a.y;
  int y_ = h - y;
  a_.x = x;
  a_.y = y_;
  x = this->b.x;
  y = this->b.y;
  y_ = h - y;
  point b_;
  b_.x = x;
  b_.y = y_;
  color col_ = this->col;
  Elem pol = Elem(a_, b_, col_);
  return pol;
}
  
    
Elem Elem::mirror_vertical(int w){
  point a_;
  int x = this->a.x;
  int y = this->a.y;
  int x_ = w - x;
  a_.x = x_;
  a_.y = y;
  x = this->b.x;
  y = this->b.y;
  x_ = w - x;
  point b_;
  b_.x = x_;
  b_.y = y;
  color col_ = this->col;
  Elem pol = Elem(a_, b_, col_);
  return pol;
}

color Elem::getColor(){
  return this->col;
}

void Elem::setColor(color col){
  this->col = col;
}
